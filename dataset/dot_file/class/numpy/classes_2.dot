digraph "classes_2" {
rankdir=BT
charset="utf-8"
"test_multiarray.TestMethods.test_dot_override.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.test_array_interface.ArrayLike" [color="black", fontcolor="black", label=<{ArrayLike|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestMethods.test_dot_override.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestAssignment.test_assignment_errors.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestCreation.test_non_sequence_sequence.Fail" [color="black", fontcolor="black", label=<{Fail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.test_array_interface.Foo" [color="black", fontcolor="black", label=<{Foo|iface : dict<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestCreation.test_non_sequence_sequence.Map" [color="black", fontcolor="black", label=<{Map|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestBinop.test_ufunc_override_rop_precedence.OtherNdarraySubclass" [color="black", fontcolor="black", label=<{OtherNdarraySubclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestBinop.test_ufunc_override_rop_precedence.OtherNdarraySubclassWithOverride" [color="black", fontcolor="black", label=<{OtherNdarraySubclassWithOverride|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestCreation.test_no_len_object_type.Point2" [color="black", fontcolor="black", label=<{Point2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.PriorityNdarray" [color="black", fontcolor="black", label=<{PriorityNdarray|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestBinop.test_ufunc_override_rop_simple.SomeClass" [color="black", fontcolor="black", label=<{SomeClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestBinop.test_ufunc_override_rop_simple.SomeClass2" [color="black", fontcolor="black", label=<{SomeClass2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestArgmax" [color="black", fontcolor="black", label=<{TestArgmax|nan_arr : list<br ALIGN="LEFT"/>|test_all()<br ALIGN="LEFT"/>test_argmax_unicode()<br ALIGN="LEFT"/>test_combinations()<br ALIGN="LEFT"/>test_output_shape()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestArgmin" [color="black", fontcolor="black", label=<{TestArgmin|nan_arr : list<br ALIGN="LEFT"/>|test_all()<br ALIGN="LEFT"/>test_argmin_unicode()<br ALIGN="LEFT"/>test_combinations()<br ALIGN="LEFT"/>test_minimum_signed_integers()<br ALIGN="LEFT"/>test_output_shape()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestStats.test_subclass.TestArray" [color="black", fontcolor="black", label=<{TestArray|info<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestArrayAttributeDeletion" [color="black", fontcolor="black", label=<{TestArrayAttributeDeletion|<br ALIGN="LEFT"/>|test_multiarray_flags_not_writable_attribute_deletion()<br ALIGN="LEFT"/>test_multiarray_flags_writable_attribute_deletion()<br ALIGN="LEFT"/>test_multiarray_not_writable_attributes_deletion()<br ALIGN="LEFT"/>test_multiarray_writable_attributes_deletion()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestArrayConstruction" [color="black", fontcolor="black", label=<{TestArrayConstruction|<br ALIGN="LEFT"/>|test_array()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestArrayPriority" [color="black", fontcolor="black", label=<{TestArrayPriority|<br ALIGN="LEFT"/>|test_eq()<br ALIGN="LEFT"/>test_ge()<br ALIGN="LEFT"/>test_gt()<br ALIGN="LEFT"/>test_le()<br ALIGN="LEFT"/>test_lt()<br ALIGN="LEFT"/>test_ne()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestAsCArray" [color="black", fontcolor="black", label=<{TestAsCArray|<br ALIGN="LEFT"/>|test_1darray()<br ALIGN="LEFT"/>test_2darray()<br ALIGN="LEFT"/>test_3darray()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestAssignment" [color="black", fontcolor="black", label=<{TestAssignment|<br ALIGN="LEFT"/>|test_assignment_broadcasting()<br ALIGN="LEFT"/>test_assignment_errors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestAttributes" [color="black", fontcolor="black", label=<{TestAttributes|one<br ALIGN="LEFT"/>three<br ALIGN="LEFT"/>two<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_attributes()<br ALIGN="LEFT"/>test_dtypeattr()<br ALIGN="LEFT"/>test_fill()<br ALIGN="LEFT"/>test_fill_max_uint64()<br ALIGN="LEFT"/>test_fill_struct_array()<br ALIGN="LEFT"/>test_int_subclassing()<br ALIGN="LEFT"/>test_set_stridesattr()<br ALIGN="LEFT"/>test_stridesattr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestBinop" [color="black", fontcolor="black", label=<{TestBinop|<br ALIGN="LEFT"/>|test_ufunc_override_rop_precedence()<br ALIGN="LEFT"/>test_ufunc_override_rop_simple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestBool" [color="black", fontcolor="black", label=<{TestBool|<br ALIGN="LEFT"/>|check_count_nonzero(power, length)<br ALIGN="LEFT"/>test_count_nonzero()<br ALIGN="LEFT"/>test_count_nonzero_all()<br ALIGN="LEFT"/>test_count_nonzero_unaligned()<br ALIGN="LEFT"/>test_sum()<br ALIGN="LEFT"/>test_test_interning()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestChoose" [color="black", fontcolor="black", label=<{TestChoose|ind : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>x2<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>y2<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_basic()<br ALIGN="LEFT"/>test_broadcast1()<br ALIGN="LEFT"/>test_broadcast2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestClip" [color="black", fontcolor="black", label=<{TestClip|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_max_or_min()<br ALIGN="LEFT"/>test_record_array()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestConversion" [color="black", fontcolor="black", label=<{TestConversion|<br ALIGN="LEFT"/>|test_array_scalar_relational_operation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestCreation" [color="black", fontcolor="black", label=<{TestCreation|<br ALIGN="LEFT"/>|test_empty_unicode()<br ALIGN="LEFT"/>test_from_attribute()<br ALIGN="LEFT"/>test_from_string()<br ALIGN="LEFT"/>test_no_len_object_type()<br ALIGN="LEFT"/>test_non_sequence_sequence()<br ALIGN="LEFT"/>test_sequence_long()<br ALIGN="LEFT"/>test_sequence_non_homogenous()<br ALIGN="LEFT"/>test_void()<br ALIGN="LEFT"/>test_zeros()<br ALIGN="LEFT"/>test_zeros_big()<br ALIGN="LEFT"/>test_zeros_like_like_zeros()<br ALIGN="LEFT"/>test_zeros_obj()<br ALIGN="LEFT"/>test_zeros_obj_obj()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestDot" [color="black", fontcolor="black", label=<{TestDot|<br ALIGN="LEFT"/>|test_dot_2args()<br ALIGN="LEFT"/>test_dot_3args()<br ALIGN="LEFT"/>test_dot_3args_errors()<br ALIGN="LEFT"/>test_dot_scalar_and_matrix_of_objects()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestDtypedescr" [color="black", fontcolor="black", label=<{TestDtypedescr|<br ALIGN="LEFT"/>|test_byteorders()<br ALIGN="LEFT"/>test_construction()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestFancyIndexing" [color="black", fontcolor="black", label=<{TestFancyIndexing|<br ALIGN="LEFT"/>|test_assign_mask()<br ALIGN="LEFT"/>test_assign_mask2()<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>test_mask()<br ALIGN="LEFT"/>test_mask2()<br ALIGN="LEFT"/>test_tuple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestFlags" [color="black", fontcolor="black", label=<{TestFlags|a<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_otherflags()<br ALIGN="LEFT"/>test_string_align()<br ALIGN="LEFT"/>test_void_align()<br ALIGN="LEFT"/>test_writeable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestFlat" [color="black", fontcolor="black", label=<{TestFlat|a<br ALIGN="LEFT"/>a0<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>b0<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test___array__()<br ALIGN="LEFT"/>test_contiguous()<br ALIGN="LEFT"/>test_discontiguous()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestFromBuffer" [color="black", fontcolor="black", label=<{TestFromBuffer|<br ALIGN="LEFT"/>|test_empty()<br ALIGN="LEFT"/>test_ip_basic()<br ALIGN="LEFT"/>tst_basic(buffer, expected, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestHash" [color="black", fontcolor="black", label=<{TestHash|<br ALIGN="LEFT"/>|test_int()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestIO" [color="black", fontcolor="black", label=<{TestIO|dtype<br ALIGN="LEFT"/>filename<br ALIGN="LEFT"/>tempdir<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_ascii()<br ALIGN="LEFT"/>test_big_binary()<br ALIGN="LEFT"/>test_binary()<br ALIGN="LEFT"/>test_bool_fromstring()<br ALIGN="LEFT"/>test_counted_string()<br ALIGN="LEFT"/>test_counted_string_with_ws()<br ALIGN="LEFT"/>test_dtype()<br ALIGN="LEFT"/>test_dtype_bool()<br ALIGN="LEFT"/>test_empty_files_binary()<br ALIGN="LEFT"/>test_empty_files_text()<br ALIGN="LEFT"/>test_file_position_after_fromfile()<br ALIGN="LEFT"/>test_file_position_after_tofile()<br ALIGN="LEFT"/>test_inf()<br ALIGN="LEFT"/>test_int64_fromstring()<br ALIGN="LEFT"/>test_locale()<br ALIGN="LEFT"/>test_long_sep()<br ALIGN="LEFT"/>test_malformed()<br ALIGN="LEFT"/>test_nan()<br ALIGN="LEFT"/>test_numbers()<br ALIGN="LEFT"/>test_roundtrip_binary_str()<br ALIGN="LEFT"/>test_roundtrip_file()<br ALIGN="LEFT"/>test_roundtrip_filename()<br ALIGN="LEFT"/>test_roundtrip_repr()<br ALIGN="LEFT"/>test_roundtrip_str()<br ALIGN="LEFT"/>test_string()<br ALIGN="LEFT"/>test_string_with_ws()<br ALIGN="LEFT"/>test_tofile_format()<br ALIGN="LEFT"/>test_tofile_sep()<br ALIGN="LEFT"/>test_uint64_fromstring()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestInner" [color="black", fontcolor="black", label=<{TestInner|<br ALIGN="LEFT"/>|test_inner_scalar_and_matrix_of_objects()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestLexsort" [color="black", fontcolor="black", label=<{TestLexsort|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_datetime()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestMapIter" [color="black", fontcolor="black", label=<{TestMapIter|<br ALIGN="LEFT"/>|test_mapiter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestMemEventHook" [color="black", fontcolor="black", label=<{TestMemEventHook|<br ALIGN="LEFT"/>|test_mem_seteventhook()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestMethods" [color="black", fontcolor="black", label=<{TestMethods|<br ALIGN="LEFT"/>|assert_partitioned(d, kth)<br ALIGN="LEFT"/>test_argpartition_gh5524()<br ALIGN="LEFT"/>test_argsort()<br ALIGN="LEFT"/>test_conjugate()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_diagonal_memleak()<br ALIGN="LEFT"/>test_diagonal_view_notwriteable()<br ALIGN="LEFT"/>test_dot()<br ALIGN="LEFT"/>test_dot_override()<br ALIGN="LEFT"/>test_flatten()<br ALIGN="LEFT"/>test_partition()<br ALIGN="LEFT"/>test_partition_cdtype()<br ALIGN="LEFT"/>test_partition_fuzz()<br ALIGN="LEFT"/>test_partition_iterative()<br ALIGN="LEFT"/>test_partition_unicode_kind()<br ALIGN="LEFT"/>test_put()<br ALIGN="LEFT"/>test_ravel()<br ALIGN="LEFT"/>test_searchsorted()<br ALIGN="LEFT"/>test_searchsorted_unicode()<br ALIGN="LEFT"/>test_searchsorted_with_sorter()<br ALIGN="LEFT"/>test_sort()<br ALIGN="LEFT"/>test_sort_order()<br ALIGN="LEFT"/>test_sort_unicode_kind()<br ALIGN="LEFT"/>test_test_round()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestMinMax" [color="black", fontcolor="black", label=<{TestMinMax|<br ALIGN="LEFT"/>|test_axis()<br ALIGN="LEFT"/>test_scalar()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestMinScalarType" [color="black", fontcolor="black", label=<{TestMinScalarType|<br ALIGN="LEFT"/>|test_object()<br ALIGN="LEFT"/>test_usigned_int()<br ALIGN="LEFT"/>test_usigned_longlong()<br ALIGN="LEFT"/>test_usigned_short()<br ALIGN="LEFT"/>test_usigned_shortshort()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestNeighborhoodIter" [color="black", fontcolor="black", label=<{TestNeighborhoodIter|<br ALIGN="LEFT"/>|test_circular()<br ALIGN="LEFT"/>test_circular_object()<br ALIGN="LEFT"/>test_mirror()<br ALIGN="LEFT"/>test_mirror2d()<br ALIGN="LEFT"/>test_mirror2d_object()<br ALIGN="LEFT"/>test_mirror_object()<br ALIGN="LEFT"/>test_simple2d()<br ALIGN="LEFT"/>test_simple2d_object()<br ALIGN="LEFT"/>test_simple_float()<br ALIGN="LEFT"/>test_simple_object()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestNewBufferProtocol" [color="black", fontcolor="black", label=<{TestNewBufferProtocol|<br ALIGN="LEFT"/>|test_export_discontiguous()<br ALIGN="LEFT"/>test_export_endian()<br ALIGN="LEFT"/>test_export_flags()<br ALIGN="LEFT"/>test_export_record()<br ALIGN="LEFT"/>test_export_simple_1d()<br ALIGN="LEFT"/>test_export_simple_nd()<br ALIGN="LEFT"/>test_export_subarray()<br ALIGN="LEFT"/>test_padded_struct_array()<br ALIGN="LEFT"/>test_padding()<br ALIGN="LEFT"/>test_reference_leak()<br ALIGN="LEFT"/>test_roundtrip()<br ALIGN="LEFT"/>test_roundtrip_half()<br ALIGN="LEFT"/>test_roundtrip_scalar()<br ALIGN="LEFT"/>test_roundtrip_single_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestNewaxis" [color="black", fontcolor="black", label=<{TestNewaxis|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestPEP3118Dtype" [color="black", fontcolor="black", label=<{TestPEP3118Dtype|<br ALIGN="LEFT"/>|test_byteorder_inside_struct()<br ALIGN="LEFT"/>test_intra_padding()<br ALIGN="LEFT"/>test_native_padding()<br ALIGN="LEFT"/>test_native_padding_2()<br ALIGN="LEFT"/>test_native_padding_3()<br ALIGN="LEFT"/>test_padding_with_array_inside_struct()<br ALIGN="LEFT"/>test_trailing_padding()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestPickling" [color="black", fontcolor="black", label=<{TestPickling|<br ALIGN="LEFT"/>|test_roundtrip()<br ALIGN="LEFT"/>test_subarray_int_shape()<br ALIGN="LEFT"/>test_version0_float32()<br ALIGN="LEFT"/>test_version0_int8()<br ALIGN="LEFT"/>test_version0_object()<br ALIGN="LEFT"/>test_version1_float32()<br ALIGN="LEFT"/>test_version1_int8()<br ALIGN="LEFT"/>test_version1_object()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestPutmask" [color="black", fontcolor="black", label=<{TestPutmask|<br ALIGN="LEFT"/>|test_ip_byteorder()<br ALIGN="LEFT"/>test_ip_types()<br ALIGN="LEFT"/>test_mask_size()<br ALIGN="LEFT"/><I>test_masked_array</I>()<br ALIGN="LEFT"/>test_record_array()<br ALIGN="LEFT"/>tst_basic(x, T, mask, val)<br ALIGN="LEFT"/>tst_byteorder(dtype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestRecord" [color="black", fontcolor="black", label=<{TestRecord|<br ALIGN="LEFT"/>|test_bytes_fields()<br ALIGN="LEFT"/>test_field_names()<br ALIGN="LEFT"/>test_field_names_deprecation()<br ALIGN="LEFT"/>test_field_rename()<br ALIGN="LEFT"/>test_record_hash()<br ALIGN="LEFT"/>test_record_no_hash()<br ALIGN="LEFT"/>test_unicode_field_names()<br ALIGN="LEFT"/>test_unicode_field_titles()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestResize" [color="black", fontcolor="black", label=<{TestResize|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_check_reference()<br ALIGN="LEFT"/>test_freeform_shape()<br ALIGN="LEFT"/>test_int_shape()<br ALIGN="LEFT"/>test_invalid_arguements()<br ALIGN="LEFT"/>test_none_shape()<br ALIGN="LEFT"/>test_obj_obj()<br ALIGN="LEFT"/>test_zeros_appended()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestScalarIndexing" [color="black", fontcolor="black", label=<{TestScalarIndexing|d<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_ellipsis_subscript()<br ALIGN="LEFT"/>test_empty_subscript()<br ALIGN="LEFT"/>test_invalid_newaxis()<br ALIGN="LEFT"/>test_invalid_subscript()<br ALIGN="LEFT"/>test_invalid_subscript_assignment()<br ALIGN="LEFT"/>test_newaxis()<br ALIGN="LEFT"/>test_overlapping_assignment()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestStackedNeighborhoodIter" [color="black", fontcolor="black", label=<{TestStackedNeighborhoodIter|<br ALIGN="LEFT"/>|test_simple_circular()<br ALIGN="LEFT"/>test_simple_const()<br ALIGN="LEFT"/>test_simple_mirror()<br ALIGN="LEFT"/>test_simple_strict_within()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestStats" [color="black", fontcolor="black", label=<{TestStats|cmat<br ALIGN="LEFT"/>funcs : list<br ALIGN="LEFT"/>omat<br ALIGN="LEFT"/>rmat<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_ddof()<br ALIGN="LEFT"/>test_ddof_too_big()<br ALIGN="LEFT"/>test_dtype_from_dtype()<br ALIGN="LEFT"/>test_dtype_from_input()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_keepdims()<br ALIGN="LEFT"/>test_mean_values()<br ALIGN="LEFT"/>test_out()<br ALIGN="LEFT"/>test_std_values()<br ALIGN="LEFT"/>test_subclass()<br ALIGN="LEFT"/>test_var_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestStringCompare" [color="black", fontcolor="black", label=<{TestStringCompare|<br ALIGN="LEFT"/>|test_mixed()<br ALIGN="LEFT"/>test_string()<br ALIGN="LEFT"/>test_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestStructured" [color="black", fontcolor="black", label=<{TestStructured|<br ALIGN="LEFT"/>|test_casting()<br ALIGN="LEFT"/>test_subarray_comparison()<br ALIGN="LEFT"/>test_subarray_field_access()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestSubscripting" [color="black", fontcolor="black", label=<{TestSubscripting|<br ALIGN="LEFT"/>|test_test_zero_rank()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestSummarization" [color="black", fontcolor="black", label=<{TestSummarization|<br ALIGN="LEFT"/>|test_1d()<br ALIGN="LEFT"/>test_2d()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestTake" [color="black", fontcolor="black", label=<{TestTake|<br ALIGN="LEFT"/>|test_clip()<br ALIGN="LEFT"/>test_ip_byteorder()<br ALIGN="LEFT"/>test_ip_types()<br ALIGN="LEFT"/>test_raise()<br ALIGN="LEFT"/>test_record_array()<br ALIGN="LEFT"/>test_wrap()<br ALIGN="LEFT"/>tst_basic(x)<br ALIGN="LEFT"/>tst_byteorder(dtype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestView" [color="black", fontcolor="black", label=<{TestView|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestWarnings" [color="black", fontcolor="black", label=<{TestWarnings|<br ALIGN="LEFT"/>|test_complex_warning()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestWhere" [color="black", fontcolor="black", label=<{TestWhere|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_dtype_mix()<br ALIGN="LEFT"/>test_error()<br ALIGN="LEFT"/>test_exotic()<br ALIGN="LEFT"/>test_foreign()<br ALIGN="LEFT"/>test_ndim()<br ALIGN="LEFT"/>test_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestZeroRank" [color="black", fontcolor="black", label=<{TestZeroRank|d : tuple<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_ellipsis_subscript()<br ALIGN="LEFT"/>test_ellipsis_subscript_assignment()<br ALIGN="LEFT"/>test_empty_subscript()<br ALIGN="LEFT"/>test_empty_subscript_assignment()<br ALIGN="LEFT"/>test_invalid_newaxis()<br ALIGN="LEFT"/>test_invalid_subscript()<br ALIGN="LEFT"/>test_invalid_subscript_assignment()<br ALIGN="LEFT"/>test_newaxis()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_multiarray.TestCreation.test_from_attribute.x" [color="black", fontcolor="black", label=<{x|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_multiarray.TestBinop.test_ufunc_override_rop_simple.SomeClass2" -> "test_multiarray.TestBinop.test_ufunc_override_rop_simple.SomeClass" [arrowhead="empty", arrowtail="none"];
}
