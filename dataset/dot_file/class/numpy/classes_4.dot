digraph "classes_4" {
rankdir=BT
charset="utf-8"
"test_numeric.NIterError" [color="black", fontcolor="red", label=<{NIterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_numeric.TestAllclose" [color="black", fontcolor="black", label=<{TestAllclose|atol : float<br ALIGN="LEFT"/>olderr : dict<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_ip_allclose()<br ALIGN="LEFT"/>test_ip_not_allclose()<br ALIGN="LEFT"/>test_min_int()<br ALIGN="LEFT"/>test_no_parameter_modification()<br ALIGN="LEFT"/>tst_allclose(x, y)<br ALIGN="LEFT"/>tst_not_allclose(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestArgwhere" [color="black", fontcolor="black", label=<{TestArgwhere|<br ALIGN="LEFT"/>|test_2D()<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestArrayComparisons" [color="black", fontcolor="black", label=<{TestArrayComparisons|<br ALIGN="LEFT"/>|test_array_equal()<br ALIGN="LEFT"/>test_array_equiv()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestBaseRepr" [color="black", fontcolor="black", label=<{TestBaseRepr|<br ALIGN="LEFT"/>|test_base3()<br ALIGN="LEFT"/>test_negative()<br ALIGN="LEFT"/>test_positive()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestBinaryRepr" [color="black", fontcolor="black", label=<{TestBinaryRepr|<br ALIGN="LEFT"/>|test_large()<br ALIGN="LEFT"/>test_negative()<br ALIGN="LEFT"/>test_zero()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestBoolArray" [color="black", fontcolor="black", label=<{TestBoolArray|f<br ALIGN="LEFT"/>im<br ALIGN="LEFT"/>nm<br ALIGN="LEFT"/>o<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_all_any()<br ALIGN="LEFT"/>test_logical_and_or_xor()<br ALIGN="LEFT"/>test_logical_not_abs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestBoolCmp" [color="black", fontcolor="black", label=<{TestBoolCmp|d : ndarray<br ALIGN="LEFT"/>ed : ndarray<br ALIGN="LEFT"/>ef : ndarray<br ALIGN="LEFT"/>f : ndarray<br ALIGN="LEFT"/>nd<br ALIGN="LEFT"/>nf<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_double()<br ALIGN="LEFT"/>test_float()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestBoolScalar" [color="black", fontcolor="black", label=<{TestBoolScalar|<br ALIGN="LEFT"/>|test_bitwise_and()<br ALIGN="LEFT"/>test_bitwise_or()<br ALIGN="LEFT"/>test_bitwise_xor()<br ALIGN="LEFT"/>test_logical()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestClip" [color="black", fontcolor="black", label=<{TestClip|nc : int<br ALIGN="LEFT"/>nr : int<br ALIGN="LEFT"/>|clip(a, m, M, out)<br ALIGN="LEFT"/>fastclip(a, m, M, out)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_array_double()<br ALIGN="LEFT"/>test_clip_complex()<br ALIGN="LEFT"/>test_clip_func_takes_out()<br ALIGN="LEFT"/>test_clip_inplace_array()<br ALIGN="LEFT"/>test_clip_inplace_simple()<br ALIGN="LEFT"/>test_clip_non_contig()<br ALIGN="LEFT"/>test_clip_with_out_array_int32()<br ALIGN="LEFT"/>test_clip_with_out_array_outint32()<br ALIGN="LEFT"/>test_clip_with_out_simple()<br ALIGN="LEFT"/>test_clip_with_out_simple2()<br ALIGN="LEFT"/>test_clip_with_out_simple_int32()<br ALIGN="LEFT"/>test_noncontig_inplace()<br ALIGN="LEFT"/>test_simple_complex()<br ALIGN="LEFT"/>test_simple_double()<br ALIGN="LEFT"/>test_simple_inplace_01()<br ALIGN="LEFT"/>test_simple_inplace_02()<br ALIGN="LEFT"/>test_simple_int()<br ALIGN="LEFT"/>test_simple_int32_inout()<br ALIGN="LEFT"/>test_simple_int32_out()<br ALIGN="LEFT"/>test_simple_int64_inout()<br ALIGN="LEFT"/>test_simple_int64_out()<br ALIGN="LEFT"/>test_simple_nonnative()<br ALIGN="LEFT"/>test_simple_out()<br ALIGN="LEFT"/>test_type_cast_01()<br ALIGN="LEFT"/>test_type_cast_02()<br ALIGN="LEFT"/>test_type_cast_03()<br ALIGN="LEFT"/>test_type_cast_04()<br ALIGN="LEFT"/>test_type_cast_05()<br ALIGN="LEFT"/>test_type_cast_06()<br ALIGN="LEFT"/>test_type_cast_07()<br ALIGN="LEFT"/>test_type_cast_08()<br ALIGN="LEFT"/>test_type_cast_09()<br ALIGN="LEFT"/>test_type_cast_10()<br ALIGN="LEFT"/>test_type_cast_11()<br ALIGN="LEFT"/>test_type_cast_12()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestCorrelate" [color="black", fontcolor="black", label=<{TestCorrelate|old_behavior : bool<br ALIGN="LEFT"/>z2<br ALIGN="LEFT"/>|test_complex()<br ALIGN="LEFT"/>test_float()<br ALIGN="LEFT"/>test_object()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestCorrelateNew" [color="black", fontcolor="black", label=<{TestCorrelateNew|old_behavior : bool<br ALIGN="LEFT"/>|test_complex()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestCreationFuncs" [color="black", fontcolor="black", label=<{TestCreationFuncs|dtypes : tuple<br ALIGN="LEFT"/>ndims : int<br ALIGN="LEFT"/>orders : dict<br ALIGN="LEFT"/>|check_function(func, fill_value)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_filled()<br ALIGN="LEFT"/>test_for_reference_leak()<br ALIGN="LEFT"/>test_ones()<br ALIGN="LEFT"/>test_zeros()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestCross" [color="black", fontcolor="black", label=<{TestCross|<br ALIGN="LEFT"/>|test_2x2()<br ALIGN="LEFT"/>test_2x3()<br ALIGN="LEFT"/>test_3x3()<br ALIGN="LEFT"/>test_broadcasting()<br ALIGN="LEFT"/>test_broadcasting_shapes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestDot" [color="black", fontcolor="black", label=<{TestDot|A<br ALIGN="LEFT"/>N : int<br ALIGN="LEFT"/>b1<br ALIGN="LEFT"/>b2<br ALIGN="LEFT"/>b3<br ALIGN="LEFT"/>b4<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_all()<br ALIGN="LEFT"/>test_columnvect1()<br ALIGN="LEFT"/>test_columnvect2()<br ALIGN="LEFT"/>test_matmat()<br ALIGN="LEFT"/>test_matvec()<br ALIGN="LEFT"/>test_matvec2()<br ALIGN="LEFT"/>test_vecmat()<br ALIGN="LEFT"/>test_vecmat2()<br ALIGN="LEFT"/>test_vecmat3()<br ALIGN="LEFT"/>test_vecobject()<br ALIGN="LEFT"/>test_vecscalar()<br ALIGN="LEFT"/>test_vecscalar2()<br ALIGN="LEFT"/>test_vecvecinner()<br ALIGN="LEFT"/>test_vecvecouter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestFloatExceptions" [color="black", fontcolor="black", label=<{TestFloatExceptions|<br ALIGN="LEFT"/>|assert_op_raises_fpe(fpeerr, flop, sc1, sc2)<br ALIGN="LEFT"/>assert_raises_fpe(fpeerr, flop, x, y)<br ALIGN="LEFT"/>test_floating_exceptions()<br ALIGN="LEFT"/>test_warnings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestFromiter" [color="black", fontcolor="black", label=<{TestFromiter|<br ALIGN="LEFT"/>|load_data(n, eindex)<br ALIGN="LEFT"/>makegen()<br ALIGN="LEFT"/>test_2592()<br ALIGN="LEFT"/>test_2592_edge()<br ALIGN="LEFT"/>test_lengths()<br ALIGN="LEFT"/>test_types()<br ALIGN="LEFT"/>test_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestIndex" [color="black", fontcolor="black", label=<{TestIndex|<br ALIGN="LEFT"/>|test_boolean()<br ALIGN="LEFT"/>test_boolean_edgecase()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestIsclose" [color="black", fontcolor="black", label=<{TestIsclose|all_close_tests : list<br ALIGN="LEFT"/>atol : float<br ALIGN="LEFT"/>none_close_tests : list<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>some_close_results : list<br ALIGN="LEFT"/>some_close_tests : list<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>test_equal_nan()<br ALIGN="LEFT"/>test_ip_all_isclose()<br ALIGN="LEFT"/>test_ip_isclose()<br ALIGN="LEFT"/>test_ip_isclose_allclose()<br ALIGN="LEFT"/>test_ip_none_isclose()<br ALIGN="LEFT"/>test_masked_arrays()<br ALIGN="LEFT"/>test_no_parameter_modification()<br ALIGN="LEFT"/>test_scalar_return()<br ALIGN="LEFT"/>tst_all_isclose(x, y)<br ALIGN="LEFT"/>tst_isclose_allclose(x, y)<br ALIGN="LEFT"/>tst_none_isclose(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestLikeFuncs" [color="black", fontcolor="black", label=<{TestLikeFuncs|data : list<br ALIGN="LEFT"/>|check_like_function(like_function, value, fill_value)<br ALIGN="LEFT"/>compare_array_value(dz, value, fill_value)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_empty_like()<br ALIGN="LEFT"/>test_filled_like()<br ALIGN="LEFT"/>test_ones_like()<br ALIGN="LEFT"/>test_zeros_like()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestNonarrayArgs" [color="black", fontcolor="black", label=<{TestNonarrayArgs|<br ALIGN="LEFT"/>|test_cumproduct()<br ALIGN="LEFT"/>test_mean()<br ALIGN="LEFT"/>test_size()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_std()<br ALIGN="LEFT"/>test_var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestNonzero" [color="black", fontcolor="black", label=<{TestNonzero|<br ALIGN="LEFT"/>|test_nonzero_onedim()<br ALIGN="LEFT"/>test_nonzero_trivial()<br ALIGN="LEFT"/>test_nonzero_twodim()<br ALIGN="LEFT"/>test_sparse()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestResize" [color="black", fontcolor="black", label=<{TestResize|<br ALIGN="LEFT"/>|test_copies()<br ALIGN="LEFT"/>test_zeroresize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestRoll" [color="black", fontcolor="black", label=<{TestRoll|<br ALIGN="LEFT"/>|test_roll1d()<br ALIGN="LEFT"/>test_roll2d()<br ALIGN="LEFT"/>test_roll_empty()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestSeterr" [color="black", fontcolor="black", label=<{TestSeterr|called : int<br ALIGN="LEFT"/>|test_default()<br ALIGN="LEFT"/>test_divide_err()<br ALIGN="LEFT"/>test_errobj()<br ALIGN="LEFT"/>test_errobj_noerrmask()<br ALIGN="LEFT"/>test_set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestStdVar" [color="black", fontcolor="black", label=<{TestStdVar|A<br ALIGN="LEFT"/>real_var : int<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_basic()<br ALIGN="LEFT"/>test_ddof1()<br ALIGN="LEFT"/>test_ddof2()<br ALIGN="LEFT"/>test_out_scalar()<br ALIGN="LEFT"/>test_scalars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestStdVarComplex" [color="black", fontcolor="black", label=<{TestStdVarComplex|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_scalars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestStringFunction" [color="black", fontcolor="black", label=<{TestStringFunction|<br ALIGN="LEFT"/>|test_set_string_function()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestTypes" [color="black", fontcolor="black", label=<{TestTypes|<br ALIGN="LEFT"/>|check_promotion_cases(promote_func)<br ALIGN="LEFT"/>test_can_cast()<br ALIGN="LEFT"/>test_coercion()<br ALIGN="LEFT"/>test_promote_types_endian()<br ALIGN="LEFT"/>test_promote_types_strings()<br ALIGN="LEFT"/>test_result_type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.Vec" [color="black", fontcolor="black", label=<{Vec|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_numeric._TestCorrelate" [color="black", fontcolor="black", label=<{_TestCorrelate|x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>z1<br ALIGN="LEFT"/>z2<br ALIGN="LEFT"/>|test_float()<br ALIGN="LEFT"/>test_object()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_numeric.TestCorrelate" -> "test_numeric._TestCorrelate" [arrowhead="empty", arrowtail="none"];
"test_numeric.TestCorrelateNew" -> "test_numeric._TestCorrelate" [arrowhead="empty", arrowtail="none"];
}
