digraph "classes_40" {
rankdir=BT
charset="utf-8"
"multiple_database.tests.AntiPetRouter" [color="black", fontcolor="black", label=<{AntiPetRouter|<br ALIGN="LEFT"/>|allow_migrate(db, app_label, model_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.AttributeErrorRouter" [color="black", fontcolor="black", label=<{AttributeErrorRouter|<br ALIGN="LEFT"/>|db_for_read(model)<br ALIGN="LEFT"/>db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.routers.AuthRouter" [color="black", fontcolor="black", label=<{AuthRouter|<br ALIGN="LEFT"/>|allow_migrate(db, app_label)<br ALIGN="LEFT"/>allow_relation(obj1, obj2)<br ALIGN="LEFT"/>db_for_read(model)<br ALIGN="LEFT"/>db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.AuthTestCase" [color="black", fontcolor="black", label=<{AuthTestCase|multi_db : bool<br ALIGN="LEFT"/>|test_auth_manager()<br ALIGN="LEFT"/>test_dumpdata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.Book" [color="black", fontcolor="black", label=<{Book|authors<br ALIGN="LEFT"/>editor<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>pages<br ALIGN="LEFT"/>published<br ALIGN="LEFT"/>reviews<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.models.BookManager" [color="black", fontcolor="black", label=<{BookManager|<br ALIGN="LEFT"/>|create()<br ALIGN="LEFT"/>get_or_create()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.ConnectionRouterTestCase" [color="black", fontcolor="black", label=<{ConnectionRouterTestCase|<br ALIGN="LEFT"/>|test_router_init_arg()<br ALIGN="LEFT"/>test_router_init_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.DatabaseReceiver" [color="black", fontcolor="black", label=<{DatabaseReceiver|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.tests.FixtureTestCase" [color="black", fontcolor="black", label=<{FixtureTestCase|fixtures : list<br ALIGN="LEFT"/>multi_db : bool<br ALIGN="LEFT"/>|test_fixture_loading()<br ALIGN="LEFT"/>test_pseudo_empty_fixtures()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.RouterTestCase.test_migrate_legacy_router.LegacyRouter" [color="black", fontcolor="black", label=<{LegacyRouter|<br ALIGN="LEFT"/>|allow_migrate(db, model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.Review.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.models.Person.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.models.Book.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.models.Pet.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.models.UserProfile.Meta" [color="black", fontcolor="black", label=<{Meta|ordering : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.tests.MigrateTestCase" [color="black", fontcolor="black", label=<{MigrateTestCase|available_apps : list<br ALIGN="LEFT"/>multi_db : bool<br ALIGN="LEFT"/>|test_migrate_to_other_database()<br ALIGN="LEFT"/>test_migrate_to_other_database_with_router()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.ModelMetaRouter" [color="black", fontcolor="black", label=<{ModelMetaRouter|<br ALIGN="LEFT"/>|db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.Person" [color="black", fontcolor="black", label=<{Person|name<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.models.PersonManager" [color="black", fontcolor="black", label=<{PersonManager|<br ALIGN="LEFT"/>|get_by_natural_key(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.Pet" [color="black", fontcolor="black", label=<{Pet|name<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.tests.PickleQuerySetTestCase" [color="black", fontcolor="black", label=<{PickleQuerySetTestCase|multi_db : bool<br ALIGN="LEFT"/>|test_pickling()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.QueryTestCase" [color="black", fontcolor="black", label=<{QueryTestCase|multi_db : bool<br ALIGN="LEFT"/>|test_basic_queries()<br ALIGN="LEFT"/>test_db_selection()<br ALIGN="LEFT"/>test_default_creation()<br ALIGN="LEFT"/>test_foreign_key_cross_database_protection()<br ALIGN="LEFT"/>test_foreign_key_deletion()<br ALIGN="LEFT"/>test_foreign_key_reverse_operations()<br ALIGN="LEFT"/>test_foreign_key_separation()<br ALIGN="LEFT"/>test_foreign_key_validation()<br ALIGN="LEFT"/>test_generic_key_cross_database_protection()<br ALIGN="LEFT"/>test_generic_key_deletion()<br ALIGN="LEFT"/>test_generic_key_reverse_operations()<br ALIGN="LEFT"/>test_generic_key_separation()<br ALIGN="LEFT"/>test_m2m_cross_database_protection()<br ALIGN="LEFT"/>test_m2m_deletion()<br ALIGN="LEFT"/>test_m2m_forward_operations()<br ALIGN="LEFT"/>test_m2m_reverse_operations()<br ALIGN="LEFT"/>test_m2m_separation()<br ALIGN="LEFT"/>test_o2o_cross_database_protection()<br ALIGN="LEFT"/>test_o2o_separation()<br ALIGN="LEFT"/>test_ordering()<br ALIGN="LEFT"/>test_other_creation()<br ALIGN="LEFT"/>test_raw()<br ALIGN="LEFT"/>test_refresh()<br ALIGN="LEFT"/>test_related_manager()<br ALIGN="LEFT"/>test_select_related()<br ALIGN="LEFT"/>test_subquery()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.Review" [color="black", fontcolor="black", label=<{Review|content_object<br ALIGN="LEFT"/>content_type<br ALIGN="LEFT"/>object_id<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.tests.RouteForWriteTestCase" [color="black", fontcolor="black", label=<{RouteForWriteTestCase|multi_db : bool<br ALIGN="LEFT"/>|override_router()<br ALIGN="LEFT"/>test_fk_delete()<br ALIGN="LEFT"/>test_m2m_add()<br ALIGN="LEFT"/>test_m2m_clear()<br ALIGN="LEFT"/>test_m2m_delete()<br ALIGN="LEFT"/>test_m2m_get_or_create()<br ALIGN="LEFT"/>test_m2m_remove()<br ALIGN="LEFT"/>test_m2m_update()<br ALIGN="LEFT"/>test_reverse_fk_delete()<br ALIGN="LEFT"/>test_reverse_fk_get_or_create()<br ALIGN="LEFT"/>test_reverse_fk_update()<br ALIGN="LEFT"/>test_reverse_m2m_add()<br ALIGN="LEFT"/>test_reverse_m2m_clear()<br ALIGN="LEFT"/>test_reverse_m2m_delete()<br ALIGN="LEFT"/>test_reverse_m2m_get_or_create()<br ALIGN="LEFT"/>test_reverse_m2m_remove()<br ALIGN="LEFT"/>test_reverse_m2m_update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.RouterAttributeErrorTestCase" [color="black", fontcolor="black", label=<{RouterAttributeErrorTestCase|multi_db : bool<br ALIGN="LEFT"/>|override_router()<br ALIGN="LEFT"/>test_attribute_error_delete()<br ALIGN="LEFT"/>test_attribute_error_m2m()<br ALIGN="LEFT"/>test_attribute_error_read()<br ALIGN="LEFT"/>test_attribute_error_save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.RouterModelArgumentTestCase" [color="black", fontcolor="black", label=<{RouterModelArgumentTestCase|multi_db : bool<br ALIGN="LEFT"/>|test_foreignkey_collection()<br ALIGN="LEFT"/>test_m2m_collection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.RouterTestCase" [color="black", fontcolor="black", label=<{RouterTestCase|multi_db : bool<br ALIGN="LEFT"/>|test_database_routing()<br ALIGN="LEFT"/>test_db_selection()<br ALIGN="LEFT"/>test_deferred_models()<br ALIGN="LEFT"/>test_foreign_key_cross_database_protection()<br ALIGN="LEFT"/>test_foreign_key_managers()<br ALIGN="LEFT"/>test_generic_key_cross_database_protection()<br ALIGN="LEFT"/>test_generic_key_managers()<br ALIGN="LEFT"/>test_m2m_cross_database_protection()<br ALIGN="LEFT"/>test_m2m_managers()<br ALIGN="LEFT"/>test_migrate_legacy_router()<br ALIGN="LEFT"/>test_migrate_selection()<br ALIGN="LEFT"/>test_o2o_cross_database_protection()<br ALIGN="LEFT"/>test_partial_router()<br ALIGN="LEFT"/>test_subquery()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.RouterUsed" [color="black", fontcolor="red", label=<{RouterUsed|WRITE : str<br ALIGN="LEFT"/>hints<br ALIGN="LEFT"/>mode<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.tests.SignalTests" [color="black", fontcolor="black", label=<{SignalTests|multi_db : bool<br ALIGN="LEFT"/>|override_router()<br ALIGN="LEFT"/>test_database_arg_m2m()<br ALIGN="LEFT"/>test_database_arg_save_and_delete()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.SyncOnlyDefaultDatabaseRouter" [color="black", fontcolor="black", label=<{SyncOnlyDefaultDatabaseRouter|<br ALIGN="LEFT"/>|allow_migrate(db, app_label)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.routers.TestRouter" [color="black", fontcolor="black", label=<{TestRouter|<br ALIGN="LEFT"/>|allow_migrate(db, app_label)<br ALIGN="LEFT"/>allow_relation(obj1, obj2)<br ALIGN="LEFT"/>db_for_read(model, instance)<br ALIGN="LEFT"/>db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.UserProfile" [color="black", fontcolor="black", label=<{UserProfile|flavor<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"multiple_database.tests.RouteForWriteTestCase.WriteCheckRouter" [color="black", fontcolor="black", label=<{WriteCheckRouter|<br ALIGN="LEFT"/>|db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.routers.WriteRouter" [color="black", fontcolor="black", label=<{WriteRouter|<br ALIGN="LEFT"/>|db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.tests.WriteToOtherRouter" [color="black", fontcolor="black", label=<{WriteToOtherRouter|<br ALIGN="LEFT"/>|db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"multiple_database.models.BookManager" -> "multiple_database.models.Book" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"multiple_database.models.PersonManager" -> "multiple_database.models.Person" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
}
