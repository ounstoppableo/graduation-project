digraph "classes_41" {
rankdir=BT
charset="utf-8"
"postgres_tests.models.ArrayFieldSubclass" [color="black", fontcolor="black", label=<{ArrayFieldSubclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.CharArrayModel" [color="black", fontcolor="black", label=<{CharArrayModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.CharFieldModel" [color="black", fontcolor="black", label=<{CharFieldModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.DateTimeArrayModel" [color="black", fontcolor="black", label=<{DateTimeArrayModel|dates<br ALIGN="LEFT"/>datetimes<br ALIGN="LEFT"/>times<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.HStoreModel" [color="black", fontcolor="black", label=<{HStoreModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.IntegerArrayModel" [color="black", fontcolor="black", label=<{IntegerArrayModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.array_default_migrations.0001_initial.Migration" [color="black", fontcolor="black", label=<{Migration|dependencies : list<br ALIGN="LEFT"/>operations : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.array_default_migrations.0002_integerarraymodel_field_2.Migration" [color="black", fontcolor="black", label=<{Migration|dependencies : list<br ALIGN="LEFT"/>operations : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.migrations.0001_setup_extensions.Migration" [color="black", fontcolor="black", label=<{Migration|dependencies : list<br ALIGN="LEFT"/>operations : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.migrations.0002_create_test_models.Migration" [color="black", fontcolor="black", label=<{Migration|dependencies : list<br ALIGN="LEFT"/>operations : list<br ALIGN="LEFT"/>pg_92_operations : list<br ALIGN="LEFT"/>|apply(project_state, schema_editor, collect_sql)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.models.NestedIntegerArrayModel" [color="black", fontcolor="black", label=<{NestedIntegerArrayModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.NullableIntegerArrayModel" [color="black", fontcolor="black", label=<{NullableIntegerArrayModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.OtherTypesArrayModel" [color="black", fontcolor="black", label=<{OtherTypesArrayModel|decimals<br ALIGN="LEFT"/>ips<br ALIGN="LEFT"/>uuids<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestFormField.test_rendering.RangeForm" [color="black", fontcolor="black", label=<{RangeForm|ints<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.models.RangesModel" [color="black", fontcolor="black", label=<{RangesModel|bigints<br ALIGN="LEFT"/>dates<br ALIGN="LEFT"/>floats<br ALIGN="LEFT"/>ints<br ALIGN="LEFT"/>timestamps<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_hstore.SimpleTests" [color="black", fontcolor="black", label=<{SimpleTests|apps : list<br ALIGN="LEFT"/>|test_null()<br ALIGN="LEFT"/>test_save_load_success()<br ALIGN="LEFT"/>test_value_null()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestFormField.test_using_split_datetime_widget.SplitDateTimeRangeField" [color="black", fontcolor="black", label=<{SplitDateTimeRangeField|base_field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSplitFormField.test_valid.SplitForm" [color="black", fontcolor="black", label=<{SplitForm|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSplitFormField.test_required.SplitForm" [color="black", fontcolor="black", label=<{SplitForm|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSplitFormField.test_remove_trailing_nulls.SplitForm" [color="black", fontcolor="black", label=<{SplitForm|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSplitFormField.test_required_field.SplitForm" [color="black", fontcolor="black", label=<{SplitForm|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSplitFormField.test_rendering.SplitForm" [color="black", fontcolor="black", label=<{SplitForm|array<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestFormField.test_using_split_datetime_widget.SplitForm" [color="black", fontcolor="black", label=<{SplitForm|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_array.TestChecks" [color="black", fontcolor="black", label=<{TestChecks|<br ALIGN="LEFT"/>|test_field_checks()<br ALIGN="LEFT"/>test_invalid_base_fields()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_hstore.TestFormField" [color="black", fontcolor="black", label=<{TestFormField|<br ALIGN="LEFT"/>|test_empty()<br ALIGN="LEFT"/>test_invalid_json()<br ALIGN="LEFT"/>test_model_field_formfield()<br ALIGN="LEFT"/>test_not_string_values()<br ALIGN="LEFT"/>test_valid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestFormField" [color="black", fontcolor="black", label=<{TestFormField|<br ALIGN="LEFT"/>|test_date_incorrect_data_type()<br ALIGN="LEFT"/>test_date_invalid_lower()<br ALIGN="LEFT"/>test_date_invalid_upper()<br ALIGN="LEFT"/>test_date_lower_bound_higher()<br ALIGN="LEFT"/>test_date_open()<br ALIGN="LEFT"/>test_date_required()<br ALIGN="LEFT"/>test_datetime_incorrect_data_type()<br ALIGN="LEFT"/>test_datetime_invalid_lower()<br ALIGN="LEFT"/>test_datetime_invalid_upper()<br ALIGN="LEFT"/>test_datetime_lower_bound_higher()<br ALIGN="LEFT"/>test_datetime_open()<br ALIGN="LEFT"/>test_datetime_required()<br ALIGN="LEFT"/>test_float_incorrect_data_type()<br ALIGN="LEFT"/>test_float_invalid_lower()<br ALIGN="LEFT"/>test_float_invalid_upper()<br ALIGN="LEFT"/>test_float_lower_bound_higher()<br ALIGN="LEFT"/>test_float_open()<br ALIGN="LEFT"/>test_float_required()<br ALIGN="LEFT"/>test_integer_incorrect_data_type()<br ALIGN="LEFT"/>test_integer_invalid_lower()<br ALIGN="LEFT"/>test_integer_invalid_upper()<br ALIGN="LEFT"/>test_integer_lower_bound_higher()<br ALIGN="LEFT"/>test_integer_open()<br ALIGN="LEFT"/>test_integer_required()<br ALIGN="LEFT"/>test_model_field_formfield_biginteger()<br ALIGN="LEFT"/>test_model_field_formfield_date()<br ALIGN="LEFT"/>test_model_field_formfield_datetime()<br ALIGN="LEFT"/>test_model_field_formfield_float()<br ALIGN="LEFT"/>test_model_field_formfield_integer()<br ALIGN="LEFT"/>test_none()<br ALIGN="LEFT"/>test_rendering()<br ALIGN="LEFT"/>test_using_split_datetime_widget()<br ALIGN="LEFT"/>test_valid_dates()<br ALIGN="LEFT"/>test_valid_floats()<br ALIGN="LEFT"/>test_valid_integer()<br ALIGN="LEFT"/>test_valid_timestamps()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestMigrations" [color="black", fontcolor="black", label=<{TestMigrations|available_apps : list<br ALIGN="LEFT"/>|test_adding_field_with_default()<br ALIGN="LEFT"/>test_deconstruct()<br ALIGN="LEFT"/>test_deconstruct_args()<br ALIGN="LEFT"/>test_deconstruct_with_size()<br ALIGN="LEFT"/>test_subclass_deconstruct()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestQuerying" [color="black", fontcolor="black", label=<{TestQuerying|objs : list<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_contained_by()<br ALIGN="LEFT"/>test_contained_by_charfield()<br ALIGN="LEFT"/>test_contains()<br ALIGN="LEFT"/>test_contains_charfield()<br ALIGN="LEFT"/>test_exact()<br ALIGN="LEFT"/>test_gt()<br ALIGN="LEFT"/>test_in()<br ALIGN="LEFT"/>test_index()<br ALIGN="LEFT"/>test_index_chained()<br ALIGN="LEFT"/>test_index_nested()<br ALIGN="LEFT"/>test_index_used_on_nested_data()<br ALIGN="LEFT"/>test_isnull()<br ALIGN="LEFT"/>test_len()<br ALIGN="LEFT"/>test_lt()<br ALIGN="LEFT"/>test_overlap()<br ALIGN="LEFT"/>test_overlap_charfield()<br ALIGN="LEFT"/>test_slice()<br ALIGN="LEFT"/>test_slice_nested()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_hstore.TestQuerying" [color="black", fontcolor="black", label=<{TestQuerying|objs : list<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_contained_by()<br ALIGN="LEFT"/>test_contains()<br ALIGN="LEFT"/>test_exact()<br ALIGN="LEFT"/>test_field_chaining()<br ALIGN="LEFT"/>test_has_key()<br ALIGN="LEFT"/>test_has_keys()<br ALIGN="LEFT"/>test_key_isnull()<br ALIGN="LEFT"/>test_key_transform()<br ALIGN="LEFT"/>test_keys()<br ALIGN="LEFT"/>test_keys_contains()<br ALIGN="LEFT"/>test_values()<br ALIGN="LEFT"/>test_values_overlap()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestQuerying" [color="black", fontcolor="black", label=<{TestQuerying|<br ALIGN="LEFT"/>|setUpTestData()<br ALIGN="LEFT"/>test_adjacent_to()<br ALIGN="LEFT"/>test_contained_by()<br ALIGN="LEFT"/>test_contains()<br ALIGN="LEFT"/>test_contains_range()<br ALIGN="LEFT"/>test_endswith()<br ALIGN="LEFT"/>test_exact()<br ALIGN="LEFT"/>test_fully_gt()<br ALIGN="LEFT"/>test_fully_lt()<br ALIGN="LEFT"/>test_isempty()<br ALIGN="LEFT"/>test_isnull()<br ALIGN="LEFT"/>test_not_gt()<br ALIGN="LEFT"/>test_not_lt()<br ALIGN="LEFT"/>test_overlap()<br ALIGN="LEFT"/>test_startswith()<br ALIGN="LEFT"/>test_startswith_chaining()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSaveLoad" [color="black", fontcolor="black", label=<{TestSaveLoad|<br ALIGN="LEFT"/>|test_char()<br ALIGN="LEFT"/>test_dates()<br ALIGN="LEFT"/>test_default_null()<br ALIGN="LEFT"/>test_integer()<br ALIGN="LEFT"/>test_integers_passed_as_strings()<br ALIGN="LEFT"/>test_nested()<br ALIGN="LEFT"/>test_null_handling()<br ALIGN="LEFT"/>test_other_array_types()<br ALIGN="LEFT"/>test_tuples()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestSaveLoad" [color="black", fontcolor="black", label=<{TestSaveLoad|<br ALIGN="LEFT"/>|test_all_fields()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_null()<br ALIGN="LEFT"/>test_range_object()<br ALIGN="LEFT"/>test_range_object_boundaries()<br ALIGN="LEFT"/>test_tuple()<br ALIGN="LEFT"/>test_unbounded()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSerialization" [color="black", fontcolor="black", label=<{TestSerialization|test_data : str<br ALIGN="LEFT"/>|test_dumping()<br ALIGN="LEFT"/>test_loading()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_hstore.TestSerialization" [color="black", fontcolor="black", label=<{TestSerialization|test_data : str<br ALIGN="LEFT"/>|test_dumping()<br ALIGN="LEFT"/>test_loading()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestSerialization" [color="black", fontcolor="black", label=<{TestSerialization|test_data : str<br ALIGN="LEFT"/>|test_dumping()<br ALIGN="LEFT"/>test_loading()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSimpleFormField" [color="black", fontcolor="black", label=<{TestSimpleFormField|<br ALIGN="LEFT"/>|test_delimiter()<br ALIGN="LEFT"/>test_delimiter_with_nesting()<br ALIGN="LEFT"/>test_max_length()<br ALIGN="LEFT"/>test_min_length()<br ALIGN="LEFT"/>test_model_field_formfield()<br ALIGN="LEFT"/>test_model_field_formfield_size()<br ALIGN="LEFT"/>test_prepare_value()<br ALIGN="LEFT"/>test_required()<br ALIGN="LEFT"/>test_to_python_fail()<br ALIGN="LEFT"/>test_valid()<br ALIGN="LEFT"/>test_validate_fail()<br ALIGN="LEFT"/>test_validators_fail()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestSplitFormField" [color="black", fontcolor="black", label=<{TestSplitFormField|<br ALIGN="LEFT"/>|test_remove_trailing_nulls()<br ALIGN="LEFT"/>test_rendering()<br ALIGN="LEFT"/>test_required()<br ALIGN="LEFT"/>test_required_field()<br ALIGN="LEFT"/>test_valid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_array.TestValidation" [color="black", fontcolor="black", label=<{TestValidation|<br ALIGN="LEFT"/>|test_blank_true()<br ALIGN="LEFT"/>test_nested_array_mismatch()<br ALIGN="LEFT"/>test_unbounded()<br ALIGN="LEFT"/>test_with_size()<br ALIGN="LEFT"/>test_with_validators()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_hstore.TestValidation" [color="black", fontcolor="black", label=<{TestValidation|<br ALIGN="LEFT"/>|test_not_a_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_hstore.TestValidator" [color="black", fontcolor="black", label=<{TestValidator|<br ALIGN="LEFT"/>|test_custom_messages()<br ALIGN="LEFT"/>test_deconstruct()<br ALIGN="LEFT"/>test_extra_keys()<br ALIGN="LEFT"/>test_missing_keys()<br ALIGN="LEFT"/>test_simple_valid()<br ALIGN="LEFT"/>test_strict_valid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestValidators" [color="black", fontcolor="black", label=<{TestValidators|<br ALIGN="LEFT"/>|test_max()<br ALIGN="LEFT"/>test_min()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_ranges.TestWidget" [color="black", fontcolor="black", label=<{TestWidget|<br ALIGN="LEFT"/>|test_range_widget()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.models.TextFieldModel" [color="black", fontcolor="black", label=<{TextFieldModel|field<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_unaccent.UnaccentTest" [color="black", fontcolor="black", label=<{UnaccentTest|Model<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_unaccent()<br ALIGN="LEFT"/>test_unaccent_accentuated_needle()<br ALIGN="LEFT"/>test_unaccent_chained()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"postgres_tests.test_unaccent.UnaccentTextFieldTest" [color="black", fontcolor="black", label=<{UnaccentTextFieldTest|Model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"postgres_tests.test_unaccent.UnaccentTextFieldTest" -> "postgres_tests.test_unaccent.UnaccentTest" [arrowhead="empty", arrowtail="none"];
"postgres_tests.models.CharFieldModel" -> "postgres_tests.test_unaccent.UnaccentTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Model", style="solid"];
"postgres_tests.models.TextFieldModel" -> "postgres_tests.test_unaccent.UnaccentTextFieldTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Model", style="solid"];
"postgres_tests.test_ranges.TestFormField.test_using_split_datetime_widget.SplitDateTimeRangeField" -> "postgres_tests.test_ranges.TestFormField.test_using_split_datetime_widget.SplitForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="field", style="solid"];
}
