digraph "classes_52" {
rankdir=BT
charset="utf-8"
"test_utils.tests.AssertFieldOutputTests" [color="black", fontcolor="black", label=<{AssertFieldOutputTests|<br ALIGN="LEFT"/>|test_assert_field_output()<br ALIGN="LEFT"/>test_custom_required_message()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.AssertNumQueriesContextManagerTests" [color="black", fontcolor="black", label=<{AssertNumQueriesContextManagerTests|<br ALIGN="LEFT"/>|test_failure()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_with_client()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.AssertNumQueriesTests" [color="black", fontcolor="black", label=<{AssertNumQueriesTests|<br ALIGN="LEFT"/>|test_assert_num_queries()<br ALIGN="LEFT"/>test_assert_num_queries_with_client()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.AssertQuerysetEqualTests" [color="black", fontcolor="black", label=<{AssertQuerysetEqualTests|p1<br ALIGN="LEFT"/>p2<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_ordered()<br ALIGN="LEFT"/>test_repeated_values()<br ALIGN="LEFT"/>test_transform()<br ALIGN="LEFT"/>test_undefined_order()<br ALIGN="LEFT"/>test_unordered()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.AssertRaisesMsgTest" [color="black", fontcolor="black", label=<{AssertRaisesMsgTest|<br ALIGN="LEFT"/>|test_special_re_chars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.AssertTemplateUsedContextManagerTests" [color="black", fontcolor="black", label=<{AssertTemplateUsedContextManagerTests|<br ALIGN="LEFT"/>|test_assert_used_on_http_response()<br ALIGN="LEFT"/>test_error_message()<br ALIGN="LEFT"/>test_failure()<br ALIGN="LEFT"/>test_nested_usage()<br ALIGN="LEFT"/>test_not_used()<br ALIGN="LEFT"/>test_usage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.CaptureQueriesContextManagerTests" [color="black", fontcolor="black", label=<{CaptureQueriesContextManagerTests|person_pk<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_failure()<br ALIGN="LEFT"/>test_nested()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_with_client()<br ALIGN="LEFT"/>test_within()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.models.Car" [color="black", fontcolor="black", label=<{Car|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_utils.tests.FirstUrls" [color="black", fontcolor="black", label=<{FirstUrls|urlpatterns : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_utils.tests.HTMLEqualTests" [color="black", fontcolor="black", label=<{HTMLEqualTests|<br ALIGN="LEFT"/>|test_attributes()<br ALIGN="LEFT"/>test_complex_examples()<br ALIGN="LEFT"/>test_contains_html()<br ALIGN="LEFT"/>test_count()<br ALIGN="LEFT"/>test_html_contain()<br ALIGN="LEFT"/>test_html_parser()<br ALIGN="LEFT"/>test_ignore_comments()<br ALIGN="LEFT"/>test_parse_html_in_script()<br ALIGN="LEFT"/>test_parsing_errors()<br ALIGN="LEFT"/>test_self_closing_tags()<br ALIGN="LEFT"/>test_simple_equal_html()<br ALIGN="LEFT"/>test_unequal_html()<br ALIGN="LEFT"/>test_unicode_handling()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.JSONEqualTests" [color="black", fontcolor="black", label=<{JSONEqualTests|<br ALIGN="LEFT"/>|test_equal_parsing_errors()<br ALIGN="LEFT"/>test_not_equal_parsing_errors()<br ALIGN="LEFT"/>test_simple_equal()<br ALIGN="LEFT"/>test_simple_equal_raise()<br ALIGN="LEFT"/>test_simple_equal_unordered()<br ALIGN="LEFT"/>test_simple_not_equal()<br ALIGN="LEFT"/>test_simple_not_equal_raise()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.AssertFieldOutputTests.test_custom_required_message.MyCustomField" [color="black", fontcolor="black", label=<{MyCustomField|default_error_messages : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_utils.tests.SkippingClassTestCase.test_skip_class_unless_db_feature.NotSkippedTests" [color="black", fontcolor="black", label=<{NotSkippedTests|<br ALIGN="LEFT"/>|test_dummy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.OverrideSettingsTests" [color="black", fontcolor="black", label=<{OverrideSettingsTests|<br ALIGN="LEFT"/>|test_override_database_routers()<br ALIGN="LEFT"/>test_override_file_upload_directory_permissions()<br ALIGN="LEFT"/>test_override_file_upload_permissions()<br ALIGN="LEFT"/>test_override_media_root()<br ALIGN="LEFT"/>test_override_media_url()<br ALIGN="LEFT"/>test_override_static_root()<br ALIGN="LEFT"/>test_override_static_url()<br ALIGN="LEFT"/>test_override_staticfiles_dirs()<br ALIGN="LEFT"/>test_override_staticfiles_finders()<br ALIGN="LEFT"/>test_override_staticfiles_storage()<br ALIGN="LEFT"/>test_urlconf_cache()<br ALIGN="LEFT"/>test_urlconf_first()<br ALIGN="LEFT"/>test_urlconf_second()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.models.Person" [color="black", fontcolor="black", label=<{Person|cars<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_utils.models.PossessedCar" [color="black", fontcolor="black", label=<{PossessedCar|belongs_to<br ALIGN="LEFT"/>car<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_utils.tests.SecondUrls" [color="black", fontcolor="black", label=<{SecondUrls|urlpatterns : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_utils.tests.SkippingClassTestCase.test_skip_class_unless_db_feature.SkippedTests" [color="black", fontcolor="black", label=<{SkippedTests|<br ALIGN="LEFT"/>|test_will_be_skipped()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.SkippingClassTestCase" [color="black", fontcolor="black", label=<{SkippingClassTestCase|<br ALIGN="LEFT"/>|test_skip_class_unless_db_feature()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.SkippingExtraTests" [color="black", fontcolor="black", label=<{SkippingExtraTests|fixtures : list<br ALIGN="LEFT"/>|<I>test_fixtures_are_skipped</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.SkippingTestCase" [color="black", fontcolor="black", label=<{SkippingTestCase|<br ALIGN="LEFT"/>|test_skip_if_db_feature()<br ALIGN="LEFT"/>test_skip_unless_db_feature()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_utils.tests.XMLEqualTests" [color="black", fontcolor="black", label=<{XMLEqualTests|<br ALIGN="LEFT"/>|test_comment_root()<br ALIGN="LEFT"/>test_parsing_errors()<br ALIGN="LEFT"/>test_simple_equal()<br ALIGN="LEFT"/>test_simple_equal_raise()<br ALIGN="LEFT"/>test_simple_equal_unordered()<br ALIGN="LEFT"/>test_simple_not_equal()<br ALIGN="LEFT"/>test_simple_not_equal_raise()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
