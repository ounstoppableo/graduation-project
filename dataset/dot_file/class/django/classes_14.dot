digraph "classes_14" {
rankdir=BT
charset="utf-8"
"cache.tests.BaseCacheTests" [color="black", fontcolor="black", label=<{BaseCacheTests|factory<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_add()<br ALIGN="LEFT"/>test_add_fail_on_pickleerror()<br ALIGN="LEFT"/>test_binary_string()<br ALIGN="LEFT"/>test_cache_read_for_model_instance()<br ALIGN="LEFT"/>test_cache_read_for_model_instance_with_deferred()<br ALIGN="LEFT"/>test_cache_versioning_add()<br ALIGN="LEFT"/>test_cache_versioning_delete()<br ALIGN="LEFT"/>test_cache_versioning_get_set()<br ALIGN="LEFT"/>test_cache_versioning_get_set_many()<br ALIGN="LEFT"/>test_cache_versioning_has_key()<br ALIGN="LEFT"/>test_cache_versioning_incr_decr()<br ALIGN="LEFT"/>test_cache_write_for_model_instance_with_deferred()<br ALIGN="LEFT"/>test_cache_write_unpickable_object()<br ALIGN="LEFT"/>test_clear()<br ALIGN="LEFT"/>test_close()<br ALIGN="LEFT"/>test_cull()<br ALIGN="LEFT"/>test_custom_key_func()<br ALIGN="LEFT"/>test_data_types()<br ALIGN="LEFT"/>test_decr()<br ALIGN="LEFT"/>test_decr_version()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_delete_many()<br ALIGN="LEFT"/>test_expiration()<br ALIGN="LEFT"/>test_float_timeout()<br ALIGN="LEFT"/>test_forever_timeout()<br ALIGN="LEFT"/>test_get_many()<br ALIGN="LEFT"/>test_has_key()<br ALIGN="LEFT"/>test_in()<br ALIGN="LEFT"/>test_incr()<br ALIGN="LEFT"/>test_incr_version()<br ALIGN="LEFT"/>test_invalid_keys()<br ALIGN="LEFT"/>test_long_timeout()<br ALIGN="LEFT"/>test_non_existent()<br ALIGN="LEFT"/>test_prefix()<br ALIGN="LEFT"/>test_set_fail_on_pickleerror()<br ALIGN="LEFT"/>test_set_many()<br ALIGN="LEFT"/>test_set_many_expiration()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_unicode()<br ALIGN="LEFT"/>test_zero_cull()<br ALIGN="LEFT"/>test_zero_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|m()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CacheHEADTest" [color="black", fontcolor="black", label=<{CacheHEADTest|factory<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_head_caches_correctly()<br ALIGN="LEFT"/>test_head_with_cached_get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CacheHandlerTest" [color="black", fontcolor="black", label=<{CacheHandlerTest|<br ALIGN="LEFT"/>|test_per_thread()<br ALIGN="LEFT"/>test_same_instance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CacheI18nTest" [color="black", fontcolor="black", label=<{CacheI18nTest|factory<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>|check_accept_language_vary(accept_language, vary, reference_key)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_cache_key_i18n_formatting()<br ALIGN="LEFT"/>test_cache_key_i18n_timezone()<br ALIGN="LEFT"/>test_cache_key_i18n_translation()<br ALIGN="LEFT"/>test_cache_key_i18n_translation_accept_language()<br ALIGN="LEFT"/>test_cache_key_no_i18n()<br ALIGN="LEFT"/>test_cache_key_with_non_ascii_tzname()<br ALIGN="LEFT"/>test_middleware()<br ALIGN="LEFT"/>test_middleware_doesnt_cache_streaming_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CacheMiddlewareTest" [color="black", fontcolor="black", label=<{CacheMiddlewareTest|default_cache<br ALIGN="LEFT"/>factory<br ALIGN="LEFT"/>other_cache<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_middleware()<br ALIGN="LEFT"/>test_sensitive_cookie_not_cached()<br ALIGN="LEFT"/>test_view_decorator()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CacheUtils" [color="black", fontcolor="black", label=<{CacheUtils|factory<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_cache_key_varies_by_url()<br ALIGN="LEFT"/>test_get_cache_key()<br ALIGN="LEFT"/>test_get_cache_key_with_query()<br ALIGN="LEFT"/>test_learn_cache_key()<br ALIGN="LEFT"/>test_patch_cache_control()<br ALIGN="LEFT"/>test_patch_vary_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CreateCacheTableForDBCacheTests" [color="black", fontcolor="black", label=<{CreateCacheTableForDBCacheTests|multi_db : bool<br ALIGN="LEFT"/>|test_createcachetable_observes_database_router()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CustomCacheKeyValidationTests" [color="black", fontcolor="black", label=<{CustomCacheKeyValidationTests|<br ALIGN="LEFT"/>|test_custom_key_validation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.CacheI18nTest.test_cache_key_with_non_ascii_tzname.CustomTzName" [color="black", fontcolor="black", label=<{CustomTzName|name : str<br ALIGN="LEFT"/>|tzname(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.DBCacheRouter" [color="black", fontcolor="black", label=<{DBCacheRouter|<br ALIGN="LEFT"/>|allow_migrate(db, app_label)<br ALIGN="LEFT"/>db_for_read(model)<br ALIGN="LEFT"/>db_for_write(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.DBCacheTests" [color="black", fontcolor="black", label=<{DBCacheTests|available_apps : list<br ALIGN="LEFT"/>|create_table()<br ALIGN="LEFT"/>drop_table()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_clear_commits_transaction()<br ALIGN="LEFT"/>test_createcachetable_with_table_argument()<br ALIGN="LEFT"/>test_second_call_doesnt_crash()<br ALIGN="LEFT"/>test_zero_cull()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.DBCacheWithTimeZoneTests" [color="black", fontcolor="black", label=<{DBCacheWithTimeZoneTests|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cache.tests.DefaultNonExpiringCacheKeyTests" [color="black", fontcolor="black", label=<{DefaultNonExpiringCacheKeyTests|DEFAULT_TIMEOUT<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_caches_set_with_timeout_as_none_has_correct_default_timeout()<br ALIGN="LEFT"/>test_caches_with_unset_timeout_has_correct_default_timeout()<br ALIGN="LEFT"/>test_caches_with_unset_timeout_set_expiring_key()<br ALIGN="LEFT"/>test_default_expiration_time_for_keys_is_5_minutes()<br ALIGN="LEFT"/>text_caches_set_with_timeout_as_none_set_non_expiring_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.DummyCacheTests" [color="black", fontcolor="black", label=<{DummyCacheTests|<br ALIGN="LEFT"/>|test_add()<br ALIGN="LEFT"/>test_clear()<br ALIGN="LEFT"/>test_data_types()<br ALIGN="LEFT"/>test_decr()<br ALIGN="LEFT"/>test_decr_version()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_delete_many()<br ALIGN="LEFT"/>test_expiration()<br ALIGN="LEFT"/>test_get_many()<br ALIGN="LEFT"/>test_has_key()<br ALIGN="LEFT"/>test_in()<br ALIGN="LEFT"/>test_incr()<br ALIGN="LEFT"/>test_incr_version()<br ALIGN="LEFT"/>test_non_existent()<br ALIGN="LEFT"/>test_set_many()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.FileBasedCacheTests" [color="black", fontcolor="black", label=<{FileBasedCacheTests|dirname<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_clear_does_not_remove_cache_dir()<br ALIGN="LEFT"/>test_creates_cache_dir_if_nonexistent()<br ALIGN="LEFT"/>test_ignores_non_cache_files()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.GetCacheTests" [color="black", fontcolor="black", label=<{GetCacheTests|<br ALIGN="LEFT"/>|test_close()<br ALIGN="LEFT"/>test_close_deprecated()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.LocMemCacheTests" [color="black", fontcolor="black", label=<{LocMemCacheTests|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_incr_decr_timeout()<br ALIGN="LEFT"/>test_locking_on_pickle()<br ALIGN="LEFT"/>test_multiple_caches()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.MemcachedCacheTests" [color="black", fontcolor="black", label=<{MemcachedCacheTests|<br ALIGN="LEFT"/>|<I>test_cull</I>()<br ALIGN="LEFT"/>test_default_far_future_timeout()<br ALIGN="LEFT"/>test_default_never_expiring_timeout()<br ALIGN="LEFT"/>test_invalid_keys()<br ALIGN="LEFT"/>test_memcached_deletes_key_on_failed_set()<br ALIGN="LEFT"/>test_memcached_uses_highest_pickle_version()<br ALIGN="LEFT"/><I>test_zero_cull</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.PicklingSideEffect" [color="black", fontcolor="black", label=<{PicklingSideEffect|cache<br ALIGN="LEFT"/>locked : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cache.tests.PrefixedCacheI18nTest" [color="black", fontcolor="black", label=<{PrefixedCacheI18nTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cache.tests.PrefixedCacheUtils" [color="black", fontcolor="black", label=<{PrefixedCacheUtils|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cache.tests.TestMakeTemplateFragmentKey" [color="black", fontcolor="black", label=<{TestMakeTemplateFragmentKey|<br ALIGN="LEFT"/>|test_proper_escaping()<br ALIGN="LEFT"/>test_with_many_vary_on()<br ALIGN="LEFT"/>test_with_one_vary_on()<br ALIGN="LEFT"/>test_without_vary_on()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.TestWithTemplateResponse" [color="black", fontcolor="black", label=<{TestWithTemplateResponse|factory<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_get_cache_key()<br ALIGN="LEFT"/>test_get_cache_key_with_query()<br ALIGN="LEFT"/>test_patch_vary_headers()<br ALIGN="LEFT"/>test_with_etag()<br ALIGN="LEFT"/>test_without_etag()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"cache.tests.Unpickable" [color="black", fontcolor="black", label=<{Unpickable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"cache.tests.DBCacheTests" -> "cache.tests.BaseCacheTests" [arrowhead="empty", arrowtail="none"];
"cache.tests.DBCacheWithTimeZoneTests" -> "cache.tests.DBCacheTests" [arrowhead="empty", arrowtail="none"];
"cache.tests.FileBasedCacheTests" -> "cache.tests.BaseCacheTests" [arrowhead="empty", arrowtail="none"];
"cache.tests.LocMemCacheTests" -> "cache.tests.BaseCacheTests" [arrowhead="empty", arrowtail="none"];
"cache.tests.MemcachedCacheTests" -> "cache.tests.BaseCacheTests" [arrowhead="empty", arrowtail="none"];
"cache.tests.PrefixedCacheI18nTest" -> "cache.tests.CacheI18nTest" [arrowhead="empty", arrowtail="none"];
"cache.tests.PrefixedCacheUtils" -> "cache.tests.CacheUtils" [arrowhead="empty", arrowtail="none"];
}
