digraph "classes_tornado" {
rankdir=BT
charset="utf-8"
"tornado.test.web_test.StaticFileTest.get_handlers.AbsoluteStaticUrlHandler" [color="black", fontcolor="black", label=<{AbsoluteStaticUrlHandler|include_host : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.twisted_test.CompatibilityTests.twisted_fetch.Accumulator" [color="black", fontcolor="black", label=<{Accumulator|finished<br ALIGN="LEFT"/>|connectionLost(reason)<br ALIGN="LEFT"/>dataReceived(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.DecoratorTest.get_handlers.AddSlashHandler" [color="black", fontcolor="black", label=<{AddSlashHandler|<br ALIGN="LEFT"/>|<I>get</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.AllHTTPMethodsTest" [color="black", fontcolor="black", label=<{AllHTTPMethodsTest|<br ALIGN="LEFT"/>|test_standard_methods()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.AllMethodsHandler" [color="black", fontcolor="black", label=<{AllMethodsHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>delete<br ALIGN="LEFT"/>get<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>other<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>post<br ALIGN="LEFT"/>put<br ALIGN="LEFT"/>|method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.StreamingChunkSizeTest.get_app.App" [color="black", fontcolor="black", label=<{App|<br ALIGN="LEFT"/>|start_request(server_conn, request_conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.Application" [color="black", fontcolor="black", label=<{Application|default_host : str<br ALIGN="LEFT"/>handlers : list<br ALIGN="LEFT"/>named_handlers : dict<br ALIGN="LEFT"/>settings : dict<br ALIGN="LEFT"/>transforms : list<br ALIGN="LEFT"/>ui_methods : dict<br ALIGN="LEFT"/>ui_modules : dict<br ALIGN="LEFT"/>|add_handlers(host_pattern, host_handlers)<br ALIGN="LEFT"/>add_transform(transform_class)<br ALIGN="LEFT"/>listen(port, address)<br ALIGN="LEFT"/>log_request(handler)<br ALIGN="LEFT"/>reverse_url(name)<br ALIGN="LEFT"/>start_request(server_conn, request_conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.util.ArgReplacer" [color="black", fontcolor="black", label=<{ArgReplacer|arg_pos : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|get_old_value(args, kwargs, default)<br ALIGN="LEFT"/>replace(new_value, args, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.ArgReplacerTest" [color="black", fontcolor="black", label=<{ArgReplacerTest|replacer<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_keyword()<br ALIGN="LEFT"/>test_omitted()<br ALIGN="LEFT"/>test_position()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpclient.AsyncHTTPClient" [color="black", fontcolor="black", label=<{AsyncHTTPClient|defaults : dict<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>configurable_base()<br ALIGN="LEFT"/>configurable_default()<br ALIGN="LEFT"/>configure(impl)<br ALIGN="LEFT"/>fetch(request, callback, raise_error)<br ALIGN="LEFT"/><I>fetch_impl</I>(request, callback)<br ALIGN="LEFT"/>initialize(io_loop, defaults)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.testing.AsyncHTTPSTestCase" [color="black", fontcolor="black", label=<{AsyncHTTPSTestCase|<br ALIGN="LEFT"/>|get_http_client()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>get_protocol()<br ALIGN="LEFT"/>get_ssl_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.testing.AsyncHTTPTestCase" [color="black", fontcolor="black", label=<{AsyncHTTPTestCase|http_client<br ALIGN="LEFT"/>http_server<br ALIGN="LEFT"/>|fetch(path)<br ALIGN="LEFT"/><I>get_app</I>()<br ALIGN="LEFT"/>get_http_client()<br ALIGN="LEFT"/>get_http_port()<br ALIGN="LEFT"/>get_http_server()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>get_protocol()<br ALIGN="LEFT"/>get_url(path)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.asyncio.AsyncIOLoop" [color="black", fontcolor="black", label=<{AsyncIOLoop|<br ALIGN="LEFT"/>|initialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.asyncio.AsyncIOMainLoop" [color="black", fontcolor="black", label=<{AsyncIOMainLoop|<br ALIGN="LEFT"/>|initialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.AsyncPrepareErrorHandler" [color="black", fontcolor="black", label=<{AsyncPrepareErrorHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.AsyncPrepareHandler" [color="black", fontcolor="black", label=<{AsyncPrepareHandler|<br ALIGN="LEFT"/>|on_message(message)<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.testing.AsyncTestCase" [color="black", fontcolor="black", label=<{AsyncTestCase|io_loop<br ALIGN="LEFT"/>|get_new_ioloop()<br ALIGN="LEFT"/>run(result)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>stop(_arg)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>wait(condition, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.AsyncTestCaseTest" [color="black", fontcolor="black", label=<{AsyncTestCaseTest|<br ALIGN="LEFT"/>|test_exception_in_callback()<br ALIGN="LEFT"/>test_multiple_errors()<br ALIGN="LEFT"/>test_subsequent_wait_calls()<br ALIGN="LEFT"/>test_wait_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest" [color="black", fontcolor="black", label=<{AsyncTestCaseWrapperTest|<br ALIGN="LEFT"/>|test_other_return()<br ALIGN="LEFT"/>test_undecorated_generator()<br ALIGN="LEFT"/>test_undecorated_generator_with_skip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.AuthError" [color="black", fontcolor="red", label=<{AuthError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httpclient_test.AuthHandler" [color="black", fontcolor="black", label=<{AuthHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.AuthRedirectRequestHandler" [color="black", fontcolor="black", label=<{AuthRedirectRequestHandler|login_url<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>get_login_url()<br ALIGN="LEFT"/>initialize(login_url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.AuthRedirectTest" [color="black", fontcolor="black", label=<{AuthRedirectTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_absolute_auth_redirect()<br ALIGN="LEFT"/>test_relative_auth_redirect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.AuthTest" [color="black", fontcolor="black", label=<{AuthTest|<br ALIGN="LEFT"/>|base_twitter_redirect(url)<br ALIGN="LEFT"/>get_app()<br ALIGN="LEFT"/>test_oauth10_get_user()<br ALIGN="LEFT"/>test_oauth10_redirect()<br ALIGN="LEFT"/>test_oauth10_request_parameters()<br ALIGN="LEFT"/>test_oauth10a_get_user()<br ALIGN="LEFT"/>test_oauth10a_get_user_coroutine_exception()<br ALIGN="LEFT"/>test_oauth10a_redirect()<br ALIGN="LEFT"/>test_oauth10a_request_parameters()<br ALIGN="LEFT"/>test_oauth2_redirect()<br ALIGN="LEFT"/>test_openid_get_user()<br ALIGN="LEFT"/>test_openid_redirect()<br ALIGN="LEFT"/>test_twitter_get_user()<br ALIGN="LEFT"/>test_twitter_redirect()<br ALIGN="LEFT"/>test_twitter_redirect_gen_coroutine()<br ALIGN="LEFT"/>test_twitter_redirect_gen_engine()<br ALIGN="LEFT"/>test_twitter_show_user()<br ALIGN="LEFT"/>test_twitter_show_user_error()<br ALIGN="LEFT"/>test_twitter_show_user_future()<br ALIGN="LEFT"/>test_twitter_show_user_future_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.template_test.AutoEscapeTest" [color="black", fontcolor="black", label=<{AutoEscapeTest|templates : dict<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_custom_escape()<br ALIGN="LEFT"/>test_default_off()<br ALIGN="LEFT"/>test_default_on()<br ALIGN="LEFT"/>test_extended_block()<br ALIGN="LEFT"/>test_minimize_whitespace()<br ALIGN="LEFT"/>test_raw_expression()<br ALIGN="LEFT"/>test_unextended_block()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.ResolveTimeoutTestCase.setUp.BadResolver" [color="black", fontcolor="black", label=<{BadResolver|<br ALIGN="LEFT"/>|<I>resolve</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.BadSSLOptionsTest" [color="black", fontcolor="black", label=<{BadSSLOptionsTest|<br ALIGN="LEFT"/>|test_missing_arguments()<br ALIGN="LEFT"/>test_missing_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.BadYieldError" [color="black", fontcolor="red", label=<{BadYieldError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.platform.asyncio.BaseAsyncIOLoop" [color="black", fontcolor="black", label=<{BaseAsyncIOLoop|add_callback_from_signal<br ALIGN="LEFT"/>asyncio_loop<br ALIGN="LEFT"/>close_loop : bool<br ALIGN="LEFT"/>closing : bool<br ALIGN="LEFT"/>handlers : dict<br ALIGN="LEFT"/>readers : set<br ALIGN="LEFT"/>writers : set<br ALIGN="LEFT"/>|add_callback(callback)<br ALIGN="LEFT"/>add_handler(fd, handler, events)<br ALIGN="LEFT"/>call_at(when, callback)<br ALIGN="LEFT"/>close(all_fds)<br ALIGN="LEFT"/>initialize(asyncio_loop, close_loop)<br ALIGN="LEFT"/>remove_handler(fd)<br ALIGN="LEFT"/>remove_timeout(timeout)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>update_handler(fd, events)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.BaseCapClient" [color="black", fontcolor="black", label=<{BaseCapClient|io_loop<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>|process_response(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.iostream.BaseIOStream" [color="black", fontcolor="black", label=<{BaseIOStream|error : NoneType<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>max_buffer_size : int<br ALIGN="LEFT"/>max_write_buffer_size : NoneType<br ALIGN="LEFT"/>read_chunk_size<br ALIGN="LEFT"/>|close(exc_info)<br ALIGN="LEFT"/><I>close_fd</I>()<br ALIGN="LEFT"/>closed()<br ALIGN="LEFT"/><I>fileno</I>()<br ALIGN="LEFT"/>get_fd_error()<br ALIGN="LEFT"/>read_bytes(num_bytes, callback, streaming_callback, partial)<br ALIGN="LEFT"/><I>read_from_fd</I>()<br ALIGN="LEFT"/>read_until(delimiter, callback, max_bytes)<br ALIGN="LEFT"/>read_until_close(callback, streaming_callback)<br ALIGN="LEFT"/>read_until_regex(regex, callback, max_bytes)<br ALIGN="LEFT"/>reading()<br ALIGN="LEFT"/>set_close_callback(callback)<br ALIGN="LEFT"/><I>set_nodelay</I>(value)<br ALIGN="LEFT"/>write(data, callback)<br ALIGN="LEFT"/><I>write_to_fd</I>(data)<br ALIGN="LEFT"/>writing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template.BaseLoader" [color="black", fontcolor="black", label=<{BaseLoader|autoescape : str<br ALIGN="LEFT"/>lock : _RLock<br ALIGN="LEFT"/>namespace : dict<br ALIGN="LEFT"/>templates : dict<br ALIGN="LEFT"/>|load(name, parent_path)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/><I>resolve_path</I>(name, parent_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.BaseSSLTest" [color="black", fontcolor="black", label=<{BaseSSLTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.netutil.BlockingResolver" [color="black", fontcolor="black", label=<{BlockingResolver|<br ALIGN="LEFT"/>|initialize(io_loop)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.BlockingResolverErrorTest" [color="black", fontcolor="black", label=<{BlockingResolverErrorTest|real_getaddrinfo<br ALIGN="LEFT"/>resolver<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.BlockingResolverTest" [color="black", fontcolor="black", label=<{BlockingResolverTest|resolver<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.BodyLimitsTest" [color="black", fontcolor="black", label=<{BodyLimitsTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_http_client()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>test_body_size_override_reset()<br ALIGN="LEFT"/>test_large_body_buffered()<br ALIGN="LEFT"/>test_large_body_buffered_chunked()<br ALIGN="LEFT"/>test_large_body_streaming()<br ALIGN="LEFT"/>test_large_body_streaming_chunked()<br ALIGN="LEFT"/>test_large_body_streaming_chunked_override()<br ALIGN="LEFT"/>test_large_body_streaming_override()<br ALIGN="LEFT"/>test_small_body()<br ALIGN="LEFT"/>test_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locks.BoundedSemaphore" [color="black", fontcolor="black", label=<{BoundedSemaphore|<br ALIGN="LEFT"/>|release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locks_test.BoundedSemaphoreTest" [color="black", fontcolor="black", label=<{BoundedSemaphoreTest|<br ALIGN="LEFT"/>|test_release_unacquired()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.BodyLimitsTest.get_app.BufferedHandler" [color="black", fontcolor="black", label=<{BufferedHandler|<br ALIGN="LEFT"/>|put()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.BuggyLoggingTest" [color="black", fontcolor="black", label=<{BuggyLoggingTest|<br ALIGN="LEFT"/>|test_buggy_log_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locale.CSVLocale" [color="black", fontcolor="black", label=<{CSVLocale|<br ALIGN="LEFT"/>|pgettext(context, message, plural_message, count)<br ALIGN="LEFT"/>translate(message, plural_message, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CacheTest" [color="black", fontcolor="black", label=<{CacheTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_multiple_strong_etag_match()<br ALIGN="LEFT"/>test_multiple_strong_etag_not_match()<br ALIGN="LEFT"/>test_multiple_weak_etag_match()<br ALIGN="LEFT"/>test_multiple_weak_etag_not_match()<br ALIGN="LEFT"/>test_strong_etag_match()<br ALIGN="LEFT"/>test_strong_etag_not_match()<br ALIGN="LEFT"/>test_weak_etag_match()<br ALIGN="LEFT"/>test_weak_etag_not_match()<br ALIGN="LEFT"/>test_wildcard_etag()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.Callback" [color="black", fontcolor="black", label=<{Callback|key<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>|get_result()<br ALIGN="LEFT"/>is_ready()<br ALIGN="LEFT"/>start(runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.CapError" [color="black", fontcolor="red", label=<{CapError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.concurrent_test.CapServer" [color="black", fontcolor="black", label=<{CapServer|stream<br ALIGN="LEFT"/>|handle_read(data)<br ALIGN="LEFT"/>handle_stream(stream, address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.caresresolver.CaresResolver" [color="black", fontcolor="black", label=<{CaresResolver|channel<br ALIGN="LEFT"/>fds : dict<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|initialize(io_loop)<br ALIGN="LEFT"/>resolve(host, port, family)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.CaresResolverTest" [color="black", fontcolor="black", label=<{CaresResolverTest|resolver<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.ChunkHandler" [color="black", fontcolor="black", label=<{ChunkHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ClearAllCookiesTest" [color="black", fontcolor="black", label=<{ClearAllCookiesTest|<br ALIGN="LEFT"/>|test_clear_all_cookies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ClearHeaderTest" [color="black", fontcolor="black", label=<{ClearHeaderTest|<br ALIGN="LEFT"/>|test_clear_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ClientCloseTest" [color="black", fontcolor="black", label=<{ClientCloseTest|<br ALIGN="LEFT"/>|test_client_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.ClientOnlyCompressionTest" [color="black", fontcolor="black", label=<{ClientOnlyCompressionTest|<br ALIGN="LEFT"/>|get_client_compression_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.ClientTestMixin" [color="black", fontcolor="black", label=<{ClientTestMixin|client<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_callback()<br ALIGN="LEFT"/>test_callback_error()<br ALIGN="LEFT"/>test_future()<br ALIGN="LEFT"/>test_future_error()<br ALIGN="LEFT"/>test_generator()<br ALIGN="LEFT"/>test_generator_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StreamingRequestBodyTest.get_handlers.CloseDetectionHandler" [color="black", fontcolor="black", label=<{CloseDetectionHandler|test<br ALIGN="LEFT"/>|initialize(test)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.CloseReasonHandler" [color="black", fontcolor="black", label=<{CloseReasonHandler|on_close_called : bool<br ALIGN="LEFT"/>|open()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.CompatibilityTests" [color="black", fontcolor="black", label=<{CompatibilityTests|io_loop<br ALIGN="LEFT"/>reactor<br ALIGN="LEFT"/>saved_signals : dict<br ALIGN="LEFT"/>stop<br ALIGN="LEFT"/>stop_loop<br ALIGN="LEFT"/>tornado_port<br ALIGN="LEFT"/>twisted_port<br ALIGN="LEFT"/>|run_ioloop()<br ALIGN="LEFT"/>run_reactor()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>start_tornado_server()<br ALIGN="LEFT"/>start_twisted_server()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>testTornadoServerTwistedClientIOLoop()<br ALIGN="LEFT"/>testTornadoServerTwistedClientReactor()<br ALIGN="LEFT"/>testTornadoServerTwistedCoroutineClientIOLoop()<br ALIGN="LEFT"/>testTwistedServerTornadoClientIOLoop()<br ALIGN="LEFT"/>testTwistedServerTornadoClientReactor()<br ALIGN="LEFT"/>tornado_fetch(url, runner)<br ALIGN="LEFT"/>twisted_coroutine_fetch(url, runner)<br ALIGN="LEFT"/>twisted_fetch(url, runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.CompressionTestMixin" [color="black", fontcolor="black", label=<{CompressionTestMixin|MESSAGE : str<br ALIGN="LEFT"/>close_future<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_client_compression_options()<br ALIGN="LEFT"/>get_server_compression_options()<br ALIGN="LEFT"/>test_message_sizes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locks.Condition" [color="black", fontcolor="black", label=<{Condition|io_loop<br ALIGN="LEFT"/>|notify(n)<br ALIGN="LEFT"/>notify_all()<br ALIGN="LEFT"/>wait(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locks_test.ConditionTest" [color="black", fontcolor="black", label=<{ConditionTest|history : list<br ALIGN="LEFT"/>|record_done(future, key)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_garbage_collection()<br ALIGN="LEFT"/>test_nested_notify()<br ALIGN="LEFT"/>test_notify()<br ALIGN="LEFT"/>test_notify_1()<br ALIGN="LEFT"/>test_notify_all()<br ALIGN="LEFT"/>test_notify_all_with_timeout()<br ALIGN="LEFT"/>test_notify_n()<br ALIGN="LEFT"/>test_notify_n_with_timeout()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>test_wait_timeout()<br ALIGN="LEFT"/>test_wait_timeout_preempted()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.util.Configurable" [color="black", fontcolor="black", label=<{Configurable|<br ALIGN="LEFT"/>|<I>configurable_base</I>()<br ALIGN="LEFT"/><I>configurable_default</I>()<br ALIGN="LEFT"/>configure(impl)<br ALIGN="LEFT"/>configured_class()<br ALIGN="LEFT"/><I>initialize</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.ConfigurableTest" [color="black", fontcolor="black", label=<{ConfigurableTest|saved : tuple<br ALIGN="LEFT"/>|checkSubclasses()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_config_args()<br ALIGN="LEFT"/>test_config_class()<br ALIGN="LEFT"/>test_config_class_args()<br ALIGN="LEFT"/>test_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ConnectionCloseHandler" [color="black", fontcolor="black", label=<{ConnectionCloseHandler|test<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(test)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ConnectionCloseTest" [color="black", fontcolor="black", label=<{ConnectionCloseTest|stream<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>on_handler_waiting()<br ALIGN="LEFT"/>test_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpclient_test.ConnectorTest" [color="black", fontcolor="black", label=<{ConnectorTest|addrinfo : list<br ALIGN="LEFT"/>connect_futures : dict<br ALIGN="LEFT"/>streams : dict<br ALIGN="LEFT"/>|assert_pending()<br ALIGN="LEFT"/>create_stream(af, addr)<br ALIGN="LEFT"/>resolve_connect(af, addr, success)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>start_connect(addrinfo)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_all_fail()<br ALIGN="LEFT"/>test_immediate_failure()<br ALIGN="LEFT"/>test_immediate_success()<br ALIGN="LEFT"/>test_one_family_second_try()<br ALIGN="LEFT"/>test_one_family_second_try_failure()<br ALIGN="LEFT"/>test_one_family_second_try_timeout()<br ALIGN="LEFT"/>test_success_after_timeout()<br ALIGN="LEFT"/>test_two_families_immediate_failure()<br ALIGN="LEFT"/>test_two_families_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.ContentLength304Handler" [color="black", fontcolor="black", label=<{ContentLength304Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.ContentLengthHandler" [color="black", fontcolor="black", label=<{ContentLengthHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ConvertDeferredTest" [color="black", fontcolor="black", label=<{ConvertDeferredTest|<br ALIGN="LEFT"/>|test_failure()<br ALIGN="LEFT"/>test_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest" [color="black", fontcolor="black", label=<{CookieTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_cookie_special_char()<br ALIGN="LEFT"/>test_get_cookie()<br ALIGN="LEFT"/>test_set_cookie()<br ALIGN="LEFT"/>test_set_cookie_domain()<br ALIGN="LEFT"/>test_set_cookie_expires_days()<br ALIGN="LEFT"/>test_set_cookie_false_flags()<br ALIGN="LEFT"/>test_set_cookie_max_age()<br ALIGN="LEFT"/>test_set_cookie_overwrite()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTestRequestHandler" [color="black", fontcolor="black", label=<{CookieTestRequestHandler|application<br ALIGN="LEFT"/>|get_cookie(name)<br ALIGN="LEFT"/>set_cookie(name, value, expires_days)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.CountdownHandler" [color="black", fontcolor="black", label=<{CountdownHandler|<br ALIGN="LEFT"/>|get(count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase" [color="black", fontcolor="black", label=<{CreateAsyncHTTPClientTestCase|saved : tuple<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_max_clients()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.curl_httpclient.CurlAsyncHTTPClient" [color="black", fontcolor="black", label=<{CurlAsyncHTTPClient|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fetch_impl(request, callback)<br ALIGN="LEFT"/>handle_callback_exception(callback)<br ALIGN="LEFT"/>initialize(io_loop, max_clients, defaults)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.curl_httpclient.CurlError" [color="black", fontcolor="red", label=<{CurlError|errno<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase" [color="black", fontcolor="black", label=<{CurlHTTPClientCommonTestCase|<br ALIGN="LEFT"/>|get_http_client()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.curl_httpclient_test.CurlHTTPClientTestCase" [color="black", fontcolor="black", label=<{CurlHTTPClientTestCase|http_client<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_custom_reason()<br ALIGN="LEFT"/>test_digest_auth()<br ALIGN="LEFT"/>test_fail_custom_reason()<br ALIGN="LEFT"/>test_prepare_curl_callback_stack_context()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserHandler" [color="black", fontcolor="black", label=<{CurrentUserHandler|has_loaded_current_user : bool<br ALIGN="LEFT"/>|get_current_user()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserModuleHandler" [color="black", fontcolor="black", label=<{CurrentUserModuleHandler|<br ALIGN="LEFT"/>|get_template_namespace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.Custom404Test.get_app_kwargs.Custom404Handler" [color="black", fontcolor="black", label=<{Custom404Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.Custom404Test" [color="black", fontcolor="black", label=<{Custom404Test|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_404()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.curl_httpclient_test.CustomFailReasonHandler" [color="black", fontcolor="black", label=<{CustomFailReasonHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.curl_httpclient_test.CustomReasonHandler" [color="black", fontcolor="black", label=<{CustomReasonHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CustomStaticFileTest" [color="black", fontcolor="black", label=<{CustomStaticFileTest|static_handler_class<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_serve()<br ALIGN="LEFT"/>test_static_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.CythonMaskFunctionTest" [color="black", fontcolor="black", label=<{CythonMaskFunctionTest|<br ALIGN="LEFT"/>|mask(mask, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.DateHeaderTest" [color="black", fontcolor="black", label=<{DateHeaderTest|<br ALIGN="LEFT"/>|test_date_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.DecodeArgHandler" [color="black", fontcolor="black", label=<{DecodeArgHandler|<br ALIGN="LEFT"/>|decode_argument(value, name)<br ALIGN="LEFT"/>get(arg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.DecoratorCapClient" [color="black", fontcolor="black", label=<{DecoratorCapClient|callback<br ALIGN="LEFT"/>request_data<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|capitalize(request_data, callback)<br ALIGN="LEFT"/>handle_connect()<br ALIGN="LEFT"/>handle_read(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.DecoratorClientTest" [color="black", fontcolor="black", label=<{DecoratorClientTest|client_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.DecoratorTest" [color="black", fontcolor="black", label=<{DecoratorTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_addslash()<br ALIGN="LEFT"/>test_removeslash()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.Default404Test" [color="black", fontcolor="black", label=<{Default404Test|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_404()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.DefaultCompressionTest" [color="black", fontcolor="black", label=<{DefaultCompressionTest|<br ALIGN="LEFT"/>|get_client_compression_options()<br ALIGN="LEFT"/>get_server_compression_options()<br ALIGN="LEFT"/>verify_wire_bytes(bytes_in, bytes_out)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ErrorResponseTest.get_handlers.DefaultHandler" [color="black", fontcolor="black", label=<{DefaultHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.DefaultHandlerArgumentsTest" [color="black", fontcolor="black", label=<{DefaultHandlerArgumentsTest|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_403()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.read_stream_body.Delegate" [color="black", fontcolor="black", label=<{Delegate|headers<br ALIGN="LEFT"/>|data_received(chunk)<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>headers_received(start_line, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template.DictLoader" [color="black", fontcolor="black", label=<{DictLoader|dict<br ALIGN="LEFT"/>|resolve_path(name, parent_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.curl_httpclient_test.DigestAuthHandler" [color="black", fontcolor="black", label=<{DigestAuthHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.concurrent.DummyExecutor" [color="black", fontcolor="black", label=<{DummyExecutor|<br ALIGN="LEFT"/>|<I>shutdown</I>(wait)<br ALIGN="LEFT"/>submit(fn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.epoll.EPollIOLoop" [color="black", fontcolor="black", label=<{EPollIOLoop|<br ALIGN="LEFT"/>|initialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StreamingRequestBodyTest.get_handlers.EarlyReturnHandler" [color="black", fontcolor="black", label=<{EarlyReturnHandler|<br ALIGN="LEFT"/>|prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.EchoHandler" [color="black", fontcolor="black", label=<{EchoHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.EchoHandler" [color="black", fontcolor="black", label=<{EchoHandler|<br ALIGN="LEFT"/>|on_message(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.EchoHandler" [color="black", fontcolor="black", label=<{EchoHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers.EchoHandler" [color="black", fontcolor="black", label=<{EchoHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.EchoPostHandler" [color="black", fontcolor="black", label=<{EchoPostHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.EchoPostHandler" [color="black", fontcolor="black", label=<{EchoPostHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.EmptyFlushCallbackHandler" [color="black", fontcolor="black", label=<{EmptyFlushCallbackHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.log_test.EnablePrettyLoggingTest" [color="black", fontcolor="black", label=<{EnablePrettyLoggingTest|logger : Logger<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_log_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locale_test.EnglishTest" [color="black", fontcolor="black", label=<{EnglishTest|<br ALIGN="LEFT"/>|test_format_date()<br ALIGN="LEFT"/>test_format_day()<br ALIGN="LEFT"/>test_friendly_number()<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.options.Error" [color="black", fontcolor="red", label=<{Error|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.web.ErrorHandler" [color="black", fontcolor="black", label=<{ErrorHandler|<br ALIGN="LEFT"/>|<I>check_xsrf_cookie</I>()<br ALIGN="LEFT"/>initialize(status_code)<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ErrorHandlerXSRFTest" [color="black", fontcolor="black", label=<{ErrorHandlerXSRFTest|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_404_xsrf()<br ALIGN="LEFT"/>test_error_xsrf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.ErrorInOnMessageHandler" [color="black", fontcolor="black", label=<{ErrorInOnMessageHandler|<br ALIGN="LEFT"/>|on_message(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ErrorResponseTest" [color="black", fontcolor="black", label=<{ErrorResponseTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_default()<br ALIGN="LEFT"/>test_failed_write_error()<br ALIGN="LEFT"/>test_write_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.escape_test.EscapeTestCase" [color="black", fontcolor="black", label=<{EscapeTestCase|<br ALIGN="LEFT"/>|test_escape_return_types()<br ALIGN="LEFT"/>test_json_decode()<br ALIGN="LEFT"/>test_json_encode()<br ALIGN="LEFT"/>test_linkify()<br ALIGN="LEFT"/>test_recursive_unicode()<br ALIGN="LEFT"/>test_squeeze()<br ALIGN="LEFT"/>test_url_escape_quote_plus()<br ALIGN="LEFT"/>test_url_escape_unicode()<br ALIGN="LEFT"/>test_url_unescape_unicode()<br ALIGN="LEFT"/>test_xhtml_escape()<br ALIGN="LEFT"/>test_xhtml_unescape_numeric()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CacheTest.get_handlers.EtagHandler" [color="black", fontcolor="black", label=<{EtagHandler|<br ALIGN="LEFT"/>|compute_etag()<br ALIGN="LEFT"/>get(computed_etag)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locks.Event" [color="black", fontcolor="black", label=<{Event|<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>is_set()<br ALIGN="LEFT"/>set()<br ALIGN="LEFT"/>wait(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locks_test.EventTest" [color="black", fontcolor="black", label=<{EventTest|<br ALIGN="LEFT"/>|test_event()<br ALIGN="LEFT"/>test_event_set_multiple()<br ALIGN="LEFT"/>test_event_timeout()<br ALIGN="LEFT"/>test_event_wait_clear()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ExceptionHandlerTest" [color="black", fontcolor="black", label=<{ExceptionHandlerTest|<br ALIGN="LEFT"/>|test_http_error()<br ALIGN="LEFT"/>test_known_error()<br ALIGN="LEFT"/>test_unknown_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.stack_context.ExceptionStackContext" [color="black", fontcolor="black", label=<{ExceptionStackContext|active : bool<br ALIGN="LEFT"/>exception_handler<br ALIGN="LEFT"/>new_contexts : NoneType, tuple<br ALIGN="LEFT"/>old_contexts : tuple<br ALIGN="LEFT"/>|exit(type, value, traceback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.ExecInTest" [color="black", fontcolor="black", label=<{ExecInTest|<br ALIGN="LEFT"/>|test_no_inherit_future()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.netutil.ExecutorResolver" [color="black", fontcolor="black", label=<{ExecutorResolver|close_executor : bool<br ALIGN="LEFT"/>executor : NoneType<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>initialize(io_loop, executor, close_executor)<br ALIGN="LEFT"/>resolve(host, port, family)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.testing.ExpectLog" [color="black", fontcolor="black", label=<{ExpectLog|logger : NoneType, RootLogger<br ALIGN="LEFT"/>matched : bool<br ALIGN="LEFT"/>regex<br ALIGN="LEFT"/>required : bool<br ALIGN="LEFT"/>|filter(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.FacebookGraphMixin" [color="black", fontcolor="black", label=<{FacebookGraphMixin|<br ALIGN="LEFT"/>|facebook_request(path, callback, access_token, post_args)<br ALIGN="LEFT"/>get_auth_http_client()<br ALIGN="LEFT"/>get_authenticated_user(redirect_uri, client_id, client_secret, code, callback, extra_fields)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ErrorResponseTest.get_handlers.FailedWriteErrorHandler" [color="black", fontcolor="black", label=<{FailedWriteErrorHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>write_error(status_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpclient_test.ConnectorTest.FakeStream" [color="black", fontcolor="black", label=<{FakeStream|closed : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.FakeTimeIOLoop" [color="black", fontcolor="black", label=<{FakeTimeIOLoop|fts<br ALIGN="LEFT"/>|initialize()<br ALIGN="LEFT"/>sleep(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.FakeTimeSelect" [color="black", fontcolor="black", label=<{FakeTimeSelect|<br ALIGN="LEFT"/>|poll(timeout)<br ALIGN="LEFT"/>sleep(t)<br ALIGN="LEFT"/>time()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.FallbackHandler" [color="black", fontcolor="black", label=<{FallbackHandler|fallback<br ALIGN="LEFT"/>|initialize(fallback)<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.Finish" [color="black", fontcolor="red", label=<{Finish|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.FinishExceptionTest" [color="black", fontcolor="black", label=<{FinishExceptionTest|<br ALIGN="LEFT"/>|test_finish_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.FinishInPrepareTest" [color="black", fontcolor="black", label=<{FinishInPrepareTest|<br ALIGN="LEFT"/>|test_finish_in_prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.KeepAliveTest.get_app.FinishOnCloseHandler" [color="black", fontcolor="black", label=<{FinishOnCloseHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.FlowControlHandler" [color="black", fontcolor="black", label=<{FlowControlHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>step2()<br ALIGN="LEFT"/>step3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StreamingRequestFlowControlTest.get_handlers.FlowControlHandler" [color="black", fontcolor="black", label=<{FlowControlHandler|method : NoneType<br ALIGN="LEFT"/>methods : list<br ALIGN="LEFT"/>test<br ALIGN="LEFT"/>|data_received(data)<br ALIGN="LEFT"/>in_method(method)<br ALIGN="LEFT"/>initialize(test)<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenEngineTest.test_task_refcounting.f.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httputil_test.FormatTimestampTest" [color="black", fontcolor="black", label=<{FormatTimestampTest|EXPECTED : str<br ALIGN="LEFT"/>TIMESTAMP : float<br ALIGN="LEFT"/>|check(value)<br ALIGN="LEFT"/>test_datetime()<br ALIGN="LEFT"/>test_struct_time()<br ALIGN="LEFT"/>test_time_tuple()<br ALIGN="LEFT"/>test_unix_time_float()<br ALIGN="LEFT"/>test_unix_time_int()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.concurrent.Future" [color="black", fontcolor="black", label=<{Future|<br ALIGN="LEFT"/>|add_done_callback(fn)<br ALIGN="LEFT"/>cancel()<br ALIGN="LEFT"/>cancelled()<br ALIGN="LEFT"/>done()<br ALIGN="LEFT"/>exc_info()<br ALIGN="LEFT"/>exception(timeout)<br ALIGN="LEFT"/>result(timeout)<br ALIGN="LEFT"/>running()<br ALIGN="LEFT"/>set_exc_info(exc_info)<br ALIGN="LEFT"/>set_exception(exception)<br ALIGN="LEFT"/>set_result(result)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.GZipContentEncoding" [color="black", fontcolor="black", label=<{GZipContentEncoding|CONTENT_TYPES : set<br ALIGN="LEFT"/>MIN_LENGTH : int<br ALIGN="LEFT"/>|transform_chunk(chunk, finishing)<br ALIGN="LEFT"/>transform_first_chunk(status_code, headers, chunk, finishing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenCoroutineExceptionHandler" [color="black", fontcolor="black", label=<{GenCoroutineExceptionHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenCoroutineSequenceHandler" [color="black", fontcolor="black", label=<{GenCoroutineSequenceHandler|io_loop<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenCoroutineTest" [color="black", fontcolor="black", label=<{GenCoroutineTest|finished : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_async_early_return()<br ALIGN="LEFT"/>test_async_gen_return()<br ALIGN="LEFT"/>test_async_raise()<br ALIGN="LEFT"/>test_async_return()<br ALIGN="LEFT"/>test_async_return_no_value()<br ALIGN="LEFT"/>test_moment()<br ALIGN="LEFT"/>test_pass_callback()<br ALIGN="LEFT"/>test_py3_leak_exception_context()<br ALIGN="LEFT"/>test_replace_context_exception()<br ALIGN="LEFT"/>test_replace_yieldpoint_exception()<br ALIGN="LEFT"/>test_sleep()<br ALIGN="LEFT"/>test_swallow_context_exception()<br ALIGN="LEFT"/>test_swallow_yieldpoint_exception()<br ALIGN="LEFT"/>test_sync_gen_return()<br ALIGN="LEFT"/>test_sync_raise()<br ALIGN="LEFT"/>test_sync_return()<br ALIGN="LEFT"/>test_sync_return_no_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler" [color="black", fontcolor="black", label=<{GenCoroutineUnfinishedSequenceHandler|io_loop<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenEngineTest" [color="black", fontcolor="black", label=<{GenEngineTest|arg_ref<br ALIGN="LEFT"/>named_contexts : list<br ALIGN="LEFT"/>orphaned_callback<br ALIGN="LEFT"/>task_ref<br ALIGN="LEFT"/>|async_exception(e)<br ALIGN="LEFT"/>async_future(result, callback)<br ALIGN="LEFT"/>delay_callback(iterations, callback, arg)<br ALIGN="LEFT"/>function_with_stack_context(callback)<br ALIGN="LEFT"/>named_context(name)<br ALIGN="LEFT"/>run_gen(f)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_arguments()<br ALIGN="LEFT"/>test_async_raise_return()<br ALIGN="LEFT"/>test_async_raise_return_value()<br ALIGN="LEFT"/>test_async_raise_return_value_tuple()<br ALIGN="LEFT"/>test_bogus_yield()<br ALIGN="LEFT"/>test_bogus_yield_tuple()<br ALIGN="LEFT"/>test_exception_in_task_phase1()<br ALIGN="LEFT"/>test_exception_in_task_phase2()<br ALIGN="LEFT"/>test_exception_in_yield()<br ALIGN="LEFT"/>test_exception_phase1()<br ALIGN="LEFT"/>test_exception_phase2()<br ALIGN="LEFT"/>test_future()<br ALIGN="LEFT"/>test_inline_cb()<br ALIGN="LEFT"/>test_ioloop_cb()<br ALIGN="LEFT"/>test_key_mismatch()<br ALIGN="LEFT"/>test_key_mismatch_tuple()<br ALIGN="LEFT"/>test_key_reuse()<br ALIGN="LEFT"/>test_key_reuse_tuple()<br ALIGN="LEFT"/>test_leaked_callback()<br ALIGN="LEFT"/>test_leaked_callback_tuple()<br ALIGN="LEFT"/>test_multi()<br ALIGN="LEFT"/>test_multi_dict()<br ALIGN="LEFT"/>test_multi_dict_future()<br ALIGN="LEFT"/>test_multi_empty()<br ALIGN="LEFT"/>test_multi_exceptions()<br ALIGN="LEFT"/>test_multi_future()<br ALIGN="LEFT"/>test_multi_future_delayed()<br ALIGN="LEFT"/>test_multi_future_dict_delayed()<br ALIGN="LEFT"/>test_multi_future_duplicate()<br ALIGN="LEFT"/>test_multi_future_exceptions()<br ALIGN="LEFT"/>test_multi_mixed_types()<br ALIGN="LEFT"/>test_multi_performance()<br ALIGN="LEFT"/>test_multi_yieldpoint_delayed()<br ALIGN="LEFT"/>test_multi_yieldpoint_dict_delayed()<br ALIGN="LEFT"/>test_no_yield()<br ALIGN="LEFT"/>test_orphaned_callback()<br ALIGN="LEFT"/>test_parallel_callback()<br ALIGN="LEFT"/>test_raise_after_stop()<br ALIGN="LEFT"/>test_resume_after_exception_in_yield()<br ALIGN="LEFT"/>test_return_value()<br ALIGN="LEFT"/>test_return_value_tuple()<br ALIGN="LEFT"/>test_reuse()<br ALIGN="LEFT"/>test_stack_context_leak()<br ALIGN="LEFT"/>test_stack_context_leak_exception()<br ALIGN="LEFT"/>test_sync_raise_return()<br ALIGN="LEFT"/>test_sync_raise_return_value()<br ALIGN="LEFT"/>test_sync_raise_return_value_tuple()<br ALIGN="LEFT"/>test_task()<br ALIGN="LEFT"/>test_task_refcounting()<br ALIGN="LEFT"/>test_task_transfer_stack_context()<br ALIGN="LEFT"/>test_wait_all()<br ALIGN="LEFT"/>test_wait_transfer_stack_context()<br ALIGN="LEFT"/>test_with_arg()<br ALIGN="LEFT"/>test_with_arg_tuple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenExceptionHandler" [color="black", fontcolor="black", label=<{GenExceptionHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenSequenceHandler" [color="black", fontcolor="black", label=<{GenSequenceHandler|io_loop<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenTaskHandler" [color="black", fontcolor="black", label=<{GenTaskHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.GenTest" [color="black", fontcolor="black", label=<{GenTest|finished : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_async()<br ALIGN="LEFT"/>test_no_timeout()<br ALIGN="LEFT"/>test_no_timeout_environment_variable()<br ALIGN="LEFT"/>test_sync()<br ALIGN="LEFT"/>test_timeout()<br ALIGN="LEFT"/>test_timeout_environment_variable()<br ALIGN="LEFT"/>test_with_method_args()<br ALIGN="LEFT"/>test_with_method_kwargs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenWebTest" [color="black", fontcolor="black", label=<{GenWebTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_async_prepare_error_handler()<br ALIGN="LEFT"/>test_coroutine_exception_handler()<br ALIGN="LEFT"/>test_coroutine_sequence_handler()<br ALIGN="LEFT"/>test_coroutine_unfinished_sequence_handler()<br ALIGN="LEFT"/>test_exception_handler()<br ALIGN="LEFT"/>test_sequence_handler()<br ALIGN="LEFT"/>test_task_handler()<br ALIGN="LEFT"/>test_undecorated_coroutines()<br ALIGN="LEFT"/>test_yield_exception_handler()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.GenYieldExceptionHandler" [color="black", fontcolor="black", label=<{GenYieldExceptionHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.GeneratorCapClient" [color="black", fontcolor="black", label=<{GeneratorCapClient|<br ALIGN="LEFT"/>|capitalize(request_data, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.GeneratorClientTest" [color="black", fontcolor="black", label=<{GeneratorClientTest|client_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.GetArgumentErrorTest" [color="black", fontcolor="black", label=<{GetArgumentErrorTest|<br ALIGN="LEFT"/>|test_catch_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetArgumentHandler" [color="black", fontcolor="black", label=<{GetArgumentHandler|<br ALIGN="LEFT"/>|prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetArgumentsHandler" [color="black", fontcolor="black", label=<{GetArgumentsHandler|<br ALIGN="LEFT"/>|prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.GetCookieHandler" [color="black", fontcolor="black", label=<{GetCookieHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest" [color="black", fontcolor="black", label=<{GetCurrentUserTest|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_get_current_user_from_ui_module_is_lazy()<br ALIGN="LEFT"/>test_get_current_user_from_ui_module_works()<br ALIGN="LEFT"/>test_get_current_user_is_lazy()<br ALIGN="LEFT"/>test_get_current_user_works()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locale.GettextLocale" [color="black", fontcolor="black", label=<{GettextLocale|gettext<br ALIGN="LEFT"/>ngettext<br ALIGN="LEFT"/>|pgettext(context, message, plural_message, count)<br ALIGN="LEFT"/>translate(message, plural_message, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.GoogleOAuth2Mixin" [color="black", fontcolor="black", label=<{GoogleOAuth2Mixin|<br ALIGN="LEFT"/>|get_auth_http_client()<br ALIGN="LEFT"/>get_authenticated_user(redirect_uri, code, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.GzipBaseTest" [color="black", fontcolor="black", label=<{GzipBaseTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>post_gzip(body)<br ALIGN="LEFT"/>test_uncompressed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.util.GzipDecompressor" [color="black", fontcolor="black", label=<{GzipDecompressor|decompressobj<br ALIGN="LEFT"/>unconsumed_tail<br ALIGN="LEFT"/>|decompress(value, max_length)<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.GzipTest" [color="black", fontcolor="black", label=<{GzipTest|<br ALIGN="LEFT"/>|get_httpserver_options()<br ALIGN="LEFT"/>test_gzip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GzipTestCase" [color="black", fontcolor="black", label=<{GzipTestCase|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>test_gzip()<br ALIGN="LEFT"/>test_gzip_not_requested()<br ALIGN="LEFT"/>test_gzip_static()<br ALIGN="LEFT"/>test_vary_already_present()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.GzipUnsupportedTest" [color="black", fontcolor="black", label=<{GzipUnsupportedTest|<br ALIGN="LEFT"/>|test_gzip_unsupported()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.HTTP100ContinueTestCase" [color="black", fontcolor="black", label=<{HTTP100ContinueTestCase|http1<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>respond_100(request)<br ALIGN="LEFT"/>respond_200()<br ALIGN="LEFT"/>test_100_continue()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.http1connection.HTTP1Connection" [color="black", fontcolor="black", label=<{HTTP1Connection|context : NoneType<br ALIGN="LEFT"/>is_client<br ALIGN="LEFT"/>no_keep_alive : bool<br ALIGN="LEFT"/>params : NoneType<br ALIGN="LEFT"/>stream : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>detach()<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>read_response(delegate)<br ALIGN="LEFT"/>set_body_timeout(timeout)<br ALIGN="LEFT"/>set_close_callback(callback)<br ALIGN="LEFT"/>set_max_body_size(max_body_size)<br ALIGN="LEFT"/>write(chunk, callback)<br ALIGN="LEFT"/>write_headers(start_line, headers, chunk, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.http1connection.HTTP1ConnectionParameters" [color="black", fontcolor="black", label=<{HTTP1ConnectionParameters|body_timeout : NoneType<br ALIGN="LEFT"/>chunk_size : int<br ALIGN="LEFT"/>decompress : bool<br ALIGN="LEFT"/>header_timeout : NoneType<br ALIGN="LEFT"/>max_body_size : NoneType<br ALIGN="LEFT"/>max_header_size : int<br ALIGN="LEFT"/>no_keep_alive : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.http1connection.HTTP1ServerConnection" [color="black", fontcolor="black", label=<{HTTP1ServerConnection|context : NoneType<br ALIGN="LEFT"/>params : NoneType<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>start_serving(delegate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.HTTP204NoContentTestCase" [color="black", fontcolor="black", label=<{HTTP204NoContentTestCase|http1<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>respond_204(request)<br ALIGN="LEFT"/>test_204_no_content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpclient.HTTPClient" [color="black", fontcolor="black", label=<{HTTPClient|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fetch(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.HTTPClientCommonTestCase" [color="black", fontcolor="black", label=<{HTTPClientCommonTestCase|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_304_with_content_length()<br ALIGN="LEFT"/>test_all_methods()<br ALIGN="LEFT"/>test_basic_auth()<br ALIGN="LEFT"/>test_basic_auth_explicit_mode()<br ALIGN="LEFT"/>test_body_encoding()<br ALIGN="LEFT"/>test_body_sanity_checks()<br ALIGN="LEFT"/>test_chunked()<br ALIGN="LEFT"/>test_chunked_close()<br ALIGN="LEFT"/>test_configure_defaults()<br ALIGN="LEFT"/>test_credentials_in_url()<br ALIGN="LEFT"/>test_final_callback_stack_context()<br ALIGN="LEFT"/>test_follow_redirect()<br ALIGN="LEFT"/>test_future_http_error()<br ALIGN="LEFT"/>test_future_http_error_no_raise()<br ALIGN="LEFT"/>test_future_interface()<br ALIGN="LEFT"/>test_header_callback()<br ALIGN="LEFT"/>test_header_callback_stack_context()<br ALIGN="LEFT"/>test_header_types()<br ALIGN="LEFT"/>test_hello_world()<br ALIGN="LEFT"/>test_patch_receives_payload()<br ALIGN="LEFT"/>test_post()<br ALIGN="LEFT"/>test_put_307()<br ALIGN="LEFT"/>test_reuse_request_from_response()<br ALIGN="LEFT"/>test_streaming_callback()<br ALIGN="LEFT"/>test_streaming_stack_context()<br ALIGN="LEFT"/>test_types()<br ALIGN="LEFT"/>test_unsupported_auth_mode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httputil.HTTPConnection" [color="black", fontcolor="black", label=<{HTTPConnection|<br ALIGN="LEFT"/>|<I>finish</I>()<br ALIGN="LEFT"/><I>write</I>(chunk, callback)<br ALIGN="LEFT"/><I>write_headers</I>(start_line, headers, chunk, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.HTTPConnectionTest" [color="black", fontcolor="black", label=<{HTTPConnectionTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>raw_fetch(headers, body, newline)<br ALIGN="LEFT"/>test_100_continue()<br ALIGN="LEFT"/>test_multipart_form()<br ALIGN="LEFT"/>test_newlines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpclient.HTTPError" [color="black", fontcolor="red", label=<{HTTPError|code<br ALIGN="LEFT"/>response : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.web.HTTPError" [color="black", fontcolor="red", label=<{HTTPError|args : tuple<br ALIGN="LEFT"/>log_message : NoneType<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>status_code<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.httputil.HTTPFile" [color="black", fontcolor="black", label=<{HTTPFile|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.httputil.HTTPHeaders" [color="black", fontcolor="black", label=<{HTTPHeaders|<br ALIGN="LEFT"/>|add(name, value)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>get(name, default)<br ALIGN="LEFT"/>get_all()<br ALIGN="LEFT"/>get_list(name)<br ALIGN="LEFT"/>parse(headers)<br ALIGN="LEFT"/>parse_line(line)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httputil_test.HTTPHeadersTest" [color="black", fontcolor="black", label=<{HTTPHeadersTest|<br ALIGN="LEFT"/>|test_copy()<br ALIGN="LEFT"/>test_multi_line()<br ALIGN="LEFT"/>test_optional_cr()<br ALIGN="LEFT"/>test_unicode_newlines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httputil.HTTPInputError" [color="black", fontcolor="red", label=<{HTTPInputError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.httputil.HTTPMessageDelegate" [color="black", fontcolor="black", label=<{HTTPMessageDelegate|<br ALIGN="LEFT"/>|<I>data_received</I>(chunk)<br ALIGN="LEFT"/><I>finish</I>()<br ALIGN="LEFT"/><I>headers_received</I>(start_line, headers)<br ALIGN="LEFT"/><I>on_connection_close</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httputil.HTTPOutputError" [color="black", fontcolor="red", label=<{HTTPOutputError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.httpclient.HTTPRequest" [color="black", fontcolor="black", label=<{HTTPRequest|allow_ipv6 : NoneType<br ALIGN="LEFT"/>allow_nonstandard_methods : NoneType<br ALIGN="LEFT"/>auth_mode : NoneType<br ALIGN="LEFT"/>auth_password : NoneType<br ALIGN="LEFT"/>auth_username : NoneType<br ALIGN="LEFT"/>body<br ALIGN="LEFT"/>body_producer<br ALIGN="LEFT"/>ca_certs : NoneType<br ALIGN="LEFT"/>client_cert : NoneType<br ALIGN="LEFT"/>client_key : NoneType<br ALIGN="LEFT"/>connect_timeout : NoneType<br ALIGN="LEFT"/>decompress_response : NoneType<br ALIGN="LEFT"/>expect_100_continue : bool<br ALIGN="LEFT"/>follow_redirects : NoneType<br ALIGN="LEFT"/>header_callback<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>max_redirects : NoneType<br ALIGN="LEFT"/>method : str<br ALIGN="LEFT"/>network_interface : NoneType<br ALIGN="LEFT"/>prepare_curl_callback<br ALIGN="LEFT"/>proxy_host : NoneType<br ALIGN="LEFT"/>proxy_password : NoneType<br ALIGN="LEFT"/>proxy_port : NoneType<br ALIGN="LEFT"/>proxy_username : NoneType<br ALIGN="LEFT"/>request_timeout : NoneType<br ALIGN="LEFT"/>ssl_options : NoneType<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>streaming_callback<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>user_agent : NoneType<br ALIGN="LEFT"/>validate_cert : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httpclient_test.HTTPRequestTestCase" [color="black", fontcolor="black", label=<{HTTPRequestTestCase|<br ALIGN="LEFT"/>|test_body()<br ALIGN="LEFT"/>test_body_setter()<br ALIGN="LEFT"/>test_headers()<br ALIGN="LEFT"/>test_headers_setter()<br ALIGN="LEFT"/>test_if_modified_since()<br ALIGN="LEFT"/>test_null_headers_setter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpclient.HTTPResponse" [color="black", fontcolor="black", label=<{HTTPResponse|body<br ALIGN="LEFT"/>buffer : NoneType<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>effective_url<br ALIGN="LEFT"/>error : NoneType<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>request_time : NoneType<br ALIGN="LEFT"/>time_info : dict<br ALIGN="LEFT"/>|rethrow()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.HTTPResponseTestCase" [color="black", fontcolor="black", label=<{HTTPResponseTestCase|<br ALIGN="LEFT"/>|test_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpserver.HTTPServer" [color="black", fontcolor="black", label=<{HTTPServer|conn_params<br ALIGN="LEFT"/>no_keep_alive : bool<br ALIGN="LEFT"/>protocol : NoneType<br ALIGN="LEFT"/>request_callback<br ALIGN="LEFT"/>xheaders : bool<br ALIGN="LEFT"/>|close_all_connections()<br ALIGN="LEFT"/>configurable_base()<br ALIGN="LEFT"/>configurable_default()<br ALIGN="LEFT"/>handle_stream(stream, address)<br ALIGN="LEFT"/>initialize(request_callback, no_keep_alive, io_loop, xheaders, ssl_options, protocol, decompress_request, chunk_size, max_header_size, idle_connection_timeout, body_timeout, max_body_size, max_buffer_size)<br ALIGN="LEFT"/>on_close(server_conn)<br ALIGN="LEFT"/>start_request(server_conn, request_conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httputil.HTTPServerConnectionDelegate" [color="black", fontcolor="black", label=<{HTTPServerConnectionDelegate|<br ALIGN="LEFT"/>|<I>on_close</I>(server_conn)<br ALIGN="LEFT"/><I>start_request</I>(server_conn, request_conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.HTTPServerRawTest" [color="black", fontcolor="black", label=<{HTTPServerRawTest|stream<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_chunked_request_body()<br ALIGN="LEFT"/>test_empty_request()<br ALIGN="LEFT"/>test_malformed_first_line()<br ALIGN="LEFT"/>test_malformed_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httputil.HTTPServerRequest" [color="black", fontcolor="black", label=<{HTTPServerRequest|arguments : dict<br ALIGN="LEFT"/>body : bytes<br ALIGN="LEFT"/>body_arguments : dict<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>cookies<br ALIGN="LEFT"/>files : dict<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>host<br ALIGN="LEFT"/>method : NoneType<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>query_arguments : dict<br ALIGN="LEFT"/>remote_ip : NoneType<br ALIGN="LEFT"/>uri : NoneType<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|finish()<br ALIGN="LEFT"/>full_url()<br ALIGN="LEFT"/>get_ssl_certificate(binary_form)<br ALIGN="LEFT"/>request_time()<br ALIGN="LEFT"/>supports_http_1_1()<br ALIGN="LEFT"/>write(chunk, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httputil_test.HTTPServerRequestTest" [color="black", fontcolor="black", label=<{HTTPServerRequestTest|<br ALIGN="LEFT"/>|test_body_is_a_byte_string()<br ALIGN="LEFT"/>test_default_constructor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.HTTPServerTest" [color="black", fontcolor="black", label=<{HTTPServerTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_double_slash()<br ALIGN="LEFT"/>test_empty_post_parameters()<br ALIGN="LEFT"/>test_empty_query_string()<br ALIGN="LEFT"/>test_malformed_body()<br ALIGN="LEFT"/>test_query_string_encoding()<br ALIGN="LEFT"/>test_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.stack_context_test.HTTPStackContextTest" [color="black", fontcolor="black", label=<{HTTPStackContextTest|response<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>handle_response(response)<br ALIGN="LEFT"/>test_stack_context()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.XHeaderTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.ManualProtocolTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.HostMatchingTest.Handler" [color="black", fontcolor="black", label=<{Handler|reply<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(reply)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ClearHeaderTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.Header304Test.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StatusReasonTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.DateHeaderTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.RaiseWithReasonTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GzipTestCase.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.PathArgsInPrepareTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ClearAllCookiesTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ExceptionHandlerTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>log_exception(typ, value, tb)<br ALIGN="LEFT"/>write_error(status_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.BuggyLoggingTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>log_exception(typ, value, tb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UIMethodUIModuleTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetArgumentErrorTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.MultipleExceptionTest.Handler" [color="black", fontcolor="black", label=<{Handler|exc_count : int<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>log_exception(typ, value, tb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.SetLazyPropertiesTest.Handler" [color="black", fontcolor="black", label=<{Handler|current_user : str<br ALIGN="LEFT"/>locale<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/><I>get_current_user</I>()<br ALIGN="LEFT"/><I>get_user_locale</I>()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UnimplementedHTTPMethodsTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.UnimplementedNonStandardMethodsTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|other()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.AllHTTPMethodsTest.Handler" [color="black", fontcolor="black", label=<{Handler|delete<br ALIGN="LEFT"/>get<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>post<br ALIGN="LEFT"/>put<br ALIGN="LEFT"/>|method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.PatchMethodTest.Handler" [color="black", fontcolor="black", label=<{Handler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|other()<br ALIGN="LEFT"/>patch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.FinishInPrepareTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ClientCloseTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.XSRFTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.FinishExceptionTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.RequestSummaryTest.Handler" [color="black", fontcolor="black", label=<{Handler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.HandlerBaseTestCase" [color="black", fontcolor="black", label=<{HandlerBaseTestCase|<br ALIGN="LEFT"/>|fetch_json()<br ALIGN="LEFT"/>get_app()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.HandlerByNameTest" [color="black", fontcolor="black", label=<{HandlerByNameTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_handler_by_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.HangHandler" [color="black", fontcolor="black", label=<{HangHandler|<br ALIGN="LEFT"/>|<I>get</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.HeadHandler" [color="black", fontcolor="black", label=<{HeadHandler|<br ALIGN="LEFT"/>|head()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.Header304Test" [color="black", fontcolor="black", label=<{Header304Test|<br ALIGN="LEFT"/>|test_304_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.HeaderHandler" [color="black", fontcolor="black", label=<{HeaderHandler|<br ALIGN="LEFT"/>|open()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.HeaderInjectionHandler" [color="black", fontcolor="black", label=<{HeaderInjectionHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.KeepAliveTest.get_app.HelloHandler" [color="black", fontcolor="black", label=<{HelloHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.HelloHandler" [color="black", fontcolor="black", label=<{HelloHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.CompatibilityTests.start_tornado_server.HelloHandler" [color="black", fontcolor="black", label=<{HelloHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.HelloHandler" [color="black", fontcolor="black", label=<{HelloHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.wsgi_test.WSGIApplicationTest.get_app.HelloHandler" [color="black", fontcolor="black", label=<{HelloHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.CompatibilityTests.start_twisted_server.HelloResource" [color="black", fontcolor="black", label=<{HelloResource|isLeaf : bool<br ALIGN="LEFT"/>|render_GET(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.HelloWorldHandler" [color="black", fontcolor="black", label=<{HelloWorldHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.HelloWorldRequestHandler" [color="black", fontcolor="black", label=<{HelloWorldRequestHandler|expected_protocol : str<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(protocol)<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.HostEchoHandler" [color="black", fontcolor="black", label=<{HostEchoHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.HostMatchingTest" [color="black", fontcolor="black", label=<{HostMatchingTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_host_matching()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.HostnameMappingTestCase" [color="black", fontcolor="black", label=<{HostnameMappingTestCase|http_client<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_hostname_mapping()<br ALIGN="LEFT"/>test_port_mapping()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.ioloop.IOLoop" [color="black", fontcolor="black", label=<{IOLoop|ERROR : int<br ALIGN="LEFT"/>NONE : int<br ALIGN="LEFT"/>READ : int<br ALIGN="LEFT"/>WRITE : int<br ALIGN="LEFT"/>handle_callback_exception<br ALIGN="LEFT"/>|<I>add_callback</I>(callback)<br ALIGN="LEFT"/><I>add_callback_from_signal</I>(callback)<br ALIGN="LEFT"/>add_future(future, callback)<br ALIGN="LEFT"/><I>add_handler</I>(fd, handler, events)<br ALIGN="LEFT"/>add_timeout(deadline, callback)<br ALIGN="LEFT"/>call_at(when, callback)<br ALIGN="LEFT"/>call_later(delay, callback)<br ALIGN="LEFT"/>clear_current()<br ALIGN="LEFT"/>clear_instance()<br ALIGN="LEFT"/><I>close</I>(all_fds)<br ALIGN="LEFT"/>close_fd(fd)<br ALIGN="LEFT"/>configurable_base()<br ALIGN="LEFT"/>configurable_default()<br ALIGN="LEFT"/>current(instance)<br ALIGN="LEFT"/>handle_callback_exception(callback)<br ALIGN="LEFT"/>initialize(make_current)<br ALIGN="LEFT"/>initialized()<br ALIGN="LEFT"/>install()<br ALIGN="LEFT"/>instance()<br ALIGN="LEFT"/>log_stack(signal, frame)<br ALIGN="LEFT"/>make_current()<br ALIGN="LEFT"/><I>remove_handler</I>(fd)<br ALIGN="LEFT"/><I>remove_timeout</I>(timeout)<br ALIGN="LEFT"/>run_sync(func, timeout)<br ALIGN="LEFT"/>set_blocking_log_threshold(seconds)<br ALIGN="LEFT"/><I>set_blocking_signal_threshold</I>(seconds, action)<br ALIGN="LEFT"/>spawn_callback(callback)<br ALIGN="LEFT"/>split_fd(fd)<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>time()<br ALIGN="LEFT"/><I>update_handler</I>(fd, events)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.iostream.IOStream" [color="black", fontcolor="black", label=<{IOStream|error : OSError<br ALIGN="LEFT"/>socket : NoneType<br ALIGN="LEFT"/>|close_fd()<br ALIGN="LEFT"/>connect(address, callback, server_hostname)<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>get_fd_error()<br ALIGN="LEFT"/>read_from_fd()<br ALIGN="LEFT"/>set_nodelay(value)<br ALIGN="LEFT"/>start_tls(server_side, ssl_options, server_hostname)<br ALIGN="LEFT"/>write_to_fd(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.IdleTimeoutTest" [color="black", fontcolor="black", label=<{IdleTimeoutTest|streams : list<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>get_app()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_idle_after_use()<br ALIGN="LEFT"/>test_unused_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.ImportObjectTest" [color="black", fontcolor="black", label=<{ImportObjectTest|<br ALIGN="LEFT"/>|test_import_member()<br ALIGN="LEFT"/>test_import_member_unicode()<br ALIGN="LEFT"/>test_import_module()<br ALIGN="LEFT"/>test_import_module_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.import_test.ImportTest" [color="black", fontcolor="black", label=<{ImportTest|<br ALIGN="LEFT"/>|test_import_everything()<br ALIGN="LEFT"/>test_import_pycurl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._CodeWriter.include.IncludeTemplate" [color="black", fontcolor="black", label=<{IncludeTemplate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.IncorrectContentLengthTest" [color="black", fontcolor="black", label=<{IncorrectContentLengthTest|server_error : Exception, NoneType<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_content_length_too_high()<br ALIGN="LEFT"/>test_content_length_too_low()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._CodeWriter.indent.Indenter" [color="black", fontcolor="black", label=<{Indenter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down.InheritBoth" [color="black", fontcolor="black", label=<{InheritBoth|<br ALIGN="LEFT"/>|test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.IsValidIPTest" [color="black", fontcolor="black", label=<{IsValidIPTest|<br ALIGN="LEFT"/>|test_is_valid_ip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.kqueue.KQueueIOLoop" [color="black", fontcolor="black", label=<{KQueueIOLoop|<br ALIGN="LEFT"/>|initialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.KeepAliveTest" [color="black", fontcolor="black", label=<{KeepAliveTest|headers<br ALIGN="LEFT"/>http_version : bytes<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>connect()<br ALIGN="LEFT"/>get_app()<br ALIGN="LEFT"/>read_headers()<br ALIGN="LEFT"/>read_response()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_cancel_during_download()<br ALIGN="LEFT"/>test_finish_while_closed()<br ALIGN="LEFT"/>test_http10()<br ALIGN="LEFT"/>test_http10_keepalive()<br ALIGN="LEFT"/>test_http10_keepalive_extra_crlf()<br ALIGN="LEFT"/>test_keepalive_chunked()<br ALIGN="LEFT"/>test_pipelined_cancel()<br ALIGN="LEFT"/>test_pipelined_requests()<br ALIGN="LEFT"/>test_request_close()<br ALIGN="LEFT"/>test_two_requests()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.KeyReuseError" [color="black", fontcolor="red", label=<{KeyReuseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxBodySizeTest.get_app.LargeBody" [color="black", fontcolor="black", label=<{LargeBody|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxBufferSizeTest.get_app.LargeBody" [color="black", fontcolor="black", label=<{LargeBody|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.KeepAliveTest.get_app.LargeHandler" [color="black", fontcolor="black", label=<{LargeHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxHeaderSizeTest.get_app.LargeHeaders" [color="black", fontcolor="black", label=<{LargeHeaders|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.LayeredTwistedIOLoop" [color="black", fontcolor="black", label=<{LayeredTwistedIOLoop|real_io_loop<br ALIGN="LEFT"/>|close(all_fds)<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.LeakedCallbackError" [color="black", fontcolor="red", label=<{LeakedCallbackError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.gen_test.GenCoroutineTest.test_py3_leak_exception_context.LeakedException" [color="black", fontcolor="red", label=<{LeakedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httpserver_test.LegacyInterfaceTest" [color="black", fontcolor="black", label=<{LegacyInterfaceTest|http1<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_legacy_interface()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.queues.LifoQueue" [color="black", fontcolor="black", label=<{LifoQueue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.queues_test.LifoQueueJoinTest" [color="black", fontcolor="black", label=<{LifoQueueJoinTest|queue_class<br ALIGN="LEFT"/>|test_order()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.LinkifyHandler" [color="black", fontcolor="black", label=<{LinkifyHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template.Loader" [color="black", fontcolor="black", label=<{Loader|root : bytes, str<br ALIGN="LEFT"/>|resolve_path(name, parent_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locale.Locale" [color="black", fontcolor="black", label=<{Locale|code<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>rtl : bool<br ALIGN="LEFT"/>translations<br ALIGN="LEFT"/>|format_date(date, gmt_offset, relative, shorter, full_format)<br ALIGN="LEFT"/>format_day(date, gmt_offset, dow)<br ALIGN="LEFT"/>friendly_number(value)<br ALIGN="LEFT"/>get(code)<br ALIGN="LEFT"/>get_closest()<br ALIGN="LEFT"/>list(parts)<br ALIGN="LEFT"/><I>pgettext</I>(context, message, plural_message, count)<br ALIGN="LEFT"/><I>translate</I>(message, plural_message, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locale_test.LocaleDataTest" [color="black", fontcolor="black", label=<{LocaleDataTest|<br ALIGN="LEFT"/>|test_non_ascii_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locks.Lock" [color="black", fontcolor="black", label=<{Lock|<br ALIGN="LEFT"/>|acquire(timeout)<br ALIGN="LEFT"/>release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locks_test.LockTests" [color="black", fontcolor="black", label=<{LockTests|<br ALIGN="LEFT"/>|test_acquire_fifo()<br ALIGN="LEFT"/>test_acquire_release()<br ALIGN="LEFT"/>test_acquire_timeout()<br ALIGN="LEFT"/>test_context_manager_misuse()<br ALIGN="LEFT"/>test_multi_release()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>test_yield_lock()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.runtests.LogCounter" [color="black", fontcolor="black", label=<{LogCounter|error_count : int<br ALIGN="LEFT"/>warning_count : int<br ALIGN="LEFT"/>|filter(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.log.LogFormatter" [color="black", fontcolor="black", label=<{LogFormatter|DEFAULT_COLORS : dict<br ALIGN="LEFT"/>DEFAULT_DATE_FORMAT : str<br ALIGN="LEFT"/>DEFAULT_FORMAT : str<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.log_test.LogFormatterTest" [color="black", fontcolor="black", label=<{LogFormatterTest|LINE_RE<br ALIGN="LEFT"/>filename<br ALIGN="LEFT"/>formatter<br ALIGN="LEFT"/>handler : FileHandler<br ALIGN="LEFT"/>logger : Logger<br ALIGN="LEFT"/>tempdir<br ALIGN="LEFT"/>|get_output()<br ALIGN="LEFT"/>make_handler(filename)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_basic_logging()<br ALIGN="LEFT"/>test_bytes_exception_logging()<br ALIGN="LEFT"/>test_bytes_logging()<br ALIGN="LEFT"/>test_utf8_logging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.testing.LogTrapTestCase" [color="black", fontcolor="black", label=<{LogTrapTestCase|<br ALIGN="LEFT"/>|run(result)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.log_test.LoggingOptionTest" [color="black", fontcolor="black", label=<{LoggingOptionTest|<br ALIGN="LEFT"/>|logs_present(statement, args)<br ALIGN="LEFT"/>test_default()<br ALIGN="LEFT"/>test_disable_code_none()<br ALIGN="LEFT"/>test_disable_code_string()<br ALIGN="LEFT"/>test_disable_command_line()<br ALIGN="LEFT"/>test_disable_command_line_case_insensitive()<br ALIGN="LEFT"/>test_disable_override()<br ALIGN="LEFT"/>test_tornado_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.ManualCapClient" [color="black", fontcolor="black", label=<{ManualCapClient|future<br ALIGN="LEFT"/>request_data<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|capitalize(request_data, callback)<br ALIGN="LEFT"/>handle_connect()<br ALIGN="LEFT"/>handle_read(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.ManualClientTest" [color="black", fontcolor="black", label=<{ManualClientTest|client_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httpserver_test.ManualProtocolTest" [color="black", fontcolor="black", label=<{ManualProtocolTest|<br ALIGN="LEFT"/>|get_httpserver_options()<br ALIGN="LEFT"/>test_manual_protocol()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.MaskFunctionMixin" [color="black", fontcolor="black", label=<{MaskFunctionMixin|<br ALIGN="LEFT"/>|test_mask()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxBodySizeTest" [color="black", fontcolor="black", label=<{MaxBodySizeTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_http_client()<br ALIGN="LEFT"/>test_large_body()<br ALIGN="LEFT"/>test_small_body()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxBufferSizeTest" [color="black", fontcolor="black", label=<{MaxBufferSizeTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_http_client()<br ALIGN="LEFT"/>test_large_body()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.MaxHeaderSizeTest" [color="black", fontcolor="black", label=<{MaxHeaderSizeTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>test_large_headers()<br ALIGN="LEFT"/>test_small_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxHeaderSizeTest" [color="black", fontcolor="black", label=<{MaxHeaderSizeTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_http_client()<br ALIGN="LEFT"/>test_large_headers()<br ALIGN="LEFT"/>test_small_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate" [color="black", fontcolor="black", label=<{MessageDelegate|chunk_lengths : list<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>|data_received(chunk)<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>headers_received(start_line, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.MissingArgumentError" [color="black", fontcolor="red", label=<{MissingArgumentError|arg_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.gen.Multi" [color="black", fontcolor="black", label=<{Multi|children : list<br ALIGN="LEFT"/>keys : NoneType, list<br ALIGN="LEFT"/>quiet_exceptions : tuple<br ALIGN="LEFT"/>unfinished_children : set<br ALIGN="LEFT"/>|get_result()<br ALIGN="LEFT"/>is_ready()<br ALIGN="LEFT"/>start(runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.MultiHeaderHandler" [color="black", fontcolor="black", label=<{MultiHeaderHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httputil_test.MultipartFormDataTest" [color="black", fontcolor="black", label=<{MultipartFormDataTest|<br ALIGN="LEFT"/>|test_boundary_starts_and_ends_with_quotes()<br ALIGN="LEFT"/>test_content_disposition_header_without_name_parameter()<br ALIGN="LEFT"/>test_data_after_final_boundary()<br ALIGN="LEFT"/>test_file_upload()<br ALIGN="LEFT"/>test_invalid_content_disposition()<br ALIGN="LEFT"/>test_line_does_not_end_with_correct_line_break()<br ALIGN="LEFT"/>test_missing_headers()<br ALIGN="LEFT"/>test_special_filenames()<br ALIGN="LEFT"/>test_unquoted_names()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.MultipartTestHandler" [color="black", fontcolor="black", label=<{MultipartTestHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.MultipleExceptionTest" [color="black", fontcolor="black", label=<{MultipleExceptionTest|<br ALIGN="LEFT"/>|test_multi_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs.MyModule" [color="black", fontcolor="black", label=<{MyModule|<br ALIGN="LEFT"/>|render(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CustomStaticFileTest.get_handlers.MyStaticFileHandler" [color="black", fontcolor="black", label=<{MyStaticFileHandler|<br ALIGN="LEFT"/>|get_absolute_path(settings, path)<br ALIGN="LEFT"/>get_content(path, start, end)<br ALIGN="LEFT"/>get_content_size()<br ALIGN="LEFT"/>get_modified_time()<br ALIGN="LEFT"/>get_version(settings, path)<br ALIGN="LEFT"/>make_static_url(settings, path)<br ALIGN="LEFT"/>parse_url_path(url_path)<br ALIGN="LEFT"/>validate_absolute_path(root, absolute_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.NamedURLSpecGroupsTest" [color="black", fontcolor="black", label=<{NamedURLSpecGroupsTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_named_urlspec_groups()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.NoCompressionTest" [color="black", fontcolor="black", label=<{NoCompressionTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.NoContentHandler" [color="black", fontcolor="black", label=<{NoContentHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.NoContentLengthHandler" [color="black", fontcolor="black", label=<{NoContentLengthHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.NonWSGIWebTests" [color="black", fontcolor="black", label=<{NonWSGIWebTests|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_empty_flush()<br ALIGN="LEFT"/>test_flow_control()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.NonWebSocketHandler" [color="black", fontcolor="black", label=<{NonWebSocketHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.stack_context.NullContext" [color="black", fontcolor="black", label=<{NullContext|old_contexts : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler" [color="black", fontcolor="black", label=<{OAuth1ClientLoginCoroutineHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.OAuth1ClientLoginHandler" [color="black", fontcolor="black", label=<{OAuth1ClientLoginHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(test, version)<br ALIGN="LEFT"/>on_user(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.OAuth1ClientRequestParametersHandler" [color="black", fontcolor="black", label=<{OAuth1ClientRequestParametersHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.OAuth1ServerAccessTokenHandler" [color="black", fontcolor="black", label=<{OAuth1ServerAccessTokenHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.OAuth1ServerRequestTokenHandler" [color="black", fontcolor="black", label=<{OAuth1ServerRequestTokenHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.OAuth2ClientLoginHandler" [color="black", fontcolor="black", label=<{OAuth2ClientLoginHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(test)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.OAuth2Mixin" [color="black", fontcolor="black", label=<{OAuth2Mixin|<br ALIGN="LEFT"/>|authorize_redirect(redirect_uri, client_id, client_secret, extra_params, callback, scope, response_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.OAuthMixin" [color="black", fontcolor="black", label=<{OAuthMixin|<br ALIGN="LEFT"/>|authorize_redirect(callback_uri, extra_params, http_client, callback)<br ALIGN="LEFT"/>get_auth_http_client()<br ALIGN="LEFT"/>get_authenticated_user(callback, http_client)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.RunOnExecutorTest.test_no_calling.Object" [color="black", fontcolor="black", label=<{Object|executor : ThreadPoolExecutor<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|f()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.RunOnExecutorTest.test_call_with_no_args.Object" [color="black", fontcolor="black", label=<{Object|executor : ThreadPoolExecutor<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|f()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.RunOnExecutorTest.test_call_with_io_loop.Object" [color="black", fontcolor="black", label=<{Object|executor : ThreadPoolExecutor<br ALIGN="LEFT"/>|f()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.RunOnExecutorTest.test_call_with_executor.Object" [color="black", fontcolor="black", label=<{Object|io_loop<br ALIGN="LEFT"/>|f()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.concurrent_test.RunOnExecutorTest.test_call_with_both.Object" [color="black", fontcolor="black", label=<{Object|<br ALIGN="LEFT"/>|f()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.util.ObjectDict" [color="black", fontcolor="black", label=<{ObjectDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.auth_test.OpenIdClientLoginHandler" [color="black", fontcolor="black", label=<{OpenIdClientLoginHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(test)<br ALIGN="LEFT"/>on_user(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.OpenIdMixin" [color="black", fontcolor="black", label=<{OpenIdMixin|<br ALIGN="LEFT"/>|authenticate_redirect(callback_uri, ax_attrs, callback)<br ALIGN="LEFT"/>get_auth_http_client()<br ALIGN="LEFT"/>get_authenticated_user(callback, http_client)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.OpenIdServerAuthenticateHandler" [color="black", fontcolor="black", label=<{OpenIdServerAuthenticateHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.options.OptionParser" [color="black", fontcolor="black", label=<{OptionParser|foo : int, str<br ALIGN="LEFT"/>log_file_prefix<br ALIGN="LEFT"/>|add_parse_callback(callback)<br ALIGN="LEFT"/>as_dict()<br ALIGN="LEFT"/>define(name, default, type, help, metavar, multiple, group, callback)<br ALIGN="LEFT"/>group_dict(group)<br ALIGN="LEFT"/>groups()<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>mockable()<br ALIGN="LEFT"/>parse_command_line(args, final)<br ALIGN="LEFT"/>parse_config_file(path, final)<br ALIGN="LEFT"/>print_help(file)<br ALIGN="LEFT"/>run_parse_callbacks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.OptionalPathHandler" [color="black", fontcolor="black", label=<{OptionalPathHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.OptionsHandler" [color="black", fontcolor="black", label=<{OptionsHandler|<br ALIGN="LEFT"/>|options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.options_test.OptionsTest" [color="black", fontcolor="black", label=<{OptionsTest|called : bool<br ALIGN="LEFT"/>|test_as_dict()<br ALIGN="LEFT"/>test_error_redefine()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_group_dict()<br ALIGN="LEFT"/>test_help()<br ALIGN="LEFT"/>test_items()<br ALIGN="LEFT"/>test_iter()<br ALIGN="LEFT"/>test_mock_patch()<br ALIGN="LEFT"/>test_multiple_int()<br ALIGN="LEFT"/>test_multiple_string()<br ALIGN="LEFT"/>test_parse_callbacks()<br ALIGN="LEFT"/>test_parse_command_line()<br ALIGN="LEFT"/>test_parse_config_file()<br ALIGN="LEFT"/>test_setattr()<br ALIGN="LEFT"/>test_setattr_type_check()<br ALIGN="LEFT"/>test_setattr_with_callback()<br ALIGN="LEFT"/>test_subcommand()<br ALIGN="LEFT"/>test_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.OutputTransform" [color="black", fontcolor="black", label=<{OutputTransform|<br ALIGN="LEFT"/>|transform_chunk(chunk, finishing)<br ALIGN="LEFT"/>transform_first_chunk(status_code, headers, chunk, finishing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.netutil.OverrideResolver" [color="black", fontcolor="black", label=<{OverrideResolver|mapping<br ALIGN="LEFT"/>resolver<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>initialize(resolver, mapping)<br ALIGN="LEFT"/>resolve(host, port)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StaticFileTest.get_handlers.OverrideStaticUrlHandler" [color="black", fontcolor="black", label=<{OverrideStaticUrlHandler|include_host : bool<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template.ParseError" [color="black", fontcolor="red", label=<{ParseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httputil_test.ParseRequestStartLineTest" [color="black", fontcolor="black", label=<{ParseRequestStartLineTest|METHOD : str<br ALIGN="LEFT"/>PATH : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>|test_parse_request_start_line()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.PatchHandler" [color="black", fontcolor="black", label=<{PatchHandler|<br ALIGN="LEFT"/>|patch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.PatchMethodTest" [color="black", fontcolor="black", label=<{PatchMethodTest|<br ALIGN="LEFT"/>|test_other()<br ALIGN="LEFT"/>test_patch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.PathArgsInPrepareTest" [color="black", fontcolor="black", label=<{PathArgsInPrepareTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>test_kw()<br ALIGN="LEFT"/>test_pos()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.wsgi_test.WSGIApplicationTest.get_app.PathQuotingHandler" [color="black", fontcolor="black", label=<{PathQuotingHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.ioloop.PeriodicCallback" [color="black", fontcolor="black", label=<{PeriodicCallback|callback<br ALIGN="LEFT"/>callback_time<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|is_running()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.PermissionError" [color="black", fontcolor="red", label=<{PermissionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.iostream.PipeIOStream" [color="black", fontcolor="black", label=<{PipeIOStream|fd<br ALIGN="LEFT"/>|close_fd()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>read_from_fd()<br ALIGN="LEFT"/>write_to_fd(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.ioloop.PollIOLoop" [color="black", fontcolor="black", label=<{PollIOLoop|time_func<br ALIGN="LEFT"/>|add_callback(callback)<br ALIGN="LEFT"/>add_callback_from_signal(callback)<br ALIGN="LEFT"/>add_handler(fd, handler, events)<br ALIGN="LEFT"/>call_at(deadline, callback)<br ALIGN="LEFT"/>close(all_fds)<br ALIGN="LEFT"/>initialize(impl, time_func)<br ALIGN="LEFT"/>remove_handler(fd)<br ALIGN="LEFT"/>remove_timeout(timeout)<br ALIGN="LEFT"/>set_blocking_signal_threshold(seconds, action)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>time()<br ALIGN="LEFT"/>update_handler(fd, events)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.PostHandler" [color="black", fontcolor="black", label=<{PostHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.queues.PriorityQueue" [color="black", fontcolor="black", label=<{PriorityQueue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.queues_test.PriorityQueueJoinTest" [color="black", fontcolor="black", label=<{PriorityQueueJoinTest|queue_class<br ALIGN="LEFT"/>|test_order()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.process_test.ProcessTest.get_app.ProcessHandler" [color="black", fontcolor="black", label=<{ProcessHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.process_test.ProcessTest" [color="black", fontcolor="black", label=<{ProcessTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_multi_process()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.queues_test.ProducerConsumerTest" [color="black", fontcolor="black", label=<{ProducerConsumerTest|<br ALIGN="LEFT"/>|test_producer_consumer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.PutHandler" [color="black", fontcolor="black", label=<{PutHandler|<br ALIGN="LEFT"/>|put()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.PythonMaskFunctionTest" [color="black", fontcolor="black", label=<{PythonMaskFunctionTest|<br ALIGN="LEFT"/>|mask(mask, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.queues.Queue" [color="black", fontcolor="black", label=<{Queue|maxsize<br ALIGN="LEFT"/>|empty()<br ALIGN="LEFT"/>full()<br ALIGN="LEFT"/>get(timeout)<br ALIGN="LEFT"/>get_nowait()<br ALIGN="LEFT"/>join(timeout)<br ALIGN="LEFT"/>put(item, timeout)<br ALIGN="LEFT"/>put_nowait(item)<br ALIGN="LEFT"/>qsize()<br ALIGN="LEFT"/>task_done()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.queues_test.QueueBasicTest" [color="black", fontcolor="black", label=<{QueueBasicTest|<br ALIGN="LEFT"/>|test_maxsize()<br ALIGN="LEFT"/>test_order()<br ALIGN="LEFT"/>test_repr_and_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.queues.QueueEmpty" [color="black", fontcolor="red", label=<{QueueEmpty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.queues.QueueFull" [color="black", fontcolor="red", label=<{QueueFull|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.queues_test.QueueGetTest" [color="black", fontcolor="black", label=<{QueueGetTest|<br ALIGN="LEFT"/>|test_blocking_get()<br ALIGN="LEFT"/>test_blocking_get_wait()<br ALIGN="LEFT"/>test_get_clears_timed_out_getters()<br ALIGN="LEFT"/>test_get_clears_timed_out_putters()<br ALIGN="LEFT"/>test_get_timeout()<br ALIGN="LEFT"/>test_get_timeout_preempted()<br ALIGN="LEFT"/>test_get_with_putters()<br ALIGN="LEFT"/>test_nonblocking_get()<br ALIGN="LEFT"/>test_nonblocking_get_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.queues_test.QueueJoinTest" [color="black", fontcolor="black", label=<{QueueJoinTest|accumulator : int<br ALIGN="LEFT"/>queue_class<br ALIGN="LEFT"/>|test_join_empty_queue()<br ALIGN="LEFT"/>test_join_timeout()<br ALIGN="LEFT"/>test_task_done()<br ALIGN="LEFT"/>test_task_done_delay()<br ALIGN="LEFT"/>test_task_done_underflow()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.queues_test.QueuePutTest" [color="black", fontcolor="black", label=<{QueuePutTest|<br ALIGN="LEFT"/>|test_blocking_put()<br ALIGN="LEFT"/>test_blocking_put_wait()<br ALIGN="LEFT"/>test_float_maxsize()<br ALIGN="LEFT"/>test_nonblocking_put_exception()<br ALIGN="LEFT"/>test_nonblocking_put_with_getters()<br ALIGN="LEFT"/>test_put_clears_timed_out_getters()<br ALIGN="LEFT"/>test_put_clears_timed_out_putters()<br ALIGN="LEFT"/>test_put_timeout()<br ALIGN="LEFT"/>test_put_timeout_preempted()<br ALIGN="LEFT"/>test_put_with_getters()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.RaiseExcInfoTest" [color="black", fontcolor="black", label=<{RaiseExcInfoTest|<br ALIGN="LEFT"/>|test_two_arg_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.RaiseWithReasonTest" [color="black", fontcolor="black", label=<{RaiseWithReasonTest|<br ALIGN="LEFT"/>|get_http_client()<br ALIGN="LEFT"/>test_httperror_str()<br ALIGN="LEFT"/>test_raise_with_reason()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorCallFromThreadTest" [color="black", fontcolor="black", label=<{ReactorCallFromThreadTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>testCallFromThread()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorCallInThread" [color="black", fontcolor="black", label=<{ReactorCallInThread|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>testCallInThread()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorCallLaterTest" [color="black", fontcolor="black", label=<{ReactorCallLaterTest|<br ALIGN="LEFT"/>|callLaterCallback()<br ALIGN="LEFT"/>test_callLater()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorReaderWriterTest" [color="black", fontcolor="black", label=<{ReactorReaderWriterTest|shouldWrite : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>testNoWriter()<br ALIGN="LEFT"/>testReadWrite()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorTestCase" [color="black", fontcolor="black", label=<{ReactorTestCase|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorTwoCallLaterTest" [color="black", fontcolor="black", label=<{ReactorTwoCallLaterTest|<br ALIGN="LEFT"/>|callLaterCallback1()<br ALIGN="LEFT"/>callLaterCallback2()<br ALIGN="LEFT"/>test_callLater()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.ReactorWhenRunningTest" [color="black", fontcolor="black", label=<{ReactorWhenRunningTest|<br ALIGN="LEFT"/>|anotherWhenRunningCallback()<br ALIGN="LEFT"/>test_whenRunning()<br ALIGN="LEFT"/>whenRunningCallback()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.Reader" [color="black", fontcolor="black", label=<{Reader|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>connectionLost(reason)<br ALIGN="LEFT"/>doRead()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>logPrefix()<br ALIGN="LEFT"/>readConnectionLost(reason)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.RedirectHandler" [color="black", fontcolor="black", label=<{RedirectHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(url, permanent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.RedirectHandler" [color="black", fontcolor="black", label=<{RedirectHandler|<br ALIGN="LEFT"/>|prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.RedirectHandler" [color="black", fontcolor="black", label=<{RedirectHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.DecoratorTest.get_handlers.RemoveSlashHandler" [color="black", fontcolor="black", label=<{RemoveSlashHandler|<br ALIGN="LEFT"/>|<I>get</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.RequestEncodingTest" [color="black", fontcolor="black", label=<{RequestEncodingTest|<br ALIGN="LEFT"/>|fetch_json(path)<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_error()<br ALIGN="LEFT"/>test_group_encoding()<br ALIGN="LEFT"/>test_group_question_mark()<br ALIGN="LEFT"/>test_slashes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.RequestHandler" [color="black", fontcolor="black", label=<{RequestHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>application<br ALIGN="LEFT"/>cookies<br ALIGN="LEFT"/>current_user<br ALIGN="LEFT"/>locale<br ALIGN="LEFT"/>path_args : NoneType<br ALIGN="LEFT"/>path_kwargs : NoneType, dict<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>settings<br ALIGN="LEFT"/>ui : NoneType<br ALIGN="LEFT"/>xsrf_token<br ALIGN="LEFT"/>|add_header(name, value)<br ALIGN="LEFT"/>check_etag_header()<br ALIGN="LEFT"/>check_xsrf_cookie()<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>clear_all_cookies(path, domain)<br ALIGN="LEFT"/>clear_cookie(name, path, domain)<br ALIGN="LEFT"/>clear_header(name)<br ALIGN="LEFT"/>compute_etag()<br ALIGN="LEFT"/>create_signed_value(name, value, version)<br ALIGN="LEFT"/>create_template_loader(template_path)<br ALIGN="LEFT"/><I>data_received</I>(chunk)<br ALIGN="LEFT"/>decode_argument(value, name)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>finish(chunk)<br ALIGN="LEFT"/>flush(include_footers, callback)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_argument(name, default, strip)<br ALIGN="LEFT"/>get_arguments(name, strip)<br ALIGN="LEFT"/>get_body_argument(name, default, strip)<br ALIGN="LEFT"/>get_body_arguments(name, strip)<br ALIGN="LEFT"/>get_browser_locale(default)<br ALIGN="LEFT"/>get_cookie(name, default)<br ALIGN="LEFT"/>get_current_user()<br ALIGN="LEFT"/>get_login_url()<br ALIGN="LEFT"/>get_query_argument(name, default, strip)<br ALIGN="LEFT"/>get_query_arguments(name, strip)<br ALIGN="LEFT"/>get_secure_cookie(name, value, max_age_days, min_version)<br ALIGN="LEFT"/>get_secure_cookie_key_version(name, value)<br ALIGN="LEFT"/>get_status()<br ALIGN="LEFT"/>get_template_namespace()<br ALIGN="LEFT"/>get_template_path()<br ALIGN="LEFT"/>get_user_locale()<br ALIGN="LEFT"/>head()<br ALIGN="LEFT"/><I>initialize</I>()<br ALIGN="LEFT"/>log_exception(typ, value, tb)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/><I>on_finish</I>()<br ALIGN="LEFT"/>options()<br ALIGN="LEFT"/>patch()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/><I>prepare</I>()<br ALIGN="LEFT"/>put()<br ALIGN="LEFT"/>redirect(url, permanent, status)<br ALIGN="LEFT"/>render(template_name)<br ALIGN="LEFT"/>render_string(template_name)<br ALIGN="LEFT"/>require_setting(name, feature)<br ALIGN="LEFT"/>reverse_url(name)<br ALIGN="LEFT"/>send_error(status_code)<br ALIGN="LEFT"/>set_cookie(name, value, domain, expires, path, expires_days)<br ALIGN="LEFT"/><I>set_default_headers</I>()<br ALIGN="LEFT"/>set_etag_header()<br ALIGN="LEFT"/>set_header(name, value)<br ALIGN="LEFT"/>set_secure_cookie(name, value, expires_days, version)<br ALIGN="LEFT"/>set_status(status_code, reason)<br ALIGN="LEFT"/>static_url(path, include_host)<br ALIGN="LEFT"/>write(chunk)<br ALIGN="LEFT"/>write_error(status_code)<br ALIGN="LEFT"/>xsrf_form_html()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.RequestProxyTest" [color="black", fontcolor="black", label=<{RequestProxyTest|<br ALIGN="LEFT"/>|test_bad_attribute()<br ALIGN="LEFT"/>test_both_set()<br ALIGN="LEFT"/>test_default_set()<br ALIGN="LEFT"/>test_defaults_none()<br ALIGN="LEFT"/>test_neither_set()<br ALIGN="LEFT"/>test_request_set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.RequestSummaryTest" [color="black", fontcolor="black", label=<{RequestSummaryTest|<br ALIGN="LEFT"/>|test_missing_remote_ip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.ResolveTimeoutTestCase" [color="black", fontcolor="black", label=<{ResolveTimeoutTestCase|http_client<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_resolve_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.netutil.Resolver" [color="black", fontcolor="black", label=<{Resolver|<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/>configurable_base()<br ALIGN="LEFT"/>configurable_default()<br ALIGN="LEFT"/><I>resolve</I>(host, port, family, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.RespondInPrepareHandler" [color="black", fontcolor="black", label=<{RespondInPrepareHandler|<br ALIGN="LEFT"/>|prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.Return" [color="black", fontcolor="red", label=<{Return|value : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.concurrent_test.ReturnFutureTest" [color="black", fontcolor="black", label=<{ReturnFutureTest|expected_frame<br ALIGN="LEFT"/>|async_future(callback)<br ALIGN="LEFT"/>delayed_failure(callback)<br ALIGN="LEFT"/>immediate_failure(callback)<br ALIGN="LEFT"/>no_result_future(callback)<br ALIGN="LEFT"/>return_value(callback)<br ALIGN="LEFT"/>sync_future(callback)<br ALIGN="LEFT"/>test_async_future()<br ALIGN="LEFT"/>test_async_future_gen()<br ALIGN="LEFT"/>test_callback_kw()<br ALIGN="LEFT"/>test_callback_positional()<br ALIGN="LEFT"/>test_delayed_failure()<br ALIGN="LEFT"/>test_error_in_callback()<br ALIGN="LEFT"/>test_future_traceback()<br ALIGN="LEFT"/>test_immediate_failure()<br ALIGN="LEFT"/>test_kw_only_callback()<br ALIGN="LEFT"/>test_no_callback()<br ALIGN="LEFT"/>test_no_result_future()<br ALIGN="LEFT"/>test_no_result_future_callback()<br ALIGN="LEFT"/>test_none_callback_kw()<br ALIGN="LEFT"/>test_none_callback_pos()<br ALIGN="LEFT"/>test_return_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.concurrent.ReturnValueIgnoredError" [color="black", fontcolor="red", label=<{ReturnValueIgnoredError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.gen.ReturnValueIgnoredError" [color="black", fontcolor="red", label=<{ReturnValueIgnoredError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.concurrent_test.RunOnExecutorTest" [color="black", fontcolor="black", label=<{RunOnExecutorTest|<br ALIGN="LEFT"/>|test_call_with_both()<br ALIGN="LEFT"/>test_call_with_executor()<br ALIGN="LEFT"/>test_call_with_io_loop()<br ALIGN="LEFT"/>test_call_with_no_args()<br ALIGN="LEFT"/>test_no_calling()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.Runner" [color="black", fontcolor="black", label=<{Runner|finished : bool<br ALIGN="LEFT"/>future : NoneType<br ALIGN="LEFT"/>gen<br ALIGN="LEFT"/>had_exception : bool<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>pending_callbacks : NoneType, set<br ALIGN="LEFT"/>result_future : NoneType<br ALIGN="LEFT"/>results : NoneType, dict<br ALIGN="LEFT"/>running : bool<br ALIGN="LEFT"/>stack_context_deactivate : NoneType<br ALIGN="LEFT"/>yield_point : NoneType<br ALIGN="LEFT"/>|handle_exception(typ, value, tb)<br ALIGN="LEFT"/>handle_yield(yielded)<br ALIGN="LEFT"/>is_ready(key)<br ALIGN="LEFT"/>pop_result(key)<br ALIGN="LEFT"/>register_callback(key)<br ALIGN="LEFT"/>result_callback(key)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>set_result(key, result)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.SSLContextTest" [color="black", fontcolor="black", label=<{SSLContextTest|<br ALIGN="LEFT"/>|get_ssl_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.iostream.SSLIOStream" [color="black", fontcolor="black", label=<{SSLIOStream|max_buffer_size : int<br ALIGN="LEFT"/>read_chunk_size<br ALIGN="LEFT"/>socket<br ALIGN="LEFT"/>|connect(address, callback, server_hostname)<br ALIGN="LEFT"/>read_from_fd()<br ALIGN="LEFT"/>reading()<br ALIGN="LEFT"/>wait_for_handshake(callback)<br ALIGN="LEFT"/>write_to_fd(data)<br ALIGN="LEFT"/>writing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.SSLTestMixin" [color="black", fontcolor="black", label=<{SSLTestMixin|<br ALIGN="LEFT"/>|get_ssl_options()<br ALIGN="LEFT"/><I>get_ssl_version</I>()<br ALIGN="LEFT"/>test_large_post()<br ALIGN="LEFT"/>test_non_ssl_request()<br ALIGN="LEFT"/>test_ssl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.SSLXHeaderTest" [color="black", fontcolor="black", label=<{SSLXHeaderTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>test_request_without_xprotocol()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.SSLv23Test" [color="black", fontcolor="black", label=<{SSLv23Test|<br ALIGN="LEFT"/>|get_ssl_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.SSLv3Test" [color="black", fontcolor="black", label=<{SSLv3Test|<br ALIGN="LEFT"/>|get_ssl_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.SecureCookieV1Test" [color="black", fontcolor="black", label=<{SecureCookieV1Test|<br ALIGN="LEFT"/>|test_arbitrary_bytes()<br ALIGN="LEFT"/>test_cookie_tampering_future_timestamp()<br ALIGN="LEFT"/>test_round_trip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.SecureCookieV2Test" [color="black", fontcolor="black", label=<{SecureCookieV2Test|KEY_VERSIONS : dict<br ALIGN="LEFT"/>|test_key_version_increment_version()<br ALIGN="LEFT"/>test_key_version_invalidate_version()<br ALIGN="LEFT"/>test_key_version_roundtrip()<br ALIGN="LEFT"/>test_key_version_roundtrip_differing_version()<br ALIGN="LEFT"/>test_round_trip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.SeeOtherGetHandler" [color="black", fontcolor="black", label=<{SeeOtherGetHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.SeeOtherPostHandler" [color="black", fontcolor="black", label=<{SeeOtherPostHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.select.SelectIOLoop" [color="black", fontcolor="black", label=<{SelectIOLoop|<br ALIGN="LEFT"/>|initialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.locks.Semaphore" [color="black", fontcolor="black", label=<{Semaphore|<br ALIGN="LEFT"/>|acquire(timeout)<br ALIGN="LEFT"/>release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locks_test.SemaphoreContextManagerTest" [color="black", fontcolor="black", label=<{SemaphoreContextManagerTest|<br ALIGN="LEFT"/>|test_context_manager()<br ALIGN="LEFT"/>test_context_manager_contended()<br ALIGN="LEFT"/>test_context_manager_exception()<br ALIGN="LEFT"/>test_context_manager_misuse()<br ALIGN="LEFT"/>test_context_manager_timeout()<br ALIGN="LEFT"/>test_context_manager_timeout_error()<br ALIGN="LEFT"/>test_yield_sem()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locks_test.SemaphoreTest" [color="black", fontcolor="black", label=<{SemaphoreTest|<br ALIGN="LEFT"/>|test_acquire()<br ALIGN="LEFT"/>test_acquire_timeout()<br ALIGN="LEFT"/>test_acquire_timeout_preempted()<br ALIGN="LEFT"/>test_garbage_collection()<br ALIGN="LEFT"/>test_negative_value()<br ALIGN="LEFT"/>test_release_unacquired()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.ServerOnlyCompressionTest" [color="black", fontcolor="black", label=<{ServerOnlyCompressionTest|<br ALIGN="LEFT"/>|get_server_compression_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieDomainHandler" [color="black", fontcolor="black", label=<{SetCookieDomainHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieExpiresDaysHandler" [color="black", fontcolor="black", label=<{SetCookieExpiresDaysHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieFalsyFlags" [color="black", fontcolor="black", label=<{SetCookieFalsyFlags|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieHandler" [color="black", fontcolor="black", label=<{SetCookieHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieMaxAgeHandler" [color="black", fontcolor="black", label=<{SetCookieMaxAgeHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieOverwriteHandler" [color="black", fontcolor="black", label=<{SetCookieOverwriteHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieSpecialCharHandler" [color="black", fontcolor="black", label=<{SetCookieSpecialCharHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.SetLazyPropertiesTest" [color="black", fontcolor="black", label=<{SetLazyPropertiesTest|<br ALIGN="LEFT"/>|test_set_properties()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down.SetUpTearDown" [color="black", fontcolor="black", label=<{SetUpTearDown|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.SetUpTearDownTest" [color="black", fontcolor="black", label=<{SetUpTearDownTest|<br ALIGN="LEFT"/>|test_set_up_tear_down()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.SignedValueTest" [color="black", fontcolor="black", label=<{SignedValueTest|SECRET : str<br ALIGN="LEFT"/>SECRET_DICT : dict<br ALIGN="LEFT"/>|past()<br ALIGN="LEFT"/>present()<br ALIGN="LEFT"/>test_expired()<br ALIGN="LEFT"/>test_key_version_retrieval()<br ALIGN="LEFT"/>test_key_versioning_invalid_key()<br ALIGN="LEFT"/>test_key_versioning_read_write_default_key()<br ALIGN="LEFT"/>test_key_versioning_read_write_non_default_key()<br ALIGN="LEFT"/>test_known_values()<br ALIGN="LEFT"/>test_name_swap()<br ALIGN="LEFT"/>test_non_ascii()<br ALIGN="LEFT"/>test_payload_tampering()<br ALIGN="LEFT"/>test_signature_tampering()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.simple_httpclient.SimpleAsyncHTTPClient" [color="black", fontcolor="black", label=<{SimpleAsyncHTTPClient|active : dict<br ALIGN="LEFT"/>max_body_size : NoneType<br ALIGN="LEFT"/>max_buffer_size : int<br ALIGN="LEFT"/>max_clients : int<br ALIGN="LEFT"/>max_header_size : NoneType<br ALIGN="LEFT"/>own_resolver : bool<br ALIGN="LEFT"/>queue : deque<br ALIGN="LEFT"/>resolver : NoneType<br ALIGN="LEFT"/>tcp_client<br ALIGN="LEFT"/>waiting : dict<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fetch_impl(request, callback)<br ALIGN="LEFT"/>initialize(io_loop, max_clients, hostname_mapping, max_buffer_size, resolver, defaults, max_header_size, max_body_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase" [color="black", fontcolor="black", label=<{SimpleHTTPClientCommonTestCase|<br ALIGN="LEFT"/>|get_http_client()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase" [color="black", fontcolor="black", label=<{SimpleHTTPClientTestCase|http_client<br ALIGN="LEFT"/>|create_client()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin" [color="black", fontcolor="black", label=<{SimpleHTTPClientTestMixin|triggers : deque<br ALIGN="LEFT"/>|async_body_producer(write)<br ALIGN="LEFT"/>get_app()<br ALIGN="LEFT"/>sync_body_producer(write)<br ALIGN="LEFT"/>test_100_continue()<br ALIGN="LEFT"/>test_100_continue_early_response()<br ALIGN="LEFT"/>test_async_body_producer_chunked()<br ALIGN="LEFT"/>test_async_body_producer_content_length()<br ALIGN="LEFT"/>test_connection_limit()<br ALIGN="LEFT"/>test_connection_refused()<br ALIGN="LEFT"/>test_gzip()<br ALIGN="LEFT"/>test_head_request()<br ALIGN="LEFT"/>test_header_reuse()<br ALIGN="LEFT"/>test_host_header()<br ALIGN="LEFT"/>test_ipv6()<br ALIGN="LEFT"/>test_max_redirects()<br ALIGN="LEFT"/>test_no_content()<br ALIGN="LEFT"/>test_no_content_length()<br ALIGN="LEFT"/>test_options_request()<br ALIGN="LEFT"/>test_queue_timeout()<br ALIGN="LEFT"/>test_redirect_connection_limit()<br ALIGN="LEFT"/>test_request_timeout()<br ALIGN="LEFT"/>test_see_other_redirect()<br ALIGN="LEFT"/>test_singleton()<br ALIGN="LEFT"/>test_sync_body_producer_chunked()<br ALIGN="LEFT"/>test_sync_body_producer_content_length()<br ALIGN="LEFT"/>xtest_multiple_content_length_accepted()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase" [color="black", fontcolor="black", label=<{SimpleHTTPSClientTestCase|http_client<br ALIGN="LEFT"/>|create_client()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_ssl_context()<br ALIGN="LEFT"/>test_ssl_context_handshake_fail()<br ALIGN="LEFT"/>test_ssl_options()<br ALIGN="LEFT"/>test_ssl_options_handshake_fail()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.SimpleHandlerTestCase" [color="black", fontcolor="black", label=<{SimpleHandlerTestCase|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxBodySizeTest.get_app.SmallBody" [color="black", fontcolor="black", label=<{SmallBody|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.MaxHeaderSizeTest.get_app.SmallHeaders" [color="black", fontcolor="black", label=<{SmallHeaders|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoop.test_close_file_object.SocketWrapper" [color="black", fontcolor="black", label=<{SocketWrapper|closed : bool<br ALIGN="LEFT"/>sockobj<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.stack_context.StackContext" [color="black", fontcolor="black", label=<{StackContext|active : bool<br ALIGN="LEFT"/>context_factory<br ALIGN="LEFT"/>contexts : list<br ALIGN="LEFT"/>new_contexts : NoneType, tuple<br ALIGN="LEFT"/>old_contexts : tuple<br ALIGN="LEFT"/>|enter()<br ALIGN="LEFT"/>exit(type, value, traceback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.stack_context.StackContextInconsistentError" [color="black", fontcolor="red", label=<{StackContextInconsistentError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.stack_context_test.StackContextTest" [color="black", fontcolor="black", label=<{StackContextTest|active_contexts : list<br ALIGN="LEFT"/>callback<br ALIGN="LEFT"/>|context(name)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_deactivate()<br ALIGN="LEFT"/>test_deactivate_order()<br ALIGN="LEFT"/>test_exit_library_context()<br ALIGN="LEFT"/>test_isolation_empty()<br ALIGN="LEFT"/>test_isolation_nonempty()<br ALIGN="LEFT"/>test_run_with_stack_context()<br ALIGN="LEFT"/>test_yield_in_with()<br ALIGN="LEFT"/>test_yield_in_with_exception_stack_context()<br ALIGN="LEFT"/>test_yield_outside_with()<br ALIGN="LEFT"/>test_yield_outside_with_exception_stack_context()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.template_test.StackTraceTest" [color="black", fontcolor="black", label=<{StackTraceTest|<br ALIGN="LEFT"/>|test_error_line_number_directive()<br ALIGN="LEFT"/>test_error_line_number_expression()<br ALIGN="LEFT"/>test_error_line_number_extends_base_error()<br ALIGN="LEFT"/>test_error_line_number_extends_sub_error()<br ALIGN="LEFT"/>test_error_line_number_include()<br ALIGN="LEFT"/>test_error_line_number_module()<br ALIGN="LEFT"/>test_multi_includes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StaticDefaultFilenameTest" [color="black", fontcolor="black", label=<{StaticDefaultFilenameTest|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_static_default_filename()<br ALIGN="LEFT"/>test_static_default_redirect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.StaticFileHandler" [color="black", fontcolor="black", label=<{StaticFileHandler|CACHE_MAX_AGE : int<br ALIGN="LEFT"/>absolute_path : NoneType<br ALIGN="LEFT"/>default_filename : NoneType<br ALIGN="LEFT"/>modified : datetime<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|compute_etag()<br ALIGN="LEFT"/>get(path, include_body)<br ALIGN="LEFT"/>get_absolute_path(root, path)<br ALIGN="LEFT"/>get_cache_time(path, modified, mime_type)<br ALIGN="LEFT"/>get_content(abspath, start, end)<br ALIGN="LEFT"/>get_content_size()<br ALIGN="LEFT"/>get_content_type()<br ALIGN="LEFT"/>get_content_version(abspath)<br ALIGN="LEFT"/>get_modified_time()<br ALIGN="LEFT"/>get_version(settings, path)<br ALIGN="LEFT"/>head(path)<br ALIGN="LEFT"/>initialize(path, default_filename)<br ALIGN="LEFT"/>make_static_url(settings, path, include_version)<br ALIGN="LEFT"/>parse_url_path(url_path)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/><I>set_extra_headers</I>(path)<br ALIGN="LEFT"/>set_headers()<br ALIGN="LEFT"/>should_return_304()<br ALIGN="LEFT"/>validate_absolute_path(root, absolute_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StaticFileTest" [color="black", fontcolor="black", label=<{StaticFileTest|robots_txt_hash : bytes<br ALIGN="LEFT"/>static_dir<br ALIGN="LEFT"/>|get_and_head()<br ALIGN="LEFT"/>get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_absolute_static_url()<br ALIGN="LEFT"/>test_absolute_version_exclusion()<br ALIGN="LEFT"/>test_include_host_override()<br ALIGN="LEFT"/>test_relative_version_exclusion()<br ALIGN="LEFT"/>test_static_304_if_modified_since()<br ALIGN="LEFT"/>test_static_304_if_none_match()<br ALIGN="LEFT"/>test_static_404()<br ALIGN="LEFT"/>test_static_etag()<br ALIGN="LEFT"/>test_static_files()<br ALIGN="LEFT"/>test_static_head()<br ALIGN="LEFT"/>test_static_head_range()<br ALIGN="LEFT"/>test_static_if_modified_since_pre_epoch()<br ALIGN="LEFT"/>test_static_if_modified_since_time_zone()<br ALIGN="LEFT"/>test_static_invalid_range()<br ALIGN="LEFT"/>test_static_range_if_none_match()<br ALIGN="LEFT"/>test_static_unsatisfiable_range_invalid_start()<br ALIGN="LEFT"/>test_static_unsatisfiable_range_zero_suffix()<br ALIGN="LEFT"/>test_static_url()<br ALIGN="LEFT"/>test_static_with_range()<br ALIGN="LEFT"/>test_static_with_range_end_edge()<br ALIGN="LEFT"/>test_static_with_range_full_file()<br ALIGN="LEFT"/>test_static_with_range_full_past_end()<br ALIGN="LEFT"/>test_static_with_range_neg_end()<br ALIGN="LEFT"/>test_static_with_range_partial_past_end()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StaticFileWithPathTest" [color="black", fontcolor="black", label=<{StaticFileWithPathTest|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_serve()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StaticFileTest.get_handlers.StaticUrlHandler" [color="black", fontcolor="black", label=<{StaticUrlHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.CustomStaticFileTest.get_handlers.StaticUrlHandler" [color="black", fontcolor="black", label=<{StaticUrlHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StatusReasonTest" [color="black", fontcolor="black", label=<{StatusReasonTest|<br ALIGN="LEFT"/>|get_http_client()<br ALIGN="LEFT"/>test_status()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.iostream.StreamBufferFullError" [color="black", fontcolor="red", label=<{StreamBufferFullError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.iostream.StreamClosedError" [color="black", fontcolor="red", label=<{StreamClosedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.StreamingRequestBodyTest.get_handlers.StreamingBodyHandler" [color="black", fontcolor="black", label=<{StreamingBodyHandler|test<br ALIGN="LEFT"/>|data_received(data)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>initialize(test)<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.StreamingChunkSizeTest" [color="black", fontcolor="black", label=<{StreamingChunkSizeTest|BODY : bytes<br ALIGN="LEFT"/>CHUNK_SIZE : int<br ALIGN="LEFT"/>|compress(body)<br ALIGN="LEFT"/>fetch_chunk_sizes()<br ALIGN="LEFT"/>get_app()<br ALIGN="LEFT"/>get_http_client()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>test_chunked_body()<br ALIGN="LEFT"/>test_chunked_compressed()<br ALIGN="LEFT"/>test_compressed_body()<br ALIGN="LEFT"/>test_regular_body()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.BodyLimitsTest.get_app.StreamingHandler" [color="black", fontcolor="black", label=<{StreamingHandler|bytes_read : int<br ALIGN="LEFT"/>|data_received(data)<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>put()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StreamingRequestBodyTest" [color="black", fontcolor="black", label=<{StreamingRequestBodyTest|close_future<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>finished<br ALIGN="LEFT"/>prepared<br ALIGN="LEFT"/>|connect(url, connection_close)<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>test_close_during_upload()<br ALIGN="LEFT"/>test_early_return()<br ALIGN="LEFT"/>test_early_return_with_data()<br ALIGN="LEFT"/>test_streaming_body()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.StreamingRequestFlowControlTest" [color="black", fontcolor="black", label=<{StreamingRequestFlowControlTest|<br ALIGN="LEFT"/>|get_handlers()<br ALIGN="LEFT"/>get_httpserver_options()<br ALIGN="LEFT"/>test_flow_control()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.process.Subprocess" [color="black", fontcolor="black", label=<{Subprocess|STREAM : object<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>proc : Popen<br ALIGN="LEFT"/>returncode : NoneType<br ALIGN="LEFT"/>stderr<br ALIGN="LEFT"/>stdin<br ALIGN="LEFT"/>stdout<br ALIGN="LEFT"/>|initialize(io_loop)<br ALIGN="LEFT"/>set_exit_callback(callback)<br ALIGN="LEFT"/>uninitialize()<br ALIGN="LEFT"/>wait_for_exit(raise_error)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.process_test.SubprocessTest" [color="black", fontcolor="black", label=<{SubprocessTest|<br ALIGN="LEFT"/>|test_close_stdin()<br ALIGN="LEFT"/>test_sigchild()<br ALIGN="LEFT"/>test_sigchild_future()<br ALIGN="LEFT"/>test_sigchild_signal()<br ALIGN="LEFT"/>test_stderr()<br ALIGN="LEFT"/>test_subprocess()<br ALIGN="LEFT"/>test_wait_for_exit_raise()<br ALIGN="LEFT"/>test_wait_for_exit_raise_disabled()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpclient_test.SyncHTTPClientTest" [color="black", fontcolor="black", label=<{SyncHTTPClientTest|http_client<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>server_ioloop<br ALIGN="LEFT"/>server_thread : Thread<br ALIGN="LEFT"/>|get_url(path)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_sync_client()<br ALIGN="LEFT"/>test_sync_client_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.tcpclient.TCPClient" [color="black", fontcolor="black", label=<{TCPClient|io_loop<br ALIGN="LEFT"/>resolver<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>connect(host, port, af, ssl_options, max_buffer_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpclient_test.TCPClientTest" [color="black", fontcolor="black", label=<{TCPClientTest|client<br ALIGN="LEFT"/>server : NoneType<br ALIGN="LEFT"/>|do_test_connect(family, host)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>skipIfLocalhostV4()<br ALIGN="LEFT"/>start_server(family)<br ALIGN="LEFT"/>stop_server()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_connect_ipv4_dual()<br ALIGN="LEFT"/>test_connect_ipv4_ipv4()<br ALIGN="LEFT"/>test_connect_ipv6_dual()<br ALIGN="LEFT"/>test_connect_ipv6_ipv6()<br ALIGN="LEFT"/>test_connect_unspec_dual()<br ALIGN="LEFT"/>test_connect_unspec_ipv4()<br ALIGN="LEFT"/>test_connect_unspec_ipv6()<br ALIGN="LEFT"/>test_refused_ipv4()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.tcpserver.TCPServer" [color="black", fontcolor="black", label=<{TCPServer|io_loop : NoneType<br ALIGN="LEFT"/>max_buffer_size : NoneType<br ALIGN="LEFT"/>read_chunk_size : NoneType<br ALIGN="LEFT"/>ssl_options : NoneType<br ALIGN="LEFT"/>|add_socket(socket)<br ALIGN="LEFT"/>add_sockets(sockets)<br ALIGN="LEFT"/>bind(port, address, family, backlog)<br ALIGN="LEFT"/><I>handle_stream</I>(stream, address)<br ALIGN="LEFT"/>listen(port, address)<br ALIGN="LEFT"/>start(num_processes)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpserver_test.TCPServerTest" [color="black", fontcolor="black", label=<{TCPServerTest|<br ALIGN="LEFT"/>|test_handle_stream_coroutine_logging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.TLSv1Test" [color="black", fontcolor="black", label=<{TLSv1Test|<br ALIGN="LEFT"/>|get_ssl_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template.Template" [color="black", fontcolor="black", label=<{Template|autoescape : object, str<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>compiled<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>loader : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>namespace : dict<br ALIGN="LEFT"/>|generate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.template_test.TemplateLoaderTest" [color="black", fontcolor="black", label=<{TemplateLoaderTest|loader<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_utf8_in_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.TemplateModule" [color="black", fontcolor="black", label=<{TemplateModule|<br ALIGN="LEFT"/>|css_files()<br ALIGN="LEFT"/>embedded_css()<br ALIGN="LEFT"/>embedded_javascript()<br ALIGN="LEFT"/>html_body()<br ALIGN="LEFT"/>html_head()<br ALIGN="LEFT"/>javascript_files()<br ALIGN="LEFT"/>render(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.template_test.TemplateTest" [color="black", fontcolor="black", label=<{TemplateTest|<br ALIGN="LEFT"/>|test_apply()<br ALIGN="LEFT"/>test_break_continue()<br ALIGN="LEFT"/>test_break_in_apply()<br ALIGN="LEFT"/>test_break_outside_loop()<br ALIGN="LEFT"/>test_bytes()<br ALIGN="LEFT"/>test_bytes_apply()<br ALIGN="LEFT"/>test_comment()<br ALIGN="LEFT"/>test_comment_directive()<br ALIGN="LEFT"/>test_custom_namespace()<br ALIGN="LEFT"/>test_escaping()<br ALIGN="LEFT"/>test_expressions()<br ALIGN="LEFT"/>test_extends()<br ALIGN="LEFT"/>test_if()<br ALIGN="LEFT"/>test_if_empty_body()<br ALIGN="LEFT"/>test_include()<br ALIGN="LEFT"/>test_no_inherit_future()<br ALIGN="LEFT"/>test_relative_load()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_try()<br ALIGN="LEFT"/>test_unicode_apply()<br ALIGN="LEFT"/>test_unicode_literal_expression()<br ALIGN="LEFT"/>test_unicode_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_generator.Test" [color="black", fontcolor="black", label=<{Test|<br ALIGN="LEFT"/>|test_gen()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_generator_with_skip.Test" [color="black", fontcolor="black", label=<{Test|<br ALIGN="LEFT"/>|test_gen()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest.test_other_return.Test" [color="black", fontcolor="black", label=<{Test|<br ALIGN="LEFT"/>|test_other_return()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.TestConfig1" [color="black", fontcolor="black", label=<{TestConfig1|a : NoneType<br ALIGN="LEFT"/>pos_arg : NoneType<br ALIGN="LEFT"/>|initialize(pos_arg, a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.TestConfig2" [color="black", fontcolor="black", label=<{TestConfig2|b : NoneType<br ALIGN="LEFT"/>pos_arg : NoneType<br ALIGN="LEFT"/>|initialize(pos_arg, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.TestConfigurable" [color="black", fontcolor="black", label=<{TestConfigurable|<br ALIGN="LEFT"/>|configurable_base()<br ALIGN="LEFT"/>configurable_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpclient_test.TestConnectorSplit" [color="black", fontcolor="black", label=<{TestConnectorSplit|<br ALIGN="LEFT"/>|test_mixed()<br ALIGN="LEFT"/>test_one_family()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoop" [color="black", fontcolor="black", label=<{TestIOLoop|called : bool<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>stop_time<br ALIGN="LEFT"/>|test_add_callback_from_signal()<br ALIGN="LEFT"/>test_add_callback_from_signal_other_thread()<br ALIGN="LEFT"/>test_add_callback_wakeup()<br ALIGN="LEFT"/>test_add_callback_wakeup_other_thread()<br ALIGN="LEFT"/>test_add_callback_while_closing()<br ALIGN="LEFT"/>test_add_timeout_return()<br ALIGN="LEFT"/>test_add_timeout_timedelta()<br ALIGN="LEFT"/>test_call_at_return()<br ALIGN="LEFT"/>test_call_later_return()<br ALIGN="LEFT"/>test_close_file_object()<br ALIGN="LEFT"/>test_exception_logging()<br ALIGN="LEFT"/>test_exception_logging_future()<br ALIGN="LEFT"/>test_handle_callback_exception()<br ALIGN="LEFT"/>test_handler_callback_file_object()<br ALIGN="LEFT"/>test_mixed_fd_fileobj()<br ALIGN="LEFT"/>test_multiple_add()<br ALIGN="LEFT"/>test_read_while_writeable()<br ALIGN="LEFT"/>test_reentrant()<br ALIGN="LEFT"/>test_remove_handler_from_handler()<br ALIGN="LEFT"/>test_remove_timeout_after_fire()<br ALIGN="LEFT"/>test_remove_timeout_cleanup()<br ALIGN="LEFT"/>test_remove_timeout_from_timeout()<br ALIGN="LEFT"/>test_remove_without_add()<br ALIGN="LEFT"/>test_spawn_callback()<br ALIGN="LEFT"/>test_timeout_with_arguments()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoopAddCallback" [color="black", fontcolor="black", label=<{TestIOLoopAddCallback|active_contexts : list<br ALIGN="LEFT"/>|add_callback(callback)<br ALIGN="LEFT"/>context(name)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_pre_wrap()<br ALIGN="LEFT"/>test_pre_wrap_with_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoopAddCallbackFromSignal" [color="black", fontcolor="black", label=<{TestIOLoopAddCallbackFromSignal|<br ALIGN="LEFT"/>|add_callback(callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoopCurrent" [color="black", fontcolor="black", label=<{TestIOLoopCurrent|current_io_loop<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_current()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoopFutures" [color="black", fontcolor="black", label=<{TestIOLoopFutures|exception<br ALIGN="LEFT"/>future<br ALIGN="LEFT"/>|test_add_future_stack_context()<br ALIGN="LEFT"/>test_add_future_threads()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestIOLoopRunSync" [color="black", fontcolor="black", label=<{TestIOLoopRunSync|io_loop<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_async_exception()<br ALIGN="LEFT"/>test_async_result()<br ALIGN="LEFT"/>test_current()<br ALIGN="LEFT"/>test_sync_exception()<br ALIGN="LEFT"/>test_sync_result()<br ALIGN="LEFT"/>test_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStream" [color="black", fontcolor="black", label=<{TestIOStream|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamMixin" [color="black", fontcolor="black", label=<{TestIOStreamMixin|connect_called : bool<br ALIGN="LEFT"/>|make_iostream_pair()<br ALIGN="LEFT"/>test_async_read_error_logging()<br ALIGN="LEFT"/>test_close_buffered_data()<br ALIGN="LEFT"/>test_close_callback_with_pending_read()<br ALIGN="LEFT"/>test_connection_refused()<br ALIGN="LEFT"/>test_delayed_close_callback()<br ALIGN="LEFT"/>test_flow_control()<br ALIGN="LEFT"/>test_future_close_callback()<br ALIGN="LEFT"/>test_future_delayed_close_callback()<br ALIGN="LEFT"/>test_gaierror()<br ALIGN="LEFT"/>test_inline_read_error()<br ALIGN="LEFT"/>test_large_read_until()<br ALIGN="LEFT"/>test_read_bytes_partial()<br ALIGN="LEFT"/>test_read_callback_error()<br ALIGN="LEFT"/>test_read_until_close_after_close()<br ALIGN="LEFT"/>test_read_until_max_bytes()<br ALIGN="LEFT"/>test_read_until_max_bytes_ignores_extra()<br ALIGN="LEFT"/>test_read_until_max_bytes_inline()<br ALIGN="LEFT"/>test_read_until_regex_max_bytes()<br ALIGN="LEFT"/>test_read_until_regex_max_bytes_ignores_extra()<br ALIGN="LEFT"/>test_read_until_regex_max_bytes_inline()<br ALIGN="LEFT"/>test_small_read_untils_from_large_buffer()<br ALIGN="LEFT"/>test_small_reads_from_large_buffer()<br ALIGN="LEFT"/>test_streaming_callback()<br ALIGN="LEFT"/>test_streaming_callback_with_data_in_buffer()<br ALIGN="LEFT"/>test_streaming_read_until_close_after_close()<br ALIGN="LEFT"/>test_streaming_until_close()<br ALIGN="LEFT"/>test_streaming_until_close_future()<br ALIGN="LEFT"/>test_write_zero_bytes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamSSL" [color="black", fontcolor="black", label=<{TestIOStreamSSL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamSSLContext" [color="black", fontcolor="black", label=<{TestIOStreamSSLContext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamStartTLS" [color="black", fontcolor="black", label=<{TestIOStreamStartTLS|client_stream : NoneType<br ALIGN="LEFT"/>listener<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>server_accepted<br ALIGN="LEFT"/>server_stream : NoneType<br ALIGN="LEFT"/>|accept(connection, address)<br ALIGN="LEFT"/>client_send_line(line)<br ALIGN="LEFT"/>client_start_tls(ssl_options, server_hostname)<br ALIGN="LEFT"/>server_send_line(line)<br ALIGN="LEFT"/>server_start_tls(ssl_options)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_check_hostname()<br ALIGN="LEFT"/>test_handshake_fail()<br ALIGN="LEFT"/>test_start_tls_smtp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamWebHTTP" [color="black", fontcolor="black", label=<{TestIOStreamWebHTTP|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamWebHTTPS" [color="black", fontcolor="black", label=<{TestIOStreamWebHTTPS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestIOStreamWebMixin" [color="black", fontcolor="black", label=<{TestIOStreamWebMixin|stream<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_connection_closed()<br ALIGN="LEFT"/>test_future_close_while_reading()<br ALIGN="LEFT"/>test_future_interface()<br ALIGN="LEFT"/>test_future_read_until_close()<br ALIGN="LEFT"/>test_read_until_close()<br ALIGN="LEFT"/>test_read_zero_bytes()<br ALIGN="LEFT"/>test_write_while_connecting()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.ioloop_test.TestPeriodicCallback" [color="black", fontcolor="black", label=<{TestPeriodicCallback|io_loop<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_basic()<br ALIGN="LEFT"/>test_overrun()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.TestPipeIOStream" [color="black", fontcolor="black", label=<{TestPipeIOStream|<br ALIGN="LEFT"/>|test_pipe_iostream()<br ALIGN="LEFT"/>test_pipe_iostream_big_write()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.TestPortAllocation" [color="black", fontcolor="black", label=<{TestPortAllocation|<br ALIGN="LEFT"/>|test_same_port_allocation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.stack_context_test.TestRequestHandler" [color="black", fontcolor="black", label=<{TestRequestHandler|io_loop<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>part2()<br ALIGN="LEFT"/>part3()<br ALIGN="LEFT"/>write_error(status_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_callback.TestServer" [color="black", fontcolor="black", label=<{TestServer|stream<br ALIGN="LEFT"/>|handle_stream(stream, address)<br ALIGN="LEFT"/>handshake_done()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_future.TestServer" [color="black", fontcolor="black", label=<{TestServer|<br ALIGN="LEFT"/>|handle_connection(stream)<br ALIGN="LEFT"/>handle_stream(stream, address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_already_waiting_error.TestServer" [color="black", fontcolor="black", label=<{TestServer|<br ALIGN="LEFT"/>|handle_stream(stream, address)<br ALIGN="LEFT"/>handshake_done()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_already_connected.TestServer" [color="black", fontcolor="black", label=<{TestServer|stream<br ALIGN="LEFT"/>|handle_stream(stream, address)<br ALIGN="LEFT"/>handshake2_done()<br ALIGN="LEFT"/>handshake_done()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpserver_test.TCPServerTest.test_handle_stream_coroutine_logging.TestServer" [color="black", fontcolor="black", label=<{TestServer|<br ALIGN="LEFT"/>|handle_stream(stream, address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.tcpclient_test.TestTCPServer" [color="black", fontcolor="black", label=<{TestTCPServer|port<br ALIGN="LEFT"/>streams : list<br ALIGN="LEFT"/>|handle_stream(stream, address)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httputil_test.TestUrlConcat" [color="black", fontcolor="black", label=<{TestUrlConcat|<br ALIGN="LEFT"/>|test_url_concat_encode_args()<br ALIGN="LEFT"/>test_url_concat_mult_params()<br ALIGN="LEFT"/>test_url_concat_no_params()<br ALIGN="LEFT"/>test_url_concat_no_query_params()<br ALIGN="LEFT"/>test_url_concat_q_with_no_trailing_amp()<br ALIGN="LEFT"/>test_url_concat_trailing_amp()<br ALIGN="LEFT"/>test_url_concat_trailing_q()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.TestWebSocketHandler" [color="black", fontcolor="black", label=<{TestWebSocketHandler|close_future<br ALIGN="LEFT"/>compression_options : NoneType<br ALIGN="LEFT"/>|get_compression_options()<br ALIGN="LEFT"/>initialize(close_future, compression_options)<br ALIGN="LEFT"/>on_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.netutil.ThreadedResolver" [color="black", fontcolor="black", label=<{ThreadedResolver|<br ALIGN="LEFT"/>|initialize(io_loop, num_threads)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.ThreadedResolverErrorTest" [color="black", fontcolor="black", label=<{ThreadedResolverErrorTest|real_getaddrinfo<br ALIGN="LEFT"/>resolver<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.ThreadedResolverImportTest" [color="black", fontcolor="black", label=<{ThreadedResolverImportTest|<br ALIGN="LEFT"/>|test_import()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.ThreadedResolverTest" [color="black", fontcolor="black", label=<{ThreadedResolverTest|resolver<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.TimedeltaToSecondsTest" [color="black", fontcolor="black", label=<{TimedeltaToSecondsTest|<br ALIGN="LEFT"/>|test_timedelta_to_seconds()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.TimeoutError" [color="black", fontcolor="red", label=<{TimeoutError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.ioloop.TimeoutError" [color="black", fontcolor="red", label=<{TimeoutError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.web_test.IncorrectContentLengthTest.get_handlers.TooHigh" [color="black", fontcolor="black", label=<{TooHigh|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.IncorrectContentLengthTest.get_handlers.TooLow" [color="black", fontcolor="black", label=<{TooLow|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.twisted.TornadoDelayedCall" [color="black", fontcolor="black", label=<{TornadoDelayedCall|<br ALIGN="LEFT"/>|active()<br ALIGN="LEFT"/>cancel()<br ALIGN="LEFT"/>delay(seconds)<br ALIGN="LEFT"/>getTime()<br ALIGN="LEFT"/>reset(seconds)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.twisted.TornadoReactor" [color="black", fontcolor="black", label=<{TornadoReactor|<br ALIGN="LEFT"/>|addReader(reader)<br ALIGN="LEFT"/>addWriter(writer)<br ALIGN="LEFT"/>callFromThread(f)<br ALIGN="LEFT"/>callLater(seconds, f)<br ALIGN="LEFT"/>crash()<br ALIGN="LEFT"/><I>doIteration</I>(delay)<br ALIGN="LEFT"/>getDelayedCalls()<br ALIGN="LEFT"/>getReaders()<br ALIGN="LEFT"/>getWriters()<br ALIGN="LEFT"/><I>installWaker</I>()<br ALIGN="LEFT"/>mainLoop()<br ALIGN="LEFT"/>removeAll()<br ALIGN="LEFT"/>removeReader(reader)<br ALIGN="LEFT"/>removeWriter(writer)<br ALIGN="LEFT"/>seconds()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/><I>wakeUp</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.make_test_subclass.TornadoTest" [color="black", fontcolor="black", label=<{TornadoTest|<br ALIGN="LEFT"/>|buildReactor()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>unbuildReactor(reactor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.runtests.TornadoTextTestRunner" [color="black", fontcolor="black", label=<{TornadoTextTestRunner|<br ALIGN="LEFT"/>|run(test)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.locale_test.TranslationLoaderTest" [color="black", fontcolor="black", label=<{TranslationLoaderTest|SAVE_VARS : list<br ALIGN="LEFT"/>saved : dict<br ALIGN="LEFT"/>|clear_locale_cache()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_csv()<br ALIGN="LEFT"/>test_gettext()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.simple_httpclient_test.TriggerHandler" [color="black", fontcolor="black", label=<{TriggerHandler|queue<br ALIGN="LEFT"/>wake_callback<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize(queue, wake_callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.twisted.TwistedIOLoop" [color="black", fontcolor="black", label=<{TwistedIOLoop|fds : dict<br ALIGN="LEFT"/>reactor : NoneType<br ALIGN="LEFT"/>|add_callback(callback)<br ALIGN="LEFT"/>add_callback_from_signal(callback)<br ALIGN="LEFT"/>add_handler(fd, handler, events)<br ALIGN="LEFT"/>add_timeout(deadline, callback)<br ALIGN="LEFT"/>close(all_fds)<br ALIGN="LEFT"/>initialize(reactor)<br ALIGN="LEFT"/>remove_handler(fd)<br ALIGN="LEFT"/>remove_timeout(timeout)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>update_handler(fd, events)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.twisted.TwistedResolver" [color="black", fontcolor="black", label=<{TwistedResolver|io_loop<br ALIGN="LEFT"/>reactor<br ALIGN="LEFT"/>resolver<br ALIGN="LEFT"/>|initialize(io_loop)<br ALIGN="LEFT"/>resolve(host, port, family)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test.TwistedResolverTest" [color="black", fontcolor="black", label=<{TwistedResolverTest|resolver<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterClientHandler" [color="black", fontcolor="black", label=<{TwitterClientHandler|<br ALIGN="LEFT"/>|get_auth_http_client()<br ALIGN="LEFT"/>initialize(test)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler" [color="black", fontcolor="black", label=<{TwitterClientLoginGenCoroutineHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterClientLoginGenEngineHandler" [color="black", fontcolor="black", label=<{TwitterClientLoginGenEngineHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterClientLoginHandler" [color="black", fontcolor="black", label=<{TwitterClientLoginHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>on_user(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterClientShowUserFutureHandler" [color="black", fontcolor="black", label=<{TwitterClientShowUserFutureHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterClientShowUserHandler" [color="black", fontcolor="black", label=<{TwitterClientShowUserHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.TwitterMixin" [color="black", fontcolor="black", label=<{TwitterMixin|<br ALIGN="LEFT"/>|authenticate_redirect(callback_uri, callback)<br ALIGN="LEFT"/>twitter_request(path, callback, access_token, post_args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterServerAccessTokenHandler" [color="black", fontcolor="black", label=<{TwitterServerAccessTokenHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterServerShowUserHandler" [color="black", fontcolor="black", label=<{TwitterServerShowUserHandler|<br ALIGN="LEFT"/>|get(screen_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.auth_test.TwitterServerVerifyCredentialsHandler" [color="black", fontcolor="black", label=<{TwitterServerVerifyCredentialsHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.RaiseExcInfoTest.test_two_arg_exception.TwoArgException" [color="black", fontcolor="red", label=<{TwoArgException|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httpserver_test.TypeCheckHandler" [color="black", fontcolor="black", label=<{TypeCheckHandler|errors : dict<br ALIGN="LEFT"/>|check_type(name, obj, expected_type)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.TypeCheckHandler" [color="black", fontcolor="black", label=<{TypeCheckHandler|errors : dict<br ALIGN="LEFT"/>|check_type(name, obj, expected_type)<br ALIGN="LEFT"/>get(path_component)<br ALIGN="LEFT"/>post(path_component)<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UIMethodUIModuleTest" [color="black", fontcolor="black", label=<{UIMethodUIModuleTest|<br ALIGN="LEFT"/>|get_app_kwargs()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_ui_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.UIModule" [color="black", fontcolor="black", label=<{UIModule|current_user<br ALIGN="LEFT"/>handler<br ALIGN="LEFT"/>locale<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>ui<br ALIGN="LEFT"/>|css_files()<br ALIGN="LEFT"/>embedded_css()<br ALIGN="LEFT"/>embedded_javascript()<br ALIGN="LEFT"/>html_body()<br ALIGN="LEFT"/>html_head()<br ALIGN="LEFT"/>javascript_files()<br ALIGN="LEFT"/><I>render</I>()<br ALIGN="LEFT"/>render_string(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UIModuleResourceHandler" [color="black", fontcolor="black", label=<{UIModuleResourceHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web.URLSpec" [color="black", fontcolor="black", label=<{URLSpec|handler_class<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>regex<br ALIGN="LEFT"/>|reverse()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.UncompressedTestMixin" [color="black", fontcolor="black", label=<{UncompressedTestMixin|<br ALIGN="LEFT"/>|verify_wire_bytes(bytes_in, bytes_out)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.UndecoratedCoroutinesHandler" [color="black", fontcolor="black", label=<{UndecoratedCoroutinesHandler|chunks : list<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.util_test.UnicodeLiteralTest" [color="black", fontcolor="black", label=<{UnicodeLiteralTest|<br ALIGN="LEFT"/>|test_unicode_escapes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.log_test.UnicodeLogFormatterTest" [color="black", fontcolor="black", label=<{UnicodeLogFormatterTest|<br ALIGN="LEFT"/>|make_handler(filename)<br ALIGN="LEFT"/>test_unicode_logging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UnimplementedHTTPMethodsTest" [color="black", fontcolor="black", label=<{UnimplementedHTTPMethodsTest|<br ALIGN="LEFT"/>|test_unimplemented_standard_methods()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.UnimplementedNonStandardMethodsTest" [color="black", fontcolor="black", label=<{UnimplementedNonStandardMethodsTest|<br ALIGN="LEFT"/>|test_unimplemented_other()<br ALIGN="LEFT"/>test_unimplemented_patch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.UnixSocketTest" [color="black", fontcolor="black", label=<{UnixSocketTest|server<br ALIGN="LEFT"/>sockfile<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>tmpdir<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_unix_socket()<br ALIGN="LEFT"/>test_unix_socket_bad_request()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.UnknownKeyError" [color="black", fontcolor="red", label=<{UnknownKeyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.iostream.UnsatisfiableReadError" [color="black", fontcolor="red", label=<{UnsatisfiableReadError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.httpclient_test.UserAgentHandler" [color="black", fontcolor="black", label=<{UserAgentHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.wsgi.WSGIAdapter" [color="black", fontcolor="black", label=<{WSGIAdapter|application<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.wsgi_test.wrap_web_tests_adapter.WSGIAdapterWrappedTest" [color="black", fontcolor="black", label=<{WSGIAdapterWrappedTest|app<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.wsgi.WSGIApplication" [color="black", fontcolor="black", label=<{WSGIApplication|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.wsgi_test.WSGIApplicationTest" [color="black", fontcolor="black", label=<{WSGIApplicationTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_path_quoting()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.wsgi_test.wrap_web_tests_application.WSGIApplicationWrappedTest" [color="black", fontcolor="black", label=<{WSGIApplicationWrappedTest|app<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.wsgi_test.WSGIConnectionTest" [color="black", fontcolor="black", label=<{WSGIConnectionTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.wsgi.WSGIContainer" [color="black", fontcolor="black", label=<{WSGIContainer|wsgi_application<br ALIGN="LEFT"/>|environ(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.wsgi_test.WSGIContainerTest" [color="black", fontcolor="black", label=<{WSGIContainerTest|<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>wsgi_app(environ, start_response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.WSGISafeWebTest" [color="black", fontcolor="black", label=<{WSGISafeWebTest|COOKIE_SECRET : str<br ALIGN="LEFT"/>|fetch_json()<br ALIGN="LEFT"/>get_app_kwargs()<br ALIGN="LEFT"/>get_handlers()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_decode_argument()<br ALIGN="LEFT"/>test_decode_argument_invalid_unicode()<br ALIGN="LEFT"/>test_decode_argument_plus()<br ALIGN="LEFT"/>test_get_argument()<br ALIGN="LEFT"/>test_get_body_arguments()<br ALIGN="LEFT"/>test_get_query_arguments()<br ALIGN="LEFT"/>test_header_injection()<br ALIGN="LEFT"/>test_multi_header()<br ALIGN="LEFT"/>test_no_gzip()<br ALIGN="LEFT"/>test_optional_path()<br ALIGN="LEFT"/>test_redirect()<br ALIGN="LEFT"/>test_reverse_url()<br ALIGN="LEFT"/>test_types()<br ALIGN="LEFT"/>test_uimodule_resources()<br ALIGN="LEFT"/>test_uimodule_unescaped()<br ALIGN="LEFT"/>test_web_redirect()<br ALIGN="LEFT"/>test_web_redirect_double_slash()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.Wait" [color="black", fontcolor="black", label=<{Wait|key<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>|get_result()<br ALIGN="LEFT"/>is_ready()<br ALIGN="LEFT"/>start(runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.WaitAll" [color="black", fontcolor="black", label=<{WaitAll|keys<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>|get_result()<br ALIGN="LEFT"/>is_ready()<br ALIGN="LEFT"/>start(runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.iostream_test.WaitForHandshakeTest" [color="black", fontcolor="black", label=<{WaitForHandshakeTest|<br ALIGN="LEFT"/>|connect_to_server(server_cls)<br ALIGN="LEFT"/>test_wait_for_handshake_already_connected()<br ALIGN="LEFT"/>test_wait_for_handshake_already_waiting_error()<br ALIGN="LEFT"/>test_wait_for_handshake_callback()<br ALIGN="LEFT"/>test_wait_for_handshake_future()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.WaitIterator" [color="black", fontcolor="black", label=<{WaitIterator|current_future : NoneType<br ALIGN="LEFT"/>current_index : NoneType<br ALIGN="LEFT"/>|done()<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.WaitIteratorTest" [color="black", fontcolor="black", label=<{WaitIteratorTest|<br ALIGN="LEFT"/>|finish_coroutines(iteration, futures)<br ALIGN="LEFT"/>test_already_done()<br ALIGN="LEFT"/>test_empty_iterator()<br ALIGN="LEFT"/>test_iterator()<br ALIGN="LEFT"/>test_no_ref()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.common.Waker" [color="black", fontcolor="black", label=<{Waker|reader : socket<br ALIGN="LEFT"/>reader_fd<br ALIGN="LEFT"/>writer : socket<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>consume()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>wake()<br ALIGN="LEFT"/>write_fileno()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.interface.Waker" [color="black", fontcolor="black", label=<{Waker|<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/><I>consume</I>()<br ALIGN="LEFT"/><I>fileno</I>()<br ALIGN="LEFT"/><I>wake</I>()<br ALIGN="LEFT"/><I>write_fileno</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.posix.Waker" [color="black", fontcolor="black", label=<{Waker|reader<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>consume()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>wake()<br ALIGN="LEFT"/>write_fileno()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.WebSocketBaseTestCase" [color="black", fontcolor="black", label=<{WebSocketBaseTestCase|<br ALIGN="LEFT"/>|close(ws)<br ALIGN="LEFT"/>ws_connect(path, compression_options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.websocket.WebSocketClientConnection" [color="black", fontcolor="black", label=<{WebSocketClientConnection|close_code : NoneType<br ALIGN="LEFT"/>close_reason : NoneType<br ALIGN="LEFT"/>compression_options : NoneType<br ALIGN="LEFT"/>connect_future<br ALIGN="LEFT"/>final_callback : NoneType<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>protocol : NoneType<br ALIGN="LEFT"/>read_future : NoneType<br ALIGN="LEFT"/>read_queue : deque<br ALIGN="LEFT"/>stream : NoneType<br ALIGN="LEFT"/>tcp_client<br ALIGN="LEFT"/>|close(code, reason)<br ALIGN="LEFT"/>get_websocket_protocol()<br ALIGN="LEFT"/>headers_received(start_line, headers)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>on_message(message)<br ALIGN="LEFT"/><I>on_pong</I>(data)<br ALIGN="LEFT"/>read_message(callback)<br ALIGN="LEFT"/>write_message(message, binary)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.websocket.WebSocketClosedError" [color="black", fontcolor="red", label=<{WebSocketClosedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.websocket.WebSocketError" [color="black", fontcolor="red", label=<{WebSocketError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.websocket.WebSocketHandler" [color="black", fontcolor="black", label=<{WebSocketHandler|close_code : NoneType<br ALIGN="LEFT"/>close_reason : NoneType<br ALIGN="LEFT"/>open_args : tuple<br ALIGN="LEFT"/>open_kwargs : dict<br ALIGN="LEFT"/>stream : NoneType<br ALIGN="LEFT"/>ws_connection : NoneType<br ALIGN="LEFT"/>|check_origin(origin)<br ALIGN="LEFT"/>close(code, reason)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_compression_options()<br ALIGN="LEFT"/>get_websocket_protocol()<br ALIGN="LEFT"/><I>on_close</I>()<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/><I>on_message</I>(message)<br ALIGN="LEFT"/><I>on_pong</I>(data)<br ALIGN="LEFT"/><I>open</I>()<br ALIGN="LEFT"/>ping(data)<br ALIGN="LEFT"/>select_subprotocol(subprotocols)<br ALIGN="LEFT"/>send_error()<br ALIGN="LEFT"/>set_nodelay(value)<br ALIGN="LEFT"/>write_message(message, binary)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.websocket.WebSocketProtocol" [color="black", fontcolor="black", label=<{WebSocketProtocol|client_terminated : bool<br ALIGN="LEFT"/>handler<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>server_terminated : bool<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.websocket.WebSocketProtocol13" [color="black", fontcolor="black", label=<{WebSocketProtocol13|FIN : int<br ALIGN="LEFT"/>OPCODE_MASK : int<br ALIGN="LEFT"/>RSV1 : int<br ALIGN="LEFT"/>RSV2 : int<br ALIGN="LEFT"/>RSV3 : int<br ALIGN="LEFT"/>RSV_MASK : int<br ALIGN="LEFT"/>client_terminated : bool<br ALIGN="LEFT"/>mask_outgoing : bool<br ALIGN="LEFT"/>server_terminated : bool<br ALIGN="LEFT"/>|accept_connection()<br ALIGN="LEFT"/>close(code, reason)<br ALIGN="LEFT"/>compute_accept_value(key)<br ALIGN="LEFT"/>write_message(message, binary)<br ALIGN="LEFT"/>write_ping(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.websocket_test.WebSocketTest" [color="black", fontcolor="black", label=<{WebSocketTest|close_future<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>test_async_prepare()<br ALIGN="LEFT"/>test_binary_message()<br ALIGN="LEFT"/>test_check_origin_invalid()<br ALIGN="LEFT"/>test_check_origin_invalid_partial_url()<br ALIGN="LEFT"/>test_check_origin_invalid_subdomains()<br ALIGN="LEFT"/>test_check_origin_valid_no_path()<br ALIGN="LEFT"/>test_check_origin_valid_with_path()<br ALIGN="LEFT"/>test_client_close_reason()<br ALIGN="LEFT"/>test_error_in_on_message()<br ALIGN="LEFT"/>test_http_request()<br ALIGN="LEFT"/>test_server_close_reason()<br ALIGN="LEFT"/>test_unicode_message()<br ALIGN="LEFT"/>test_websocket_callbacks()<br ALIGN="LEFT"/>test_websocket_close_buffered_data()<br ALIGN="LEFT"/>test_websocket_gen()<br ALIGN="LEFT"/>test_websocket_headers()<br ALIGN="LEFT"/>test_websocket_http_fail()<br ALIGN="LEFT"/>test_websocket_http_success()<br ALIGN="LEFT"/>test_websocket_network_fail()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.WebTestCase" [color="black", fontcolor="black", label=<{WebTestCase|app<br ALIGN="LEFT"/>|get_app()<br ALIGN="LEFT"/>get_app_kwargs()<br ALIGN="LEFT"/><I>get_handlers</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.gen_test.WithTimeoutTest" [color="black", fontcolor="black", label=<{WithTimeoutTest|<br ALIGN="LEFT"/>|test_already_resolved()<br ALIGN="LEFT"/>test_completed_concurrent_future()<br ALIGN="LEFT"/>test_completes_before_timeout()<br ALIGN="LEFT"/>test_fails_before_timeout()<br ALIGN="LEFT"/>test_timeout()<br ALIGN="LEFT"/>test_timeout_concurrent_future()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithUserHandler" [color="black", fontcolor="black", label=<{WithUserHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_app_kwargs.WithUserModule" [color="black", fontcolor="black", label=<{WithUserModule|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithUserModuleHandler" [color="black", fontcolor="black", label=<{WithUserModuleHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithoutUserHandler" [color="black", fontcolor="black", label=<{WithoutUserHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_app_kwargs.WithoutUserModule" [color="black", fontcolor="black", label=<{WithoutUserModule|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithoutUserModuleHandler" [color="black", fontcolor="black", label=<{WithoutUserModuleHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.ErrorResponseTest.get_handlers.WriteErrorHandler" [color="black", fontcolor="black", label=<{WriteErrorHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>write_error(status_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.twisted_test.Writer" [color="black", fontcolor="black", label=<{Writer|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>connectionLost(reason)<br ALIGN="LEFT"/>doWrite()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>logPrefix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.httpserver_test.XHeaderTest" [color="black", fontcolor="black", label=<{XHeaderTest|<br ALIGN="LEFT"/>|get_httpserver_options()<br ALIGN="LEFT"/>test_ip_headers()<br ALIGN="LEFT"/>test_scheme_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.web_test.XSRFTest" [color="black", fontcolor="black", label=<{XSRFTest|xsrf_token<br ALIGN="LEFT"/>|cookie_headers(token)<br ALIGN="LEFT"/>get_app_kwargs()<br ALIGN="LEFT"/>get_token(old_token, version)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_cross_user()<br ALIGN="LEFT"/>test_distinct_tokens()<br ALIGN="LEFT"/>test_refresh_token()<br ALIGN="LEFT"/>test_versioning()<br ALIGN="LEFT"/>test_xsrf_fail_body_no_cookie()<br ALIGN="LEFT"/>test_xsrf_fail_cookie_no_body()<br ALIGN="LEFT"/>test_xsrf_fail_no_token()<br ALIGN="LEFT"/>test_xsrf_success_header()<br ALIGN="LEFT"/>test_xsrf_success_non_hex_token()<br ALIGN="LEFT"/>test_xsrf_success_post_body()<br ALIGN="LEFT"/>test_xsrf_success_query_string()<br ALIGN="LEFT"/>test_xsrf_success_short_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.YieldFuture" [color="black", fontcolor="black", label=<{YieldFuture|future<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>key : object<br ALIGN="LEFT"/>result_fn<br ALIGN="LEFT"/>runner : NoneType<br ALIGN="LEFT"/>|get_result()<br ALIGN="LEFT"/>is_ready()<br ALIGN="LEFT"/>start(runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.gen.YieldPoint" [color="black", fontcolor="black", label=<{YieldPoint|<br ALIGN="LEFT"/>|<I>get_result</I>()<br ALIGN="LEFT"/><I>is_ready</I>()<br ALIGN="LEFT"/><I>start</I>(runner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._ApplyBlock" [color="black", fontcolor="black", label=<{_ApplyBlock|body : NoneType<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>|each_child()<br ALIGN="LEFT"/>generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._ChunkList" [color="black", fontcolor="black", label=<{_ChunkList|chunks<br ALIGN="LEFT"/>|each_child()<br ALIGN="LEFT"/>generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._CodeWriter" [color="black", fontcolor="black", label=<{_CodeWriter|apply_counter : int<br ALIGN="LEFT"/>compress_whitespace<br ALIGN="LEFT"/>current_template<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>include_stack : list<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>named_blocks<br ALIGN="LEFT"/>|include(template, line)<br ALIGN="LEFT"/>indent()<br ALIGN="LEFT"/>indent_size()<br ALIGN="LEFT"/>write_line(line, line_number, indent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.tcpclient._Connector" [color="black", fontcolor="black", label=<{_Connector|connect<br ALIGN="LEFT"/>future<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>last_error : Exception, NoneType<br ALIGN="LEFT"/>primary_addrs : list<br ALIGN="LEFT"/>remaining<br ALIGN="LEFT"/>secondary_addrs : list<br ALIGN="LEFT"/>timeout : NoneType<br ALIGN="LEFT"/>|clear_timeout()<br ALIGN="LEFT"/>on_connect_done(addrs, af, addr, future)<br ALIGN="LEFT"/>on_timeout()<br ALIGN="LEFT"/>set_timout(timeout)<br ALIGN="LEFT"/>split(addrinfo)<br ALIGN="LEFT"/>start(timeout)<br ALIGN="LEFT"/>try_connect(addrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._ControlBlock" [color="black", fontcolor="black", label=<{_ControlBlock|body : NoneType<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>statement<br ALIGN="LEFT"/>|each_child()<br ALIGN="LEFT"/>generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.http1connection._ExceptionLoggingContext" [color="black", fontcolor="black", label=<{_ExceptionLoggingContext|logger<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.template._Expression" [color="black", fontcolor="black", label=<{_Expression|expression<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>raw : bool<br ALIGN="LEFT"/>|generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._ExtendsBlock" [color="black", fontcolor="black", label=<{_ExtendsBlock|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.platform.twisted._FD" [color="black", fontcolor="black", label=<{_FD|fd<br ALIGN="LEFT"/>fileobj<br ALIGN="LEFT"/>handler<br ALIGN="LEFT"/>lost : bool<br ALIGN="LEFT"/>reading : bool<br ALIGN="LEFT"/>writing : bool<br ALIGN="LEFT"/>|connectionLost(reason)<br ALIGN="LEFT"/>doRead()<br ALIGN="LEFT"/>doWrite()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>logPrefix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._File" [color="black", fontcolor="black", label=<{_File|body<br ALIGN="LEFT"/>line : int<br ALIGN="LEFT"/>template<br ALIGN="LEFT"/>|each_child()<br ALIGN="LEFT"/>generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.http1connection._GzipMessageDelegate" [color="black", fontcolor="black", label=<{_GzipMessageDelegate|<br ALIGN="LEFT"/>|data_received(chunk)<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>headers_received(start_line, headers)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.simple_httpclient._HTTPConnection" [color="black", fontcolor="black", label=<{_HTTPConnection|chunks : list<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>code : NoneType<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>final_callback : NoneType<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>max_body_size<br ALIGN="LEFT"/>max_buffer_size<br ALIGN="LEFT"/>max_header_size<br ALIGN="LEFT"/>parsed : SplitResult<br ALIGN="LEFT"/>parsed_hostname<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>release_callback : NoneType<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>tcp_client<br ALIGN="LEFT"/>|data_received(chunk)<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>headers_received(first_line, headers)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpserver._HTTPRequestContext" [color="black", fontcolor="black", label=<{_HTTPRequestContext|address<br ALIGN="LEFT"/>address_family : NoneType<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>remote_ip : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.template._IncludeBlock" [color="black", fontcolor="black", label=<{_IncludeBlock|line<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>template_name<br ALIGN="LEFT"/>|find_named_blocks(loader, named_blocks)<br ALIGN="LEFT"/>generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._IntermediateControlBlock" [color="black", fontcolor="black", label=<{_IntermediateControlBlock|line<br ALIGN="LEFT"/>statement<br ALIGN="LEFT"/>|generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.kqueue._KQueue" [color="black", fontcolor="black", label=<{_KQueue|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>modify(fd, events)<br ALIGN="LEFT"/>poll(timeout)<br ALIGN="LEFT"/>register(fd, events)<br ALIGN="LEFT"/>unregister(fd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.options._Mockable" [color="black", fontcolor="black", label=<{_Mockable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.template._Module" [color="black", fontcolor="black", label=<{_Module|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.template._NamedBlock" [color="black", fontcolor="black", label=<{_NamedBlock|body<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>template<br ALIGN="LEFT"/>|each_child()<br ALIGN="LEFT"/>find_named_blocks(loader, named_blocks)<br ALIGN="LEFT"/>generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._Node" [color="black", fontcolor="black", label=<{_Node|<br ALIGN="LEFT"/>|each_child()<br ALIGN="LEFT"/>find_named_blocks(loader, named_blocks)<br ALIGN="LEFT"/><I>generate</I>(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httputil._NormalizedHeaderCache" [color="black", fontcolor="black", label=<{_NormalizedHeaderCache|queue : deque<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.options._Option" [color="black", fontcolor="black", label=<{_Option|UNSET : object<br ALIGN="LEFT"/>callback : NoneType<br ALIGN="LEFT"/>default : NoneType, list<br ALIGN="LEFT"/>file_name : NoneType<br ALIGN="LEFT"/>group_name : NoneType<br ALIGN="LEFT"/>help : NoneType<br ALIGN="LEFT"/>metavar : NoneType<br ALIGN="LEFT"/>multiple : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|parse(value)<br ALIGN="LEFT"/>set(value)<br ALIGN="LEFT"/>value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.websocket._PerMessageDeflateCompressor" [color="black", fontcolor="black", label=<{_PerMessageDeflateCompressor|<br ALIGN="LEFT"/>|compress(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.websocket._PerMessageDeflateDecompressor" [color="black", fontcolor="black", label=<{_PerMessageDeflateDecompressor|<br ALIGN="LEFT"/>|decompress(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.http1connection._QuietException" [color="black", fontcolor="red", label=<{_QuietException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.locks._ReleasingContextManager" [color="black", fontcolor="black", label=<{_ReleasingContextManager|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.web._RequestDispatcher" [color="black", fontcolor="black", label=<{_RequestDispatcher|application<br ALIGN="LEFT"/>chunks : NoneType, list<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>handler<br ALIGN="LEFT"/>handler_class : NoneType<br ALIGN="LEFT"/>handler_kwargs : NoneType, dict<br ALIGN="LEFT"/>path_args : list<br ALIGN="LEFT"/>path_kwargs : dict<br ALIGN="LEFT"/>request : NoneType<br ALIGN="LEFT"/>stream_request_body : bool<br ALIGN="LEFT"/>|data_received(data)<br ALIGN="LEFT"/>execute()<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>headers_received(start_line, headers)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>set_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpclient._RequestProxy" [color="black", fontcolor="black", label=<{_RequestProxy|defaults<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.test.netutil_test._ResolverErrorTestMixin" [color="black", fontcolor="black", label=<{_ResolverErrorTestMixin|<br ALIGN="LEFT"/>|test_bad_host()<br ALIGN="LEFT"/>test_future_interface_bad_host()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.test.netutil_test._ResolverTestMixin" [color="black", fontcolor="black", label=<{_ResolverTestMixin|<br ALIGN="LEFT"/>|test_future_interface()<br ALIGN="LEFT"/>test_localhost()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.platform.select._Select" [color="black", fontcolor="black", label=<{_Select|error_fds : set<br ALIGN="LEFT"/>fd_sets : tuple<br ALIGN="LEFT"/>read_fds : set<br ALIGN="LEFT"/>write_fds : set<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/>modify(fd, events)<br ALIGN="LEFT"/>poll(timeout)<br ALIGN="LEFT"/>register(fd, events)<br ALIGN="LEFT"/>unregister(fd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.httpserver._ServerRequestAdapter" [color="black", fontcolor="black", label=<{_ServerRequestAdapter|connection<br ALIGN="LEFT"/>delegate : NoneType<br ALIGN="LEFT"/>request : NoneType<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>|data_received(chunk)<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>headers_received(start_line, headers)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.stack_context._State" [color="black", fontcolor="black", label=<{_State|contexts : NoneType, tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.template._Statement" [color="black", fontcolor="black", label=<{_Statement|line<br ALIGN="LEFT"/>statement<br ALIGN="LEFT"/>|generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._TemplateReader" [color="black", fontcolor="black", label=<{_TemplateReader|line : int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pos : int<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|consume(count)<br ALIGN="LEFT"/>find(needle, start, end)<br ALIGN="LEFT"/>remaining()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.testing._TestMethodWrapper" [color="black", fontcolor="black", label=<{_TestMethodWrapper|orig_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.platform.twisted._TestReactor" [color="black", fontcolor="black", label=<{_TestReactor|<br ALIGN="LEFT"/>|listenTCP(port, factory, backlog, interface)<br ALIGN="LEFT"/>listenUDP(port, protocol, interface, maxPacketSize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.template._Text" [color="black", fontcolor="black", label=<{_Text|line<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|generate(writer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.ioloop._Timeout" [color="black", fontcolor="black", label=<{_Timeout|callback<br ALIGN="LEFT"/>deadline<br ALIGN="LEFT"/>tiebreaker<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.locks._TimeoutGarbageCollector" [color="black", fontcolor="black", label=<{_TimeoutGarbageCollector|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.concurrent._TracebackLogger" [color="black", fontcolor="black", label=<{_TracebackLogger|exc_info : NoneType<br ALIGN="LEFT"/>formatted_tb : NoneType, list<br ALIGN="LEFT"/>|activate()<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web._UIModuleNamespace" [color="black", fontcolor="black", label=<{_UIModuleNamespace|handler<br ALIGN="LEFT"/>ui_modules<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.wsgi._WSGIConnection" [color="black", fontcolor="black", label=<{_WSGIConnection|context<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>start_response<br ALIGN="LEFT"/>|finish()<br ALIGN="LEFT"/><I>set_close_callback</I>(callback)<br ALIGN="LEFT"/>write(chunk, callback)<br ALIGN="LEFT"/>write_headers(start_line, headers, chunk, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.wsgi._WSGIRequestContext" [color="black", fontcolor="black", label=<{_WSGIRequestContext|protocol<br ALIGN="LEFT"/>remote_ip<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tornado.web._linkify" [color="black", fontcolor="black", label=<{_linkify|<br ALIGN="LEFT"/>|render(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.web._xsrf_form_html" [color="black", fontcolor="black", label=<{_xsrf_form_html|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tornado.auth.FacebookGraphMixin" -> "tornado.auth.OAuth2Mixin" [arrowhead="empty", arrowtail="none"];
"tornado.auth.GoogleOAuth2Mixin" -> "tornado.auth.OAuth2Mixin" [arrowhead="empty", arrowtail="none"];
"tornado.auth.TwitterMixin" -> "tornado.auth.OAuthMixin" [arrowhead="empty", arrowtail="none"];
"tornado.curl_httpclient.CurlAsyncHTTPClient" -> "tornado.httpclient.AsyncHTTPClient" [arrowhead="empty", arrowtail="none"];
"tornado.curl_httpclient.CurlError" -> "tornado.httpclient.HTTPError" [arrowhead="empty", arrowtail="none"];
"tornado.gen.Callback" -> "tornado.gen.YieldPoint" [arrowhead="empty", arrowtail="none"];
"tornado.gen.Multi" -> "tornado.gen.YieldPoint" [arrowhead="empty", arrowtail="none"];
"tornado.gen.Wait" -> "tornado.gen.YieldPoint" [arrowhead="empty", arrowtail="none"];
"tornado.gen.WaitAll" -> "tornado.gen.YieldPoint" [arrowhead="empty", arrowtail="none"];
"tornado.gen.YieldFuture" -> "tornado.gen.YieldPoint" [arrowhead="empty", arrowtail="none"];
"tornado.http1connection.HTTP1Connection" -> "tornado.httputil.HTTPConnection" [arrowhead="empty", arrowtail="none"];
"tornado.http1connection._GzipMessageDelegate" -> "tornado.httputil.HTTPMessageDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.httpclient.AsyncHTTPClient" -> "tornado.util.Configurable" [arrowhead="empty", arrowtail="none"];
"tornado.httpserver.HTTPServer" -> "tornado.httputil.HTTPServerConnectionDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.httpserver.HTTPServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.httpserver.HTTPServer" -> "tornado.util.Configurable" [arrowhead="empty", arrowtail="none"];
"tornado.httpserver._ServerRequestAdapter" -> "tornado.httputil.HTTPMessageDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.httputil.HTTPFile" -> "tornado.util.ObjectDict" [arrowhead="empty", arrowtail="none"];
"tornado.ioloop.IOLoop" -> "tornado.util.Configurable" [arrowhead="empty", arrowtail="none"];
"tornado.ioloop.PollIOLoop" -> "tornado.ioloop.IOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.iostream.IOStream" -> "tornado.iostream.BaseIOStream" [arrowhead="empty", arrowtail="none"];
"tornado.iostream.PipeIOStream" -> "tornado.iostream.BaseIOStream" [arrowhead="empty", arrowtail="none"];
"tornado.iostream.SSLIOStream" -> "tornado.iostream.IOStream" [arrowhead="empty", arrowtail="none"];
"tornado.locale.CSVLocale" -> "tornado.locale.Locale" [arrowhead="empty", arrowtail="none"];
"tornado.locale.GettextLocale" -> "tornado.locale.Locale" [arrowhead="empty", arrowtail="none"];
"tornado.locks.BoundedSemaphore" -> "tornado.locks.Semaphore" [arrowhead="empty", arrowtail="none"];
"tornado.locks.Condition" -> "tornado.locks._TimeoutGarbageCollector" [arrowhead="empty", arrowtail="none"];
"tornado.locks.Semaphore" -> "tornado.locks._TimeoutGarbageCollector" [arrowhead="empty", arrowtail="none"];
"tornado.netutil.BlockingResolver" -> "tornado.netutil.ExecutorResolver" [arrowhead="empty", arrowtail="none"];
"tornado.netutil.ExecutorResolver" -> "tornado.netutil.Resolver" [arrowhead="empty", arrowtail="none"];
"tornado.netutil.OverrideResolver" -> "tornado.netutil.Resolver" [arrowhead="empty", arrowtail="none"];
"tornado.netutil.Resolver" -> "tornado.util.Configurable" [arrowhead="empty", arrowtail="none"];
"tornado.netutil.ThreadedResolver" -> "tornado.netutil.ExecutorResolver" [arrowhead="empty", arrowtail="none"];
"tornado.platform.asyncio.AsyncIOLoop" -> "tornado.platform.asyncio.BaseAsyncIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.asyncio.AsyncIOMainLoop" -> "tornado.platform.asyncio.BaseAsyncIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.asyncio.BaseAsyncIOLoop" -> "tornado.ioloop.IOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.caresresolver.CaresResolver" -> "tornado.netutil.Resolver" [arrowhead="empty", arrowtail="none"];
"tornado.platform.common.Waker" -> "tornado.platform.interface.Waker" [arrowhead="empty", arrowtail="none"];
"tornado.platform.epoll.EPollIOLoop" -> "tornado.ioloop.PollIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.kqueue.KQueueIOLoop" -> "tornado.ioloop.PollIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.posix.Waker" -> "tornado.platform.interface.Waker" [arrowhead="empty", arrowtail="none"];
"tornado.platform.select.SelectIOLoop" -> "tornado.ioloop.PollIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.twisted.TwistedIOLoop" -> "tornado.ioloop.IOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.platform.twisted.TwistedResolver" -> "tornado.netutil.Resolver" [arrowhead="empty", arrowtail="none"];
"tornado.platform.twisted._TestReactor" -> "tornado.platform.twisted.TornadoReactor" [arrowhead="empty", arrowtail="none"];
"tornado.queues.LifoQueue" -> "tornado.queues.Queue" [arrowhead="empty", arrowtail="none"];
"tornado.queues.PriorityQueue" -> "tornado.queues.Queue" [arrowhead="empty", arrowtail="none"];
"tornado.simple_httpclient.SimpleAsyncHTTPClient" -> "tornado.httpclient.AsyncHTTPClient" [arrowhead="empty", arrowtail="none"];
"tornado.simple_httpclient._HTTPConnection" -> "tornado.httputil.HTTPMessageDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.template.DictLoader" -> "tornado.template.BaseLoader" [arrowhead="empty", arrowtail="none"];
"tornado.template.Loader" -> "tornado.template.BaseLoader" [arrowhead="empty", arrowtail="none"];
"tornado.template._ApplyBlock" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._ChunkList" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._ControlBlock" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._Expression" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._ExtendsBlock" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._File" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._IncludeBlock" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._IntermediateControlBlock" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._Module" -> "tornado.template._Expression" [arrowhead="empty", arrowtail="none"];
"tornado.template._NamedBlock" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._Statement" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.template._Text" -> "tornado.template._Node" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.AuthTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ClientLoginCoroutineHandler" -> "tornado.test.auth_test.OAuth1ClientLoginHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ClientLoginHandler" -> "tornado.auth.OAuthMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ClientLoginHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ClientRequestParametersHandler" -> "tornado.auth.OAuthMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ClientRequestParametersHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ServerAccessTokenHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth1ServerRequestTokenHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth2ClientLoginHandler" -> "tornado.auth.OAuth2Mixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OAuth2ClientLoginHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OpenIdClientLoginHandler" -> "tornado.auth.OpenIdMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OpenIdClientLoginHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.OpenIdServerAuthenticateHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientHandler" -> "tornado.auth.TwitterMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientLoginGenCoroutineHandler" -> "tornado.test.auth_test.TwitterClientHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientLoginGenEngineHandler" -> "tornado.test.auth_test.TwitterClientHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientLoginHandler" -> "tornado.test.auth_test.TwitterClientHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientShowUserFutureHandler" -> "tornado.test.auth_test.TwitterClientHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterClientShowUserHandler" -> "tornado.test.auth_test.TwitterClientHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterServerAccessTokenHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterServerShowUserHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.auth_test.TwitterServerVerifyCredentialsHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.CapServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.DecoratorCapClient" -> "tornado.test.concurrent_test.BaseCapClient" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.DecoratorClientTest" -> "tornado.test.concurrent_test.ClientTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.DecoratorClientTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.DecoratorClientTest" -> "tornado.testing.LogTrapTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.GeneratorCapClient" -> "tornado.test.concurrent_test.BaseCapClient" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.GeneratorClientTest" -> "tornado.test.concurrent_test.ClientTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.GeneratorClientTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.GeneratorClientTest" -> "tornado.testing.LogTrapTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.ManualCapClient" -> "tornado.test.concurrent_test.BaseCapClient" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.ManualClientTest" -> "tornado.test.concurrent_test.ClientTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.ManualClientTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.ManualClientTest" -> "tornado.testing.LogTrapTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.ReturnFutureTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.concurrent_test.RunOnExecutorTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.curl_httpclient_test.CurlHTTPClientCommonTestCase" -> "tornado.test.httpclient_test.HTTPClientCommonTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.curl_httpclient_test.CurlHTTPClientTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.curl_httpclient_test.CustomFailReasonHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.curl_httpclient_test.CustomReasonHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.curl_httpclient_test.DigestAuthHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.AsyncPrepareErrorHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenCoroutineExceptionHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenCoroutineSequenceHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenCoroutineTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenCoroutineUnfinishedSequenceHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenEngineTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenExceptionHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenSequenceHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenTaskHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenWebTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.GenYieldExceptionHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.UndecoratedCoroutinesHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.WaitIteratorTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.gen_test.WithTimeoutTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.AllMethodsHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.AuthHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.ChunkHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.ContentLength304Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.CountdownHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.EchoPostHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.HTTPClientCommonTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.HelloWorldHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.PatchHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.PostHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.PutHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.RedirectHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpclient_test.UserAgentHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.BaseSSLTest" -> "tornado.testing.AsyncHTTPSTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.BodyLimitsTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.BodyLimitsTest.get_app.BufferedHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.BodyLimitsTest.get_app.StreamingHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.EchoHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.GzipTest" -> "tornado.test.httpserver_test.GzipBaseTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.GzipTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.GzipUnsupportedTest" -> "tornado.test.httpserver_test.GzipBaseTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.GzipUnsupportedTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.HTTPConnectionTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.HTTPServerRawTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.HTTPServerTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.HandlerBaseTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.HelloWorldRequestHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.IdleTimeoutTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.KeepAliveTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.KeepAliveTest.get_app.FinishOnCloseHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.KeepAliveTest.get_app.HelloHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.KeepAliveTest.get_app.LargeHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.LegacyInterfaceTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.ManualProtocolTest" -> "tornado.test.httpserver_test.HandlerBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.ManualProtocolTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.MaxHeaderSizeTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.MultipartTestHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLContextTest" -> "tornado.test.httpserver_test.BaseSSLTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLContextTest" -> "tornado.test.httpserver_test.SSLTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLXHeaderTest" -> "tornado.test.httpserver_test.HandlerBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLXHeaderTest" -> "tornado.testing.AsyncHTTPSTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLv23Test" -> "tornado.test.httpserver_test.BaseSSLTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLv23Test" -> "tornado.test.httpserver_test.SSLTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLv3Test" -> "tornado.test.httpserver_test.BaseSSLTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.SSLv3Test" -> "tornado.test.httpserver_test.SSLTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.StreamingChunkSizeTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.StreamingChunkSizeTest.MessageDelegate" -> "tornado.httputil.HTTPMessageDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.StreamingChunkSizeTest.get_app.App" -> "tornado.httputil.HTTPServerConnectionDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.TLSv1Test" -> "tornado.test.httpserver_test.BaseSSLTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.TLSv1Test" -> "tornado.test.httpserver_test.SSLTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.TypeCheckHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.UnixSocketTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.XHeaderTest" -> "tornado.test.httpserver_test.HandlerBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.XHeaderTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.httpserver_test.read_stream_body.Delegate" -> "tornado.httputil.HTTPMessageDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.test.ioloop_test.FakeTimeIOLoop" -> "tornado.ioloop.PollIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.test.ioloop_test.FakeTimeSelect" -> "tornado.platform.select._Select" [arrowhead="empty", arrowtail="none"];
"tornado.test.ioloop_test.TestIOLoop" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.ioloop_test.TestIOLoopAddCallback" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.ioloop_test.TestIOLoopAddCallbackFromSignal" -> "tornado.test.ioloop_test.TestIOLoopAddCallback" [arrowhead="empty", arrowtail="none"];
"tornado.test.ioloop_test.TestIOLoopFutures" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.HelloHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStream" -> "tornado.test.iostream_test.TestIOStreamMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStream" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamSSL" -> "tornado.test.iostream_test.TestIOStreamMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamSSL" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamSSLContext" -> "tornado.test.iostream_test.TestIOStreamMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamSSLContext" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamStartTLS" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamWebHTTP" -> "tornado.test.iostream_test.TestIOStreamWebMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamWebHTTP" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamWebHTTPS" -> "tornado.test.iostream_test.TestIOStreamWebMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestIOStreamWebHTTPS" -> "tornado.testing.AsyncHTTPSTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.TestPipeIOStream" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.WaitForHandshakeTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_already_connected.TestServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_already_waiting_error.TestServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_callback.TestServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.iostream_test.WaitForHandshakeTest.test_wait_for_handshake_future.TestServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.locks_test.BoundedSemaphoreTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.locks_test.ConditionTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.locks_test.EventTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.locks_test.LockTests" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.locks_test.SemaphoreContextManagerTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.locks_test.SemaphoreTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.log_test.UnicodeLogFormatterTest" -> "tornado.test.log_test.LogFormatterTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.BlockingResolverErrorTest" -> "tornado.test.netutil_test._ResolverErrorTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.BlockingResolverErrorTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.BlockingResolverTest" -> "tornado.test.netutil_test._ResolverTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.BlockingResolverTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.CaresResolverTest" -> "tornado.test.netutil_test._ResolverTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.CaresResolverTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.ThreadedResolverErrorTest" -> "tornado.test.netutil_test._ResolverErrorTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.ThreadedResolverErrorTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.ThreadedResolverTest" -> "tornado.test.netutil_test._ResolverTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.ThreadedResolverTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.TwistedResolverTest" -> "tornado.test.netutil_test._ResolverErrorTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.TwistedResolverTest" -> "tornado.test.netutil_test._ResolverTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.netutil_test.TwistedResolverTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.process_test.ProcessTest.get_app.ProcessHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.process_test.SubprocessTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.LifoQueueJoinTest" -> "tornado.test.queues_test.QueueJoinTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.PriorityQueueJoinTest" -> "tornado.test.queues_test.QueueJoinTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.ProducerConsumerTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.QueueBasicTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.QueueGetTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.QueueJoinTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.queues_test.QueuePutTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.ContentLengthHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.CreateAsyncHTTPClientTestCase" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.EchoPostHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.HTTP100ContinueTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.HTTP204NoContentTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.HangHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.HeadHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.HostEchoHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.HostnameMappingTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxBodySizeTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxBodySizeTest.get_app.LargeBody" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxBodySizeTest.get_app.SmallBody" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxBufferSizeTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxBufferSizeTest.get_app.LargeBody" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxHeaderSizeTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxHeaderSizeTest.get_app.LargeHeaders" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.MaxHeaderSizeTest.get_app.SmallHeaders" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.NoContentHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.NoContentLengthHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.OptionsHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.ResolveTimeoutTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.ResolveTimeoutTestCase.setUp.BadResolver" -> "tornado.netutil.Resolver" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.RespondInPrepareHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SeeOtherGetHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SeeOtherPostHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SimpleHTTPClientCommonTestCase" -> "tornado.test.httpclient_test.HTTPClientCommonTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase" -> "tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase" -> "tornado.test.simple_httpclient_test.SimpleHTTPClientTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase" -> "tornado.testing.AsyncHTTPSTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.simple_httpclient_test.TriggerHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.stack_context_test.HTTPStackContextTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.stack_context_test.StackContextTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.stack_context_test.TestRequestHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.tcpclient_test.ConnectorTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.tcpclient_test.TCPClientTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.tcpclient_test.TestTCPServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.tcpserver_test.TCPServerTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.tcpserver_test.TCPServerTest.test_handle_stream_coroutine_logging.TestServer" -> "tornado.tcpserver.TCPServer" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.AsyncTestCaseTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest.test_other_return.Test" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_generator.Test" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.AsyncTestCaseWrapperTest.test_undecorated_generator_with_skip.Test" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.GenTest" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down.InheritBoth" -> "tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down.SetUpTearDown" [arrowhead="empty", arrowtail="none"];
"tornado.test.testing_test.SetUpTearDownTest.test_set_up_tear_down.InheritBoth" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.CompatibilityTests.start_tornado_server.HelloHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.LayeredTwistedIOLoop" -> "tornado.platform.twisted.TwistedIOLoop" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.ReactorCallFromThreadTest" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.ReactorCallInThread" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.ReactorCallLaterTest" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.ReactorReaderWriterTest" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.ReactorTwoCallLaterTest" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.twisted_test.ReactorWhenRunningTest" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.util_test.TestConfig1" -> "tornado.test.util_test.TestConfigurable" [arrowhead="empty", arrowtail="none"];
"tornado.test.util_test.TestConfig2" -> "tornado.test.util_test.TestConfigurable" [arrowhead="empty", arrowtail="none"];
"tornado.test.util_test.TestConfigurable" -> "tornado.util.Configurable" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.AllHTTPMethodsTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.AllHTTPMethodsTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.AuthRedirectRequestHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.AuthRedirectTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.BuggyLoggingTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.BuggyLoggingTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CacheTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CacheTest.get_handlers.EtagHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ClearAllCookiesTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ClearAllCookiesTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ClearHeaderTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ClearHeaderTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ClientCloseTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ClientCloseTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ConnectionCloseHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ConnectionCloseTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.GetCookieHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieDomainHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieExpiresDaysHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieFalsyFlags" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieMaxAgeHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieOverwriteHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTest.get_handlers.SetCookieSpecialCharHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CookieTestRequestHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.Custom404Test" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.Custom404Test.get_app_kwargs.Custom404Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CustomStaticFileTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CustomStaticFileTest.get_handlers.MyStaticFileHandler" -> "tornado.web.StaticFileHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.CustomStaticFileTest.get_handlers.StaticUrlHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DateHeaderTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DateHeaderTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DecodeArgHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DecoratorTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DecoratorTest.get_handlers.AddSlashHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DecoratorTest.get_handlers.RemoveSlashHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.Default404Test" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.DefaultHandlerArgumentsTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.EchoHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.EmptyFlushCallbackHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ErrorHandlerXSRFTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ErrorResponseTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ErrorResponseTest.get_handlers.DefaultHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ErrorResponseTest.get_handlers.FailedWriteErrorHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ErrorResponseTest.get_handlers.WriteErrorHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ExceptionHandlerTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.ExceptionHandlerTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.FinishExceptionTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.FinishExceptionTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.FinishInPrepareTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.FinishInPrepareTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.FlowControlHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetArgumentErrorTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetArgumentErrorTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetArgumentHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetArgumentsHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_app_kwargs.WithUserModule" -> "tornado.web.UIModule" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_app_kwargs.WithoutUserModule" -> "tornado.web.UIModule" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserModuleHandler" -> "tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithUserHandler" -> "tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithUserModuleHandler" -> "tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserModuleHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithoutUserHandler" -> "tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GetCurrentUserTest.get_handlers.WithoutUserModuleHandler" -> "tornado.test.web_test.GetCurrentUserTest.get_handlers.CurrentUserModuleHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GzipTestCase" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.GzipTestCase.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.HandlerByNameTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.Header304Test" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.Header304Test.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.HeaderInjectionHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.HelloHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.HostMatchingTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.HostMatchingTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.IncorrectContentLengthTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.IncorrectContentLengthTest.get_handlers.TooHigh" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.IncorrectContentLengthTest.get_handlers.TooLow" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.LinkifyHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.MultiHeaderHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.MultipleExceptionTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.MultipleExceptionTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.NamedURLSpecGroupsTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.NamedURLSpecGroupsTest.get_handlers.EchoHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.NonWSGIWebTests" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.OptionalPathHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.PatchMethodTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.PatchMethodTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.PathArgsInPrepareTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.PathArgsInPrepareTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.RaiseWithReasonTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.RaiseWithReasonTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.RedirectHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.RequestEncodingTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.RequestSummaryTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.RequestSummaryTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.SetLazyPropertiesTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.SetLazyPropertiesTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.SimpleHandlerTestCase" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StaticDefaultFilenameTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StaticFileTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StaticFileTest.get_handlers.AbsoluteStaticUrlHandler" -> "tornado.test.web_test.StaticFileTest.get_handlers.StaticUrlHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StaticFileTest.get_handlers.OverrideStaticUrlHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StaticFileTest.get_handlers.StaticUrlHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StaticFileWithPathTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StatusReasonTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StatusReasonTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StreamingRequestBodyTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StreamingRequestBodyTest.get_handlers.CloseDetectionHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StreamingRequestBodyTest.get_handlers.EarlyReturnHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StreamingRequestBodyTest.get_handlers.StreamingBodyHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StreamingRequestFlowControlTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.StreamingRequestFlowControlTest.get_handlers.FlowControlHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.TypeCheckHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UIMethodUIModuleTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UIMethodUIModuleTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UIMethodUIModuleTest.get_app_kwargs.MyModule" -> "tornado.web.UIModule" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UIModuleResourceHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UnimplementedHTTPMethodsTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UnimplementedHTTPMethodsTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UnimplementedNonStandardMethodsTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.UnimplementedNonStandardMethodsTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.WSGISafeWebTest" -> "tornado.test.web_test.WebTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.WebTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.XSRFTest" -> "tornado.test.web_test.SimpleHandlerTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.web_test.XSRFTest.Handler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.AsyncPrepareHandler" -> "tornado.test.websocket_test.TestWebSocketHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.ClientOnlyCompressionTest" -> "tornado.test.websocket_test.UncompressedTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.ClientOnlyCompressionTest" -> "tornado.test.websocket_test.WebSocketBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.CloseReasonHandler" -> "tornado.test.websocket_test.TestWebSocketHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.CythonMaskFunctionTest" -> "tornado.test.websocket_test.MaskFunctionMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.DefaultCompressionTest" -> "tornado.test.websocket_test.CompressionTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.DefaultCompressionTest" -> "tornado.test.websocket_test.WebSocketBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.EchoHandler" -> "tornado.test.websocket_test.TestWebSocketHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.ErrorInOnMessageHandler" -> "tornado.test.websocket_test.TestWebSocketHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.HeaderHandler" -> "tornado.test.websocket_test.TestWebSocketHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.NoCompressionTest" -> "tornado.test.websocket_test.UncompressedTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.NoCompressionTest" -> "tornado.test.websocket_test.WebSocketBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.NonWebSocketHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.PythonMaskFunctionTest" -> "tornado.test.websocket_test.MaskFunctionMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.ServerOnlyCompressionTest" -> "tornado.test.websocket_test.UncompressedTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.ServerOnlyCompressionTest" -> "tornado.test.websocket_test.WebSocketBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.TestWebSocketHandler" -> "tornado.websocket.WebSocketHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.UncompressedTestMixin" -> "tornado.test.websocket_test.CompressionTestMixin" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.WebSocketBaseTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.websocket_test.WebSocketTest" -> "tornado.test.websocket_test.WebSocketBaseTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.wsgi_test.WSGIApplicationTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.test.wsgi_test.WSGIApplicationTest.get_app.HelloHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.wsgi_test.WSGIApplicationTest.get_app.PathQuotingHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.test.wsgi_test.WSGIConnectionTest" -> "tornado.test.httpserver_test.HTTPConnectionTest" [arrowhead="empty", arrowtail="none"];
"tornado.test.wsgi_test.WSGIContainerTest" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.testing.AsyncHTTPSTestCase" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.testing.AsyncHTTPTestCase" -> "tornado.testing.AsyncTestCase" [arrowhead="empty", arrowtail="none"];
"tornado.web.Application" -> "tornado.httputil.HTTPServerConnectionDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.web.ErrorHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.web.FallbackHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.web.GZipContentEncoding" -> "tornado.web.OutputTransform" [arrowhead="empty", arrowtail="none"];
"tornado.web.MissingArgumentError" -> "tornado.web.HTTPError" [arrowhead="empty", arrowtail="none"];
"tornado.web.RedirectHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.web.StaticFileHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.web.TemplateModule" -> "tornado.web.UIModule" [arrowhead="empty", arrowtail="none"];
"tornado.web._RequestDispatcher" -> "tornado.httputil.HTTPMessageDelegate" [arrowhead="empty", arrowtail="none"];
"tornado.web._linkify" -> "tornado.web.UIModule" [arrowhead="empty", arrowtail="none"];
"tornado.web._xsrf_form_html" -> "tornado.web.UIModule" [arrowhead="empty", arrowtail="none"];
"tornado.websocket.WebSocketClientConnection" -> "tornado.simple_httpclient._HTTPConnection" [arrowhead="empty", arrowtail="none"];
"tornado.websocket.WebSocketClosedError" -> "tornado.websocket.WebSocketError" [arrowhead="empty", arrowtail="none"];
"tornado.websocket.WebSocketHandler" -> "tornado.web.RequestHandler" [arrowhead="empty", arrowtail="none"];
"tornado.websocket.WebSocketProtocol13" -> "tornado.websocket.WebSocketProtocol" [arrowhead="empty", arrowtail="none"];
"tornado.wsgi.WSGIApplication" -> "tornado.web.Application" [arrowhead="empty", arrowtail="none"];
"tornado.wsgi._WSGIConnection" -> "tornado.httputil.HTTPConnection" [arrowhead="empty", arrowtail="none"];
"tornado.concurrent.Future" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.gen.WaitIterator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_running_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.http1connection.HTTP1Connection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_finish_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.http1connection.HTTP1Connection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_write_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.http1connection.HTTP1Connection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_write_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.http1connection.HTTP1Connection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_write_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.http1connection.HTTP1Connection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_write_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.iostream.BaseIOStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_read_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.iostream.BaseIOStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_write_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.iostream.IOStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_connect_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.iostream.SSLIOStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ssl_connect_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.locks.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.locks.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.tcpclient._Connector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.concurrent_test.ManualCapClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.iostream_test.TestIOStreamStartTLS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server_accepted", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.web_test.StreamingRequestBodyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prepared", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.web_test.StreamingRequestBodyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.web_test.StreamingRequestBodyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.web_test.StreamingRequestBodyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="finished", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.web_test.StreamingRequestBodyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="close_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.websocket_test.CompressionTestMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="close_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.test.websocket_test.WebSocketTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="close_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.web.ErrorHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_prepared_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.web.RedirectHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_prepared_future", style="solid"];
"tornado.concurrent.Future" -> "tornado.websocket.WebSocketClientConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connect_future", style="solid"];
"tornado.concurrent._TracebackLogger" -> "tornado.concurrent.Future" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tb_logger", style="solid"];
"tornado.curl_httpclient.CurlAsyncHTTPClient" -> "tornado.test.curl_httpclient_test.CurlHTTPClientTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.gen.Multi" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="future", style="solid"];
"tornado.http1connection.HTTP1Connection" -> "tornado.simple_httpclient._HTTPConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"tornado.http1connection.HTTP1ConnectionParameters" -> "tornado.httpserver.HTTPServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn_params", style="solid"];
"tornado.httpclient.AsyncHTTPClient" -> "tornado.httpclient.HTTPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_async_client", style="solid"];
"tornado.httpclient.AsyncHTTPClient" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.httpclient.HTTPClient" -> "tornado.test.httpclient_test.SyncHTTPClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.httpclient.HTTPError" -> "tornado.httpclient.HTTPResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="error", style="solid"];
"tornado.httpserver.HTTPServer" -> "tornado.test.httpclient_test.SyncHTTPClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server", style="solid"];
"tornado.httpserver.HTTPServer" -> "tornado.test.httpserver_test.UnixSocketTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server", style="solid"];
"tornado.httpserver.HTTPServer" -> "tornado.testing.AsyncHTTPTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_server", style="solid"];
"tornado.httputil.HTTPHeaders" -> "tornado.httpclient.HTTPRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="headers", style="solid"];
"tornado.httputil.HTTPHeaders" -> "tornado.httpclient.HTTPRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_headers", style="solid"];
"tornado.httputil.HTTPHeaders" -> "tornado.httpclient.HTTPResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="headers", style="solid"];
"tornado.httputil.HTTPHeaders" -> "tornado.test.httpserver_test.KeepAliveTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="headers", style="solid"];
"tornado.httputil.HTTPHeaders" -> "tornado.web.RequestHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_headers", style="solid"];
"tornado.httputil.HTTPOutputError" -> "tornado.wsgi._WSGIConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_error", style="solid"];
"tornado.httputil.HTTPOutputError" -> "tornado.wsgi._WSGIConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_error", style="solid"];
"tornado.httputil.HTTPServerRequest" -> "tornado.httpserver._ServerRequestAdapter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="request", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.gen.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.gen.YieldFuture" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.httpclient.HTTPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.ioloop.PeriodicCallback" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.iostream.BaseIOStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.locks.Condition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.netutil.ExecutorResolver" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.platform.caresresolver.CaresResolver" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.platform.twisted.TwistedResolver" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.tcpclient.TCPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.tcpserver.TCPServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.test.httpclient_test.SyncHTTPClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server_ioloop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.test.ioloop_test.TestIOLoopCurrent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.test.ioloop_test.TestIOLoopCurrent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="current_io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.test.ioloop_test.TestIOLoopRunSync" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.test.twisted_test.CompatibilityTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_io_loop", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.testing.AsyncTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.ioloop.PeriodicCallback" -> "tornado.curl_httpclient.CurlAsyncHTTPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_force_timeout_callback", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.concurrent_test.DecoratorCapClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.concurrent_test.ManualCapClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.httpserver_test.HTTPServerRawTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.httpserver_test.KeepAliveTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.httpserver_test.UnixSocketTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.iostream_test.TestIOStreamStartTLS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server_stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.iostream_test.TestIOStreamStartTLS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_stream", style="solid"];
"tornado.iostream.IOStream" -> "tornado.test.web_test.ConnectionCloseTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream", style="solid"];
"tornado.iostream.PipeIOStream" -> "tornado.process.Subprocess" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin", style="solid"];
"tornado.iostream.PipeIOStream" -> "tornado.process.Subprocess" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdout", style="solid"];
"tornado.iostream.PipeIOStream" -> "tornado.process.Subprocess" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stderr", style="solid"];
"tornado.locks.BoundedSemaphore" -> "tornado.locks.Lock" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_block", style="solid"];
"tornado.locks.Event" -> "tornado.queues.Queue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_finished", style="solid"];
"tornado.log.LogFormatter" -> "tornado.test.log_test.LogFormatterTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"tornado.netutil.BlockingResolver" -> "tornado.test.netutil_test.BlockingResolverErrorTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.netutil.BlockingResolver" -> "tornado.test.netutil_test.BlockingResolverTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.netutil.BlockingResolver" -> "tornado.test.netutil_test.ThreadedResolverErrorTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.netutil.OverrideResolver" -> "tornado.simple_httpclient.SimpleAsyncHTTPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.netutil.Resolver" -> "tornado.simple_httpclient.SimpleAsyncHTTPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.netutil.Resolver" -> "tornado.tcpclient.TCPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.netutil.ThreadedResolver" -> "tornado.test.netutil_test.ThreadedResolverTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.options.OptionParser" -> "tornado.test.log_test.EnablePrettyLoggingTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"tornado.platform.caresresolver.CaresResolver" -> "tornado.test.netutil_test.CaresResolverTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.platform.common.Waker" -> "tornado.ioloop.PollIOLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_waker", style="solid"];
"tornado.platform.posix.Waker" -> "tornado.ioloop.PollIOLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_waker", style="solid"];
"tornado.platform.select.SelectIOLoop" -> "tornado.test.twisted_test.LayeredTwistedIOLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="real_io_loop", style="solid"];
"tornado.platform.twisted.TornadoReactor" -> "tornado.platform.twisted.TwistedResolver" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reactor", style="solid"];
"tornado.platform.twisted.TornadoReactor" -> "tornado.test.twisted_test.CompatibilityTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reactor", style="solid"];
"tornado.platform.twisted.TornadoReactor" -> "tornado.test.twisted_test.ReactorTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_reactor", style="solid"];
"tornado.platform.twisted.TwistedResolver" -> "tornado.test.netutil_test.TwistedResolverTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolver", style="solid"];
"tornado.queues.LifoQueue" -> "tornado.test.queues_test.LifoQueueJoinTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_class", style="solid"];
"tornado.queues.PriorityQueue" -> "tornado.test.queues_test.PriorityQueueJoinTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_class", style="solid"];
"tornado.queues.Queue" -> "tornado.test.queues_test.QueueJoinTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_class", style="solid"];
"tornado.simple_httpclient.SimpleAsyncHTTPClient" -> "tornado.test.simple_httpclient_test.HostnameMappingTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.simple_httpclient.SimpleAsyncHTTPClient" -> "tornado.test.simple_httpclient_test.ResolveTimeoutTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.simple_httpclient.SimpleAsyncHTTPClient" -> "tornado.test.simple_httpclient_test.SimpleHTTPClientTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.simple_httpclient.SimpleAsyncHTTPClient" -> "tornado.test.simple_httpclient_test.SimpleHTTPSClientTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="http_client", style="solid"];
"tornado.tcpclient.TCPClient" -> "tornado.simple_httpclient.SimpleAsyncHTTPClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tcp_client", style="solid"];
"tornado.tcpclient.TCPClient" -> "tornado.test.tcpclient_test.TCPClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"tornado.tcpclient.TCPClient" -> "tornado.websocket.WebSocketClientConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tcp_client", style="solid"];
"tornado.template.Loader" -> "tornado.test.template_test.TemplateLoaderTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loader", style="solid"];
"tornado.template._File" -> "tornado.template.Template" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file", style="solid"];
"tornado.test.concurrent_test.CapServer" -> "tornado.test.concurrent_test.ClientTestMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server", style="solid"];
"tornado.test.concurrent_test.DecoratorCapClient" -> "tornado.test.concurrent_test.DecoratorClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_class", style="solid"];
"tornado.test.concurrent_test.GeneratorCapClient" -> "tornado.test.concurrent_test.GeneratorClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_class", style="solid"];
"tornado.test.concurrent_test.ManualCapClient" -> "tornado.test.concurrent_test.ManualClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_class", style="solid"];
"tornado.test.ioloop_test.FakeTimeIOLoop" -> "tornado.test.ioloop_test.TestPeriodicCallback" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="io_loop", style="solid"];
"tornado.test.ioloop_test.FakeTimeSelect" -> "tornado.test.ioloop_test.FakeTimeIOLoop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fts", style="solid"];
"tornado.test.tcpclient_test.TestTCPServer" -> "tornado.test.tcpclient_test.TCPClientTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server", style="solid"];
"tornado.test.twisted_test.Reader" -> "tornado.test.twisted_test.ReactorReaderWriterTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_reader", style="solid"];
"tornado.test.twisted_test.Reader" -> "tornado.test.twisted_test.ReactorReaderWriterTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_reader", style="solid"];
"tornado.test.twisted_test.Writer" -> "tornado.test.twisted_test.ReactorReaderWriterTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_writer", style="solid"];
"tornado.test.twisted_test.Writer" -> "tornado.test.twisted_test.ReactorReaderWriterTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_writer", style="solid"];
"tornado.util.ArgReplacer" -> "tornado.test.util_test.ArgReplacerTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="replacer", style="solid"];
"tornado.util.GzipDecompressor" -> "tornado.http1connection._GzipMessageDelegate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_decompressor", style="solid"];
"tornado.util.ObjectDict" -> "tornado.test.web_test.CookieTestRequestHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application", style="solid"];
"tornado.util.ObjectDict" -> "tornado.test.web_test.CookieTestRequestHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application", style="solid"];
"tornado.util.ObjectDict" -> "tornado.web.RequestHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ui", style="solid"];
"tornado.web.Application" -> "tornado.test.web_test.WebTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"tornado.web.Application" -> "tornado.test.wsgi_test.wrap_web_tests_adapter.WSGIAdapterWrappedTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"tornado.web.ErrorHandler" -> "tornado.web._RequestDispatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler", style="solid"];
"tornado.web.RedirectHandler" -> "tornado.web._RequestDispatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler", style="solid"];
"tornado.websocket.WebSocketProtocol13" -> "tornado.websocket.WebSocketClientConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="protocol", style="solid"];
"tornado.websocket.WebSocketProtocol13" -> "tornado.websocket.WebSocketHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ws_connection", style="solid"];
"tornado.websocket._PerMessageDeflateCompressor" -> "tornado.websocket.WebSocketProtocol13" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_compressor", style="solid"];
"tornado.websocket._PerMessageDeflateDecompressor" -> "tornado.websocket.WebSocketProtocol13" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_decompressor", style="solid"];
"tornado.wsgi.WSGIApplication" -> "tornado.test.wsgi_test.wrap_web_tests_application.WSGIApplicationWrappedTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"tornado.concurrent.DummyExecutor" -> "tornado.netutil.ExecutorResolver" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="executor", style="solid"];
"tornado.http1connection.HTTP1ConnectionParameters" -> "tornado.http1connection.HTTP1Connection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="params", style="solid"];
"tornado.http1connection.HTTP1ConnectionParameters" -> "tornado.http1connection.HTTP1ServerConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="params", style="solid"];
"tornado.httputil.HTTPHeaders" -> "tornado.http1connection.HTTP1Connection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_request_headers", style="solid"];
"tornado.ioloop.IOLoop" -> "tornado.platform.twisted.TornadoReactor" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_io_loop", style="solid"];
"tornado.test.web_test.CustomStaticFileTest.get_handlers.MyStaticFileHandler" -> "tornado.test.web_test.CustomStaticFileTest" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="static_handler_class", style="solid"];
}
