digraph "classes_1" {
rankdir=BT
charset="utf-8"
"r2.tests.functional.controller.login.apiv1_tests.APIV1LoginTests" [color="black", fontcolor="black", label=<{APIV1LoginTests|CONTROLLER : str<br ALIGN="LEFT"/>device_id : str<br ALIGN="LEFT"/>|additional_headers(headers, body)<br ALIGN="LEFT"/>assert_403_response(res, calling)<br ALIGN="LEFT"/>assert_failure(res, code)<br ALIGN="LEFT"/>assert_success(res)<br ALIGN="LEFT"/>make_ua_signature(platform, version)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>sign(payload, platform, version)<br ALIGN="LEFT"/>test_captcha_blocking()<br ALIGN="LEFT"/>test_no_body_signing_login()<br ALIGN="LEFT"/>test_no_body_signing_register()<br ALIGN="LEFT"/>test_nosigning_login()<br ALIGN="LEFT"/>test_nosigning_register()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.apiv1.gold.APIv1GoldController" [color="black", fontcolor="black", label=<{APIv1GoldController|<br ALIGN="LEFT"/>|POST_gild(target)<br ALIGN="LEFT"/>POST_give(user, months, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.apiv1.login.APIv1LoginController" [color="black", fontcolor="black", label=<{APIv1LoginController|<br ALIGN="LEFT"/>|POST_login(responder, user)<br ALIGN="LEFT"/>POST_register(responder, name, email, password)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.apiv1.scopes.APIv1ScopesController" [color="black", fontcolor="black", label=<{APIv1ScopesController|THREE_SIXTY<br ALIGN="LEFT"/>|GET_scopes(scope_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.apiv1.user.APIv1UserController" [color="black", fontcolor="black", label=<{APIv1UserController|FRIEND_JSON_SPEC<br ALIGN="LEFT"/>FRIEND_JSON_VALIDATOR<br ALIGN="LEFT"/>PREFS_JSON_VALIDATOR<br ALIGN="LEFT"/>|DELETE_friends(friend_rel)<br ALIGN="LEFT"/>GET_friends(friend_rel)<br ALIGN="LEFT"/>GET_karma()<br ALIGN="LEFT"/>GET_me()<br ALIGN="LEFT"/>GET_prefs(fields)<br ALIGN="LEFT"/>GET_trophies()<br ALIGN="LEFT"/>GET_usertrophies(user)<br ALIGN="LEFT"/>PATCH_prefs(validated_prefs)<br ALIGN="LEFT"/>PUT_friends(friend, notes_json)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.wiki.AbortWikiError" [color="black", fontcolor="red", label=<{AbortWikiError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.account.Account" [color="black", fontcolor="black", label=<{Account|backup_password<br ALIGN="LEFT"/>can_create_subreddit<br ALIGN="LEFT"/>comment_karma<br ALIGN="LEFT"/>days_remaining_in_timeout<br ALIGN="LEFT"/>delete_message : NoneType<br ALIGN="LEFT"/>delete_time : datetime<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>employee<br ALIGN="LEFT"/>enemies<br ALIGN="LEFT"/>friends<br ALIGN="LEFT"/>gold_will_autorenew<br ALIGN="LEFT"/>has_gold_subscription<br ALIGN="LEFT"/>has_paypal_subscription<br ALIGN="LEFT"/>has_stripe_subscription<br ALIGN="LEFT"/>is_moderator_somewhere<br ALIGN="LEFT"/>link_karma<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>pref_lang<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>subreddits<br ALIGN="LEFT"/>timeout_expiration<br ALIGN="LEFT"/>|add_friend_note(friend, note)<br ALIGN="LEFT"/>all_karmas(include_old)<br ALIGN="LEFT"/>automoderator_user()<br ALIGN="LEFT"/>can_flair_in_sr(user, sr)<br ALIGN="LEFT"/>canonical_email()<br ALIGN="LEFT"/>delete(delete_message)<br ALIGN="LEFT"/>flair_css_class(sr_id, obey_disabled)<br ALIGN="LEFT"/>flair_enabled_in_sr(sr_id)<br ALIGN="LEFT"/>flair_text(sr_id, obey_disabled)<br ALIGN="LEFT"/>friend_rels(_update)<br ALIGN="LEFT"/>friend_rels_cache()<br ALIGN="LEFT"/>get_recently_commented_friend_ids(limit)<br ALIGN="LEFT"/>get_recently_submitted_friend_ids(limit)<br ALIGN="LEFT"/>get_style_override()<br ALIGN="LEFT"/>get_trophy_id(uid)<br ALIGN="LEFT"/>has_been_atoed()<br ALIGN="LEFT"/>has_interacted_with(sr)<br ALIGN="LEFT"/>incr_admin_takedown_strikes(amt)<br ALIGN="LEFT"/>incr_karma(kind, sr, amt)<br ALIGN="LEFT"/>is_mutable(subreddit)<br ALIGN="LEFT"/>karma(kind, sr)<br ALIGN="LEFT"/>make_admin_cookie(first_login, last_request)<br ALIGN="LEFT"/>make_cookie(timestr)<br ALIGN="LEFT"/>make_otp_cookie(timestamp)<br ALIGN="LEFT"/>needs_captcha()<br ALIGN="LEFT"/>preferences()<br ALIGN="LEFT"/>set_email(email)<br ALIGN="LEFT"/>set_flair(subreddit, text, css_class, set_by, log_details)<br ALIGN="LEFT"/>set_subreddit_style(sr, use_style)<br ALIGN="LEFT"/>set_trophy_id(uid, trophy_id)<br ALIGN="LEFT"/>special_distinguish()<br ALIGN="LEFT"/>system_user()<br ALIGN="LEFT"/>update_last_visit(current_time)<br ALIGN="LEFT"/>use_subreddit_style(sr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.AccountActivityBox" [color="black", fontcolor="black", label=<{AccountActivityBox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AccountActivityPage" [color="black", fontcolor="black", label=<{AccountActivityPage|<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.account.AccountExists" [color="black", fontcolor="red", label=<{AccountExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.AccountJsonTemplate" [color="black", fontcolor="black", label=<{AccountJsonTemplate|<br ALIGN="LEFT"/>|thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.AccountMock" [color="black", fontcolor="black", label=<{AccountMock|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.recommend.AccountSRFeedback" [color="black", fontcolor="black", label=<{AccountSRFeedback|<br ALIGN="LEFT"/>|for_user(account)<br ALIGN="LEFT"/>record_feedback(account, srs, action)<br ALIGN="LEFT"/>record_views(account, srs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.recommend.AccountSRPrefs" [color="black", fontcolor="black", label=<{AccountSRPrefs|dislikes : set<br ALIGN="LEFT"/>likes : set<br ALIGN="LEFT"/>recent_views : set<br ALIGN="LEFT"/>|for_user(account)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.account.AccountsByCanonicalEmail" [color="black", fontcolor="black", label=<{AccountsByCanonicalEmail|<br ALIGN="LEFT"/>|get_accounts(email_address)<br ALIGN="LEFT"/>update_email(account, old, new)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.ip.AccountsByIP" [color="black", fontcolor="black", label=<{AccountsByIP|<br ALIGN="LEFT"/>|get(ip, column_start, column_finish, column_count, column_reversed)<br ALIGN="LEFT"/>set(ip, account_id, date)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.ActionBuilder" [color="black", fontcolor="black", label=<{ActionBuilder|actions : dict<br ALIGN="LEFT"/>query : list<br ALIGN="LEFT"/>|init_query()<br ALIGN="LEFT"/>thing_lookup(names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.mediaembed.AdController" [color="black", fontcolor="black", label=<{AdController|<br ALIGN="LEFT"/>|GET_ad()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.AdImpressionsByCodename" [color="black", fontcolor="black", label=<{AdImpressionsByCodename|codename<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|historical_totals(interval)<br ALIGN="LEFT"/>history(interval, codename)<br ALIGN="LEFT"/>promotion_history(codename, start, stop)<br ALIGN="LEFT"/>recent_codenames(fullname)<br ALIGN="LEFT"/>top_last_month()<br ALIGN="LEFT"/>total_by_codename(codename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.Address" [color="black", fontcolor="black", label=<{Address|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.AddressValueError" [color="black", fontcolor="red", label=<{AddressValueError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AdminAwardGive" [color="black", fontcolor="black", label=<{AdminAwardGive|description : str<br ALIGN="LEFT"/>hours : str<br ALIGN="LEFT"/>recipient : str<br ALIGN="LEFT"/>url : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AdminAwardWinners" [color="black", fontcolor="black", label=<{AdminAwardWinners|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AdminAwards" [color="black", fontcolor="black", label=<{AdminAwards|awards<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AdminCreddits" [color="black", fontcolor="black", label=<{AdminCreddits|recipient<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminDetailsBar" [color="black", fontcolor="black", label=<{AdminDetailsBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AdminGold" [color="black", fontcolor="black", label=<{AdminGold|recipient<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AdminInterstitial" [color="black", fontcolor="black", label=<{AdminInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.AdminKindMenu" [color="black", fontcolor="black", label=<{AdminKindMenu|options : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminLinkInfoBar" [color="black", fontcolor="black", label=<{AdminLinkInfoBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminLinkMenu" [color="black", fontcolor="black", label=<{AdminLinkMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.admin_notes.AdminNotesBySystem" [color="black", fontcolor="black", label=<{AdminNotesBySystem|<br ALIGN="LEFT"/>|add(system_name, subject, note, author, when)<br ALIGN="LEFT"/>in_display_order(system_name, subject)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminNotesSidebar" [color="black", fontcolor="black", label=<{AdminNotesSidebar|EMPTY_MESSAGE : dict<br ALIGN="LEFT"/>SYSTEMS : dict<br ALIGN="LEFT"/>author<br ALIGN="LEFT"/>notes : list<br ALIGN="LEFT"/>subject<br ALIGN="LEFT"/>system<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminPage" [color="black", fontcolor="black", label=<{AdminPage|create_reddit_box : bool<br ALIGN="LEFT"/>extension_handling : bool<br ALIGN="LEFT"/>show_sidebar : bool<br ALIGN="LEFT"/>submit_box : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminProfileMenu" [color="black", fontcolor="black", label=<{AdminProfileMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.AdminReporterMenu" [color="black", fontcolor="black", label=<{AdminReporterMenu|default : str<br ALIGN="LEFT"/>options : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.AdminSidebar" [color="black", fontcolor="black", label=<{AdminSidebar|user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.AdminTimeMenu" [color="black", fontcolor="black", label=<{AdminTimeMenu|get_param : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.admin.AdminToolController" [color="black", fontcolor="black", label=<{AdminToolController|<br ALIGN="LEFT"/>|GET_creddits(recipient)<br ALIGN="LEFT"/>GET_gold(recipient)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.admintools.AdminTools" [color="black", fontcolor="black", label=<{AdminTools|<br ALIGN="LEFT"/>|adjust_gold_expiration(account, days, months, years)<br ALIGN="LEFT"/>admin_list()<br ALIGN="LEFT"/>author_spammer(things, spam)<br ALIGN="LEFT"/>create_award_claim_code(unique_award_id, award_codename, description, url)<br ALIGN="LEFT"/>degolden(account)<br ALIGN="LEFT"/>engolden(account)<br ALIGN="LEFT"/><I>report</I>(thing)<br ALIGN="LEFT"/>set_last_sr_ban(things)<br ALIGN="LEFT"/>spam(things, auto, moderator_banned, banner, date, train_spam)<br ALIGN="LEFT"/>unspam(things, moderator_unbanned, unbanner, train_spam, insert)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Ads" [color="black", fontcolor="black", label=<{Ads|ad_url<br ALIGN="LEFT"/>frame_id : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.AdsController" [color="black", fontcolor="black", label=<{AdsController|builder_cls<br ALIGN="LEFT"/>infotext<br ALIGN="LEFT"/>promos : set<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing()<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>listing()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.AdvertTraffic" [color="black", fontcolor="black", label=<{AdvertTraffic|code<br ALIGN="LEFT"/>|get_data_for_interval(interval, columns)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.AdvertTrafficPage" [color="black", fontcolor="black", label=<{AdvertTrafficPage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.AdvertTrafficSummary" [color="black", fontcolor="black", label=<{AdvertTrafficSummary|advert_summary : list<br ALIGN="LEFT"/>totals<br ALIGN="LEFT"/>|get_ad_name(code, things)<br ALIGN="LEFT"/>get_ad_url(code, things)<br ALIGN="LEFT"/>get_sr_name(name)<br ALIGN="LEFT"/>get_things(codes)<br ALIGN="LEFT"/>make_tables()<br ALIGN="LEFT"/>split_codename(codename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.Agent" [color="black", fontcolor="black", label=<{Agent|MOBILE_PLATFORMS : set<br ALIGN="LEFT"/>app_name<br ALIGN="LEFT"/>bot<br ALIGN="LEFT"/>is_mobile_browser : bool<br ALIGN="LEFT"/>sub_platform_name<br ALIGN="LEFT"/>|determine_mobile_browser()<br ALIGN="LEFT"/>parse(ua)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.reddit_agent_parser_test.AgentDetectorTest" [color="black", fontcolor="black", label=<{AgentDetectorTest|<br ALIGN="LEFT"/>|test_alian_blue_detector()<br ALIGN="LEFT"/>test_bacon_reader_detector()<br ALIGN="LEFT"/>test_mcreddit_detector()<br ALIGN="LEFT"/>test_narwhal_detector()<br ALIGN="LEFT"/>test_readit_detector()<br ALIGN="LEFT"/>test_reddit_android_detector()<br ALIGN="LEFT"/>test_reddit_ios_detector()<br ALIGN="LEFT"/>test_reddit_is_fun_detector()<br ALIGN="LEFT"/>test_reddit_sync_detector()<br ALIGN="LEFT"/>test_relay_for_reddit_detector()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.AlienBlueDetector" [color="black", fontcolor="black", label=<{AlienBlueDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.AllFiltered" [color="black", fontcolor="black", label=<{AllFiltered|filtername : str<br ALIGN="LEFT"/>unfiltered_path : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.AllInfoBar" [color="black", fontcolor="black", label=<{AllInfoBar|allminus_url : NoneType, str<br ALIGN="LEFT"/>css_class : NoneType, str<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>gilding_listing : bool<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.AllMinus" [color="black", fontcolor="black", label=<{AllMinus|analytics_name : str<br ALIGN="LEFT"/>exclude_sr_ids<br ALIGN="LEFT"/>exclude_srs<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|get_links(sort, time)<br ALIGN="LEFT"/>keep_for_rising(sr_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.AllSR" [color="black", fontcolor="black", label=<{AllSR|name : str<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|get_all_comments()<br ALIGN="LEFT"/>get_gilded()<br ALIGN="LEFT"/>get_links(sort, time)<br ALIGN="LEFT"/>get_reported(include_links, include_comments)<br ALIGN="LEFT"/>keep_for_rising(sr_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.api.ApiController" [color="black", fontcolor="black", label=<{ApiController|api_friend_scope_map : dict<br ALIGN="LEFT"/>|GET_expando(link)<br ALIGN="LEFT"/>GET_flairlist(num, after, reverse, count, user)<br ALIGN="LEFT"/>GET_gadget(form, jquery, type, links)<br ALIGN="LEFT"/>GET_info(things, url)<br ALIGN="LEFT"/>GET_me(responder)<br ALIGN="LEFT"/>GET_morechildren(form, jquery, link, sort, children, mc_id)<br ALIGN="LEFT"/>GET_needs_captcha(responder)<br ALIGN="LEFT"/>GET_report_form(form, jquery, thing)<br ALIGN="LEFT"/>GET_saved_categories(responder)<br ALIGN="LEFT"/>GET_submit_text(responder)<br ALIGN="LEFT"/>GET_subreddit_recommendations(srs, to_omit)<br ALIGN="LEFT"/>GET_subreddits_by_topic(responder, query)<br ALIGN="LEFT"/>GET_upload_sr_img()<br ALIGN="LEFT"/>GET_url_info(url, count, things)<br ALIGN="LEFT"/>GET_username_available(responder, user)<br ALIGN="LEFT"/>OPTIONS_request_promo()<br ALIGN="LEFT"/>POST_accept_moderator_invite(form, jquery)<br ALIGN="LEFT"/>POST_add_admin_note(form, jquery, system, subject, note, author)<br ALIGN="LEFT"/>POST_add_subreddit_rule(form, jquery, short_name, description, kind)<br ALIGN="LEFT"/>POST_adddeveloper(form, jquery, client, account)<br ALIGN="LEFT"/>POST_adminon(form, jquery, remember, dest)<br ALIGN="LEFT"/>POST_approve(thing)<br ALIGN="LEFT"/>POST_block(thing)<br ALIGN="LEFT"/>POST_check_email(responder, email, newsletter_subscribe, sponsor)<br ALIGN="LEFT"/>POST_check_password(responder, password)<br ALIGN="LEFT"/>POST_check_username(responder, user)<br ALIGN="LEFT"/>POST_claimgold(form, jquery, code)<br ALIGN="LEFT"/>POST_clear_sessions(form, jquery, password, dest)<br ALIGN="LEFT"/>POST_clearflairtemplates(form, jquery, flair_type)<br ALIGN="LEFT"/>POST_collapse_message(things)<br ALIGN="LEFT"/>POST_comment(commentform, jquery, parent, comment)<br ALIGN="LEFT"/>POST_compose(form, jquery, from_sr, to, subject, body)<br ALIGN="LEFT"/>POST_deactivate_user(form, jquery, deactivate_message, username, user, confirm)<br ALIGN="LEFT"/>POST_del(thing)<br ALIGN="LEFT"/>POST_del_msg(thing)<br ALIGN="LEFT"/>POST_delete_sr_banner(form, jquery)<br ALIGN="LEFT"/>POST_delete_sr_header(form, jquery)<br ALIGN="LEFT"/>POST_delete_sr_icon(form, jquery)<br ALIGN="LEFT"/>POST_delete_sr_img(form, jquery, name)<br ALIGN="LEFT"/>POST_deleteapp(client)<br ALIGN="LEFT"/>POST_deleteflair(form, jquery, user)<br ALIGN="LEFT"/>POST_deleteflairtemplate(form, jquery, flair_template)<br ALIGN="LEFT"/>POST_disable_otp(form, jquery)<br ALIGN="LEFT"/>POST_disable_ui(ui_elem)<br ALIGN="LEFT"/>POST_distinguish(form, jquery, thing, how)<br ALIGN="LEFT"/>POST_edit_error(form, jquery, hexkey, nickname, status)<br ALIGN="LEFT"/>POST_editaward(form, jquery, award, colliding_award, codename, title, awardtype, api_ok, imgurl)<br ALIGN="LEFT"/>POST_editusertext(form, jquery, item, text)<br ALIGN="LEFT"/>POST_enable_otp(form, jquery, otp)<br ALIGN="LEFT"/>POST_expando()<br ALIGN="LEFT"/>POST_fetch_title(form, jquery, url)<br ALIGN="LEFT"/>POST_flair(form, jquery, user, link, text, css_class)<br ALIGN="LEFT"/>POST_flairconfig(form, jquery, flair_enabled, flair_position, link_flair_position, flair_self_assign_enabled, link_flair_self_assign_enabled, timeout)<br ALIGN="LEFT"/>POST_flaircsv(flair_csv)<br ALIGN="LEFT"/>POST_flairselector(user, link)<br ALIGN="LEFT"/>POST_flairtemplate(form, jquery, flair_template, text, css_class, text_editable, flair_type)<br ALIGN="LEFT"/>POST_friend(form, jquery, friend, container, type, type_and_permissions, note, ban_reason, duration, ban_message)<br ALIGN="LEFT"/>POST_friendnote(form, jquery, friend, note)<br ALIGN="LEFT"/>POST_generate_otp_secret(form, jquery)<br ALIGN="LEFT"/>POST_generate_payment_blob(responder, thing, signed)<br ALIGN="LEFT"/>POST_givecreddits(form, jquery, recipient, num_creddits)<br ALIGN="LEFT"/>POST_givegold(form, jquery, recipient, num_months)<br ALIGN="LEFT"/>POST_givetrophy(form, jquery, secret_used, award, description, url, recipient)<br ALIGN="LEFT"/>POST_hide(links)<br ALIGN="LEFT"/>POST_hide_locationbar(form, jquery)<br ALIGN="LEFT"/>POST_ignore_reports(thing)<br ALIGN="LEFT"/>POST_leavecontributor(container)<br ALIGN="LEFT"/>POST_leavemoderator(container)<br ALIGN="LEFT"/>POST_lock(thing)<br ALIGN="LEFT"/>POST_login(form, responder, user, rem)<br ALIGN="LEFT"/>POST_marknsfw(thing)<br ALIGN="LEFT"/>POST_modify_payment_blob(responder, code, signed, message)<br ALIGN="LEFT"/>POST_morechildren()<br ALIGN="LEFT"/>POST_moremessages(form, jquery, parent)<br ALIGN="LEFT"/>POST_mute_message_author(message)<br ALIGN="LEFT"/>POST_newsletter(responder, email, source)<br ALIGN="LEFT"/>POST_password(form, jquery, user)<br ALIGN="LEFT"/>POST_quarantine(form, jquery, subreddit, quarantine, subject, body)<br ALIGN="LEFT"/>POST_quarantine_optin(sr)<br ALIGN="LEFT"/>POST_quarantine_optout(sr)<br ALIGN="LEFT"/>POST_read_all_messages()<br ALIGN="LEFT"/>POST_read_message(things)<br ALIGN="LEFT"/>POST_rec_feedback(form, jquery, action, srs)<br ALIGN="LEFT"/>POST_register(form, responder, name, email, password)<br ALIGN="LEFT"/>POST_relnote(form, jquery, type, user, note)<br ALIGN="LEFT"/>POST_remove(thing, spam)<br ALIGN="LEFT"/>POST_remove_subreddit_rule(form, jquery, rule)<br ALIGN="LEFT"/>POST_removedeveloper(form, jquery, client, account)<br ALIGN="LEFT"/>POST_removetrophy(form, jquery, secret_used, trophy)<br ALIGN="LEFT"/>POST_report(form, jquery, thing, reason, site_reason, other_reason)<br ALIGN="LEFT"/>POST_request_promo(srnames)<br ALIGN="LEFT"/>POST_rescrape(thing)<br ALIGN="LEFT"/>POST_resetpassword(form, jquery, token, password)<br ALIGN="LEFT"/>POST_revokeapp(client)<br ALIGN="LEFT"/>POST_save(thing, category)<br ALIGN="LEFT"/>POST_search_reddit_names(responder, query, include_over_18, exact)<br ALIGN="LEFT"/>POST_selectflair(form, jquery, user, link, flair_template_id, text)<br ALIGN="LEFT"/>POST_sendreplies(thing, state)<br ALIGN="LEFT"/>POST_server_seconds_visibility(form, jquery, seconds_visibility)<br ALIGN="LEFT"/>POST_set_contest_mode(form, jquery, thing, state, timeout)<br ALIGN="LEFT"/>POST_set_left_bar_collapsed(responder, collapsed)<br ALIGN="LEFT"/>POST_set_nsfw_media_pref(show_nsfw_media)<br ALIGN="LEFT"/>POST_set_sr_style_enabled(form, jquery, sr_style_enabled)<br ALIGN="LEFT"/>POST_set_subreddit_sticky(form, jquery, thing, state, num, timeout)<br ALIGN="LEFT"/>POST_set_suggested_sort(form, jquery, thing, sort, timeout)<br ALIGN="LEFT"/>POST_setappicon(form, jquery, client, icon_file)<br ALIGN="LEFT"/>POST_setflairenabled(form, jquery, flair_enabled)<br ALIGN="LEFT"/>POST_setpermissions(form, jquery, target, type_and_permissions)<br ALIGN="LEFT"/>POST_share(shareform, jquery, share_to, message, link)<br ALIGN="LEFT"/>POST_site_admin(form, jquery, name, sr)<br ALIGN="LEFT"/>POST_store_visits(links)<br ALIGN="LEFT"/>POST_submit(form, jquery, url, selftext, kind, title, sr, extension, sendreplies, resubmit)<br ALIGN="LEFT"/>POST_subreddit_stylesheet(form, jquery, stylesheet_contents, prevstyle, op, reason)<br ALIGN="LEFT"/>POST_subscribe(action, sr)<br ALIGN="LEFT"/>POST_unblock_subreddit(thing)<br ALIGN="LEFT"/>POST_uncollapse_message(things)<br ALIGN="LEFT"/>POST_unfriend(nuser, iuser, container, type)<br ALIGN="LEFT"/>POST_unhide(links)<br ALIGN="LEFT"/>POST_unignore_reports(thing)<br ALIGN="LEFT"/>POST_unlock(thing)<br ALIGN="LEFT"/>POST_unmarknsfw(thing)<br ALIGN="LEFT"/>POST_unmute_message_author(message)<br ALIGN="LEFT"/>POST_unread_message(things)<br ALIGN="LEFT"/>POST_unsave(thing)<br ALIGN="LEFT"/>POST_update_email(form, jquery, email, verify, dest)<br ALIGN="LEFT"/>POST_update_password(form, jquery, password, invalidate_oauth)<br ALIGN="LEFT"/>POST_update_subreddit_rule(form, jquery, rule, short_name, description, kind)<br ALIGN="LEFT"/>POST_updateapp(form, jquery, name, about_url, icon_url, redirect_uri, app_type)<br ALIGN="LEFT"/>POST_upload_sr_img(file, header, name, form_id, img_type, upload_type)<br ALIGN="LEFT"/>POST_use_global_defaults(form, jquery)<br ALIGN="LEFT"/>POST_vote(direction, thing, rank)<br ALIGN="LEFT"/>ajax_login_redirect(form, jquery, dest)<br ALIGN="LEFT"/>check_api_friend_oauth_scope(type_)<br ALIGN="LEFT"/>collapse_handler(things, collapse)<br ALIGN="LEFT"/>revoke_sessions(user)<br ALIGN="LEFT"/>revoke_sessions_and_login(user, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.authorize.test_api.ApiFunctionTest" [color="black", fontcolor="black", label=<{ApiFunctionTest|amount : int<br ALIGN="LEFT"/>customer_id : int<br ALIGN="LEFT"/>payment_profile_id : int<br ALIGN="LEFT"/>transaction_id : int<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_capture_authorization_hold(CreateRequest)<br ALIGN="LEFT"/>test_create_authorization_hold(CreateRequest)<br ALIGN="LEFT"/>test_create_customer_profile(Profile, CreateRequest)<br ALIGN="LEFT"/>test_create_payment_profile(PaymentProfile, CreateRequest)<br ALIGN="LEFT"/>test_delete_payment_profile(DeleteRequest)<br ALIGN="LEFT"/>test_get_customer_profile(GetRequest)<br ALIGN="LEFT"/>test_refund_transaction(CreateRequest)<br ALIGN="LEFT"/>test_update_payment_profile(PaymentProfile, UpdateRequest)<br ALIGN="LEFT"/>test_void_authorization_hold(CreateRequest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ApiHelp" [color="black", fontcolor="black", label=<{ApiHelp|api_docs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.api_docs.ApidocsController" [color="black", fontcolor="black", label=<{ApidocsController|<br ALIGN="LEFT"/>|GET_docs(mode)<br ALIGN="LEFT"/>docs_from_controller(controller, url_prefix, oauth_only)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.api.ApiminimalController" [color="black", fontcolor="black", label=<{ApiminimalController|<br ALIGN="LEFT"/>|POST_new_captcha(form, jquery)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ArchivedInterstitial" [color="black", fontcolor="black", label=<{ArchivedInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VValidatedJSON.ArrayOf" [color="black", fontcolor="black", label=<{ArrayOf|spec<br ALIGN="LEFT"/>|run(data)<br ALIGN="LEFT"/>spec_docs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.AuctionPriority" [color="black", fontcolor="black", label=<{AuctionPriority|inventory_override : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.Auth" [color="black", fontcolor="black", label=<{Auth|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.AuthenticationFailed" [color="black", fontcolor="red", label=<{AuthenticationFailed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.auth.AuthenticationProvider" [color="black", fontcolor="black", label=<{AuthenticationProvider|<br ALIGN="LEFT"/>|<I>get_authenticated_account</I>()<br ALIGN="LEFT"/><I>is_logout_allowed</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.AuthorizationHoldNotFound" [color="black", fontcolor="red", label=<{AuthorizationHoldNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.AuthorizeNetException" [color="black", fontcolor="red", label=<{AuthorizeNetException|code : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.authorize.test_api.AuthorizeNetExceptionTest" [color="black", fontcolor="black", label=<{AuthorizeNetExceptionTest|<br ALIGN="LEFT"/>|test_exception_message()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.AuthorizeNetRequest" [color="black", fontcolor="black", label=<{AuthorizeNetRequest|merchantAuthentication<br ALIGN="LEFT"/>|handle_response(res)<br ALIGN="LEFT"/>is_error_code(res, code)<br ALIGN="LEFT"/>make_request()<br ALIGN="LEFT"/><I>process_error</I>(res)<br ALIGN="LEFT"/><I>process_response</I>(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.AutoModeratorConfig" [color="black", fontcolor="black", label=<{AutoModeratorConfig|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.automoderator.AutoModeratorRuleTypeError" [color="black", fontcolor="red", label=<{AutoModeratorRuleTypeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.automoderator.AutoModeratorSyntaxError" [color="black", fontcolor="red", label=<{AutoModeratorSyntaxError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.award.Award" [color="black", fontcolor="black", label=<{Award|<br ALIGN="LEFT"/>|give_if_needed(codename, user, description, url)<br ALIGN="LEFT"/>take_away(codename, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.AwardClaimToken" [color="black", fontcolor="black", label=<{AwardClaimToken|token_size : int<br ALIGN="LEFT"/>|confirm_url()<br ALIGN="LEFT"/>post_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.AwardReceived" [color="black", fontcolor="black", label=<{AwardReceived|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.awards.AwardsController" [color="black", fontcolor="black", label=<{AwardsController|<br ALIGN="LEFT"/>|GET_give(award, recipient, desc, url, hours)<br ALIGN="LEFT"/>GET_index()<br ALIGN="LEFT"/>GET_winners(award)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.BaconReaderDetector" [color="black", fontcolor="black", label=<{BaconReaderDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.errors.BadRequestError" [color="black", fontcolor="black", label=<{BadRequestError|error_data : dict<br ALIGN="LEFT"/>explanation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.things.BanButtons" [color="black", fontcolor="black", label=<{BanButtons|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.BannedInterstitial" [color="black", fontcolor="black", label=<{BannedInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.BannedListing" [color="black", fontcolor="black", label=<{BannedListing|form_title<br ALIGN="LEFT"/>rules : list<br ALIGN="LEFT"/>system_rules : list<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>populate_from_tempbans(item, tempbans)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.BannedTableItem" [color="black", fontcolor="black", label=<{BannedTableItem|cells : tuple<br ALIGN="LEFT"/>executed_message<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.BannedTableItemJsonTemplate" [color="black", fontcolor="black", label=<{BannedTableItemJsonTemplate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.BannedUserInterstitial" [color="black", fontcolor="black", label=<{BannedUserInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.base.BaseController" [color="black", fontcolor="black", label=<{BaseController|<br ALIGN="LEFT"/>|fix_cookie_header()<br ALIGN="LEFT"/>format_output_url(url)<br ALIGN="LEFT"/>intermediate_redirect(form_path, sr_path, fullpath)<br ALIGN="LEFT"/><I>post</I>()<br ALIGN="LEFT"/><I>pre</I>()<br ALIGN="LEFT"/>redirect(dest, code, preserve_extension)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.BaseLocalizedSubreddits" [color="black", fontcolor="black", label=<{BaseLocalizedSubreddits|GLOBAL : str<br ALIGN="LEFT"/>|get_global_defaults()<br ALIGN="LEFT"/>get_localized_srs(location)<br ALIGN="LEFT"/>get_srids(location)<br ALIGN="LEFT"/>lookup(keys, update)<br ALIGN="LEFT"/>set_global_srs(srs)<br ALIGN="LEFT"/>set_srs(location, srs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.BaseSite" [color="black", fontcolor="black", label=<{BaseSite|allows_referrers<br ALIGN="LEFT"/>analytics_name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>user_path<br ALIGN="LEFT"/>|get_all_comments()<br ALIGN="LEFT"/>get_edited(include_links, include_comments)<br ALIGN="LEFT"/>get_gilded()<br ALIGN="LEFT"/>get_links(sort, time)<br ALIGN="LEFT"/><I>get_live_promos</I>()<br ALIGN="LEFT"/>get_modactions(srs, mod, action)<br ALIGN="LEFT"/>get_modqueue(include_links, include_comments)<br ALIGN="LEFT"/>get_reported(include_links, include_comments)<br ALIGN="LEFT"/>get_spam(include_links, include_comments)<br ALIGN="LEFT"/>get_unmoderated()<br ALIGN="LEFT"/>is_limited_moderator(user)<br ALIGN="LEFT"/>is_moderator_with_perms(user)<br ALIGN="LEFT"/>is_unlimited_moderator(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.bidding.Bid" [color="black", fontcolor="black", label=<{Bid|STATUS<br ALIGN="LEFT"/>account_id<br ALIGN="LEFT"/>bid<br ALIGN="LEFT"/>campaign<br ALIGN="LEFT"/>charge<br ALIGN="LEFT"/>charge_amount<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>pay_id<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>thing_id<br ALIGN="LEFT"/>transaction<br ALIGN="LEFT"/>|auth()<br ALIGN="LEFT"/>charged()<br ALIGN="LEFT"/>is_auth()<br ALIGN="LEFT"/>is_charged()<br ALIGN="LEFT"/>is_refund()<br ALIGN="LEFT"/>is_void()<br ALIGN="LEFT"/>refund(amount)<br ALIGN="LEFT"/>set_status(status)<br ALIGN="LEFT"/>void()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.account.BlockedSubredditsByAccount" [color="black", fontcolor="black", label=<{BlockedSubredditsByAccount|<br ALIGN="LEFT"/>|block(user, sr)<br ALIGN="LEFT"/>is_blocked(user, sr)<br ALIGN="LEFT"/>unblock(user, sr)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.utils.Bomb" [color="black", fontcolor="black", label=<{Bomb|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Bookings" [color="black", fontcolor="black", label=<{Bookings|collection : int<br ALIGN="LEFT"/>subreddit : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.BooleanOp" [color="black", fontcolor="black", label=<{BooleanOp|ops : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.BoringPage" [color="black", fontcolor="black", label=<{BoringPage|css_class : NoneType<br ALIGN="LEFT"/>extension_handling : bool<br ALIGN="LEFT"/>pagename<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.BrowseController" [color="black", fontcolor="black", label=<{BrowseController|extra_page_classes<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>next_suggestions_cls<br ALIGN="LEFT"/>show_chooser : bool<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing(sort, t)<br ALIGN="LEFT"/>POST_listing(sort, t)<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.Builder" [color="black", fontcolor="black", label=<{Builder|keep_fn : NoneType<br ALIGN="LEFT"/>prewrap_fn : NoneType<br ALIGN="LEFT"/>spam_listing : bool<br ALIGN="LEFT"/>stale : bool<br ALIGN="LEFT"/>wrap<br ALIGN="LEFT"/>|convert_items(items)<br ALIGN="LEFT"/><I>get_items</I>()<br ALIGN="LEFT"/><I>item_iter</I>(a)<br ALIGN="LEFT"/>keep_item(item)<br ALIGN="LEFT"/>must_skip(item)<br ALIGN="LEFT"/>valid_after(after)<br ALIGN="LEFT"/>wrap_items(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Button" [color="black", fontcolor="black", label=<{Button|cachable : bool<br ALIGN="LEFT"/>extension_handling : bool<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ButtonDemoPanel" [color="black", fontcolor="black", label=<{ButtonDemoPanel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ButtonLite" [color="black", fontcolor="black", label=<{ButtonLite|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.buttons.ButtonsController" [color="black", fontcolor="black", label=<{ButtonsController|<br ALIGN="LEFT"/>|GET_button_demo_page()<br ALIGN="LEFT"/>GET_button_embed(buttontype)<br ALIGN="LEFT"/>GET_button_lite(buttonimage, title, url, styled, newwindow)<br ALIGN="LEFT"/>GET_widget_demo_page()<br ALIGN="LEFT"/>get_wrapped_link(url, link, wrapper)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.ByIDController" [color="black", fontcolor="black", label=<{ByIDController|names<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>|GET_listing(links)<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.subreddit_test.ByNameTest" [color="black", fontcolor="black", label=<{ByNameTest|cache<br ALIGN="LEFT"/>subreddit_byID<br ALIGN="LEFT"/>subreddit_query<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>testCacheNegativeResults()<br ALIGN="LEFT"/>testExcludeNegativeLookups()<br ALIGN="LEFT"/>testForceUpdate()<br ALIGN="LEFT"/>testMultiCacheMissesAllExist()<br ALIGN="LEFT"/>testMultiCached()<br ALIGN="LEFT"/>testMultiSomeDontExist()<br ALIGN="LEFT"/>testMultiSomeInvalid()<br ALIGN="LEFT"/>testSingleCached()<br ALIGN="LEFT"/>testSingleFromDB()<br ALIGN="LEFT"/>testSingleInvalid()<br ALIGN="LEFT"/>testSingleNotFound()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.CMemcache" [color="black", fontcolor="black", label=<{CMemcache|clients<br ALIGN="LEFT"/>min_compress_len : int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>servers<br ALIGN="LEFT"/>simple_get_multi<br ALIGN="LEFT"/>|add(key, val, time)<br ALIGN="LEFT"/>add_multi(keys, prefix, time)<br ALIGN="LEFT"/>append(key, val, time)<br ALIGN="LEFT"/>delete(key, time)<br ALIGN="LEFT"/>delete_multi(keys, prefix)<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>get_multi(keys, prefix)<br ALIGN="LEFT"/>incr(key, delta, time)<br ALIGN="LEFT"/>incr_multi(keys, prefix, delta)<br ALIGN="LEFT"/>set(key, val, time)<br ALIGN="LEFT"/>set_multi(keys, prefix, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.csrf.CSRFPreventionException" [color="black", fontcolor="red", label=<{CSRFPreventionException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.cache.CacheChain" [color="black", fontcolor="black", label=<{CacheChain|add<br ALIGN="LEFT"/>add_multi<br ALIGN="LEFT"/>append<br ALIGN="LEFT"/>cache_negative_results : bool<br ALIGN="LEFT"/>caches<br ALIGN="LEFT"/>decr<br ALIGN="LEFT"/>delete<br ALIGN="LEFT"/>delete_multi<br ALIGN="LEFT"/>flush_all<br ALIGN="LEFT"/>incr<br ALIGN="LEFT"/>incr_multi<br ALIGN="LEFT"/>prepend<br ALIGN="LEFT"/>replace<br ALIGN="LEFT"/>set<br ALIGN="LEFT"/>set_multi<br ALIGN="LEFT"/>stats : NoneType<br ALIGN="LEFT"/>|debug(key)<br ALIGN="LEFT"/>get(key, default, allow_local, stale)<br ALIGN="LEFT"/>get_multi(keys, prefix, allow_local)<br ALIGN="LEFT"/>make_set_fn()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>simple_get_multi(keys, allow_local, stale, stat_subname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.stats.CacheStats" [color="black", fontcolor="black", label=<{CacheStats|cache_name<br ALIGN="LEFT"/>hit_stat_name<br ALIGN="LEFT"/>hit_stat_template<br ALIGN="LEFT"/>miss_stat_name<br ALIGN="LEFT"/>miss_stat_template<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>total_stat_name<br ALIGN="LEFT"/>total_stat_template<br ALIGN="LEFT"/>|cache_hit(delta, subname)<br ALIGN="LEFT"/>cache_miss(delta, subname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.CacheUtils" [color="black", fontcolor="black", label=<{CacheUtils|permanent : bool<br ALIGN="LEFT"/>|add_multi(keys, prefix, time)<br ALIGN="LEFT"/>get_multi(keys, prefix)<br ALIGN="LEFT"/>incr_multi(keys, delta, prefix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.query_cache.CachedQuery" [color="black", fontcolor="black", label=<{CachedQuery|filter<br ALIGN="LEFT"/>is_precomputed<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>timestamps : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.query_cache.CachedQueryMutator" [color="black", fontcolor="black", label=<{CachedQueryMutator|mutator<br ALIGN="LEFT"/>to_prune : set<br ALIGN="LEFT"/>|delete(query, things)<br ALIGN="LEFT"/>insert(query, things)<br ALIGN="LEFT"/>replace(query, things, ttl)<br ALIGN="LEFT"/>send()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.queries.CachedResults" [color="black", fontcolor="black", label=<{CachedResults|data : list<br ALIGN="LEFT"/>filter<br ALIGN="LEFT"/>iden : str<br ALIGN="LEFT"/>new_query<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>sort_cols<br ALIGN="LEFT"/>|can_delete()<br ALIGN="LEFT"/>can_insert()<br ALIGN="LEFT"/>delete(items)<br ALIGN="LEFT"/>fetch(force, stale)<br ALIGN="LEFT"/>fetch_multi(crs, force, stale)<br ALIGN="LEFT"/>get_query_iden(query)<br ALIGN="LEFT"/>insert(items)<br ALIGN="LEFT"/>make_item_tuple(item)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.CampaignBuilder" [color="black", fontcolor="black", label=<{CampaignBuilder|<br ALIGN="LEFT"/>|thing_lookup(tuples)<br ALIGN="LEFT"/>valid_after(after)<br ALIGN="LEFT"/>wrap_items(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Captcha" [color="black", fontcolor="black", label=<{Captcha|error : str<br ALIGN="LEFT"/>iden<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.captcha.CaptchaController" [color="black", fontcolor="black", label=<{CaptchaController|<br ALIGN="LEFT"/>|GET_captchaimg(iden)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.CassandraException" [color="black", fontcolor="red", label=<{CassandraException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.cdn.CdnProvider" [color="black", fontcolor="black", label=<{CdnProvider|<br ALIGN="LEFT"/>|<I>get_client_ip</I>(environ)<br ALIGN="LEFT"/><I>get_client_location</I>(environ)<br ALIGN="LEFT"/><I>purge_content</I>(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.ChildrenCommentOrderer" [color="black", fontcolor="black", label=<{ChildrenCommentOrderer|children<br ALIGN="LEFT"/>|get_initial_candidates(comment_tree)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.middleware.CleanupMiddleware" [color="black", fontcolor="black", label=<{CleanupMiddleware|app<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ClickGadget" [color="black", fontcolor="black", label=<{ClickGadget|content : str<br ALIGN="LEFT"/>links<br ALIGN="LEFT"/>|make_content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.ClickthroughsByCodename" [color="black", fontcolor="black", label=<{ClickthroughsByCodename|codename<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|historical_totals(interval)<br ALIGN="LEFT"/>history(interval, codename)<br ALIGN="LEFT"/>promotion_history(codename, start, stop)<br ALIGN="LEFT"/>total_by_codename(codenames)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ClientInfoBar" [color="black", fontcolor="black", label=<{ClientInfoBar|client<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.cdn.cloudflare.CloudFlareCdnProvider" [color="black", fontcolor="black", label=<{CloudFlareCdnProvider|<br ALIGN="LEFT"/>|get_client_ip(environ)<br ALIGN="LEFT"/>get_client_location(environ)<br ALIGN="LEFT"/>purge_content(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.CloudSearchProvider" [color="black", fontcolor="black", label=<{CloudSearchProvider|InvalidQuery : tuple<br ALIGN="LEFT"/>SearchException : tuple<br ALIGN="LEFT"/>SearchQuery<br ALIGN="LEFT"/>SubredditSearchQuery<br ALIGN="LEFT"/>|run_changed(drain, min_size, limit, sleep_time, use_safe_get, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.CloudSearchQuery" [color="black", fontcolor="black", label=<{CloudSearchQuery|bq : str<br ALIGN="LEFT"/>converted_data : NoneType, dict<br ALIGN="LEFT"/>default_syntax : str<br ALIGN="LEFT"/>faceting : NoneType<br ALIGN="LEFT"/>include_over18 : bool<br ALIGN="LEFT"/>lucene_parser : NoneType<br ALIGN="LEFT"/>num : int<br ALIGN="LEFT"/>q : bytes, str<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>rank_expressions : NoneType<br ALIGN="LEFT"/>recent : NoneType<br ALIGN="LEFT"/>recents : dict<br ALIGN="LEFT"/>results : NoneType<br ALIGN="LEFT"/>search_api : NoneType<br ALIGN="LEFT"/>sort : NoneType<br ALIGN="LEFT"/>sorts : dict<br ALIGN="LEFT"/>sr : NoneType<br ALIGN="LEFT"/>start : int<br ALIGN="LEFT"/>syntax : NoneType, str<br ALIGN="LEFT"/>|create_boolean_query(queries)<br ALIGN="LEFT"/>customize_query(bq)<br ALIGN="LEFT"/>preprocess_query(query)<br ALIGN="LEFT"/>run(_update)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.CloudSearchSubredditSearchQuery" [color="black", fontcolor="black", label=<{CloudSearchSubredditSearchQuery|default_syntax : str<br ALIGN="LEFT"/>known_syntaxes : tuple<br ALIGN="LEFT"/>search_api<br ALIGN="LEFT"/>sorts : dict<br ALIGN="LEFT"/>|customize_query(bq)<br ALIGN="LEFT"/>preprocess_query(query)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.CloudSearchUploader" [color="black", fontcolor="black", label=<{CloudSearchUploader|doc_api<br ALIGN="LEFT"/>fullnames : NoneType<br ALIGN="LEFT"/>things : dict<br ALIGN="LEFT"/>types : tuple<br ALIGN="LEFT"/>use_safe_get : bool<br ALIGN="LEFT"/>|add_xml(thing, version)<br ALIGN="LEFT"/>batch_lookups()<br ALIGN="LEFT"/>delete_ids(ids)<br ALIGN="LEFT"/>delete_xml(thing, version)<br ALIGN="LEFT"/>desired_fullnames(items)<br ALIGN="LEFT"/><I>fields</I>(thing)<br ALIGN="LEFT"/>inject(quiet)<br ALIGN="LEFT"/>send_documents(docs)<br ALIGN="LEFT"/><I>should_index</I>(thing)<br ALIGN="LEFT"/>xml_from_things()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.CoerceToLong" [color="black", fontcolor="black", label=<{CoerceToLong|impl<br ALIGN="LEFT"/>|process_result_value(value, dialect)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.ipn.CoinbaseController" [color="black", fontcolor="black", label=<{CoinbaseController|abort_on_error : bool<br ALIGN="LEFT"/>event_type_mappings : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>webhook_secret<br ALIGN="LEFT"/>|process_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.Collection" [color="black", fontcolor="black", label=<{Collection|description : NoneType<br ALIGN="LEFT"/>is_spotlight : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>over_18 : bool<br ALIGN="LEFT"/>sr_names<br ALIGN="LEFT"/>|by_name(name)<br ALIGN="LEFT"/>get_all()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.promo_test.CollectionOrderTest" [color="black", fontcolor="black", label=<{CollectionOrderTest|correct_order : list<br ALIGN="LEFT"/>nsfw_non_spotlight<br ALIGN="LEFT"/>nsfw_spotlight<br ALIGN="LEFT"/>sfw_a<br ALIGN="LEFT"/>sfw_b<br ALIGN="LEFT"/>sfw_z<br ALIGN="LEFT"/>spotlight_a<br ALIGN="LEFT"/>spotlight_z<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_scenario_casing()<br ALIGN="LEFT"/>test_scenario_random()<br ALIGN="LEFT"/>test_scenario_reversed()<br ALIGN="LEFT"/>test_scenario_semi_sorted()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.CollectionStorage" [color="black", fontcolor="black", label=<{CollectionStorage|SR_NAMES_DELIM : str<br ALIGN="LEFT"/>|delete(name)<br ALIGN="LEFT"/>get_all()<br ALIGN="LEFT"/>get_collection(name)<br ALIGN="LEFT"/>set(name, description, srs, over_18, is_spotlight)<br ALIGN="LEFT"/>set_is_spotlight(name, is_spotlight)<br ALIGN="LEFT"/>set_over_18(name, over_18)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.promo_test.CollectionStorageTest" [color="black", fontcolor="black", label=<{CollectionStorageTest|name : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_set_attributes()<br ALIGN="LEFT"/>test_set_is_spotlight()<br ALIGN="LEFT"/>test_set_over_18()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.promo_test.CollectionTest" [color="black", fontcolor="black", label=<{CollectionTest|<br ALIGN="LEFT"/>|test_is_spotlight_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.ColumnQuery" [color="black", fontcolor="black", label=<{ColumnQuery|cls<br ALIGN="LEFT"/>column_finish : str<br ALIGN="LEFT"/>column_reversed : bool<br ALIGN="LEFT"/>column_start : str<br ALIGN="LEFT"/>column_to_obj<br ALIGN="LEFT"/>obj_to_column<br ALIGN="LEFT"/>rowkeys<br ALIGN="LEFT"/>sort_key<br ALIGN="LEFT"/>|<I>combine</I>(queries)<br ALIGN="LEFT"/>default_column_to_obj(columns)<br ALIGN="LEFT"/>default_obj_to_column(objs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.Comment" [color="black", fontcolor="black", label=<{Comment|affects_karma_type<br ALIGN="LEFT"/>archived_slow<br ALIGN="LEFT"/>author_slow<br ALIGN="LEFT"/>cache_ignore<br ALIGN="LEFT"/>is_stickyable<br ALIGN="LEFT"/>is_votable : bool<br ALIGN="LEFT"/>link_slow<br ALIGN="LEFT"/>parent_id<br ALIGN="LEFT"/>subreddit_slow<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>is_archived(sr)<br ALIGN="LEFT"/>keep_item(wrapped)<br ALIGN="LEFT"/>make_permalink(link, sr, context, anchor, force_domain)<br ALIGN="LEFT"/>make_permalink_slow(context, anchor, force_domain)<br ALIGN="LEFT"/>update_nofollow(user, wrapped)<br ALIGN="LEFT"/>update_search_index(boost_only)<br ALIGN="LEFT"/>wrapped_cache_key(wrapped, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.CommentBuilder" [color="black", fontcolor="black", label=<{CommentBuilder|children : NoneType<br ALIGN="LEFT"/>comment : NoneType<br ALIGN="LEFT"/>comments : NoneType<br ALIGN="LEFT"/>context : int<br ALIGN="LEFT"/>continue_this_thread : bool<br ALIGN="LEFT"/>edits_visible : bool<br ALIGN="LEFT"/>in_qa_mode<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>load_more : bool<br ALIGN="LEFT"/>max_depth : int<br ALIGN="LEFT"/>missing_root_comments : set<br ALIGN="LEFT"/>missing_root_count : int<br ALIGN="LEFT"/>num : NoneType<br ALIGN="LEFT"/>ordered_comment_tuples : list<br ALIGN="LEFT"/>show_deleted<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>uncollapse_all<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>item_iter(a)<br ALIGN="LEFT"/>keep_item(item)<br ALIGN="LEFT"/>load_comment_order()<br ALIGN="LEFT"/>make_wrapped_items(comment_tuples)<br ALIGN="LEFT"/>uncollapse_special_comments(wrapped_by_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.things.CommentButtons" [color="black", fontcolor="black", label=<{CommentButtons|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.CommentJsonTemplate" [color="black", fontcolor="black", label=<{CommentJsonTemplate|<br ALIGN="LEFT"/>|get_json(item)<br ALIGN="LEFT"/>get_link_name(item)<br ALIGN="LEFT"/>get_parent_id(item)<br ALIGN="LEFT"/>get_rendered(item, render_style)<br ALIGN="LEFT"/>render_child(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.CommentMock" [color="black", fontcolor="black", label=<{CommentMock|author_id : NoneType<br ALIGN="LEFT"/>body : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.models.commentbuilder_test.CommentOrderTest" [color="black", fontcolor="black", label=<{CommentOrderTest|link : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_comment_order_children()<br ALIGN="LEFT"/>test_comment_order_children_limit()<br ALIGN="LEFT"/>test_comment_order_children_limit_bug()<br ALIGN="LEFT"/>test_comment_order_depth()<br ALIGN="LEFT"/>test_comment_order_full()<br ALIGN="LEFT"/>test_comment_order_full_asc()<br ALIGN="LEFT"/>test_comment_order_invalid_permalink_defocus()<br ALIGN="LEFT"/>test_comment_order_invalid_sticky()<br ALIGN="LEFT"/>test_comment_order_limit()<br ALIGN="LEFT"/>test_comment_order_permalink()<br ALIGN="LEFT"/>test_comment_order_permalink_context()<br ALIGN="LEFT"/>test_comment_order_qa()<br ALIGN="LEFT"/>test_comment_order_qa_multiple_responders()<br ALIGN="LEFT"/>test_comment_order_sticky()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.CommentOrderer" [color="black", fontcolor="black", label=<{CommentOrderer|<br ALIGN="LEFT"/>|cache_key()<br ALIGN="LEFT"/>get_comment_order()<br ALIGN="LEFT"/>get_initial_candidates(comment_tree)<br ALIGN="LEFT"/>get_initial_comment_list(comment_tree)<br ALIGN="LEFT"/>read_cache()<br ALIGN="LEFT"/>should_read_cache()<br ALIGN="LEFT"/>write_cache(link, sort, timer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.CommentOrdererBase" [color="black", fontcolor="black", label=<{CommentOrdererBase|link<br ALIGN="LEFT"/>max_comments<br ALIGN="LEFT"/>max_depth<br ALIGN="LEFT"/>rev_sort<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|get_comment_order()<br ALIGN="LEFT"/><I>get_initial_candidates</I>(comment_tree)<br ALIGN="LEFT"/>get_initial_comment_list(comment_tree)<br ALIGN="LEFT"/>modify_comment_tree(comment_tree)<br ALIGN="LEFT"/>update_candidates(candidates, sorter, to_add)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.CommentPane" [color="black", fontcolor="black", label=<{CommentPane|article<br ALIGN="LEFT"/>can_reply<br ALIGN="LEFT"/>edits_visible<br ALIGN="LEFT"/>max_depth<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>rendered<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>|cache_key()<br ALIGN="LEFT"/>listing_iter(l)<br ALIGN="LEFT"/>render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.CommentSavesByAccount" [color="black", fontcolor="black", label=<{CommentSavesByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.CommentSavesByCategory" [color="black", fontcolor="black", label=<{CommentSavesByCategory|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.CommentSavesBySubreddit" [color="black", fontcolor="black", label=<{CommentSavesBySubreddit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.CommentScoresByLink" [color="black", fontcolor="black", label=<{CommentScoresByLink|<br ALIGN="LEFT"/>|get_scores(link, sort)<br ALIGN="LEFT"/>set_scores(link, sort, scores_by_comment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.CommentSortMenu" [color="black", fontcolor="black", label=<{CommentSortMenu|hidden_options : list<br ALIGN="LEFT"/>suggested_sort<br ALIGN="LEFT"/>suggested_sort_options : tuple<br ALIGN="LEFT"/>|make_title(attr)<br ALIGN="LEFT"/>visible_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.comment_tree.CommentTree" [color="black", fontcolor="black", label=<{CommentTree|cids<br ALIGN="LEFT"/>depth<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>num_children<br ALIGN="LEFT"/>parents<br ALIGN="LEFT"/>tree<br ALIGN="LEFT"/>|add_comments(link, comments)<br ALIGN="LEFT"/>by_link(link, timer)<br ALIGN="LEFT"/>on_new_link(link)<br ALIGN="LEFT"/>rebuild(link)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.comment_tree.CommentTreePermacache" [color="black", fontcolor="black", label=<{CommentTreePermacache|<br ALIGN="LEFT"/>|add_comments(link, comments)<br ALIGN="LEFT"/>get_tree_pieces(link, timer)<br ALIGN="LEFT"/>prepare_new_storage(link)<br ALIGN="LEFT"/>rebuild(link, comments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.CommentVisitsBox" [color="black", fontcolor="black", label=<{CommentVisitsBox|visits : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.CommentVisitsByUser" [color="black", fontcolor="black", label=<{CommentVisitsByUser|MAX_VISITS : int<br ALIGN="LEFT"/>|add_visit(user, link, visit_time)<br ALIGN="LEFT"/>get_and_update(user, link, visit_time)<br ALIGN="LEFT"/>get_previous_visits(user, link)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.CommentVotesByAccount" [color="black", fontcolor="black", label=<{CommentVotesByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.CommentsByAccount" [color="black", fontcolor="black", label=<{CommentsByAccount|<br ALIGN="LEFT"/>|add_comment(account, comment)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.CommentsController" [color="black", fontcolor="black", label=<{CommentsController|suppress_reply_buttons : bool<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>|GET_listing()<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.CommentsTimeMenu" [color="black", fontcolor="black", label=<{CommentsTimeMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.amqp.Config" [color="black", fontcolor="black", label=<{Config|amqp_exchange : str<br ALIGN="LEFT"/>amqp_host<br ALIGN="LEFT"/>amqp_logging<br ALIGN="LEFT"/>amqp_pass<br ALIGN="LEFT"/>amqp_user<br ALIGN="LEFT"/>amqp_virtual_host<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>queues<br ALIGN="LEFT"/>reset_caches<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.configparse.ConfigValue" [color="black", fontcolor="black", label=<{ConfigValue|messages_re<br ALIGN="LEFT"/>|baseplate(baseplate_parser)<br ALIGN="LEFT"/>bool(v, key)<br ALIGN="LEFT"/>choice()<br ALIGN="LEFT"/>dict(key_type, value_type, delim, kvdelim)<br ALIGN="LEFT"/>float(v, key)<br ALIGN="LEFT"/>int(v, key)<br ALIGN="LEFT"/>messages(v, key)<br ALIGN="LEFT"/>set(v, key)<br ALIGN="LEFT"/>set_of(value_type, delim)<br ALIGN="LEFT"/>str(v, key)<br ALIGN="LEFT"/>timeinterval(v, key)<br ALIGN="LEFT"/>to_iter(v, delim)<br ALIGN="LEFT"/>tuple(v, key)<br ALIGN="LEFT"/>tuple_of(value_type, delim)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.configparse.ConfigValueParser" [color="black", fontcolor="black", label=<{ConfigValueParser|config_keys : dict<br ALIGN="LEFT"/>raw_data<br ALIGN="LEFT"/>|add_spec(spec)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_sql.ConfigurationError" [color="black", fontcolor="red", label=<{ConfigurationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.ConfigurationException" [color="black", fontcolor="red", label=<{ConfigurationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ConfirmAwardClaim" [color="black", fontcolor="black", label=<{ConfirmAwardClaim|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.merge.ConflictException" [color="black", fontcolor="red", label=<{ConflictException|htmldiff<br ALIGN="LEFT"/>new<br ALIGN="LEFT"/>new_id : str<br ALIGN="LEFT"/>original<br ALIGN="LEFT"/>your<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.amqp.ConnectionManager" [color="black", fontcolor="black", label=<{ConnectionManager|channel : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>have_init : bool<br ALIGN="LEFT"/>|get_channel(reconnect)<br ALIGN="LEFT"/>get_connection()<br ALIGN="LEFT"/>init_queue()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.ConsumableToken" [color="black", fontcolor="black", label=<{ConsumableToken|used : bool<br ALIGN="LEFT"/>|consume()<br ALIGN="LEFT"/>get_token(_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ContactUs" [color="black", fontcolor="black", label=<{ContactUs|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.ContentLengthError" [color="black", fontcolor="red", label=<{ContentLengthError|max_length<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.ContribSR" [color="black", fontcolor="black", label=<{ContribSR|name : str<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>query_param : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.ContributorListing" [color="black", fontcolor="black", label=<{ContributorListing|form_title<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ContributorTableItem" [color="black", fontcolor="black", label=<{ContributorTableItem|type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.ControversyTimeMenu" [color="black", fontcolor="black", label=<{ControversyTimeMenu|button_cls<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.cookies.Cookie" [color="black", fontcolor="black", label=<{Cookie|dirty : bool<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>expires : NoneType<br ALIGN="LEFT"/>httponly : bool<br ALIGN="LEFT"/>secure : NoneType<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|classify(cookie_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.auth.cookie.CookieAuthenticationProvider" [color="black", fontcolor="black", label=<{CookieAuthenticationProvider|config : dict<br ALIGN="LEFT"/>|get_authenticated_account()<br ALIGN="LEFT"/>is_logout_allowed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cookies.Cookies" [color="black", fontcolor="black", label=<{Cookies|<br ALIGN="LEFT"/>|add(name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.stats.Counter" [color="black", fontcolor="black", label=<{Counter|client<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|decrement(subname, delta)<br ALIGN="LEFT"/>increment(subname, delta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.CounterAndTimerTest" [color="black", fontcolor="black", label=<{CounterAndTimerTest|<br ALIGN="LEFT"/>|client()<br ALIGN="LEFT"/>test_counter()<br ALIGN="LEFT"/>test_get_stat_name()<br ALIGN="LEFT"/>test_timer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.stats.CountingStatBuffer" [color="black", fontcolor="black", label=<{CountingStatBuffer|data : defaultdict<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>record(key, delta)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.CountingStatBufferTest" [color="black", fontcolor="black", label=<{CountingStatBufferTest|<br ALIGN="LEFT"/>|test_csb()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.utils_test.CrappyQuery" [color="black", fontcolor="black", label=<{CrappyQuery|chunk_num_to_fail_on : NoneType<br ALIGN="LEFT"/>current_chunk : int<br ALIGN="LEFT"/>end<br ALIGN="LEFT"/>failures_between_chunks : int<br ALIGN="LEFT"/>i<br ALIGN="LEFT"/>num_after_was_called : int<br ALIGN="LEFT"/>num_failed : int<br ALIGN="LEFT"/>should_fail : bool<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>total_num_failed : int<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.CreateCustomerPaymentProfileRequest" [color="black", fontcolor="black", label=<{CreateCustomerPaymentProfileRequest|<br ALIGN="LEFT"/>|process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.CreateCustomerProfileRequest" [color="black", fontcolor="black", label=<{CreateCustomerProfileRequest|<br ALIGN="LEFT"/>|process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.CreateCustomerProfileTransactionRequest" [color="black", fontcolor="black", label=<{CreateCustomerProfileTransactionRequest|extraOptions<br ALIGN="LEFT"/>response_keys : tuple<br ALIGN="LEFT"/>response_types : dict<br ALIGN="LEFT"/>|package_response(res)<br ALIGN="LEFT"/>process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.CreateSubreddit" [color="black", fontcolor="black", label=<{CreateSubreddit|color_options<br ALIGN="LEFT"/>subreddit_selector<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_sql.CreationError" [color="black", fontcolor="red", label=<{CreationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Creddits" [color="black", fontcolor="black", label=<{Creddits|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.CreditCard" [color="black", fontcolor="black", label=<{CreditCard|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.CreditGild" [color="black", fontcolor="black", label=<{CreditGild|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.CrossDomain" [color="black", fontcolor="black", label=<{CrossDomain|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.CssError" [color="black", fontcolor="black", label=<{CssError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.bidding.CustomerID" [color="black", fontcolor="black", label=<{CustomerID|account_id<br ALIGN="LEFT"/>authorize_id<br ALIGN="LEFT"/>|get_id(user)<br ALIGN="LEFT"/>set(user, _id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.DataSource" [color="black", fontcolor="black", label=<{DataSource|data : NoneType<br ALIGN="LEFT"/>dependencies<br ALIGN="LEFT"/>wrap<br ALIGN="LEFT"/>|get_content()<br ALIGN="LEFT"/>get_source(use_built_statics)<br ALIGN="LEFT"/>use()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.thing.DataThing" [color="black", fontcolor="black", label=<{DataThing|c<br ALIGN="LEFT"/>safe_set_attr<br ALIGN="LEFT"/>|get_read_modify_write_lock()<br ALIGN="LEFT"/>get_things_from_cache(ids, stale, allow_local)<br ALIGN="LEFT"/><I>get_things_from_db</I>(ids)<br ALIGN="LEFT"/><I>record_cache_write</I>(event, delta)<br ALIGN="LEFT"/>update_from_cache(lock)<br ALIGN="LEFT"/>write_changes_to_db(changes, brand_new_thing)<br ALIGN="LEFT"/><I>write_new_thing_to_db</I>()<br ALIGN="LEFT"/><I>write_props_to_db</I>(props, data_props, brand_new_thing)<br ALIGN="LEFT"/>write_thing_to_cache(lock, brand_new_thing)<br ALIGN="LEFT"/>write_things_to_cache(things_by_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.DebugFooter" [color="black", fontcolor="black", label=<{DebugFooter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.recommend.DefaultExploreSettings" [color="black", fontcolor="black", label=<{DefaultExploreSettings|discovery : bool<br ALIGN="LEFT"/>nsfw : bool<br ALIGN="LEFT"/>personalized : bool<br ALIGN="LEFT"/>rising : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.DefaultSR" [color="black", fontcolor="black", label=<{DefaultSR|header<br ALIGN="LEFT"/>header_size<br ALIGN="LEFT"/>header_title<br ALIGN="LEFT"/>stylesheet_url<br ALIGN="LEFT"/>stylesheet_url_http<br ALIGN="LEFT"/>stylesheet_url_https<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>wiki_edit_age<br ALIGN="LEFT"/>wiki_edit_karma<br ALIGN="LEFT"/>wiki_use_subreddit_karma<br ALIGN="LEFT"/>wikimode<br ALIGN="LEFT"/>|get_all_comments()<br ALIGN="LEFT"/>get_gilded()<br ALIGN="LEFT"/>get_live_promos()<br ALIGN="LEFT"/>is_wikibanned(user)<br ALIGN="LEFT"/>is_wikicontributor(user)<br ALIGN="LEFT"/>is_wikicreate(user)<br ALIGN="LEFT"/>wiki_can_submit(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.functional.controller.del_msg_test.DelMsgTest" [color="black", fontcolor="black", label=<{DelMsgTest|CONTROLLER : str<br ALIGN="LEFT"/>id : int<br ALIGN="LEFT"/>|do_del_msg(name)<br ALIGN="LEFT"/>mock_del_msg(thing, ret)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_del_msg_failure_with_link()<br ALIGN="LEFT"/>test_del_msg_failure_with_null_msg()<br ALIGN="LEFT"/>test_del_msg_failure_with_sender()<br ALIGN="LEFT"/>test_del_msg_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.DeleteCustomerPaymentProfileRequest" [color="black", fontcolor="black", label=<{DeleteCustomerPaymentProfileRequest|<br ALIGN="LEFT"/>|process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.account.DeletedUser" [color="black", fontcolor="black", label=<{DeletedUser|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.DeletedUserInterstitial" [color="black", fontcolor="black", label=<{DeletedUserInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.DenormalizedRelation" [color="black", fontcolor="black", label=<{DenormalizedRelation|<br ALIGN="LEFT"/>|create(thing1, thing2s)<br ALIGN="LEFT"/>destroy(thing1, thing2s)<br ALIGN="LEFT"/>fast_query(thing1, thing2s)<br ALIGN="LEFT"/><I>value_for</I>(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.DenormalizedView" [color="black", fontcolor="black", label=<{DenormalizedView|<br ALIGN="LEFT"/>|is_date_prop(attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.Details" [color="black", fontcolor="black", label=<{Details|link<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.DetailsPage" [color="black", fontcolor="black", label=<{DetailsPage|details : NoneType<br ALIGN="LEFT"/>extension_handling : bool<br ALIGN="LEFT"/>|rightbox()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.DiffAssertionError" [color="black", fontcolor="red", label=<{DiffAssertionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.DomainListingMiddleware" [color="black", fontcolor="black", label=<{DomainListingMiddleware|app<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.DomainMiddleware" [color="black", fontcolor="black", label=<{DomainMiddleware|app<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.DomainSR" [color="black", fontcolor="black", label=<{DomainSR|allow_gilding<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>idn<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|get_links(sort, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.DuplicateTransactionError" [color="black", fontcolor="red", label=<{DuplicateTransactionError|transaction_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.EditReddit" [color="black", fontcolor="black", label=<{EditReddit|extension_handling : bool<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.einhorn.EinhornSyncWorker" [color="black", fontcolor="black", label=<{EinhornSyncWorker|alive : bool<br ALIGN="LEFT"/>|init_signals()<br ALIGN="LEFT"/>start_graceful_shutdown(signal_number, frame)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.mail_queue.Email" [color="black", fontcolor="black", label=<{Email|Kind<br ALIGN="LEFT"/>body : str<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>fr_addr : str<br ALIGN="LEFT"/>handler<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>msg_hash<br ALIGN="LEFT"/>reply_to : str<br ALIGN="LEFT"/>sent : bool<br ALIGN="LEFT"/>subject<br ALIGN="LEFT"/>subjects : dict<br ALIGN="LEFT"/>thing<br ALIGN="LEFT"/>to_addr<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|from_name()<br ALIGN="LEFT"/>get_unsent(max_date, batch_limit, kind)<br ALIGN="LEFT"/>set_sent(date, rejected)<br ALIGN="LEFT"/>should_queue()<br ALIGN="LEFT"/>to_MIMEText()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.EmailChangeEmail" [color="black", fontcolor="black", label=<{EmailChangeEmail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.mail_queue.EmailHandler" [color="black", fontcolor="black", label=<{EmailHandler|metadata<br ALIGN="LEFT"/>opt_table<br ALIGN="LEFT"/>queue_table<br ALIGN="LEFT"/>reject_table<br ALIGN="LEFT"/>track_table<br ALIGN="LEFT"/>|add_to_queue(user, emails, from_name, fr_addr, kind, date, ip, body, reply_to, thing)<br ALIGN="LEFT"/>clear_queue(max_date, kind)<br ALIGN="LEFT"/>from_queue(max_date, batch_limit, kind)<br ALIGN="LEFT"/>get_recipient(msg_hash)<br ALIGN="LEFT"/>has_opted_out(email)<br ALIGN="LEFT"/>opt_in(msg_hash)<br ALIGN="LEFT"/>opt_out(msg_hash)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.email.EmailProvider" [color="black", fontcolor="black", label=<{EmailProvider|<br ALIGN="LEFT"/>|<I>send_email</I>(to_address, from_address, subject, text, reply_to, parent_email_id, other_email_ids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.email.EmailSendError" [color="black", fontcolor="red", label=<{EmailSendError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.newsletter.EmailUnacceptableError" [color="black", fontcolor="red", label=<{EmailUnacceptableError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.token.EmailVerificationToken" [color="black", fontcolor="black", label=<{EmailVerificationToken|token_size : int<br ALIGN="LEFT"/>|valid_for_user(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Embed" [color="black", fontcolor="black", label=<{Embed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.embed.EmbedController" [color="black", fontcolor="black", label=<{EmbedController|GET_help<br ALIGN="LEFT"/>POST_help<br ALIGN="LEFT"/>allow_stylesheets : bool<br ALIGN="LEFT"/>|GET_blog()<br ALIGN="LEFT"/>GET_faq()<br ALIGN="LEFT"/>rendercontent(input, fp)<br ALIGN="LEFT"/>renderurl(override)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.base.EmbedHandler" [color="black", fontcolor="black", label=<{EmbedHandler|http_error_301<br ALIGN="LEFT"/>http_error_302<br ALIGN="LEFT"/>http_error_303<br ALIGN="LEFT"/>http_error_307<br ALIGN="LEFT"/>|http_redirect(req, fp, code, msg, hdrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.emr_helpers.EmrException" [color="black", fontcolor="red", label=<{EmrException|msg<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.emr_helpers.EmrJob" [color="black", fontcolor="black", label=<{EmrJob|ami_version : str<br ALIGN="LEFT"/>bootstrap_actions : list<br ALIGN="LEFT"/>conn<br ALIGN="LEFT"/>ec2_keyname : NoneType<br ALIGN="LEFT"/>enable_debugging : bool<br ALIGN="LEFT"/>hadoop_version : str<br ALIGN="LEFT"/>job_flow_role : NoneType<br ALIGN="LEFT"/>jobflowid : NoneType<br ALIGN="LEFT"/>keep_alive : bool<br ALIGN="LEFT"/>log_uri : NoneType<br ALIGN="LEFT"/>master_instance_type : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>num_instances : int<br ALIGN="LEFT"/>service_role : NoneType<br ALIGN="LEFT"/>setup_steps : list<br ALIGN="LEFT"/>slave_instance_type : str<br ALIGN="LEFT"/>steps : list<br ALIGN="LEFT"/>tags : dict<br ALIGN="LEFT"/>visible_to_all_users : bool<br ALIGN="LEFT"/>|modify_slave_count(num_slaves)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>terminate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.EnemyListing" [color="black", fontcolor="black", label=<{EnemyListing|container_name<br ALIGN="LEFT"/>has_add_form : bool<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.EnemyTableItem" [color="black", fontcolor="black", label=<{EnemyTableItem|cells : tuple<br ALIGN="LEFT"/>container_name<br ALIGN="LEFT"/>remove_access_required : bool<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.utils.Enum" [color="black", fontcolor="black", label=<{Enum|name : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.error.ErrorController" [color="black", fontcolor="black", label=<{ErrorController|DELETE_document<br ALIGN="LEFT"/>PATCH_document<br ALIGN="LEFT"/>POST_document<br ALIGN="LEFT"/>PUT_document<br ALIGN="LEFT"/>admins<br ALIGN="LEFT"/>allowed_render_styles : tuple<br ALIGN="LEFT"/>handles_csrf : bool<br ALIGN="LEFT"/>|GET_document()<br ALIGN="LEFT"/><I>check_for_bearer_token</I>()<br ALIGN="LEFT"/>send400()<br ALIGN="LEFT"/>send403()<br ALIGN="LEFT"/>send404()<br ALIGN="LEFT"/>send429()<br ALIGN="LEFT"/>send503()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ErrorPage" [color="black", fontcolor="black", label=<{ErrorPage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.errors.ErrorSet" [color="black", fontcolor="black", label=<{ErrorSet|errors : dict<br ALIGN="LEFT"/>|add(error_name, msg_params, field, code)<br ALIGN="LEFT"/>add_error(error)<br ALIGN="LEFT"/>get(name, default)<br ALIGN="LEFT"/>get_first(field_name)<br ALIGN="LEFT"/>remove(pair)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.eventcollector.Event" [color="black", fontcolor="black", label=<{Event|event_type<br ALIGN="LEFT"/>obfuscated_data : dict<br ALIGN="LEFT"/>payload : dict<br ALIGN="LEFT"/>testing<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>truncatable_field : NoneType<br ALIGN="LEFT"/>uuid : str<br ALIGN="LEFT"/>|add(field, value, obfuscate)<br ALIGN="LEFT"/>add_subreddit_fields(subreddit)<br ALIGN="LEFT"/>add_target_fields(target)<br ALIGN="LEFT"/>add_text(key, value, obfuscate)<br ALIGN="LEFT"/>dump()<br ALIGN="LEFT"/>get(field, obfuscated)<br ALIGN="LEFT"/>get_context_data(request, context)<br ALIGN="LEFT"/>get_sensitive_context_data(request, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.eventcollector.EventPublisher" [color="black", fontcolor="black", label=<{EventPublisher|MAX_CONTENT_LENGTH : int<br ALIGN="LEFT"/>MAX_EVENT_SIZE : int<br ALIGN="LEFT"/>max_content_length : int<br ALIGN="LEFT"/>max_event_size : int<br ALIGN="LEFT"/>secret<br ALIGN="LEFT"/>session : Session<br ALIGN="LEFT"/>signature_key<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>timeout : NoneType<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>user_agent<br ALIGN="LEFT"/>|publish(events)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.eventcollector.EventQueue" [color="black", fontcolor="black", label=<{EventQueue|queue<br ALIGN="LEFT"/>|bucketing_event(experiment_id, experiment_name, variant, user, loid)<br ALIGN="LEFT"/>cache_poisoning_event(poison_info, request, context)<br ALIGN="LEFT"/>comment_event(new_comment, request, context)<br ALIGN="LEFT"/>login_event(action_name, error_msg, user_name, email, remember_me, newsletter, email_verified, signature, request, context)<br ALIGN="LEFT"/>loid_event(loid, action_name, request, context)<br ALIGN="LEFT"/>message_event(message, event_type, request, context)<br ALIGN="LEFT"/>mod_event(modaction, subreddit, mod, target, request, context)<br ALIGN="LEFT"/>modmail_event(message, request, context)<br ALIGN="LEFT"/>muted_forbidden_event(details_text, subreddit, parent_message, target, request, context)<br ALIGN="LEFT"/>page_bucketing_event(experiment_id, experiment_name, variant, content_id, request, context)<br ALIGN="LEFT"/>quarantine_event(event_type, subreddit, request, context)<br ALIGN="LEFT"/>report_event(reason, details_text, subreddit, target, request, context, event_type)<br ALIGN="LEFT"/>save_event(event)<br ALIGN="LEFT"/>submit_event(new_post, request, context)<br ALIGN="LEFT"/>timeout_forbidden_event(action_name, details_text, target, target_fullname, subreddit, request, context)<br ALIGN="LEFT"/>vote_event(vote)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ExploreItem" [color="black", fontcolor="black", label=<{ExploreItem|comment : NoneType<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>src<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|is_over18()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ExploreItemListing" [color="black", fontcolor="black", label=<{ExploreItemListing|settings<br ALIGN="LEFT"/>things : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.recommend.ExploreSettings" [color="black", fontcolor="black", label=<{ExploreSettings|<br ALIGN="LEFT"/>|for_user(account)<br ALIGN="LEFT"/>record_settings(user, personalized, discovery, rising, nsfw)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.export.ExportError" [color="black", fontcolor="red", label=<{ExportError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.ExtensionMiddleware" [color="black", fontcolor="black", label=<{ExtensionMiddleware|app<br ALIGN="LEFT"/>ext_pattern<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.account.FakeAccount" [color="black", fontcolor="black", label=<{FakeAccount|pref_no_profanity : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.models.thing_test.FakeLock" [color="black", fontcolor="black", label=<{FakeLock|have_lock : bool<br ALIGN="LEFT"/>|acquire()<br ALIGN="LEFT"/>release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.query_cache.FakeQuery" [color="black", fontcolor="black", label=<{FakeQuery|precomputed : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.FakeSRMember" [color="black", fontcolor="black", label=<{FakeSRMember|permission_class<br ALIGN="LEFT"/>|get_permissions()<br ALIGN="LEFT"/>has_permission(perm)<br ALIGN="LEFT"/>is_superuser()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.FakeSubreddit" [color="black", fontcolor="black", label=<{FakeSubreddit|allow_ads<br ALIGN="LEFT"/>allow_gilding<br ALIGN="LEFT"/>|can_change_stylesheet(user)<br ALIGN="LEFT"/>can_comment(user)<br ALIGN="LEFT"/>can_submit(user, promotion)<br ALIGN="LEFT"/>can_view(user)<br ALIGN="LEFT"/>get_all_comments()<br ALIGN="LEFT"/><I>get_gilded</I>()<br ALIGN="LEFT"/>is_banned(user)<br ALIGN="LEFT"/>is_moderator(user)<br ALIGN="LEFT"/>is_muted(user)<br ALIGN="LEFT"/>keep_for_rising(sr_id)<br ALIGN="LEFT"/>spammy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.award.FakeTrophy" [color="black", fontcolor="black", label=<{FakeTrophy|description : NoneType<br ALIGN="LEFT"/>trophy_url : NoneType<br ALIGN="LEFT"/>url : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.FakeUdpSocket" [color="black", fontcolor="black", label=<{FakeUdpSocket|datagrams : list<br ALIGN="LEFT"/>host : NoneType<br ALIGN="LEFT"/>port : NoneType<br ALIGN="LEFT"/>|sendto(datagram, host_port)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.cdn.fastly.FastlyCdnProvider" [color="black", fontcolor="black", label=<{FastlyCdnProvider|<br ALIGN="LEFT"/>|get_client_ip(environ)<br ALIGN="LEFT"/>get_client_location(environ)<br ALIGN="LEFT"/>purge_content(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.feature.state.FeatureState" [color="black", fontcolor="black", label=<{FeatureState|DEFAULT_CONTROL_GROUPS : dict<br ALIGN="LEFT"/>DISABLED_CFG : dict<br ALIGN="LEFT"/>ENABLED_CFG : dict<br ALIGN="LEFT"/>GLOBALLY_OFF : str<br ALIGN="LEFT"/>GLOBALLY_ON : str<br ALIGN="LEFT"/>NUM_BUCKETS : int<br ALIGN="LEFT"/>config : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>world<br ALIGN="LEFT"/>|get_all(world)<br ALIGN="LEFT"/>get_content_id()<br ALIGN="LEFT"/>is_enabled(user, subreddit, subdomain, oauth_client)<br ALIGN="LEFT"/>is_page_experiment(experiment)<br ALIGN="LEFT"/>is_user_experiment(experiment)<br ALIGN="LEFT"/>variant(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.common.FieldsBase" [color="black", fontcolor="black", label=<{FieldsBase|<br ALIGN="LEFT"/>|all_fields()<br ALIGN="LEFT"/>cloudsearch_fieldnames(type_, types)<br ALIGN="LEFT"/>cloudsearch_fields(type_, types)<br ALIGN="LEFT"/>fields()<br ALIGN="LEFT"/>lucene_fieldnames(type_, types)<br ALIGN="LEFT"/>lucene_fields(type_, types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.common.FieldsMeta" [color="black", fontcolor="black", label=<{FieldsMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.js.FileSource" [color="black", fontcolor="black", label=<{FileSource|dependencies<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|get_source(use_built_statics)<br ALIGN="LEFT"/>url(absolute, mangle_name)<br ALIGN="LEFT"/>use()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.media.filesystem.FileSystemMediaProvider" [color="black", fontcolor="black", label=<{FileSystemMediaProvider|config : dict<br ALIGN="LEFT"/>|make_inaccessible(url)<br ALIGN="LEFT"/>purge(url)<br ALIGN="LEFT"/>put(category, name, contents, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.Filtered" [color="black", fontcolor="black", label=<{Filtered|multi_path<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>unfiltered_path : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FilteredInfoBar" [color="black", fontcolor="black", label=<{FilteredInfoBar|css_class : NoneType, str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.flair.Flair" [color="black", fontcolor="black", label=<{Flair|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairCsv" [color="black", fontcolor="black", label=<{FlairCsv|<br ALIGN="LEFT"/>|add_line()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.FlairCsvJsonTemplate" [color="black", fontcolor="black", label=<{FlairCsvJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairList" [color="black", fontcolor="black", label=<{FlairList|flair<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.builder.FlairListBuilder" [color="black", fontcolor="black", label=<{FlairListBuilder|orig_rules<br ALIGN="LEFT"/>|init_query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.FlairListJsonTemplate" [color="black", fontcolor="black", label=<{FlairListJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairListRow" [color="black", fontcolor="black", label=<{FlairListRow|user<br ALIGN="LEFT"/>|from_rel(rel)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairNextLink" [color="black", fontcolor="black", label=<{FlairNextLink|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairPane" [color="black", fontcolor="black", label=<{FlairPane|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairPrefs" [color="black", fontcolor="black", label=<{FlairPrefs|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairSelector" [color="black", fontcolor="black", label=<{FlairSelector|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.FlairSelectorJsonTemplate" [color="black", fontcolor="black", label=<{FlairSelectorJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairSelectorLinkSample" [color="black", fontcolor="black", label=<{FlairSelectorLinkSample|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.flair.FlairTemplate" [color="black", fontcolor="black", label=<{FlairTemplate|<br ALIGN="LEFT"/>|covers(other_template)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.flair.FlairTemplateBySubredditIndex" [color="black", fontcolor="black", label=<{FlairTemplateBySubredditIndex|MAX_FLAIR_TEMPLATES : int<br ALIGN="LEFT"/>|by_sr(sr_id, create)<br ALIGN="LEFT"/>clear(sr_id, flair_type)<br ALIGN="LEFT"/>create_template(sr_id, text, css_class, text_editable, flair_type)<br ALIGN="LEFT"/>delete_by_id(ft_id, flair_type)<br ALIGN="LEFT"/>get_template(sr_id, ft_id, flair_type)<br ALIGN="LEFT"/>get_template_ids(sr_id, flair_type)<br ALIGN="LEFT"/>insert(ft_id, position, flair_type)<br ALIGN="LEFT"/>iter_template_ids(flair_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairTemplateEditor" [color="black", fontcolor="black", label=<{FlairTemplateEditor|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairTemplateList" [color="black", fontcolor="black", label=<{FlairTemplateList|templates<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairTemplateSample" [color="black", fontcolor="black", label=<{FlairTemplateSample|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.errors.ForbiddenError" [color="black", fontcolor="black", label=<{ForbiddenError|explanation<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FormPage" [color="black", fontcolor="black", label=<{FormPage|create_reddit_box : bool<br ALIGN="LEFT"/>submit_box : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.front.FormsController" [color="black", fontcolor="black", label=<{FormsController|<br ALIGN="LEFT"/>|GET_adminoff(dest)<br ALIGN="LEFT"/>GET_adminon(dest)<br ALIGN="LEFT"/>GET_claim(secret)<br ALIGN="LEFT"/>GET_creddits()<br ALIGN="LEFT"/>GET_creditgild(passthrough)<br ALIGN="LEFT"/>GET_gold(is_payment, goldtype, period, months, num_creddits, signed, recipient, giftmessage, thing, email, edit)<br ALIGN="LEFT"/>GET_login(dest)<br ALIGN="LEFT"/>GET_logout(dest)<br ALIGN="LEFT"/>GET_optin(msg_hash)<br ALIGN="LEFT"/>GET_optout(msg_hash)<br ALIGN="LEFT"/>GET_password()<br ALIGN="LEFT"/>GET_prefs(location, verified)<br ALIGN="LEFT"/>GET_register(dest)<br ALIGN="LEFT"/>GET_resetpassword(token, key)<br ALIGN="LEFT"/>GET_subscription()<br ALIGN="LEFT"/>GET_try_compact(dest)<br ALIGN="LEFT"/>GET_unsubscribe_emails(user_id36, provided_mac)<br ALIGN="LEFT"/>GET_verify(dest, reason)<br ALIGN="LEFT"/>GET_verify_email(token, dest)<br ALIGN="LEFT"/>POST_logout(dest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.FraudForm" [color="black", fontcolor="black", label=<{FraudForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.account.Friend" [color="black", fontcolor="black", label=<{Friend|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.FriendListing" [color="black", fontcolor="black", label=<{FriendListing|container_name<br ALIGN="LEFT"/>form_title<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FriendTableItem" [color="black", fontcolor="black", label=<{FriendTableItem|cells<br ALIGN="LEFT"/>container_name<br ALIGN="LEFT"/>remove_access_required : bool<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.FriendTableItemJsonTemplate" [color="black", fontcolor="black", label=<{FriendTableItemJsonTemplate|<br ALIGN="LEFT"/>|inject_data(thing, d)<br ALIGN="LEFT"/>raw_data(thing)<br ALIGN="LEFT"/>rendered_data(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.FriendsSR" [color="black", fontcolor="black", label=<{FriendsSR|name : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|get_all_comments()<br ALIGN="LEFT"/>get_gilded()<br ALIGN="LEFT"/>get_links(sort, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.front.FrontController" [color="black", fontcolor="black", label=<{FrontController|DELETE_modify_hsts_grant<br ALIGN="LEFT"/>GET_modify_hsts_grant<br ALIGN="LEFT"/>POST_modify_hsts_grant<br ALIGN="LEFT"/>PUT_modify_hsts_grant<br ALIGN="LEFT"/>allow_stylesheets : bool<br ALIGN="LEFT"/>modname_splitter<br ALIGN="LEFT"/>search_help_page : str<br ALIGN="LEFT"/>verify_langs_regex<br ALIGN="LEFT"/>|GET_about()<br ALIGN="LEFT"/>GET_account_activity()<br ALIGN="LEFT"/>GET_advert_traffic(code)<br ALIGN="LEFT"/>GET_awards()<br ALIGN="LEFT"/>GET_catchall()<br ALIGN="LEFT"/>GET_comment_by_id(comment)<br ALIGN="LEFT"/>GET_comments(article, comment, context, sort, limit, depth, showedits, showmore, sr_detail)<br ALIGN="LEFT"/>GET_confirm_award_claim(token)<br ALIGN="LEFT"/>GET_contact_us()<br ALIGN="LEFT"/>GET_details(thing, oldid36, after, before, count, listing_only)<br ALIGN="LEFT"/>GET_duplicates(article, num, after, reverse, count)<br ALIGN="LEFT"/>GET_editreddit(location, created)<br ALIGN="LEFT"/>GET_explore()<br ALIGN="LEFT"/>GET_flairlisting(num, after, reverse, count, name, timeout)<br ALIGN="LEFT"/>GET_gilding()<br ALIGN="LEFT"/>GET_goldthanks(vendor)<br ALIGN="LEFT"/>GET_lang_traffic(langcode)<br ALIGN="LEFT"/>GET_link_id_redirect(link)<br ALIGN="LEFT"/>GET_moderationlog(num, after, reverse, count, mod, action)<br ALIGN="LEFT"/>GET_newreddit(name)<br ALIGN="LEFT"/>GET_oldinfo(article, type, dest, rest, comment)<br ALIGN="LEFT"/>GET_random()<br ALIGN="LEFT"/>GET_received_award(trophy, preexisting)<br ALIGN="LEFT"/>GET_related(num, article, after, reverse, count)<br ALIGN="LEFT"/>GET_rules()<br ALIGN="LEFT"/>GET_search(query, num, reverse, after, count, sort, recent, restrict_sr, include_facets, result_types, syntax, sr_detail)<br ALIGN="LEFT"/>GET_search_reddits(query, reverse, after, count, num, sort)<br ALIGN="LEFT"/>GET_share_close()<br ALIGN="LEFT"/>GET_shirt(article)<br ALIGN="LEFT"/>GET_sidebar()<br ALIGN="LEFT"/>GET_site_traffic()<br ALIGN="LEFT"/>GET_spamlisting(location, only, num, after, reverse, count, timeout)<br ALIGN="LEFT"/>GET_sticky(num)<br ALIGN="LEFT"/>GET_stylesheet()<br ALIGN="LEFT"/>GET_submit(url, title, text, selftext)<br ALIGN="LEFT"/>GET_subreddit_traffic_report()<br ALIGN="LEFT"/>GET_traffic(link, campaign, before, after)<br ALIGN="LEFT"/>POST_claim_award(token)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.front.FrontUnstyledController" [color="black", fontcolor="black", label=<{FrontUnstyledController|allow_stylesheets : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.FullPathMiddleware" [color="black", fontcolor="black", label=<{FullPathMiddleware|app<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.GeotargetNotice" [color="black", fontcolor="black", label=<{GeotargetNotice|targeting_level : str<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.GetCustomerProfileRequest" [color="black", fontcolor="black", label=<{GetCustomerProfileRequest|<br ALIGN="LEFT"/>|process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.GetSettledBatchListRequest" [color="black", fontcolor="black", label=<{GetSettledBatchListRequest|<br ALIGN="LEFT"/>|process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.gold.GildedCommentsByAccount" [color="black", fontcolor="black", label=<{GildedCommentsByAccount|<br ALIGN="LEFT"/>|gild(user, thing)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.GildedController" [color="black", fontcolor="black", label=<{GildedController|infotext<br ALIGN="LEFT"/>infotext_class<br ALIGN="LEFT"/>suppress_reply_buttons : bool<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing()<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.gold.GildedLinksByAccount" [color="black", fontcolor="black", label=<{GildedLinksByAccount|<br ALIGN="LEFT"/>|gild(user, thing)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Gilding" [color="black", fontcolor="black", label=<{Gilding|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.gold.GildingsByDay" [color="black", fontcolor="black", label=<{GildingsByDay|<br ALIGN="LEFT"/>|create(user, things)<br ALIGN="LEFT"/><I>delete</I>(user, things)<br ALIGN="LEFT"/>get_gildings(date)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.gold.GildingsByThing" [color="black", fontcolor="black", label=<{GildingsByThing|<br ALIGN="LEFT"/>|create(user, things)<br ALIGN="LEFT"/><I>delete</I>(user, things)<br ALIGN="LEFT"/>get_gilder_ids(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.app_globals.Globals" [color="black", fontcolor="black", label=<{Globals|RL_LOGIN_IP_MAX_REQS : int<br ALIGN="LEFT"/>RL_LOGIN_MAX_REQS : int<br ALIGN="LEFT"/>RL_MAX_REQS : int<br ALIGN="LEFT"/>RL_OAUTH_MAX_REQS : int<br ALIGN="LEFT"/>RL_OAUTH_RESET_SECONDS<br ALIGN="LEFT"/>RL_RESET_SECONDS<br ALIGN="LEFT"/>RL_SHARE_MAX_REQS : int<br ALIGN="LEFT"/>admins<br ALIGN="LEFT"/>all_languages<br ALIGN="LEFT"/>auth_provider<br ALIGN="LEFT"/>baseplate<br ALIGN="LEFT"/>cache_chains : dict<br ALIGN="LEFT"/>cassandra_local_cache<br ALIGN="LEFT"/>cassandra_pools : dict<br ALIGN="LEFT"/>cdn_provider<br ALIGN="LEFT"/>commentpanecache<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>databases : tuple<br ALIGN="LEFT"/>db_params : dict<br ALIGN="LEFT"/>dbm : NoneType<br ALIGN="LEFT"/>display_tz : UTC<br ALIGN="LEFT"/>email_provider<br ALIGN="LEFT"/>employee_approved_clients<br ALIGN="LEFT"/>employees<br ALIGN="LEFT"/>env : str<br ALIGN="LEFT"/>events<br ALIGN="LEFT"/>extension_subdomains : dict<br ALIGN="LEFT"/>gencache<br ALIGN="LEFT"/>hardcache<br ALIGN="LEFT"/>image_resizing_provider<br ALIGN="LEFT"/>lang<br ALIGN="LEFT"/>lang_name : dict<br ALIGN="LEFT"/>languages : list<br ALIGN="LEFT"/>live_config<br ALIGN="LEFT"/>live_config_spec : dict<br ALIGN="LEFT"/>locations<br ALIGN="LEFT"/>lock_cache<br ALIGN="LEFT"/>log : LoggerAdapter<br ALIGN="LEFT"/>make_lock<br ALIGN="LEFT"/>mcrouter<br ALIGN="LEFT"/>media_domain<br ALIGN="LEFT"/>media_provider<br ALIGN="LEFT"/>memoizecache<br ALIGN="LEFT"/>origin<br ALIGN="LEFT"/>paths<br ALIGN="LEFT"/>permacache<br ALIGN="LEFT"/>pkg_resources_working_set : WorkingSet<br ALIGN="LEFT"/>plugins<br ALIGN="LEFT"/>predefined_type_ids : dict<br ALIGN="LEFT"/>queues<br ALIGN="LEFT"/>ratelimitcache<br ALIGN="LEFT"/>read_only_mode : bool<br ALIGN="LEFT"/>reddit_host<br ALIGN="LEFT"/>reddit_pid<br ALIGN="LEFT"/>relcache<br ALIGN="LEFT"/>rendercache<br ALIGN="LEFT"/>reset_caches<br ALIGN="LEFT"/>running_as_script<br ALIGN="LEFT"/>search<br ALIGN="LEFT"/>search_provider<br ALIGN="LEFT"/>search_syntaxes<br ALIGN="LEFT"/>secrets<br ALIGN="LEFT"/>short_version : bytes, str<br ALIGN="LEFT"/>spec : dict<br ALIGN="LEFT"/>sponsors<br ALIGN="LEFT"/>srmembercache<br ALIGN="LEFT"/>startup_timer<br ALIGN="LEFT"/>static_names : dict<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>thingcache<br ALIGN="LEFT"/>throttles<br ALIGN="LEFT"/>ticket_provider<br ALIGN="LEFT"/>trusted_domains : set<br ALIGN="LEFT"/>tz : UTC<br ALIGN="LEFT"/>user_agent_ratelimit_regexes : dict<br ALIGN="LEFT"/>versions : dict<br ALIGN="LEFT"/>zookeeper<br ALIGN="LEFT"/>|load_db_params()<br ALIGN="LEFT"/>record_repo_version(repo_name, git_dir)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>setup_complete()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Gold" [color="black", fontcolor="black", label=<{Gold|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.ipn.GoldException" [color="black", fontcolor="red", label=<{GoldException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoldGiftCodeEmail" [color="black", fontcolor="black", label=<{GoldGiftCodeEmail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoldOnlyInterstitial" [color="black", fontcolor="black", label=<{GoldOnlyInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoldPayment" [color="black", fontcolor="black", label=<{GoldPayment|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.ipn.GoldPaymentController" [color="black", fontcolor="black", label=<{GoldPaymentController|abort_on_error : bool<br ALIGN="LEFT"/>event_type_mappings : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>webhook_secret : str<br ALIGN="LEFT"/>|POST_goldwebhook(secret)<br ALIGN="LEFT"/>complete_gold_purchase(webhook)<br ALIGN="LEFT"/><I>process_response</I>()<br ALIGN="LEFT"/>process_webhook(event_type, webhook)<br ALIGN="LEFT"/>validate_secret(secret)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.utils.GoldPrice" [color="black", fontcolor="black", label=<{GoldPrice|decimal : Decimal<br ALIGN="LEFT"/>pennies<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.gold.GoldRevenueGoalByDate" [color="black", fontcolor="black", label=<{GoldRevenueGoalByDate|ROWKEY : str<br ALIGN="LEFT"/>|get(date)<br ALIGN="LEFT"/>set(date, goal)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoldSubscription" [color="black", fontcolor="black", label=<{GoldSubscription|has_paypal_subscription : bool<br ALIGN="LEFT"/>has_stripe_subscription : bool<br ALIGN="LEFT"/>paypal_subscr_id<br ALIGN="LEFT"/>paypal_url<br ALIGN="LEFT"/>stripe_key<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>user_fullname<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoldThanks" [color="black", fontcolor="black", label=<{GoldThanks|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Goldvertisement" [color="black", fontcolor="black", label=<{Goldvertisement|default_type : str<br ALIGN="LEFT"/>goal_today : float<br ALIGN="LEFT"/>goal_yesterday : float<br ALIGN="LEFT"/>hours_paid<br ALIGN="LEFT"/>percent_filled : int<br ALIGN="LEFT"/>percent_filled_yesterday : int<br ALIGN="LEFT"/>time_left_today<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoogleTagManager" [color="black", fontcolor="black", label=<{GoogleTagManager|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.googletagmanager.GoogleTagManagerController" [color="black", fontcolor="black", label=<{GoogleTagManagerController|<br ALIGN="LEFT"/>|GET_gtm(container_id)<br ALIGN="LEFT"/>GET_jail(container_id)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.GoogleTagManagerJail" [color="black", fontcolor="black", label=<{GoogleTagManagerJail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.gzipper.GzipMiddleware" [color="black", fontcolor="black", label=<{GzipMiddleware|app<br ALIGN="LEFT"/>compression_level<br ALIGN="LEFT"/>exc_info : NoneType<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>min_size<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|content_length(headers, app_iter)<br ALIGN="LEFT"/>request_accepts_gzip(environ)<br ALIGN="LEFT"/>should_gzip_response(headers, app_iter)<br ALIGN="LEFT"/>update_vary_header(headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.reddit_agent_parser_test.HAPIntegrationTests" [color="black", fontcolor="black", label=<{HAPIntegrationTests|<br ALIGN="LEFT"/>|test_alien_blue_detector()<br ALIGN="LEFT"/>test_bacon_reader_detector()<br ALIGN="LEFT"/>test_mcreddit_detector()<br ALIGN="LEFT"/>test_narwhal_detector()<br ALIGN="LEFT"/>test_readit_detector()<br ALIGN="LEFT"/>test_reddit_android_integration()<br ALIGN="LEFT"/>test_reddit_ios_integration()<br ALIGN="LEFT"/>test_reddit_is_fun_integration()<br ALIGN="LEFT"/>test_reddit_sync_detector()<br ALIGN="LEFT"/>test_relay_for_reddit_detector()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.middleware.HTTPTooManyRequests" [color="black", fontcolor="black", label=<{HTTPTooManyRequests|code : int<br ALIGN="LEFT"/>explanation : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.hadoop_decompress.HadoopStreamDecompressor" [color="black", fontcolor="black", label=<{HadoopStreamDecompressor|<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>decompress(data)<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.HardCache" [color="black", fontcolor="black", label=<{HardCache|backend : NoneType<br ALIGN="LEFT"/>permanent : bool<br ALIGN="LEFT"/>|add(key, value, time)<br ALIGN="LEFT"/>delete(key, time)<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>incr(key, delta, time)<br ALIGN="LEFT"/>set(key, val, time)<br ALIGN="LEFT"/>set_multi(keys, prefix, time)<br ALIGN="LEFT"/>simple_get_multi(keys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.hardcachebackend.HardCacheBackend" [color="black", fontcolor="black", label=<{HardCacheBackend|mapping : dict<br ALIGN="LEFT"/>profile_categories : dict<br ALIGN="LEFT"/>tdb<br ALIGN="LEFT"/>|add(category, ids, val, time)<br ALIGN="LEFT"/>clause_from_expiration(engine, expiration)<br ALIGN="LEFT"/>delete(category, ids)<br ALIGN="LEFT"/>delete_if_expired(category, ids, expiration)<br ALIGN="LEFT"/>engine_by_category(category, type)<br ALIGN="LEFT"/>expired(engine, expiration_clause, limit)<br ALIGN="LEFT"/>get(category, ids, force_write_table)<br ALIGN="LEFT"/>get_multi(category, idses)<br ALIGN="LEFT"/>ids_by_category(category, limit)<br ALIGN="LEFT"/>incr(category, ids, time, delta)<br ALIGN="LEFT"/>profile_start(operation, category)<br ALIGN="LEFT"/>profile_stop(t)<br ALIGN="LEFT"/>set(category, ids, val, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.HardcacheChain" [color="black", fontcolor="black", label=<{HardcacheChain|backend<br ALIGN="LEFT"/>|accrue(key, time, delta)<br ALIGN="LEFT"/>add(key, val, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.health.HealthController" [color="black", fontcolor="black", label=<{HealthController|<br ALIGN="LEFT"/>|GET_cachehealth()<br ALIGN="LEFT"/>GET_health()<br ALIGN="LEFT"/>GET_promohealth()<br ALIGN="LEFT"/><I>post</I>()<br ALIGN="LEFT"/><I>pre</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.utils.Hell" [color="black", fontcolor="black", label=<{Hell|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.HelpLink" [color="black", fontcolor="black", label=<{HelpLink|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.HelpPage" [color="black", fontcolor="black", label=<{HelpPage|<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.HighPriority" [color="black", fontcolor="black", label=<{HighPriority|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.hooks.Hook" [color="black", fontcolor="black", label=<{Hook|handlers : list<br ALIGN="LEFT"/>|call()<br ALIGN="LEFT"/>call_until_return()<br ALIGN="LEFT"/>register_handler(handler)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.hooks.HookRegistrar" [color="black", fontcolor="black", label=<{HookRegistrar|connections : list<br ALIGN="LEFT"/>registered : bool<br ALIGN="LEFT"/>|on(name)<br ALIGN="LEFT"/>register_all()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.HotController" [color="black", fontcolor="black", label=<{HotController|count<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>infotext<br ALIGN="LEFT"/>next_suggestions_cls<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>show_chooser : bool<br ALIGN="LEFT"/>show_organic : bool<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing()<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>trending_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.HousePriority" [color="black", fontcolor="black", label=<{HousePriority|inventory_override : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.HtmlPaneStack" [color="black", fontcolor="black", label=<{HtmlPaneStack|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.auth.http.HttpAuthenticationProvider" [color="black", fontcolor="black", label=<{HttpAuthenticationProvider|config : dict<br ALIGN="LEFT"/>|get_authenticated_account()<br ALIGN="LEFT"/>is_logout_allowed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.IDBuilder" [color="black", fontcolor="black", label=<{IDBuilder|names : list, tuple<br ALIGN="LEFT"/>|fetch_more(last_item, num_have)<br ALIGN="LEFT"/>init_query()<br ALIGN="LEFT"/>thing_lookup(names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.zookeeper.IPNetworkLiveList" [color="black", fontcolor="black", label=<{IPNetworkLiveList|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.ip.IPsByAccount" [color="black", fontcolor="black", label=<{IPsByAccount|<br ALIGN="LEFT"/>|get(account_id, column_start, column_finish, column_count, column_reversed)<br ALIGN="LEFT"/>set(account_id, ip, date)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" [color="black", fontcolor="black", label=<{IPv4Address|packed<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Interface" [color="black", fontcolor="black", label=<{IPv4Interface|hostmask<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>netmask<br ALIGN="LEFT"/>network<br ALIGN="LEFT"/>prefixlen<br ALIGN="LEFT"/>with_hostmask<br ALIGN="LEFT"/>with_netmask<br ALIGN="LEFT"/>with_prefixlen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Network" [color="black", fontcolor="black", label=<{IPv4Network|hosts<br ALIGN="LEFT"/>netmask<br ALIGN="LEFT"/>network_address<br ALIGN="LEFT"/>packed<br ALIGN="LEFT"/>with_hostmask<br ALIGN="LEFT"/>with_netmask<br ALIGN="LEFT"/>with_prefixlen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" [color="black", fontcolor="black", label=<{IPv6Address|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Interface" [color="black", fontcolor="black", label=<{IPv6Interface|hostmask<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>netmask<br ALIGN="LEFT"/>network<br ALIGN="LEFT"/>prefixlen<br ALIGN="LEFT"/>with_hostmask<br ALIGN="LEFT"/>with_netmask<br ALIGN="LEFT"/>with_prefixlen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Network" [color="black", fontcolor="black", label=<{IPv6Network|hosts<br ALIGN="LEFT"/>netmask<br ALIGN="LEFT"/>network_address<br ALIGN="LEFT"/>with_hostmask<br ALIGN="LEFT"/>with_netmask<br ALIGN="LEFT"/>with_prefixlen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.IdentityJsonTemplate" [color="black", fontcolor="black", label=<{IdentityJsonTemplate|<br ALIGN="LEFT"/>|add_message_data(data, thing)<br ALIGN="LEFT"/>raw_data(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.image_resizing.ImageResizingProvider" [color="black", fontcolor="black", label=<{ImageResizingProvider|<br ALIGN="LEFT"/>|<I>purge_url</I>(url)<br ALIGN="LEFT"/><I>resize_image</I>(image, width, censor_nsfw, max_ratio)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.wiki.ImagesByWikiPage" [color="black", fontcolor="black", label=<{ImagesByWikiPage|<br ALIGN="LEFT"/>|add_image(sr, page_name, image_name, url)<br ALIGN="LEFT"/>delete_image(sr, page_name, image_name)<br ALIGN="LEFT"/>get_image_count(sr, page_name)<br ALIGN="LEFT"/>get_images(sr, page_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.image_resizing.imgix.ImgixImageResizingProvider" [color="black", fontcolor="black", label=<{ImgixImageResizingProvider|config : dict<br ALIGN="LEFT"/>|purge_url(url)<br ALIGN="LEFT"/>resize_image(image, width, censor_nsfw, max_ratio)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.InTimeoutInterstitial" [color="black", fontcolor="black", label=<{InTimeoutInterstitial|hide_message : bool<br ALIGN="LEFT"/>timeout_days_remaining : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.Inbox" [color="black", fontcolor="black", label=<{Inbox|<br ALIGN="LEFT"/>|get_rels(user, things)<br ALIGN="LEFT"/>possible_recipients(obj)<br ALIGN="LEFT"/>set_unread(inbox_rels, unread)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.InconsistentCommentTreeError" [color="black", fontcolor="red", label=<{InconsistentCommentTreeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.InfoBar" [color="black", fontcolor="black", label=<{InfoBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.token.OAuth2Scope.InsufficientScopeError" [color="black", fontcolor="black", label=<{InsufficientScopeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.authorize.test_interaction.InteractionTest" [color="black", fontcolor="black", label=<{InteractionTest|user<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_or_update_payment_method(update_payment_method, add_payment_method)<br ALIGN="LEFT"/>test_add_payment_method(get_id, create_payment_profile, add)<br ALIGN="LEFT"/>test_auth_freebie_transaction(_new)<br ALIGN="LEFT"/>test_auth_transaction(get_ids, get_id, create_authorization_hold, request)<br ALIGN="LEFT"/>test_charge_transaction(one, capture_authorization_hold)<br ALIGN="LEFT"/>test_delete_payment_method(delete_payment_profile, delete)<br ALIGN="LEFT"/>test_get_or_create_customer_profile(create_customer_profile, get_customer_profile)<br ALIGN="LEFT"/>test_refund_transaction(one)<br ALIGN="LEFT"/>test_update_payment_method(update_payment_profile)<br ALIGN="LEFT"/>test_void_transaction(one)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.InterestBar" [color="black", fontcolor="black", label=<{InterestBar|has_subscribed<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Interstitial" [color="black", fontcolor="black", label=<{Interstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.InterstitialPage" [color="black", fontcolor="black", label=<{InterstitialPage|show_infobar : bool<br ALIGN="LEFT"/>|page_classes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.common.InvalidQuery" [color="black", fontcolor="red", label=<{InvalidQuery|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.InvariantException" [color="black", fontcolor="red", label=<{InvariantException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.InvitedModListing" [color="black", fontcolor="black", label=<{InvitedModListing|form_title<br ALIGN="LEFT"/>permissions_form<br ALIGN="LEFT"/>remove_self_title<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.InvitedModTableItem" [color="black", fontcolor="black", label=<{InvitedModTableItem|cells : tuple<br ALIGN="LEFT"/>executed_message<br ALIGN="LEFT"/>permissions<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|is_editable(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.InvitedModTableItemJsonTemplate" [color="black", fontcolor="black", label=<{InvitedModTableItemJsonTemplate|<br ALIGN="LEFT"/>|thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.ipn.IpnController" [color="black", fontcolor="black", label=<{IpnController|<br ALIGN="LEFT"/>|POST_ipn(paypal_secret, payment_status, txn_id, paying_id, payer_email, mc_currency, mc_gross, custom)<br ALIGN="LEFT"/>POST_spendcreddits(form, jquery, months, passthrough)<br ALIGN="LEFT"/>finish(parameters, txn_id, payer_email, paying_id, subscr_id, custom, pennies, months, days)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.subreddit_test.IsValidNameTest" [color="black", fontcolor="black", label=<{IsValidNameTest|<br ALIGN="LEFT"/>|test_capitals()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_leading_underscore()<br ALIGN="LEFT"/>test_long()<br ALIGN="LEFT"/>test_numerics()<br ALIGN="LEFT"/>test_short()<br ALIGN="LEFT"/>test_too_long()<br ALIGN="LEFT"/>test_too_short()<br ALIGN="LEFT"/>test_underscore()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsonresponse.JQueryResponse" [color="black", fontcolor="black", label=<{JQueryResponse|objs : NoneType, dict<br ALIGN="LEFT"/>ops : NoneType, list<br ALIGN="LEFT"/>top_node : NoneType<br ALIGN="LEFT"/>|focus_input(name)<br ALIGN="LEFT"/>get_input(name)<br ALIGN="LEFT"/>has_error()<br ALIGN="LEFT"/>insert_table_rows(rows, index)<br ALIGN="LEFT"/>make_response()<br ALIGN="LEFT"/>new_captcha()<br ALIGN="LEFT"/>process_rendered(res)<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/>send_failure(error)<br ALIGN="LEFT"/>set()<br ALIGN="LEFT"/>set_error(error_name, field_name)<br ALIGN="LEFT"/>set_html(selector, value)<br ALIGN="LEFT"/>set_inputs()<br ALIGN="LEFT"/>set_text(selector, value)<br ALIGN="LEFT"/>transform(obj, op, args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.template_helpers.JSPreload" [color="black", fontcolor="black", label=<{JSPreload|<br ALIGN="LEFT"/>|set(url, data)<br ALIGN="LEFT"/>set_wrapped(url, wrapped)<br ALIGN="LEFT"/>use()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.JsButton" [color="black", fontcolor="black", label=<{JsButton|onclick : str<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>tab_name : NoneType<br ALIGN="LEFT"/>|build(base_path)<br ALIGN="LEFT"/>cachable_attrs()<br ALIGN="LEFT"/>is_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.JsNavMenu" [color="black", fontcolor="black", label=<{JsNavMenu|<br ALIGN="LEFT"/>|find_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsonresponse.JsonResponse" [color="black", fontcolor="black", label=<{JsonResponse|content_type : str<br ALIGN="LEFT"/>|has_error()<br ALIGN="LEFT"/>has_errors(field_name)<br ALIGN="LEFT"/>insert_things(things, append)<br ALIGN="LEFT"/>make_response()<br ALIGN="LEFT"/>new_captcha()<br ALIGN="LEFT"/>process_rendered(res)<br ALIGN="LEFT"/>ratelimit(seconds)<br ALIGN="LEFT"/>replace_things(things, keep_children, reveal, stubs)<br ALIGN="LEFT"/>send_failure(error)<br ALIGN="LEFT"/>set_error(error_name, field_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.JsonTemplate" [color="black", fontcolor="black", label=<{JsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.KarmaListJsonTemplate" [color="black", fontcolor="black", label=<{KarmaListJsonTemplate|<br ALIGN="LEFT"/>|data(karmas)<br ALIGN="LEFT"/>kind(wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.keyvalue.KeyValueStore" [color="black", fontcolor="black", label=<{KeyValueStore|<br ALIGN="LEFT"/>|get(key, default)<br ALIGN="LEFT"/>set(key, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.KindMenu" [color="black", fontcolor="black", label=<{KindMenu|name : str<br ALIGN="LEFT"/>|make_title(attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.LabeledMulti" [color="black", fontcolor="black", label=<{LabeledMulti|MAX_SR_COUNT : int<br ALIGN="LEFT"/>SR_PREFIX : str<br ALIGN="LEFT"/>allows_referrers<br ALIGN="LEFT"/>analytics_name<br ALIGN="LEFT"/>copied_from<br ALIGN="LEFT"/>description_md<br ALIGN="LEFT"/>display_name<br ALIGN="LEFT"/>icon_id : str<br ALIGN="LEFT"/>icon_url<br ALIGN="LEFT"/>is_symlink : bool<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>linked_multi<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>owner_fullname<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>sr_columns<br ALIGN="LEFT"/>sr_ids<br ALIGN="LEFT"/>sr_props<br ALIGN="LEFT"/>srs<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>user_path<br ALIGN="LEFT"/>visibility : str<br ALIGN="LEFT"/>|add_srs(sr_props)<br ALIGN="LEFT"/>by_owner(owner, kinds, load_subreddits)<br ALIGN="LEFT"/>can_edit(user)<br ALIGN="LEFT"/>can_view(user)<br ALIGN="LEFT"/>clear_srs()<br ALIGN="LEFT"/>columns_to_sr_props(columns)<br ALIGN="LEFT"/>copy(path, multi, owner, symlink)<br ALIGN="LEFT"/>create(path, owner)<br ALIGN="LEFT"/>del_srs(sr_ids)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>is_hidden()<br ALIGN="LEFT"/>is_public()<br ALIGN="LEFT"/>set_icon_by_name(name)<br ALIGN="LEFT"/>slugify(owner, display_name, type_)<br ALIGN="LEFT"/>sr_props_to_columns(sr_props)<br ALIGN="LEFT"/>unlink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.LabeledMultiByOwner" [color="black", fontcolor="black", label=<{LabeledMultiByOwner|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.LabeledMultiDescriptionJsonTemplate" [color="black", fontcolor="black", label=<{LabeledMultiDescriptionJsonTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.LabeledMultiJsonTemplate" [color="black", fontcolor="black", label=<{LabeledMultiJsonTemplate|expand_srs : bool<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>sr_props(thing, srs, expand)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.LanguageTraffic" [color="black", fontcolor="black", label=<{LanguageTraffic|langcode<br ALIGN="LEFT"/>|get_data_for_interval(interval, columns)<br ALIGN="LEFT"/>get_language_name(language_code, locale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.LanguageTrafficPage" [color="black", fontcolor="black", label=<{LanguageTrafficPage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.LanguageTrafficSummary" [color="black", fontcolor="black", label=<{LanguageTrafficSummary|language_summary : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.last_modified.LastModified" [color="black", fontcolor="black", label=<{LastModified|<br ALIGN="LEFT"/>|get(fullname, name, touch_if_not_set)<br ALIGN="LEFT"/>get_multi(fullnames, name)<br ALIGN="LEFT"/>touch(fullname, names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.LegacySearchResultLink" [color="black", fontcolor="black", label=<{LegacySearchResultLink|<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.middleware.LimitUploadSize" [color="black", fontcolor="black", label=<{LimitUploadSize|app<br ALIGN="LEFT"/>max_size : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.FlairCsv.LineResult" [color="black", fontcolor="black", label=<{LineResult|errors : dict<br ALIGN="LEFT"/>ok : bool<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>warnings : dict<br ALIGN="LEFT"/>|error(field, desc)<br ALIGN="LEFT"/>warn(field, desc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.Link" [color="black", fontcolor="black", label=<{Link|SELFTEXT_MAX_LENGTH : int<br ALIGN="LEFT"/>affects_karma_type<br ALIGN="LEFT"/>archived_slow<br ALIGN="LEFT"/>author_slow<br ALIGN="LEFT"/>body<br ALIGN="LEFT"/>cache_ignore<br ALIGN="LEFT"/>flair_css_class : NoneType<br ALIGN="LEFT"/>flair_text : NoneType<br ALIGN="LEFT"/>has_thumbnail<br ALIGN="LEFT"/>is_embeddable<br ALIGN="LEFT"/>is_nsfw<br ALIGN="LEFT"/>is_self<br ALIGN="LEFT"/>is_stickied_slow<br ALIGN="LEFT"/>is_votable : bool<br ALIGN="LEFT"/>media_object<br ALIGN="LEFT"/>num_comments<br ALIGN="LEFT"/>post_hint<br ALIGN="LEFT"/>preview_object<br ALIGN="LEFT"/>responder_ids<br ALIGN="LEFT"/>secure_media_object<br ALIGN="LEFT"/>selftext<br ALIGN="LEFT"/>sticky_comment_id : NoneType<br ALIGN="LEFT"/>subreddit_slow<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>already_submitted_link(url, title)<br ALIGN="LEFT"/>can_comment_slow(user)<br ALIGN="LEFT"/>can_flair_slow(user)<br ALIGN="LEFT"/>can_view_promo(user)<br ALIGN="LEFT"/>get_default_context()<br ALIGN="LEFT"/>is_archived(sr)<br ALIGN="LEFT"/>is_stickied(subreddit)<br ALIGN="LEFT"/>is_stickyable()<br ALIGN="LEFT"/>keep_item(wrapped)<br ALIGN="LEFT"/>link_domain()<br ALIGN="LEFT"/>make_canonical_link(sr, subdomain)<br ALIGN="LEFT"/>make_permalink(sr, force_domain)<br ALIGN="LEFT"/>make_permalink_slow(force_domain)<br ALIGN="LEFT"/>markdown_link_slow()<br ALIGN="LEFT"/>remove_sticky_comment(comment, set_by)<br ALIGN="LEFT"/>resubmit_link(url, title)<br ALIGN="LEFT"/>set_content(is_self, content)<br ALIGN="LEFT"/>set_flair(text, css_class, set_by)<br ALIGN="LEFT"/>set_media_object(value)<br ALIGN="LEFT"/>set_preview_object(value)<br ALIGN="LEFT"/>set_secure_media_object(value)<br ALIGN="LEFT"/>set_sticky_comment(comment, set_by)<br ALIGN="LEFT"/>sort_if_suggested(sr)<br ALIGN="LEFT"/>tracking_link(link, wrapped_thing, element_name, context, site_name)<br ALIGN="LEFT"/>update_nofollow(user, wrapped)<br ALIGN="LEFT"/>wrapped_cache_key(wrapped, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.things.LinkButtons" [color="black", fontcolor="black", label=<{LinkButtons|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.LinkChild" [color="black", fontcolor="black", label=<{LinkChild|expand : bool<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>load : bool<br ALIGN="LEFT"/>nofollow : bool<br ALIGN="LEFT"/>position_inline : bool<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.LinkCommentSep" [color="black", fontcolor="black", label=<{LinkCommentSep|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.LinkCommentsSettings" [color="black", fontcolor="black", label=<{LinkCommentsSettings|can_edit<br ALIGN="LEFT"/>can_sticky : bool<br ALIGN="LEFT"/>contest_mode<br ALIGN="LEFT"/>is_author<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>sendreplies<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>stickied<br ALIGN="LEFT"/>stickies_full<br ALIGN="LEFT"/>suggested_sort<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.LinkExists" [color="black", fontcolor="red", label=<{LinkExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.common.LinkFields" [color="black", fontcolor="black", label=<{LinkFields|author<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>|author_field()<br ALIGN="LEFT"/>author_fullname()<br ALIGN="LEFT"/>downs()<br ALIGN="LEFT"/>flair()<br ALIGN="LEFT"/>flair_css_class()<br ALIGN="LEFT"/>flair_text()<br ALIGN="LEFT"/>fullname()<br ALIGN="LEFT"/>is_self()<br ALIGN="LEFT"/>nsfw()<br ALIGN="LEFT"/>num_comments()<br ALIGN="LEFT"/>over18()<br ALIGN="LEFT"/>reddit()<br ALIGN="LEFT"/>self_()<br ALIGN="LEFT"/>selftext()<br ALIGN="LEFT"/>site()<br ALIGN="LEFT"/>sr_id()<br ALIGN="LEFT"/>subreddit()<br ALIGN="LEFT"/>timestamp()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>type_id()<br ALIGN="LEFT"/>ups()<br ALIGN="LEFT"/>url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.LinkHidesByAccount" [color="black", fontcolor="black", label=<{LinkHidesByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.LinkInfoBar" [color="black", fontcolor="black", label=<{LinkInfoBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.LinkInfoPage" [color="black", fontcolor="black", label=<{LinkInfoPage|create_reddit_box : bool<br ALIGN="LEFT"/>disable_comments : bool<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>link_listing<br ALIGN="LEFT"/>metadata_image_widths : tuple<br ALIGN="LEFT"/>num_duplicates<br ALIGN="LEFT"/>og_data : dict<br ALIGN="LEFT"/>shortlink<br ALIGN="LEFT"/>show_promote_button : bool<br ALIGN="LEFT"/>subtitle : NoneType<br ALIGN="LEFT"/>twitter_card : dict<br ALIGN="LEFT"/>|build_popup_panes()<br ALIGN="LEFT"/>build_toolbars()<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>page_classes()<br ALIGN="LEFT"/>rightbox()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.LinkJsonTemplate" [color="black", fontcolor="black", label=<{LinkJsonTemplate|<br ALIGN="LEFT"/>|get_json(item)<br ALIGN="LEFT"/>get_rendered(item, render_style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.LinkListing" [color="black", fontcolor="black", label=<{LinkListing|midcol_width<br ALIGN="LEFT"/>rank_width : float<br ALIGN="LEFT"/>show_nums<br ALIGN="LEFT"/>|listing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.LinkMock" [color="black", fontcolor="black", label=<{LinkMock|subreddit_slow<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.LinkSavesByAccount" [color="black", fontcolor="black", label=<{LinkSavesByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.LinkSavesByCategory" [color="black", fontcolor="black", label=<{LinkSavesByCategory|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.LinkSavesBySubreddit" [color="black", fontcolor="black", label=<{LinkSavesBySubreddit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.LinkSearchQuery" [color="black", fontcolor="black", label=<{LinkSearchQuery|default_syntax : str<br ALIGN="LEFT"/>known_syntaxes<br ALIGN="LEFT"/>lucene_parser<br ALIGN="LEFT"/>recents : dict<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>search_api<br ALIGN="LEFT"/>sorts : dict<br ALIGN="LEFT"/>|customize_query(bq)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.LinkSearchQuery" [color="black", fontcolor="black", label=<{LinkSearchQuery|default_syntax : str<br ALIGN="LEFT"/>known_syntaxes<br ALIGN="LEFT"/>recents : dict<br ALIGN="LEFT"/>search_api<br ALIGN="LEFT"/>sorts : dict<br ALIGN="LEFT"/>|create_boolean_query(queries)<br ALIGN="LEFT"/>customize_query(bq)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.LinkUploader" [color="black", fontcolor="black", label=<{LinkUploader|accounts : dict<br ALIGN="LEFT"/>srs : dict<br ALIGN="LEFT"/>things<br ALIGN="LEFT"/>types : tuple<br ALIGN="LEFT"/>|batch_lookups()<br ALIGN="LEFT"/>fields(thing)<br ALIGN="LEFT"/>should_index(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.LinkVisitsByAccount" [color="black", fontcolor="black", label=<{LinkVisitsByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.vote.LinkVotesByAccount" [color="black", fontcolor="black", label=<{LinkVotesByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.LinksByAccount" [color="black", fontcolor="black", label=<{LinksByAccount|<br ALIGN="LEFT"/>|add_link(account, link)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.LinksByImage" [color="black", fontcolor="black", label=<{LinksByImage|<br ALIGN="LEFT"/>|add_link(image_uid, link)<br ALIGN="LEFT"/>get_link_id36s(image_uid)<br ALIGN="LEFT"/>remove_link(image_uid, link)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.LinksByUrlAndSubreddit" [color="black", fontcolor="black", label=<{LinksByUrlAndSubreddit|<br ALIGN="LEFT"/>|add_link(link)<br ALIGN="LEFT"/>get_link_ids(url, sr, limit)<br ALIGN="LEFT"/>make_all_rowkey(canonical_url)<br ALIGN="LEFT"/>make_canonical_url(url)<br ALIGN="LEFT"/>make_sr_rowkey(canonical_url, sr_id)<br ALIGN="LEFT"/>remove_link(link)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.Listing" [color="black", fontcolor="black", label=<{Listing|after : NoneType<br ALIGN="LEFT"/>before : NoneType<br ALIGN="LEFT"/>builder<br ALIGN="LEFT"/>first<br ALIGN="LEFT"/>max_num<br ALIGN="LEFT"/>max_score<br ALIGN="LEFT"/>next : NoneType<br ALIGN="LEFT"/>next_link : bool<br ALIGN="LEFT"/>next_suggestions : NoneType<br ALIGN="LEFT"/>nextprev : bool<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>prev : NoneType<br ALIGN="LEFT"/>prev_link : bool<br ALIGN="LEFT"/>things : list<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>listing(next_suggestions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ListingChooser" [color="black", fontcolor="black", label=<{ListingChooser|sections : defaultdict<br ALIGN="LEFT"/>selected_item : NoneType<br ALIGN="LEFT"/>show_samples : bool<br ALIGN="LEFT"/>|add_item(section, name, path, site, description, extra_class)<br ALIGN="LEFT"/>add_samples()<br ALIGN="LEFT"/>find_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.ListingController" [color="black", fontcolor="black", label=<{ListingController|after<br ALIGN="LEFT"/>allow_stylesheets : bool<br ALIGN="LEFT"/>builder_cls : NoneType<br ALIGN="LEFT"/>builder_obj<br ALIGN="LEFT"/>builder_wrapper : staticmethod<br ALIGN="LEFT"/>count<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>infotext : NoneType<br ALIGN="LEFT"/>infotext_class : NoneType<br ALIGN="LEFT"/>listing_obj<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>next_suggestions_cls : NoneType<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>private_referrer : bool<br ALIGN="LEFT"/>query_obj<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>render_params : dict<br ALIGN="LEFT"/>reverse<br ALIGN="LEFT"/>show_chooser : bool<br ALIGN="LEFT"/>show_nums : bool<br ALIGN="LEFT"/>show_sidebar : bool<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>sr_detail : NoneType<br ALIGN="LEFT"/>suppress_reply_buttons : bool<br ALIGN="LEFT"/>title_text : str<br ALIGN="LEFT"/>|GET_listing()<br ALIGN="LEFT"/>build_listing(num, after, reverse, count, sr_detail)<br ALIGN="LEFT"/>builder()<br ALIGN="LEFT"/>can_send_referrer()<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>listing()<br ALIGN="LEFT"/>prewrap_fn()<br ALIGN="LEFT"/><I>query</I>()<br ALIGN="LEFT"/><I>rightbox</I>()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.ListingJsonTemplate" [color="black", fontcolor="black", label=<{ListingJsonTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>rendered_data(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ListingSuggestions" [color="black", fontcolor="black", label=<{ListingSuggestions|suggestion_type : NoneType, str<br ALIGN="LEFT"/>suggestions : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.ListingWithPromos" [color="black", fontcolor="black", label=<{ListingWithPromos|extra_page_classes<br ALIGN="LEFT"/>show_organic : bool<br ALIGN="LEFT"/>spotlight : NoneType<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>make_requested_ad(requested_ad)<br ALIGN="LEFT"/>make_single_ad()<br ALIGN="LEFT"/>make_spotlight()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.zookeeper.LiveConfig" [color="black", fontcolor="black", label=<{LiveConfig|data : dict<br ALIGN="LEFT"/>|get(key, default)<br ALIGN="LEFT"/>iteritems()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.ratelimit.LiveConfigRateLimit" [color="black", fontcolor="black", label=<{LiveConfigRateLimit|limit<br ALIGN="LEFT"/>seconds<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.ratelimit_test.LiveConfigRateLimitTest" [color="black", fontcolor="black", label=<{LiveConfigRateLimitTest|<br ALIGN="LEFT"/>|configure_rate_limit(num, per_unit)<br ALIGN="LEFT"/>patch_liveconfig(k, v)<br ALIGN="LEFT"/>test_limit()<br ALIGN="LEFT"/>test_seconds()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.zookeeper.LiveList" [color="black", fontcolor="black", label=<{LiveList|client<br ALIGN="LEFT"/>data : list<br ALIGN="LEFT"/>is_watching : bool<br ALIGN="LEFT"/>map_fn : NoneType<br ALIGN="LEFT"/>reduce_fn<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|add(item)<br ALIGN="LEFT"/>get(reduce)<br ALIGN="LEFT"/>remove(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.loid.LoId" [color="black", fontcolor="black", label=<{LoId|context<br ALIGN="LEFT"/>created<br ALIGN="LEFT"/>dirty : NoneType<br ALIGN="LEFT"/>loid : NoneType<br ALIGN="LEFT"/>new : NoneType<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>serializable : bool<br ALIGN="LEFT"/>version : int<br ALIGN="LEFT"/>|load(request, context, create)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>to_dict(prefix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.LocalCache" [color="black", fontcolor="black", label=<{LocalCache|<br ALIGN="LEFT"/>|add(key, val, time)<br ALIGN="LEFT"/>append(key, val, time)<br ALIGN="LEFT"/>decr(key, amt)<br ALIGN="LEFT"/>delete(key)<br ALIGN="LEFT"/>delete_multi(keys)<br ALIGN="LEFT"/>flush_all()<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>incr(key, delta, time)<br ALIGN="LEFT"/>prepend(key, val, time)<br ALIGN="LEFT"/>replace(key, val, time)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set(key, val, time)<br ALIGN="LEFT"/>set_multi(keys, prefix, time)<br ALIGN="LEFT"/>simple_get_multi(keys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.LocaleSpecificSource" [color="black", fontcolor="black", label=<{LocaleSpecificSource|<br ALIGN="LEFT"/>|<I>get_localized_source</I>(lang)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.LocalizedDefaultSubreddits" [color="black", fontcolor="black", label=<{LocalizedDefaultSubreddits|CACHE_PREFIX : str<br ALIGN="LEFT"/>|get_defaults(location)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.LocalizedFeaturedSubreddits" [color="black", fontcolor="black", label=<{LocalizedFeaturedSubreddits|CACHE_PREFIX : str<br ALIGN="LEFT"/>|get_featured(location)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.LocalizedModule" [color="black", fontcolor="black", label=<{LocalizedModule|localized_appendices<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>|build(minifier)<br ALIGN="LEFT"/>languagize_path(path, lang)<br ALIGN="LEFT"/>use()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.Location" [color="black", fontcolor="black", label=<{Location|DELIMITER : str<br ALIGN="LEFT"/>country<br ALIGN="LEFT"/>metro : NoneType<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|contains(other)<br ALIGN="LEFT"/>from_code(code)<br ALIGN="LEFT"/>to_code()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.LocationBar" [color="black", fontcolor="black", label=<{LocationBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.promo_metrics.LocationPromoMetrics" [color="black", fontcolor="black", label=<{LocationPromoMetrics|<br ALIGN="LEFT"/>|get(srs, locations)<br ALIGN="LEFT"/>set(metrics)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.LockedInterstitial" [color="black", fontcolor="black", label=<{LockedInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.log.LoggingErrorReporter" [color="black", fontcolor="black", label=<{LoggingErrorReporter|<br ALIGN="LEFT"/>|report(exc_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Login" [color="black", fontcolor="black", label=<{Login|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.LoginFormWide" [color="black", fontcolor="black", label=<{LoginFormWide|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.LoginPage" [color="black", fontcolor="black", label=<{LoginPage|client<br ALIGN="LEFT"/>dest<br ALIGN="LEFT"/>enable_login_cover : bool<br ALIGN="LEFT"/>infobar : NoneType<br ALIGN="LEFT"/>short_title : str<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>login_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.LoginRatelimit" [color="black", fontcolor="black", label=<{LoginRatelimit|category<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.functional.controller.login.common.LoginRegBase" [color="black", fontcolor="black", label=<{LoginRegBase|<br ALIGN="LEFT"/>|<I>assert_failure</I>(res, code)<br ALIGN="LEFT"/>assert_headers(res, name, test)<br ALIGN="LEFT"/><I>assert_success</I>(res)<br ALIGN="LEFT"/>disabled_captcha()<br ALIGN="LEFT"/>do_login(user, passwd)<br ALIGN="LEFT"/>do_register(user, passwd, passwd2)<br ALIGN="LEFT"/>failed_captcha()<br ALIGN="LEFT"/>find_headers(res, name)<br ALIGN="LEFT"/>mock_login(name, cookie)<br ALIGN="LEFT"/>mock_register()<br ALIGN="LEFT"/>test_captcha_blocking()<br ALIGN="LEFT"/>test_captcha_disabling()<br ALIGN="LEFT"/>test_login()<br ALIGN="LEFT"/>test_login_wrong_password()<br ALIGN="LEFT"/>test_register()<br ALIGN="LEFT"/>test_register_username_taken()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.functional.controller.login.api_tests.LoginRegTests" [color="black", fontcolor="black", label=<{LoginRegTests|CONTROLLER : str<br ALIGN="LEFT"/>|assert_failure(res, code)<br ALIGN="LEFT"/>assert_success(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.loid_tests.LoidTests" [color="black", fontcolor="black", label=<{LoidTests|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_ftue_autocreate()<br ALIGN="LEFT"/>test_ftue_nocreate()<br ALIGN="LEFT"/>test_returning()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Mail_Opt" [color="black", fontcolor="black", label=<{Mail_Opt|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.email.mailgun.MailgunEmailProvider" [color="black", fontcolor="black", label=<{MailgunEmailProvider|config : dict<br ALIGN="LEFT"/>|send_email(to_address, from_address, subject, text, reply_to, parent_email_id, other_email_ids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.mailgun.MailgunWebhookController" [color="black", fontcolor="black", label=<{MailgunWebhookController|<br ALIGN="LEFT"/>|POST_zendeskreply()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.mr_tools.mr_tools.Mapper" [color="black", fontcolor="black", label=<{Mapper|<br ALIGN="LEFT"/>|process(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.McRedditDetector" [color="black", fontcolor="black", label=<{McRedditDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.cache.Mcrouter" [color="black", fontcolor="black", label=<{Mcrouter|<br ALIGN="LEFT"/>|set(key, val, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.media_cache.MediaByURL" [color="black", fontcolor="black", label=<{MediaByURL|media<br ALIGN="LEFT"/>|add(url, media)<br ALIGN="LEFT"/>add_error(url, error)<br ALIGN="LEFT"/>add_placeholder(url)<br ALIGN="LEFT"/>get(url, max_cache_age)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.MediaChild" [color="black", fontcolor="black", label=<{MediaChild|css_style : str<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.media.MediaEmbed" [color="black", fontcolor="black", label=<{MediaEmbed|content : NoneType<br ALIGN="LEFT"/>height : NoneType<br ALIGN="LEFT"/>public_thumbnail_url : NoneType<br ALIGN="LEFT"/>sandbox : bool<br ALIGN="LEFT"/>scrolling : bool<br ALIGN="LEFT"/>width : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MediaEmbed" [color="black", fontcolor="black", label=<{MediaEmbed|credentials : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MediaEmbedBody" [color="black", fontcolor="black", label=<{MediaEmbedBody|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.MediaPreview" [color="black", fontcolor="black", label=<{MediaPreview|id36<br ALIGN="LEFT"/>media_content<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.media.MediaProvider" [color="black", fontcolor="black", label=<{MediaProvider|<br ALIGN="LEFT"/>|<I>make_inaccessible</I>(url)<br ALIGN="LEFT"/><I>purge</I>(url)<br ALIGN="LEFT"/><I>put</I>(category, name, contents, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.mediaembed.MediaembedController" [color="black", fontcolor="black", label=<{MediaembedController|<br ALIGN="LEFT"/>|GET_mediaembed(link, credentials)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.MediumPriority" [color="black", fontcolor="black", label=<{MediumPriority|default : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.cache.MemcacheChain" [color="black", fontcolor="black", label=<{MemcacheChain|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.lock.MemcacheLock" [color="black", fontcolor="black", label=<{MemcacheLock|cache<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>have_lock : bool<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>locks<br ALIGN="LEFT"/>nonce : NoneType, tuple<br ALIGN="LEFT"/>owns_lock : bool<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>time : int<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|acquire()<br ALIGN="LEFT"/>release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.userrel.MemoizedUserRelManager" [color="black", fontcolor="black", label=<{MemoizedUserRelManager|add<br ALIGN="LEFT"/>disable_ids_fn : bool<br ALIGN="LEFT"/>disable_reverse_ids_fn : bool<br ALIGN="LEFT"/>ids<br ALIGN="LEFT"/>ids_fn_name<br ALIGN="LEFT"/>remove<br ALIGN="LEFT"/>reverse_ids<br ALIGN="LEFT"/>reverse_ids_fn_name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MenuArea" [color="black", fontcolor="black", label=<{MenuArea|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.MenuHandler" [color="black", fontcolor="black", label=<{MenuHandler|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MenuLink" [color="black", fontcolor="black", label=<{MenuLink|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.Merge" [color="black", fontcolor="black", label=<{Merge|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.MergeCursor" [color="black", fontcolor="black", label=<{MergeCursor|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.query_cache.MergedCachedQuery" [color="black", fontcolor="black", label=<{MergedCachedQuery|data<br ALIGN="LEFT"/>queries<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.queries.MergedCachedResults" [color="black", fontcolor="black", label=<{MergedCachedResults|cached_results<br ALIGN="LEFT"/>data : list<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.Message" [color="black", fontcolor="black", label=<{Message|author_slow<br ALIGN="LEFT"/>cache_ignore<br ALIGN="LEFT"/>display_to<br ALIGN="LEFT"/>distinguished : str<br ALIGN="LEFT"/>first_message<br ALIGN="LEFT"/>parent_id<br ALIGN="LEFT"/>permalink<br ALIGN="LEFT"/>recipient_slow<br ALIGN="LEFT"/>sr_id<br ALIGN="LEFT"/>subreddit_slow<br ALIGN="LEFT"/>to_id : NoneType<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>can_view_slow()<br ALIGN="LEFT"/>get_muted_user_in_conversation()<br ALIGN="LEFT"/>keep_item(wrapped)<br ALIGN="LEFT"/>make_permalink(force_domain)<br ALIGN="LEFT"/>make_permalink_slow(context, anchor, force_domain)<br ALIGN="LEFT"/>wrapped_cache_key(wrapped, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.MessageBuilder" [color="black", fontcolor="black", label=<{MessageBuilder|after : NoneType<br ALIGN="LEFT"/>num : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>reverse : bool<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>threaded : bool<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/><I>get_tree</I>()<br ALIGN="LEFT"/>item_iter(builder_items)<br ALIGN="LEFT"/>should_collapse(message)<br ALIGN="LEFT"/>valid_after(after)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.things.MessageButtons" [color="black", fontcolor="black", label=<{MessageButtons|full_comment_count<br ALIGN="LEFT"/>full_comment_path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MessageCompose" [color="black", fontcolor="black", label=<{MessageCompose|admins : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.MessageController" [color="black", fontcolor="black", label=<{MessageController|allow_stylesheets : bool<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>mark : str<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>next_suggestions_cls<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>render_params<br ALIGN="LEFT"/>show_nums : bool<br ALIGN="LEFT"/>show_sidebar<br ALIGN="LEFT"/>source : str<br ALIGN="LEFT"/>subwhere : NoneType<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_compose(to, subject, message)<br ALIGN="LEFT"/>GET_listing(where, mark, message, subwhere)<br ALIGN="LEFT"/>builder()<br ALIGN="LEFT"/>builder_wrapper(thing)<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>listing()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.errors.MessageError" [color="black", fontcolor="red", label=<{MessageError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.MessageJsonTemplate" [color="black", fontcolor="black", label=<{MessageJsonTemplate|<br ALIGN="LEFT"/>|raw_data(thing)<br ALIGN="LEFT"/>rendered_data(wrapped)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.MessageNotificationEmail" [color="black", fontcolor="black", label=<{MessageNotificationEmail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MessageNotificationEmailsUnsubscribe" [color="black", fontcolor="black", label=<{MessageNotificationEmailsUnsubscribe|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MessagePage" [color="black", fontcolor="black", label=<{MessagePage|replybox : NoneType<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.queues.MessageQueue" [color="black", fontcolor="black", label=<{MessageQueue|auto_delete : bool<br ALIGN="LEFT"/>bind_to_self : bool<br ALIGN="LEFT"/>durable : bool<br ALIGN="LEFT"/>exclusive : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.MessagesByAccount" [color="black", fontcolor="black", label=<{MessagesByAccount|<br ALIGN="LEFT"/>|add_message(account, message)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.reddit_base.MinimalController" [color="black", fontcolor="black", label=<{MinimalController|COMMON_REDDIT_HEADERS : str<br ALIGN="LEFT"/>allow_stylesheets : bool<br ALIGN="LEFT"/>defer_ratelimiting : bool<br ALIGN="LEFT"/>|OPTIONS()<br ALIGN="LEFT"/>abort403()<br ALIGN="LEFT"/>abort404()<br ALIGN="LEFT"/>api_wrapper(kw)<br ALIGN="LEFT"/>check_cors()<br ALIGN="LEFT"/>on_validation_error(error)<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>run_sitewide_ratelimits()<br ALIGN="LEFT"/>should_update_last_visit()<br ALIGN="LEFT"/>update_qstring(dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.MobileWebRedirectBar" [color="black", fontcolor="black", label=<{MobileWebRedirectBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.config.feature_test.MockAccount" [color="black", fontcolor="black", label=<{MockAccount|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.MockAmqp" [color="black", fontcolor="black", label=<{MockAmqp|queue : defaultdict<br ALIGN="LEFT"/>test_cls<br ALIGN="LEFT"/>|add_item(name, body)<br ALIGN="LEFT"/>assert_event_item(expected_data, expected_num, name)<br ALIGN="LEFT"/>assert_item_count(name, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.config.feature_test.MockWorld._make_state.MockState" [color="black", fontcolor="black", label=<{MockState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.config.feature_test.MockWorld" [color="black", fontcolor="black", label=<{MockWorld|current_loid<br ALIGN="LEFT"/>current_subreddit<br ALIGN="LEFT"/>current_user<br ALIGN="LEFT"/>has_gold<br ALIGN="LEFT"/>is_admin<br ALIGN="LEFT"/>is_employee<br ALIGN="LEFT"/>is_user_loggedin : bool<br ALIGN="LEFT"/>url_features<br ALIGN="LEFT"/>user_has_beta_enabled<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.modaction.ModAction" [color="black", fontcolor="black", label=<{ModAction|actions : tuple<br ALIGN="LEFT"/>details_text<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>create(sr, mod, action, details, target, description)<br ALIGN="LEFT"/>get_actions(srs, mod, action, after, reverse, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.ModActionBuilder" [color="black", fontcolor="black", label=<{ModActionBuilder|<br ALIGN="LEFT"/>|wrap_items(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.modaction.ModActionBySR" [color="black", fontcolor="black", label=<{ModActionBySR|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.modaction.ModActionBySRAction" [color="black", fontcolor="black", label=<{ModActionBySRAction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.modaction.ModActionBySRActionMod" [color="black", fontcolor="black", label=<{ModActionBySRActionMod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.modaction.ModActionBySRMod" [color="black", fontcolor="black", label=<{ModActionBySRMod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.ModActionListing" [color="black", fontcolor="black", label=<{ModActionListing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.ModActionTemplate" [color="black", fontcolor="black", label=<{ModActionTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.ModContribSR" [color="black", fontcolor="black", label=<{ModContribSR|allows_referrers<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>query_param : NoneType<br ALIGN="LEFT"/>sr_ids<br ALIGN="LEFT"/>srs<br ALIGN="LEFT"/>title : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.ModFiltered" [color="black", fontcolor="black", label=<{ModFiltered|filtername : str<br ALIGN="LEFT"/>unfiltered_path : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.ModListing" [color="black", fontcolor="black", label=<{ModListing|can_remove_self<br ALIGN="LEFT"/>form_title<br ALIGN="LEFT"/>has_add_form<br ALIGN="LEFT"/>has_invite<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.ModMinus" [color="black", fontcolor="black", label=<{ModMinus|analytics_name : str<br ALIGN="LEFT"/>exclude_sr_ids<br ALIGN="LEFT"/>exclude_srs<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>sr_ids<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.ModSR" [color="black", fontcolor="black", label=<{ModSR|name : str<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>query_param : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|is_moderator(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ModSRInfoBar" [color="black", fontcolor="black", label=<{ModSRInfoBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ModTableItem" [color="black", fontcolor="black", label=<{ModTableItem|executed_message<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|is_editable(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ModToolsPage" [color="black", fontcolor="black", label=<{ModToolsPage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.ModeratorInbox" [color="black", fontcolor="black", label=<{ModeratorInbox|<br ALIGN="LEFT"/>|get_rels(sr, messages)<br ALIGN="LEFT"/>set_unread(inbox_rels, unread)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.ModeratorMailButton" [color="black", fontcolor="black", label=<{ModeratorMailButton|<br ALIGN="LEFT"/>|is_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.ModeratorMessageBuilder" [color="black", fontcolor="black", label=<{ModeratorMessageBuilder|user<br ALIGN="LEFT"/>|get_tree()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ModeratorMessageCompose" [color="black", fontcolor="black", label=<{ModeratorMessageCompose|mod_srs<br ALIGN="LEFT"/>only_as_subreddit : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.permissions.ModeratorPermissionSet" [color="black", fontcolor="black", label=<{ModeratorPermissionSet|info : dict<br ALIGN="LEFT"/>|loads(encoded)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.permissions_test.ModeratorPermissionSetTest" [color="black", fontcolor="black", label=<{ModeratorPermissionSetTest|<br ALIGN="LEFT"/>|test_loads()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ModeratorPermissions" [color="black", fontcolor="black", label=<{ModeratorPermissions|permissions<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|items()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.Module" [color="black", fontcolor="black", label=<{Module|dependencies<br ALIGN="LEFT"/>destination_path<br ALIGN="LEFT"/>filter_sources : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>should_compile<br ALIGN="LEFT"/>sources : list<br ALIGN="LEFT"/>wrap<br ALIGN="LEFT"/>|build(minifier)<br ALIGN="LEFT"/>extend(module)<br ALIGN="LEFT"/>get_default_source(source)<br ALIGN="LEFT"/>get_flattened_sources(flattened_sources)<br ALIGN="LEFT"/>get_source(use_built_statics)<br ALIGN="LEFT"/>url(absolute, mangle_name)<br ALIGN="LEFT"/>use()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.MoreChildren" [color="black", fontcolor="black", label=<{MoreChildren|sort<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.MoreCommentJsonTemplate" [color="black", fontcolor="black", label=<{MoreCommentJsonTemplate|<br ALIGN="LEFT"/>|get_json(item)<br ALIGN="LEFT"/>get_kind(item)<br ALIGN="LEFT"/>get_rendered(item, render_style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.MoreComments" [color="black", fontcolor="black", label=<{MoreComments|cachable : bool<br ALIGN="LEFT"/>children : list<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>depth<br ALIGN="LEFT"/>display : str<br ALIGN="LEFT"/>link_id<br ALIGN="LEFT"/>link_name<br ALIGN="LEFT"/>parent_id<br ALIGN="LEFT"/>parent_name<br ALIGN="LEFT"/>parent_permalink<br ALIGN="LEFT"/>|wrapped_cache_key(item, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.MoreMessages" [color="black", fontcolor="black", label=<{MoreMessages|accent_color<br ALIGN="LEFT"/>author<br ALIGN="LEFT"/>cachable : bool<br ALIGN="LEFT"/>child<br ALIGN="LEFT"/>childlisting<br ALIGN="LEFT"/>display : str<br ALIGN="LEFT"/>is_collapsed : bool<br ALIGN="LEFT"/>new : bool<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>sr_id<br ALIGN="LEFT"/>subject<br ALIGN="LEFT"/>subreddit<br ALIGN="LEFT"/>to<br ALIGN="LEFT"/>user_is_recipient<br ALIGN="LEFT"/>was_comment : bool<br ALIGN="LEFT"/>|wrapped_cache_key(item, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.MoreRecursion" [color="black", fontcolor="black", label=<{MoreRecursion|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.multi.MultiApiController" [color="black", fontcolor="black", label=<{MultiApiController|<br ALIGN="LEFT"/>|DELETE_multi(multi)<br ALIGN="LEFT"/>DELETE_multi_subreddit(multi, sr)<br ALIGN="LEFT"/>GET_list_multis(user, expand_srs)<br ALIGN="LEFT"/>GET_multi(multi, expand_srs)<br ALIGN="LEFT"/>GET_multi_description(multi)<br ALIGN="LEFT"/>GET_multi_subreddit(multi, sr)<br ALIGN="LEFT"/>GET_my_multis(expand_srs)<br ALIGN="LEFT"/>POST_multi(path_info, data)<br ALIGN="LEFT"/>POST_multi_copy(from_multi, to_path_info, display_name)<br ALIGN="LEFT"/>POST_multi_rename(from_multi, to_path_info, display_name)<br ALIGN="LEFT"/>PUT_multi(path_info, data)<br ALIGN="LEFT"/>PUT_multi_description(multi, data)<br ALIGN="LEFT"/>PUT_multi_subreddit(multi, sr_name, data)<br ALIGN="LEFT"/>on_validation_error(error)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.MultiColumnQuery" [color="black", fontcolor="black", label=<{MultiColumnQuery|num<br ALIGN="LEFT"/>sort_key : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.MultiCursor" [color="black", fontcolor="black", label=<{MultiCursor|<br ALIGN="LEFT"/>|fetchall()<br ALIGN="LEFT"/>fetchone()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.MultiInfoBar" [color="black", fontcolor="black", label=<{MultiInfoBar|can_copy<br ALIGN="LEFT"/>can_edit<br ALIGN="LEFT"/>can_rename<br ALIGN="LEFT"/>color_options<br ALIGN="LEFT"/>description_md<br ALIGN="LEFT"/>icon_options<br ALIGN="LEFT"/>multi<br ALIGN="LEFT"/>share_url : NoneType<br ALIGN="LEFT"/>srs<br ALIGN="LEFT"/>subreddit_selector<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.MultiQuery" [color="black", fontcolor="black", label=<{MultiQuery|<br ALIGN="LEFT"/>|<I>get_from_cache</I>()<br ALIGN="LEFT"/><I>set_to_cache</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.MultiReddit" [color="black", fontcolor="black", label=<{MultiReddit|AGEWEIGHTS : dict<br ALIGN="LEFT"/>ageweight<br ALIGN="LEFT"/>allows_referrers<br ALIGN="LEFT"/>banned_sr_ids<br ALIGN="LEFT"/>header : str<br ALIGN="LEFT"/>kept_sr_ids<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>over_18<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>sr_ids<br ALIGN="LEFT"/>srs<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|get_all_comments()<br ALIGN="LEFT"/>get_gilded()<br ALIGN="LEFT"/>get_links(sort, time)<br ALIGN="LEFT"/>get_live_promos()<br ALIGN="LEFT"/>is_moderator(user)<br ALIGN="LEFT"/>keep_for_rising(sr_id)<br ALIGN="LEFT"/>srs_with_perms(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.thing.MultiRelation.MultiRelationCls" [color="black", fontcolor="black", label=<{MultiRelationCls|c<br ALIGN="LEFT"/>rels : dict<br ALIGN="LEFT"/>|rel(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.MultiredditMessageBuilder" [color="black", fontcolor="black", label=<{MultiredditMessageBuilder|sr<br ALIGN="LEFT"/>|get_tree()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.MutedAccountsBySubreddit" [color="black", fontcolor="black", label=<{MutedAccountsBySubreddit|<br ALIGN="LEFT"/>|cancel_colkey(user)<br ALIGN="LEFT"/>cancel_rowkey(subreddit)<br ALIGN="LEFT"/>mute(sr, user, muter, parent_message)<br ALIGN="LEFT"/>schedule_rowkey()<br ALIGN="LEFT"/>search(subreddit, subjects)<br ALIGN="LEFT"/>unmute(sr, user, automatic)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.MutedListing" [color="black", fontcolor="black", label=<{MutedListing|form_title<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>populate_from_muted(item, muted)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.MutedTableItem" [color="black", fontcolor="black", label=<{MutedTableItem|cells : tuple<br ALIGN="LEFT"/>executed_message<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.MutedTableItemJsonTemplate" [color="black", fontcolor="black", label=<{MutedTableItemJsonTemplate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.MySubredditsPage" [color="black", fontcolor="black", label=<{MySubredditsPage|<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.MyredditsController" [color="black", fontcolor="black", label=<{MyredditsController|extra_page_classes : list<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>render_params<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing(where)<br ALIGN="LEFT"/>build_listing(after)<br ALIGN="LEFT"/>builder_wrapper(thing)<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.NamedButton" [color="black", fontcolor="black", label=<{NamedButton|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.keyvalue.NamedGlobals" [color="black", fontcolor="black", label=<{NamedGlobals|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.NarwhalForRedditDetector" [color="black", fontcolor="black", label=<{NarwhalForRedditDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.NavButton" [color="black", fontcolor="black", label=<{NavButton|aliases : set<br ALIGN="LEFT"/>bare_path : str<br ALIGN="LEFT"/>base_path<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dest<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>selected : bool<br ALIGN="LEFT"/>sr_path : bool<br ALIGN="LEFT"/>target : str<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>use_params : bool<br ALIGN="LEFT"/>|build(base_path)<br ALIGN="LEFT"/>cachable_attrs()<br ALIGN="LEFT"/>is_selected()<br ALIGN="LEFT"/>selected_title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.NavMenu" [color="black", fontcolor="black", label=<{NavMenu|base_path : str<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>selected<br ALIGN="LEFT"/>separator : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|cachable_attrs()<br ALIGN="LEFT"/>find_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.NestedListing" [color="black", fontcolor="black", label=<{NestedListing|num<br ALIGN="LEFT"/>parent_name<br ALIGN="LEFT"/>things<br ALIGN="LEFT"/>|listing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress.NetmaskValueError" [color="black", fontcolor="red", label=<{NetmaskValueError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.NewController" [color="black", fontcolor="black", label=<{NewController|extra_page_classes : list<br ALIGN="LEFT"/>next_suggestions_cls<br ALIGN="LEFT"/>show_chooser : bool<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing()<br ALIGN="LEFT"/>POST_listing()<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.NewLink" [color="black", fontcolor="black", label=<{NewLink|default_hide : str<br ALIGN="LEFT"/>default_show : str<br ALIGN="LEFT"/>default_sr : NoneType<br ALIGN="LEFT"/>default_tab<br ALIGN="LEFT"/>extra_subreddits : NoneType<br ALIGN="LEFT"/>formtabs_menu<br ALIGN="LEFT"/>resubmit : bool<br ALIGN="LEFT"/>show_link : bool<br ALIGN="LEFT"/>show_self : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Newsletter" [color="black", fontcolor="black", label=<{Newsletter|extra_page_classes : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.NewsletterBar" [color="black", fontcolor="black", label=<{NewsletterBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.newsletter.NewsletterController" [color="black", fontcolor="black", label=<{NewsletterController|<br ALIGN="LEFT"/>|GET_newsletter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.newsletter.NewsletterError" [color="black", fontcolor="red", label=<{NewsletterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.image_resizing.no_op.NoOpImageResizingProvider" [color="black", fontcolor="black", label=<{NoOpImageResizingProvider|<br ALIGN="LEFT"/>|resize_image(image, width, censor_nsfw, max_ratio)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.NonCache" [color="black", fontcolor="black", label=<{NonCache|<br ALIGN="LEFT"/>|add()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_multi()<br ALIGN="LEFT"/>incr()<br ALIGN="LEFT"/>set()<br ALIGN="LEFT"/>set_multi()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.NoneResult" [color="black", fontcolor="black", label=<{NoneResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.NotFound" [color="black", fontcolor="red", label=<{NotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.NotFound" [color="black", fontcolor="red", label=<{NotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.image_resizing.NotLargeEnough" [color="black", fontcolor="red", label=<{NotLargeEnough|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.cdn.null.NullCdnProvider" [color="black", fontcolor="black", label=<{NullCdnProvider|<br ALIGN="LEFT"/>|get_client_ip(environ)<br ALIGN="LEFT"/>get_client_location(environ)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.email.null.NullEmailProvider" [color="black", fontcolor="black", label=<{NullEmailProvider|<br ALIGN="LEFT"/>|send_email(to_address, from_address, subject, text, reply_to, parent_email_id, other_email_ids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.NullJsonTemplate" [color="black", fontcolor="black", label=<{NullJsonTemplate|<br ALIGN="LEFT"/>|get_def(name)<br ALIGN="LEFT"/>render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.oauth2.OAuth2AccessController" [color="black", fontcolor="black", label=<{OAuth2AccessController|handles_csrf : bool<br ALIGN="LEFT"/>|OPTIONS_access_token()<br ALIGN="LEFT"/>OPTIONS_revoke_token()<br ALIGN="LEFT"/>POST_access_token(grant_type)<br ALIGN="LEFT"/>POST_revoke_token(token_id, token_hint)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.OAuth2AccessToken" [color="black", fontcolor="black", label=<{OAuth2AccessToken|revoked : bool<br ALIGN="LEFT"/>token_size : int<br ALIGN="LEFT"/>|check_valid()<br ALIGN="LEFT"/>revoke()<br ALIGN="LEFT"/>revoke_all_by_user(account)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.OAuth2AccessTokensByUser" [color="black", fontcolor="black", label=<{OAuth2AccessTokensByUser|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.OAuth2Authorization" [color="black", fontcolor="black", label=<{OAuth2Authorization|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.token.OAuth2AuthorizationCode" [color="black", fontcolor="black", label=<{OAuth2AuthorizationCode|token_size : int<br ALIGN="LEFT"/>|use_token(_id, client_id, redirect_uri)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.OAuth2AuthorizationPage" [color="black", fontcolor="black", label=<{OAuth2AuthorizationPage|show_mobilewebredirectbar : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.token.OAuth2Client" [color="black", fontcolor="black", label=<{OAuth2Client|APP_TYPES : tuple<br ALIGN="LEFT"/>PUBLIC_APP_TYPES : tuple<br ALIGN="LEFT"/>client_secret_size : int<br ALIGN="LEFT"/>deleted : bool<br ALIGN="LEFT"/>max_developers : int<br ALIGN="LEFT"/>token_size : int<br ALIGN="LEFT"/>|add_developer(account, force)<br ALIGN="LEFT"/>has_developer(account)<br ALIGN="LEFT"/>is_confidential()<br ALIGN="LEFT"/>is_first_party()<br ALIGN="LEFT"/>remove_developer(account)<br ALIGN="LEFT"/>revoke(account)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.OAuth2ClientsByDeveloper" [color="black", fontcolor="black", label=<{OAuth2ClientsByDeveloper|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.oauth2.OAuth2FrontendController" [color="black", fontcolor="black", label=<{OAuth2FrontendController|<br ALIGN="LEFT"/>|GET_authorize(response_type, client, redirect_uri, scope, state, duration)<br ALIGN="LEFT"/>POST_authorize(authorize, client, redirect_uri, scope, state, duration, response_type)<br ALIGN="LEFT"/><I>check_for_bearer_token</I>()<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.reddit_base.OAuth2OnlyController" [color="black", fontcolor="black", label=<{OAuth2OnlyController|handles_csrf : bool<br ALIGN="LEFT"/>|on_validation_error(error)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.OAuth2RefreshToken" [color="black", fontcolor="black", label=<{OAuth2RefreshToken|<br ALIGN="LEFT"/>|revoke()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.OAuth2RefreshTokensByUser" [color="black", fontcolor="black", label=<{OAuth2RefreshTokensByUser|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.reddit_base.OAuth2ResourceController" [color="black", fontcolor="black", label=<{OAuth2ResourceController|defer_ratelimiting : bool<br ALIGN="LEFT"/>|authenticate_with_token()<br ALIGN="LEFT"/>check_for_bearer_token()<br ALIGN="LEFT"/>set_up_user_context()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.OAuth2Scope" [color="black", fontcolor="black", label=<{OAuth2Scope|FULL_ACCESS : str<br ALIGN="LEFT"/>scope_info : dict<br ALIGN="LEFT"/>scopes : NoneType, set<br ALIGN="LEFT"/>subreddit_only : bool<br ALIGN="LEFT"/>subreddits : NoneType, set<br ALIGN="LEFT"/>|details()<br ALIGN="LEFT"/>has_access(subreddit, required_scopes)<br ALIGN="LEFT"/>has_any_scope(required_scopes)<br ALIGN="LEFT"/>is_valid()<br ALIGN="LEFT"/>merge_scopes(scopes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.oembed.OEmbedController" [color="black", fontcolor="black", label=<{OEmbedController|<br ALIGN="LEFT"/>|GET_oembed(url, parent, live, omitscript)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VValidatedJSON.Object" [color="black", fontcolor="black", label=<{Object|spec<br ALIGN="LEFT"/>|run(data, ignore_missing)<br ALIGN="LEFT"/>spec_docs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.ObjectTemplate" [color="black", fontcolor="black", label=<{ObjectTemplate|d<br ALIGN="LEFT"/>|finalize(kw)<br ALIGN="LEFT"/>update(kw)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.OffsiteButton" [color="black", fontcolor="black", label=<{OffsiteButton|bare_path<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>sr_path : bool<br ALIGN="LEFT"/>|build(base_path)<br ALIGN="LEFT"/>cachable_attrs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.OptIn" [color="black", fontcolor="black", label=<{OptIn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.OptOut" [color="black", fontcolor="black", label=<{OptOut|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.Order" [color="black", fontcolor="black", label=<{Order|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.OrganicListingJsonTemplate" [color="black", fontcolor="black", label=<{OrganicListingJsonTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Over18Interstitial" [color="black", fontcolor="black", label=<{Over18Interstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.PageNameNav" [color="black", fontcolor="black", label=<{PageNameNav|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.traffic.PageviewsByLanguage" [color="black", fontcolor="black", label=<{PageviewsByLanguage|date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>lang<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|history(interval, lang)<br ALIGN="LEFT"/>top_last_month()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.PageviewsBySubreddit" [color="black", fontcolor="black", label=<{PageviewsBySubreddit|date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>subreddit<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|history(interval, subreddit)<br ALIGN="LEFT"/>last_month(srs)<br ALIGN="LEFT"/>top_last_month(num)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.PageviewsBySubredditAndPath" [color="black", fontcolor="black", label=<{PageviewsBySubredditAndPath|date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>srpath<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PaneStack" [color="black", fontcolor="black", label=<{PaneStack|css_class : NoneType<br ALIGN="LEFT"/>div : bool<br ALIGN="LEFT"/>div_id : NoneType<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>title_buttons : list<br ALIGN="LEFT"/>|append(item)<br ALIGN="LEFT"/>insert()<br ALIGN="LEFT"/>push(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.PanestackJsonTemplate" [color="black", fontcolor="black", label=<{PanestackJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VValidatedJSON.PartialObject" [color="black", fontcolor="black", label=<{PartialObject|<br ALIGN="LEFT"/>|run(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Password" [color="black", fontcolor="black", label=<{Password|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PasswordChangeEmail" [color="black", fontcolor="black", label=<{PasswordChangeEmail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PasswordReset" [color="black", fontcolor="black", label=<{PasswordReset|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.token.PasswordResetToken" [color="black", fontcolor="black", label=<{PasswordResetToken|token_size : int<br ALIGN="LEFT"/>|valid_for_user(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.bidding.PayID" [color="black", fontcolor="black", label=<{PayID|account_id<br ALIGN="LEFT"/>pay_id<br ALIGN="LEFT"/>|get_ids(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PaymentForm" [color="black", fontcolor="black", label=<{PaymentForm|budget<br ALIGN="LEFT"/>campaign_id36<br ALIGN="LEFT"/>countries<br ALIGN="LEFT"/>default_country<br ALIGN="LEFT"/>duration<br ALIGN="LEFT"/>end_date<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>start_date<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.PaymentProfile" [color="black", fontcolor="black", label=<{PaymentProfile|<br ALIGN="LEFT"/>|fromXML(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.PeekableIterator" [color="black", fontcolor="black", label=<{PeekableIterator|item : NoneType<br ALIGN="LEFT"/>iterator<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>peek()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.automoderator.PerformedRulesByThing" [color="black", fontcolor="black", label=<{PerformedRulesByThing|<br ALIGN="LEFT"/>|get_already_performed(thing)<br ALIGN="LEFT"/>mark_performed(thing, rule)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.Permacache" [color="black", fontcolor="black", label=<{Permacache|COLUMN_NAME : str<br ALIGN="LEFT"/>cache_chain<br ALIGN="LEFT"/>cf<br ALIGN="LEFT"/>make_lock<br ALIGN="LEFT"/>|delete(key)<br ALIGN="LEFT"/>get(key, default, allow_local, stale)<br ALIGN="LEFT"/>get_multi(keys, prefix, allow_local, stale)<br ALIGN="LEFT"/>mutate(key, mutation_fn, default, willread)<br ALIGN="LEFT"/>pessimistically_set(key, value)<br ALIGN="LEFT"/>set(key, val)<br ALIGN="LEFT"/>set_multi(keys, prefix, time)<br ALIGN="LEFT"/>simple_get_multi(keys, allow_local, stale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.PermalinkCommentOrderer" [color="black", fontcolor="black", label=<{PermalinkCommentOrderer|comment<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>|get_initial_candidates(comment_tree)<br ALIGN="LEFT"/>get_path_to_comment(comment, context, comment_tree)<br ALIGN="LEFT"/>modify_comment_tree(comment_tree)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PermalinkMessage" [color="black", fontcolor="black", label=<{PermalinkMessage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.app_globals.PermissionFilteredEmployeeList" [color="black", fontcolor="black", label=<{PermissionFilteredEmployeeList|config<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.permissions.PermissionSet" [color="black", fontcolor="black", label=<{PermissionSet|ALL : str<br ALIGN="LEFT"/>info : NoneType<br ALIGN="LEFT"/>|dumps()<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>is_superuser()<br ALIGN="LEFT"/>is_valid()<br ALIGN="LEFT"/>loads(encoded, validate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.permissions_test.PermissionSetTest" [color="black", fontcolor="black", label=<{PermissionSetTest|<br ALIGN="LEFT"/>|test_dumps()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_is_superuser()<br ALIGN="LEFT"/>test_is_valid()<br ALIGN="LEFT"/>test_loads()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.PermissionsDataSource" [color="black", fontcolor="black", label=<{PermissionsDataSource|dependencies<br ALIGN="LEFT"/>permission_sets<br ALIGN="LEFT"/>|get_source()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.traffic.emr_traffic.PigAggregate" [color="black", fontcolor="black", label=<{PigAggregate|PIG_FILE<br ALIGN="LEFT"/>STEP_NAME : str<br ALIGN="LEFT"/>input_path<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>output_path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.traffic.emr_traffic.PigCoalesce" [color="black", fontcolor="black", label=<{PigCoalesce|PIG_FILE<br ALIGN="LEFT"/>STEP_NAME : str<br ALIGN="LEFT"/>input_path<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>output_path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.traffic.emr_traffic.PigProcessHour" [color="black", fontcolor="black", label=<{PigProcessHour|PIG_FILE<br ALIGN="LEFT"/>STEP_NAME : str<br ALIGN="LEFT"/>log_path<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>output_path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.plugin.Plugin" [color="black", fontcolor="black", label=<{Plugin|config : dict<br ALIGN="LEFT"/>entry_point<br ALIGN="LEFT"/>errors : dict<br ALIGN="LEFT"/>js : dict<br ALIGN="LEFT"/>live_config : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>needs_static_build : bool<br ALIGN="LEFT"/>needs_translation : bool<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>source_root_url : NoneType<br ALIGN="LEFT"/>static_dir<br ALIGN="LEFT"/>template_dir<br ALIGN="LEFT"/>|add_js(module_registry)<br ALIGN="LEFT"/><I>add_routes</I>(mc)<br ALIGN="LEFT"/><I>declare_queues</I>(queues)<br ALIGN="LEFT"/>get_documented_controllers()<br ALIGN="LEFT"/><I>load_controllers</I>()<br ALIGN="LEFT"/><I>on_load</I>(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.plugin.PluginLoader" [color="black", fontcolor="black", label=<{PluginLoader|plugins : OrderedDict<br ALIGN="LEFT"/>working_set : WorkingSet<br ALIGN="LEFT"/>|available_plugins(name)<br ALIGN="LEFT"/>declare_queues(queues)<br ALIGN="LEFT"/>get_documented_controllers()<br ALIGN="LEFT"/>load_controllers()<br ALIGN="LEFT"/>load_plugins(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.PluralForms" [color="black", fontcolor="black", label=<{PluralForms|<br ALIGN="LEFT"/>|get_localized_source(lang)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.strings.PluralManager" [color="black", fontcolor="black", label=<{PluralManager|string_dict : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.policies.PoliciesController" [color="black", fontcolor="black", label=<{PoliciesController|<br ALIGN="LEFT"/>|GET_policy_page(page, requested_rev)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PolicyPage" [color="black", fontcolor="black", label=<{PolicyPage|css_class : str<br ALIGN="LEFT"/>show_infobar : bool<br ALIGN="LEFT"/>welcomebar : NoneType<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PolicyView" [color="black", fontcolor="black", label=<{PolicyView|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.PolicyViewJsonTemplate" [color="black", fontcolor="black", label=<{PolicyViewJsonTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Popup" [color="black", fontcolor="black", label=<{Popup|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.PostButton" [color="black", fontcolor="black", label=<{PostButton|action_params : dict<br ALIGN="LEFT"/>base_path : str<br ALIGN="LEFT"/>input_name<br ALIGN="LEFT"/>|build(base_path)<br ALIGN="LEFT"/>cachable_attrs()<br ALIGN="LEFT"/>is_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.post.PostController" [color="black", fontcolor="black", label=<{PostController|<br ALIGN="LEFT"/>|GET_login()<br ALIGN="LEFT"/>GET_over18()<br ALIGN="LEFT"/>GET_quarantine(dest)<br ALIGN="LEFT"/>POST_explore_settings(form, jquery, personalized, discovery, rising, nsfw)<br ALIGN="LEFT"/>POST_login(dest)<br ALIGN="LEFT"/>POST_optin(msg_hash)<br ALIGN="LEFT"/>POST_options(all_langs)<br ALIGN="LEFT"/>POST_optout(msg_hash)<br ALIGN="LEFT"/>POST_over18(over18, dest)<br ALIGN="LEFT"/>POST_quarantine(sr, accept, dest)<br ALIGN="LEFT"/>POST_reg(dest)<br ALIGN="LEFT"/>POST_unlogged_options(all_langs, pref_lang)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.functional.controller.login.post_tests.PostLoginRegTests" [color="black", fontcolor="black", label=<{PostLoginRegTests|ACTIONS : dict<br ALIGN="LEFT"/>CONTROLLER : str<br ALIGN="LEFT"/>dest : str<br ALIGN="LEFT"/>|assert_failure(res, code)<br ALIGN="LEFT"/>assert_success(res)<br ALIGN="LEFT"/>make_qs()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefApps" [color="black", fontcolor="black", label=<{PrefApps|developed_apps<br ALIGN="LEFT"/>my_apps<br ALIGN="LEFT"/>|render_developed_app(app, collapsed)<br ALIGN="LEFT"/>render_editable_developer(app, dev)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefDeactivate" [color="black", fontcolor="black", label=<{PrefDeactivate|has_paypal_subscription<br ALIGN="LEFT"/>paypal_subscr_id<br ALIGN="LEFT"/>paypal_url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefFeeds" [color="black", fontcolor="black", label=<{PrefFeeds|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefOptions" [color="black", fontcolor="black", label=<{PrefOptions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefSecurity" [color="black", fontcolor="black", label=<{PrefSecurity|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefUpdate" [color="black", fontcolor="black", label=<{PrefUpdate|dest : NoneType<br ALIGN="LEFT"/>email : bool<br ALIGN="LEFT"/>password : bool<br ALIGN="LEFT"/>subscribe<br ALIGN="LEFT"/>verify : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.PrefsJsonTemplate" [color="black", fontcolor="black", label=<{PrefsJsonTemplate|<br ALIGN="LEFT"/>|thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrefsPage" [color="black", fontcolor="black", label=<{PrefsPage|extension_handling : bool<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.printable.Printable" [color="black", fontcolor="black", label=<{Printable|author : NoneType<br ALIGN="LEFT"/>cache_ignore : set<br ALIGN="LEFT"/>can_ban : bool<br ALIGN="LEFT"/>childlisting : NoneType<br ALIGN="LEFT"/>collapsed : bool<br ALIGN="LEFT"/>deleted : bool<br ALIGN="LEFT"/>is_focal : bool<br ALIGN="LEFT"/>is_special : bool<br ALIGN="LEFT"/>margin : int<br ALIGN="LEFT"/>permalink<br ALIGN="LEFT"/>rowstyle_cls : str<br ALIGN="LEFT"/>show_reports : bool<br ALIGN="LEFT"/>show_spam : bool<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>keep_item(wrapped)<br ALIGN="LEFT"/><I>update_nofollow</I>(user, wrapped)<br ALIGN="LEFT"/>wrapped_cache_key(wrapped, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.things.PrintableButtons" [color="black", fontcolor="black", label=<{PrintableButtons|cachable : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.promo.PriorityLevel" [color="black", fontcolor="black", label=<{PriorityLevel|default : bool<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>inventory_override : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PrivateInterstitial" [color="black", fontcolor="black", label=<{PrivateInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.Profile" [color="black", fontcolor="black", label=<{Profile|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ProfileBar" [color="black", fontcolor="black", label=<{ProfileBar|all_karmas<br ALIGN="LEFT"/>giftmsg<br ALIGN="LEFT"/>gold_creddit_message<br ALIGN="LEFT"/>gold_remaining<br ALIGN="LEFT"/>goldlink : str<br ALIGN="LEFT"/>is_friend<br ALIGN="LEFT"/>num_gildings_message<br ALIGN="LEFT"/>paypal_subscr_id<br ALIGN="LEFT"/>paypal_url<br ALIGN="LEFT"/>show_private_gold_info<br ALIGN="LEFT"/>show_private_info : bool<br ALIGN="LEFT"/>show_users_gold_expiration<br ALIGN="LEFT"/>stripe_customer_id<br ALIGN="LEFT"/>viewing_self : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.ProfileOverviewTimeMenu" [color="black", fontcolor="black", label=<{ProfileOverviewTimeMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ProfilePage" [color="black", fontcolor="black", label=<{ProfilePage|create_reddit_box : bool<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>searchbox : bool<br ALIGN="LEFT"/>submit_box : bool<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>page_classes()<br ALIGN="LEFT"/>rightbox()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.ProfileSortMenu" [color="black", fontcolor="black", label=<{ProfileSortMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.ProfileTransAuthOnly" [color="black", fontcolor="black", label=<{ProfileTransAuthOnly|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.ProfileTransPriorAuthCapture" [color="black", fontcolor="black", label=<{ProfileTransPriorAuthCapture|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.ProfileTransRefund" [color="black", fontcolor="black", label=<{ProfileTransRefund|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.ProfileTransVoid" [color="black", fontcolor="black", label=<{ProfileTransVoid|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.ProfilingMiddleware" [color="black", fontcolor="black", label=<{ProfilingMiddleware|app<br ALIGN="LEFT"/>directory<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.promo.PromoCampaign" [color="black", fontcolor="black", label=<{PromoCampaign|MOBILE_TARGET_DELIM : str<br ALIGN="LEFT"/>SR_NAMES_DELIM : str<br ALIGN="LEFT"/>SUBREDDIT_TARGET : str<br ALIGN="LEFT"/>android_device_names : NoneType, str<br ALIGN="LEFT"/>android_devices<br ALIGN="LEFT"/>android_version_names : NoneType, str<br ALIGN="LEFT"/>android_version_range<br ALIGN="LEFT"/>bid_dollars<br ALIGN="LEFT"/>bid_migrated : bool<br ALIGN="LEFT"/>bid_pennies<br ALIGN="LEFT"/>cpm_migrated : bool<br ALIGN="LEFT"/>frequency_cap<br ALIGN="LEFT"/>impressions<br ALIGN="LEFT"/>ios_device_names : NoneType, str<br ALIGN="LEFT"/>ios_devices<br ALIGN="LEFT"/>ios_version_names : NoneType, str<br ALIGN="LEFT"/>ios_version_range<br ALIGN="LEFT"/>is_auction<br ALIGN="LEFT"/>is_house<br ALIGN="LEFT"/>is_paid<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>location_code : NoneType<br ALIGN="LEFT"/>location_str<br ALIGN="LEFT"/>mobile_os<br ALIGN="LEFT"/>mobile_os_names : NoneType, str<br ALIGN="LEFT"/>ndays<br ALIGN="LEFT"/>platform<br ALIGN="LEFT"/>priority<br ALIGN="LEFT"/>priority_name<br ALIGN="LEFT"/>target<br ALIGN="LEFT"/>target_name : str<br ALIGN="LEFT"/>target_sr_names : str<br ALIGN="LEFT"/>total_budget_dollars<br ALIGN="LEFT"/>total_budget_pennies : int<br ALIGN="LEFT"/>|create(link, target, start_date, end_date, frequency_cap, priority, location, platform, mobile_os, ios_devices, ios_version_range, android_devices, android_version_range, total_budget_pennies, cost_basis, bid_pennies)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>is_freebie()<br ALIGN="LEFT"/>is_live_now()<br ALIGN="LEFT"/>location_code_from_location(location)<br ALIGN="LEFT"/>priority_name_from_priority(priority)<br ALIGN="LEFT"/>unpack_target(target)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo_metrics.PromoMetrics" [color="black", fontcolor="black", label=<{PromoMetrics|<br ALIGN="LEFT"/>|get(metric_name, sr_names)<br ALIGN="LEFT"/>set(metric_name, values_by_sr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Promo_Email" [color="black", fontcolor="black", label=<{Promo_Email|printable_total_budget<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.promotecontroller.PromoteApiController" [color="black", fontcolor="black", label=<{PromoteApiController|<br ALIGN="LEFT"/>|GET_ad_s3_callback(expires, signature, callback, key)<br ALIGN="LEFT"/>GET_check_inventory(responder, sr, collection, location, start, end, platform)<br ALIGN="LEFT"/>POST_ad_s3_params(responder, link, kind, filepath, ajax)<br ALIGN="LEFT"/>POST_create_promo(form, jquery, username, title, url, selftext, kind, disable_comments, sendreplies, media_url, media_autoplay, media_override, iframe_embed_url, media_url_type, domain_override, third_party_tracking, third_party_tracking_2, is_managed)<br ALIGN="LEFT"/>POST_delete_campaign(form, jquery, l, campaign)<br ALIGN="LEFT"/>POST_edit_campaign(form, jquery, is_auction, link, campaign_id36, start, end, target, frequency_cap, priority, location, platform, mobile_os, os_versions, ios_devices, ios_versions, android_devices, android_versions, total_budget_dollars, cost_basis, bid_dollars)<br ALIGN="LEFT"/>POST_edit_promo(form, jquery, username, title, url, selftext, kind, disable_comments, sendreplies, media_url, media_autoplay, media_override, iframe_embed_url, media_url_type, domain_override, third_party_tracking, third_party_tracking_2, is_managed, l)<br ALIGN="LEFT"/>POST_freebie(form, jquery, link, campaign)<br ALIGN="LEFT"/>POST_promote(thing)<br ALIGN="LEFT"/>POST_promote_note(form, jquery, link, note)<br ALIGN="LEFT"/>POST_refund_campaign(form, jquery, link, campaign)<br ALIGN="LEFT"/>POST_review_fraud(form, jquery, thing, is_fraud)<br ALIGN="LEFT"/>POST_terminate_campaign(form, jquery, link, campaign)<br ALIGN="LEFT"/>POST_toggle_pause_campaign(form, jquery, link, campaign, should_pause)<br ALIGN="LEFT"/>POST_unpromote(thing, reason)<br ALIGN="LEFT"/>POST_update_pay(form, jquery, link, campaign, customer_id, pay_id, edit, address, creditcard)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.promotecontroller.PromoteController" [color="black", fontcolor="black", label=<{PromoteController|<br ALIGN="LEFT"/>|GET_edit_promo(link)<br ALIGN="LEFT"/>GET_new_promo()<br ALIGN="LEFT"/>GET_pay(link, campaign)<br ALIGN="LEFT"/>GET_refund(link, campaign)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromoteInventory" [color="black", fontcolor="black", label=<{PromoteInventory|collection_input : NoneType<br ALIGN="LEFT"/>csv_url<br ALIGN="LEFT"/>default_end<br ALIGN="LEFT"/>default_start<br ALIGN="LEFT"/>display_name<br ALIGN="LEFT"/>end<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>rows : list<br ALIGN="LEFT"/>sr_input : NoneType<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>subreddit_selector<br ALIGN="LEFT"/>target<br ALIGN="LEFT"/>targeting_type : str<br ALIGN="LEFT"/>|as_csv()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromoteLinkBase" [color="black", fontcolor="black", label=<{PromoteLinkBase|android_versions<br ALIGN="LEFT"/>auction_optional<br ALIGN="LEFT"/>collections<br ALIGN="LEFT"/>countries<br ALIGN="LEFT"/>cpc_pricing : bool<br ALIGN="LEFT"/>force_auction<br ALIGN="LEFT"/>ios_versions<br ALIGN="LEFT"/>max_end : NoneType<br ALIGN="LEFT"/>max_start : NoneType<br ALIGN="LEFT"/>metros : dict<br ALIGN="LEFT"/>min_start : NoneType<br ALIGN="LEFT"/>mobile_targeting_enabled : bool<br ALIGN="LEFT"/>regions : dict<br ALIGN="LEFT"/>|get_collections()<br ALIGN="LEFT"/>get_locations()<br ALIGN="LEFT"/>get_mobile_versions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromoteLinkEdit" [color="black", fontcolor="black", label=<{PromoteLinkEdit|ads_auction_enabled : bool<br ALIGN="LEFT"/>author<br ALIGN="LEFT"/>bids : list<br ALIGN="LEFT"/>campaigns : list<br ALIGN="LEFT"/>default_budget_dollars<br ALIGN="LEFT"/>default_end<br ALIGN="LEFT"/>default_start<br ALIGN="LEFT"/>frequency_cap_min<br ALIGN="LEFT"/>infobar<br ALIGN="LEFT"/>inventory : dict<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>listing<br ALIGN="LEFT"/>max_bid_dollars : float<br ALIGN="LEFT"/>max_budget_dollars : int<br ALIGN="LEFT"/>max_end<br ALIGN="LEFT"/>max_start<br ALIGN="LEFT"/>min_bid_dollars : float<br ALIGN="LEFT"/>min_budget_dollars : int<br ALIGN="LEFT"/>min_start<br ALIGN="LEFT"/>price_dict<br ALIGN="LEFT"/>priorities<br ALIGN="LEFT"/>promotion_log : list<br ALIGN="LEFT"/>subreddit_selector<br ALIGN="LEFT"/>|setup(link, listing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromoteLinkNew" [color="black", fontcolor="black", label=<{PromoteLinkNew|images : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.promotecontroller.PromoteListingController" [color="black", fontcolor="black", label=<{PromoteListingController|base_path : str<br ALIGN="LEFT"/>default_filters : list<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>sort : str<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>titles : dict<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|GET_listing(sort)<br ALIGN="LEFT"/>builder_wrapper(thing)<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromotePage" [color="black", fontcolor="black", label=<{PromotePage|create_reddit_box : bool<br ALIGN="LEFT"/>extension_handling : bool<br ALIGN="LEFT"/>searchbox : bool<br ALIGN="LEFT"/>submit_box : bool<br ALIGN="LEFT"/>|get_menu()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromotePost" [color="black", fontcolor="black", label=<{PromotePost|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.PromoteReport" [color="black", fontcolor="black", label=<{PromoteReport|campaign_report : list<br ALIGN="LEFT"/>campaign_report_totals : dict<br ALIGN="LEFT"/>csv_url : NoneType<br ALIGN="LEFT"/>default_end<br ALIGN="LEFT"/>default_start<br ALIGN="LEFT"/>end<br ALIGN="LEFT"/>group_by_date : bool<br ALIGN="LEFT"/>link_report : list<br ALIGN="LEFT"/>links<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>|as_csv()<br ALIGN="LEFT"/>get_traffic(campaigns, start, end)<br ALIGN="LEFT"/>make_report()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.PromotedLink" [color="black", fontcolor="black", label=<{PromotedLink|cache_ignore<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.PromotedLinkJsonTemplate" [color="black", fontcolor="black", label=<{PromotedLinkJsonTemplate|<br ALIGN="LEFT"/>|get_json(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.PromotedLinkTraffic" [color="black", fontcolor="black", label=<{PromotedLinkTraffic|after<br ALIGN="LEFT"/>before<br ALIGN="LEFT"/>campaign<br ALIGN="LEFT"/>campaign_table : list<br ALIGN="LEFT"/>detail_name : str<br ALIGN="LEFT"/>has_early_campaign : bool<br ALIGN="LEFT"/>has_live_campaign : bool<br ALIGN="LEFT"/>history : list<br ALIGN="LEFT"/>is_preliminary<br ALIGN="LEFT"/>next : NoneType<br ALIGN="LEFT"/>period : timedelta<br ALIGN="LEFT"/>prev : NoneType<br ALIGN="LEFT"/>thing<br ALIGN="LEFT"/>total_clicks : int<br ALIGN="LEFT"/>total_ctr : int<br ALIGN="LEFT"/>total_impressions : int<br ALIGN="LEFT"/>traffic_lag<br ALIGN="LEFT"/>traffic_last_modified : datetime<br ALIGN="LEFT"/>|as_csv(thing)<br ALIGN="LEFT"/>check_dates(thing)<br ALIGN="LEFT"/>get_hourly_traffic(thing, start, end)<br ALIGN="LEFT"/>make_campaign_table()<br ALIGN="LEFT"/>make_campaign_table_row(id, start, end, target, location, budget_dollars, spent, paid_impressions, impressions, clicks, is_live, is_active, url, is_total)<br ALIGN="LEFT"/>make_hourly_table(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.PromotionLog" [color="black", fontcolor="black", label=<{PromotionLog|<br ALIGN="LEFT"/>|add(link, text)<br ALIGN="LEFT"/>get(link)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.promo.PromotionPrices" [color="black", fontcolor="black", label=<{PromotionPrices|COLLECTION_DEFAULT<br ALIGN="LEFT"/>COUNTRY_DEFAULT<br ALIGN="LEFT"/>METRO_DEFAULT<br ALIGN="LEFT"/>SUBREDDIT_DEFAULT<br ALIGN="LEFT"/>|get_price(user, target, location)<br ALIGN="LEFT"/>get_price_dict(user)<br ALIGN="LEFT"/>lookup_location_price(location, default)<br ALIGN="LEFT"/>lookup_target_price(target, default)<br ALIGN="LEFT"/>set_location_price(location, cpm)<br ALIGN="LEFT"/>set_target_price(target, cpm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.bidding.PromotionWeights" [color="black", fontcolor="black", label=<{PromotionWeights|account_id<br ALIGN="LEFT"/>bid<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>finished<br ALIGN="LEFT"/>promo_idx<br ALIGN="LEFT"/>sr_name<br ALIGN="LEFT"/>thing_name<br ALIGN="LEFT"/>weight<br ALIGN="LEFT"/>|add(link, campaign)<br ALIGN="LEFT"/>delete(link, campaign)<br ALIGN="LEFT"/>filter_sr_name(sr_name)<br ALIGN="LEFT"/>get_campaign_ids(start, end, link, author_id, sr_names)<br ALIGN="LEFT"/>get_link_names(start, end, link, author_id, sr_names)<br ALIGN="LEFT"/>reschedule(link, campaign)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.eventcollector.PublishableEvent" [color="black", fontcolor="black", label=<{PublishableEvent|data : str<br ALIGN="LEFT"/>truncatable_field : NoneType<br ALIGN="LEFT"/>|truncate_data(target_len)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.QACommentOrderer" [color="black", fontcolor="black", label=<{QACommentOrderer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.QuarantineInterstitial" [color="black", fontcolor="black", label=<{QuarantineInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.QuarantineOptoutButton" [color="black", fontcolor="black", label=<{QuarantineOptoutButton|data_attrs : dict<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.account.QuarantinedSubredditOptInsByAccount" [color="black", fontcolor="black", label=<{QuarantinedSubredditOptInsByAccount|<br ALIGN="LEFT"/>|is_opted_in(user, subreddit)<br ALIGN="LEFT"/>opt_in(account, subreddit)<br ALIGN="LEFT"/>opt_out(account, subreddit)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.Query" [color="black", fontcolor="black", label=<{Query|after : NoneType<br ALIGN="LEFT"/>chunk_size : int<br ALIGN="LEFT"/>cls<br ALIGN="LEFT"/>copy<br ALIGN="LEFT"/>limit : NoneType, int<br ALIGN="LEFT"/>max_column_count : int<br ALIGN="LEFT"/>properties : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.Query" [color="black", fontcolor="black", label=<{Query|<br ALIGN="LEFT"/>|get_from_cache(allow_local)<br ALIGN="LEFT"/>set_to_cache(things)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.QueryBuilder" [color="black", fontcolor="black", label=<{QueryBuilder|after : NoneType<br ALIGN="LEFT"/>num : NoneType<br ALIGN="LEFT"/>orig_rules<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>reverse : bool<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>sr_detail : NoneType<br ALIGN="LEFT"/>start_count : int<br ALIGN="LEFT"/>|fetch_more(last_item, num_have)<br ALIGN="LEFT"/>get_items()<br ALIGN="LEFT"/>init_query()<br ALIGN="LEFT"/>item_iter(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.QueryButton" [color="black", fontcolor="black", label=<{QueryButton|base_path : str<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>query_param<br ALIGN="LEFT"/>|build(base_path)<br ALIGN="LEFT"/>is_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.queues.Queues" [color="black", fontcolor="black", label=<{Queues|bindings : set<br ALIGN="LEFT"/>|declare(queues)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.baseplate_integration.R2BaseplateObserver" [color="black", fontcolor="black", label=<{R2BaseplateObserver|<br ALIGN="LEFT"/>|on_server_span_created(context, server_span)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.baseplate_integration.R2ServerSpanObserver" [color="black", fontcolor="black", label=<{R2ServerSpanObserver|<br ALIGN="LEFT"/>|on_child_span_created(span)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.baseplate_integration.R2SpanObserver" [color="black", fontcolor="black", label=<{R2SpanObserver|metric_name<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|on_finish(exc_info)<br ALIGN="LEFT"/>on_start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.captcha.RandCaptcha" [color="black", fontcolor="black", label=<{RandCaptcha|defaultSize : tuple<br ALIGN="LEFT"/>fontFactory<br ALIGN="LEFT"/>|getLayers(solution)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.RandomNSFWReddit" [color="black", fontcolor="black", label=<{RandomNSFWReddit|header : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.RandomReddit" [color="black", fontcolor="black", label=<{RandomReddit|header : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.RandomSubscriptionReddit" [color="black", fontcolor="black", label=<{RandomSubscriptionReddit|header : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.RandomrisingController" [color="black", fontcolor="black", label=<{RandomrisingController|next_suggestions_cls<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.ratelimit.RateLimit" [color="black", fontcolor="black", label=<{RateLimit|sample_rate : float<br ALIGN="LEFT"/>timeslice<br ALIGN="LEFT"/>|check()<br ALIGN="LEFT"/>check_multi(ratelimits)<br ALIGN="LEFT"/>get_usage()<br ALIGN="LEFT"/>record_multi(ratelimits)<br ALIGN="LEFT"/>record_usage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VRatelimitImproved.RateLimit" [color="black", fontcolor="black", label=<{RateLimit|event_id_fn<br ALIGN="LEFT"/>event_name<br ALIGN="LEFT"/>event_type<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>limit<br ALIGN="LEFT"/>sample_rate : float<br ALIGN="LEFT"/>seconds<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.ratelimit_test.RateLimitStandaloneFunctionsTest" [color="black", fontcolor="black", label=<{RateLimitStandaloneFunctionsTest|cache<br ALIGN="LEFT"/>now : int<br ALIGN="LEFT"/>|patch()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_timeslice()<br ALIGN="LEFT"/>test_get_usage()<br ALIGN="LEFT"/>test_make_ratelimit_cache_key_1d()<br ALIGN="LEFT"/>test_make_ratelimit_cache_key_1h()<br ALIGN="LEFT"/>test_make_ratelimit_cache_key_1m()<br ALIGN="LEFT"/>test_make_ratelimit_cache_key_1s()<br ALIGN="LEFT"/>test_make_ratelimit_cache_key_1w()<br ALIGN="LEFT"/>test_record_usage()<br ALIGN="LEFT"/>test_record_usage_across_slice_expiration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.ratelimit_test.RateLimitTest" [color="black", fontcolor="black", label=<{RateLimitTest|cache<br ALIGN="LEFT"/>now : int<br ALIGN="LEFT"/>|patch()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_usage()<br ALIGN="LEFT"/>test_record_usage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.ratelimit.RatelimitError" [color="black", fontcolor="red", label=<{RatelimitError|wrapped<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.log.RavenErrorReporter" [color="black", fontcolor="black", label=<{RavenErrorReporter|<br ALIGN="LEFT"/>|add_http_context(client)<br ALIGN="LEFT"/>add_reddit_context(client)<br ALIGN="LEFT"/>add_user_context(client)<br ALIGN="LEFT"/>capture_exception(exc_info)<br ALIGN="LEFT"/>get_module_versions()<br ALIGN="LEFT"/>get_raven_client()<br ALIGN="LEFT"/>report(exc_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.RawCode" [color="black", fontcolor="black", label=<{RawCode|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.RawString" [color="black", fontcolor="black", label=<{RawString|s<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ReadNext" [color="black", fontcolor="black", label=<{ReadNext|links<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link.ReadNextLink" [color="black", fontcolor="black", label=<{ReadNextLink|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.ReadNextListing" [color="black", fontcolor="black", label=<{ReadNextListing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.ReaditDetector" [color="black", fontcolor="black", label=<{ReaditDetector|agent_string : str<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.menus.RecSortMenu" [color="black", fontcolor="black", label=<{RecSortMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Reddit" [color="black", fontcolor="black", label=<{Reddit|auction_announcement : bool<br ALIGN="LEFT"/>canonical_link<br ALIGN="LEFT"/>content_id : NoneType<br ALIGN="LEFT"/>create_reddit_box : bool<br ALIGN="LEFT"/>css_class : NoneType<br ALIGN="LEFT"/>debug_footer<br ALIGN="LEFT"/>default_theme_sr<br ALIGN="LEFT"/>dnt_enabled : bool<br ALIGN="LEFT"/>enable_login_cover : bool<br ALIGN="LEFT"/>extension_handling : bool<br ALIGN="LEFT"/>extra_js_config : NoneType<br ALIGN="LEFT"/>extra_page_classes : NoneType<br ALIGN="LEFT"/>extra_stylesheets : list<br ALIGN="LEFT"/>feature_expando_nsfw_flow : bool<br ALIGN="LEFT"/>feature_new_expando_icons : bool<br ALIGN="LEFT"/>footer<br ALIGN="LEFT"/>header : bool<br ALIGN="LEFT"/>infobar : NoneType<br ALIGN="LEFT"/>infotext : str<br ALIGN="LEFT"/>locationbar : NoneType<br ALIGN="LEFT"/>loginbox : bool<br ALIGN="LEFT"/>mobilewebredirectbar : NoneType<br ALIGN="LEFT"/>nav_menu : NoneType<br ALIGN="LEFT"/>newsletterbar : NoneType<br ALIGN="LEFT"/>no_sr_styles<br ALIGN="LEFT"/>popup_panes<br ALIGN="LEFT"/>robots : NoneType<br ALIGN="LEFT"/>searchbox : bool<br ALIGN="LEFT"/>short_description : str<br ALIGN="LEFT"/>short_title : NoneType<br ALIGN="LEFT"/>show_chooser<br ALIGN="LEFT"/>show_infobar : bool<br ALIGN="LEFT"/>show_newsletterbar : bool<br ALIGN="LEFT"/>show_sidebar : bool<br ALIGN="LEFT"/>show_timeout_modal : bool<br ALIGN="LEFT"/>show_wiki_actions : bool<br ALIGN="LEFT"/>site_tracking : bool<br ALIGN="LEFT"/>space_compress : NoneType<br ALIGN="LEFT"/>srtopbar : NoneType<br ALIGN="LEFT"/>submit_box : bool<br ALIGN="LEFT"/>subreddit_stylesheet_url<br ALIGN="LEFT"/>supplied_page_classes : list<br ALIGN="LEFT"/>timeout_days_remaining<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>toolbars : list<br ALIGN="LEFT"/>welcomebar : NoneType<br ALIGN="LEFT"/>|build_popup_panes()<br ALIGN="LEFT"/>build_toolbars()<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>content_stack(panes, css_class)<br ALIGN="LEFT"/>corner_buttons()<br ALIGN="LEFT"/>get_subreddit_stylesheet_url(sr)<br ALIGN="LEFT"/>is_gold_page()<br ALIGN="LEFT"/>page_classes()<br ALIGN="LEFT"/>render()<br ALIGN="LEFT"/>rightbox()<br ALIGN="LEFT"/>sr_admin_menu()<br ALIGN="LEFT"/>wiki_actions_menu(moderator)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RedditAndroidDetector" [color="black", fontcolor="black", label=<{RedditAndroidDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.RedditApp" [color="black", fontcolor="black", label=<{RedditApp|test_mode : bool<br ALIGN="LEFT"/>|find_controller(controller_name)<br ALIGN="LEFT"/>load_controllers()<br ALIGN="LEFT"/>register_hooks()<br ALIGN="LEFT"/>setup_app_env(environ, start_response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RedditBrowser" [color="black", fontcolor="black", label=<{RedditBrowser|is_app : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.reddit_base.RedditController" [color="black", fontcolor="black", label=<{RedditController|<br ALIGN="LEFT"/>|disable_admin_mode(user)<br ALIGN="LEFT"/>enable_admin_mode(user, first_login)<br ALIGN="LEFT"/>login(user, rem)<br ALIGN="LEFT"/>logout()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>remember_otp(user)<br ALIGN="LEFT"/>search_fail(exception)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.RedditControllerTestCase" [color="black", fontcolor="black", label=<{RedditControllerTestCase|ACTIONS : dict<br ALIGN="LEFT"/>CONTROLLER : NoneType<br ALIGN="LEFT"/>account_by_name<br ALIGN="LEFT"/>device_id : NoneType<br ALIGN="LEFT"/>simple_event<br ALIGN="LEFT"/>subreddit_by_name<br ALIGN="LEFT"/>user_agent : str<br ALIGN="LEFT"/>|additional_headers(headers, body)<br ALIGN="LEFT"/>do_post(action, params, headers, expect_errors)<br ALIGN="LEFT"/>make_qs()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RedditDetectorBase" [color="black", fontcolor="black", label=<{RedditDetectorBase|agent_regex : NoneType<br ALIGN="LEFT"/>agent_string : NoneType<br ALIGN="LEFT"/>version_regex<br ALIGN="LEFT"/>version_string : str<br ALIGN="LEFT"/>|detect(agent, result)<br ALIGN="LEFT"/>getVersion(agent, word)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.errors.RedditError" [color="black", fontcolor="red", label=<{RedditError|code : NoneType<br ALIGN="LEFT"/>fields : NoneType<br ALIGN="LEFT"/>i18n_message<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>msg_params : dict<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.RedditError" [color="black", fontcolor="black", label=<{RedditError|show_infobar : bool<br ALIGN="LEFT"/>site_tracking : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.RedditFooter" [color="black", fontcolor="black", label=<{RedditFooter|nav : list<br ALIGN="LEFT"/>|cachable_attrs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.ipn.RedditGiftsController" [color="black", fontcolor="black", label=<{RedditGiftsController|event_type_mappings : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>webhook_secret<br ALIGN="LEFT"/>|process_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RedditIOSDetector" [color="black", fontcolor="black", label=<{RedditIOSDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>skip_if_found : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.RedditInfoBar" [color="black", fontcolor="black", label=<{RedditInfoBar|show_icon : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RedditIsFunDetector" [color="black", fontcolor="black", label=<{RedditIsFunDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>override : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.RedditJsonTemplate" [color="black", fontcolor="black", label=<{RedditJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RedditSyncDetector" [color="black", fontcolor="black", label=<{RedditSyncDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.RedditTestCase" [color="black", fontcolor="black", label=<{RedditTestCase|amqp<br ALIGN="LEFT"/>app<br ALIGN="LEFT"/>created_ts_mock<br ALIGN="LEFT"/>domain_mock<br ALIGN="LEFT"/>to_epoch_milliseconds<br ALIGN="LEFT"/>|assert_same_dict(data, expected_data, prefix)<br ALIGN="LEFT"/>autopatch(obj, attr)<br ALIGN="LEFT"/>mock_eventcollector()<br ALIGN="LEFT"/>patch_g()<br ALIGN="LEFT"/>patch_liveconfig(k, v)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.RedditTraffic" [color="black", fontcolor="black", label=<{RedditTraffic|dow_means : tuple<br ALIGN="LEFT"/>dow_summary : NoneType, list<br ALIGN="LEFT"/>make_period_link : NoneType<br ALIGN="LEFT"/>place<br ALIGN="LEFT"/>tables : list<br ALIGN="LEFT"/>traffic_lag<br ALIGN="LEFT"/>traffic_last_modified : datetime<br ALIGN="LEFT"/>|<I>get_data_for_interval</I>(interval, columns)<br ALIGN="LEFT"/><I>get_dow_summary</I>()<br ALIGN="LEFT"/>make_tables()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.RedditsController" [color="black", fontcolor="black", label=<{RedditsController|extra_page_classes : list<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>render_params<br ALIGN="LEFT"/>where<br ALIGN="LEFT"/>|GET_listing(where)<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.redirect.RedirectController" [color="black", fontcolor="black", label=<{RedirectController|<br ALIGN="LEFT"/>|GET_redirect(dest)<br ALIGN="LEFT"/>GET_timereddit_redirect(timereddit, rest)<br ALIGN="LEFT"/>GET_user_redirect(username, rest)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.zookeeper.ReducedLiveList" [color="black", fontcolor="black", label=<{ReducedLiveList|client<br ALIGN="LEFT"/>data : list<br ALIGN="LEFT"/>from_json_fn : NoneType<br ALIGN="LEFT"/>live_list<br ALIGN="LEFT"/>reduced_data_node<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>to_json_fn : NoneType<br ALIGN="LEFT"/>|add(item)<br ALIGN="LEFT"/>get(reduce)<br ALIGN="LEFT"/>remove(item)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.RefundPage" [color="black", fontcolor="black", label=<{RefundPage|billable_amount : float<br ALIGN="LEFT"/>billable_impressions : int<br ALIGN="LEFT"/>campaign<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>listing<br ALIGN="LEFT"/>printable_bid<br ALIGN="LEFT"/>printable_total_budget<br ALIGN="LEFT"/>refund_amount<br ALIGN="LEFT"/>traffic_url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Register" [color="black", fontcolor="black", label=<{Register|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.RegisterPage" [color="black", fontcolor="black", label=<{RegisterPage|short_title : str<br ALIGN="LEFT"/>|login_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.RegistrationInfo" [color="black", fontcolor="black", label=<{RegistrationInfo|<br ALIGN="LEFT"/>|get_registration_info_html()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.RelTableItem" [color="black", fontcolor="black", label=<{RelTableItem|container_name<br ALIGN="LEFT"/>rel<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.RelTableItemJsonTemplate" [color="black", fontcolor="black", label=<{RelTableItemJsonTemplate|<br ALIGN="LEFT"/>|thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.thing.Relation.RelationCls" [color="black", fontcolor="black", label=<{RelationCls|<br ALIGN="LEFT"/>|get_things_from_db(ids)<br ALIGN="LEFT"/>record_cache_write(event, delta)<br ALIGN="LEFT"/>write_new_thing_to_db()<br ALIGN="LEFT"/>write_props_to_db(props, data_props, brand_new_thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.thing.RelationMeta" [color="black", fontcolor="black", label=<{RelationMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.Relations" [color="black", fontcolor="black", label=<{Relations|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.RelationsPropsOnly" [color="black", fontcolor="black", label=<{RelationsPropsOnly|props<br ALIGN="LEFT"/>|get_from_cache(allow_local)<br ALIGN="LEFT"/>set_to_cache(rows)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.reddit_agent_parser.RelayForRedditDetector" [color="black", fontcolor="black", label=<{RelayForRedditDetector|agent_string : str<br ALIGN="LEFT"/>is_app : bool<br ALIGN="LEFT"/>look_for : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.promo.RemnantPriority" [color="black", fontcolor="black", label=<{RemnantPriority|inventory_override : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.RenderableCampaign" [color="black", fontcolor="black", label=<{RenderableCampaign|ads_auction_enabled : bool<br ALIGN="LEFT"/>android_devices<br ALIGN="LEFT"/>android_versions<br ALIGN="LEFT"/>bid_pennies<br ALIGN="LEFT"/>campaign<br ALIGN="LEFT"/>cost_basis<br ALIGN="LEFT"/>country : str<br ALIGN="LEFT"/>editable : bool<br ALIGN="LEFT"/>free<br ALIGN="LEFT"/>ios_devices<br ALIGN="LEFT"/>ios_versions<br ALIGN="LEFT"/>is_auction : bool<br ALIGN="LEFT"/>is_complete<br ALIGN="LEFT"/>is_edited_live<br ALIGN="LEFT"/>is_live<br ALIGN="LEFT"/>is_pending<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>location_str<br ALIGN="LEFT"/>metro : str<br ALIGN="LEFT"/>mobile_os<br ALIGN="LEFT"/>needs_refund<br ALIGN="LEFT"/>paid<br ALIGN="LEFT"/>pause_ads_enabled : bool<br ALIGN="LEFT"/>pay_url<br ALIGN="LEFT"/>platform<br ALIGN="LEFT"/>printable_bid<br ALIGN="LEFT"/>refund_url<br ALIGN="LEFT"/>region : str<br ALIGN="LEFT"/>spent : float<br ALIGN="LEFT"/>targeting_data : str<br ALIGN="LEFT"/>total_budget_dollars<br ALIGN="LEFT"/>view_live_url<br ALIGN="LEFT"/>|from_campaigns(link, campaigns, full_details, hide_after_seen)<br ALIGN="LEFT"/>render_html()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.report.Report" [color="black", fontcolor="black", label=<{Report|<br ALIGN="LEFT"/>|accept(things, correct)<br ALIGN="LEFT"/>for_thing(thing)<br ALIGN="LEFT"/>get_reasons(wrapped)<br ALIGN="LEFT"/>get_reports(wrapped, max_user_reasons)<br ALIGN="LEFT"/>new(user, thing, reason)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ReportForm" [color="black", fontcolor="black", label=<{ReportForm|kind : NoneType, str<br ALIGN="LEFT"/>rules : list<br ALIGN="LEFT"/>rules_page_link : str<br ALIGN="LEFT"/>system_rules : list<br ALIGN="LEFT"/>thing_fullname<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ReportFormTemplates" [color="black", fontcolor="black", label=<{ReportFormTemplates|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.require.RequirementException" [color="black", fontcolor="red", label=<{RequirementException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ResetPassword" [color="black", fontcolor="black", label=<{ResetPassword|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.common.Results" [color="black", fontcolor="black", label=<{Results|docs<br ALIGN="LEFT"/>hits<br ALIGN="LEFT"/>subreddit_facets<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.utils.Results" [color="black", fontcolor="black", label=<{Results|do_batch : bool<br ALIGN="LEFT"/>fn<br ALIGN="LEFT"/>rowcount<br ALIGN="LEFT"/>rp<br ALIGN="LEFT"/>|fetchall()<br ALIGN="LEFT"/>fetchmany(n)<br ALIGN="LEFT"/>fetchone()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.RisingController" [color="black", fontcolor="black", label=<{RisingController|extra_page_classes : list<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>where : str<br ALIGN="LEFT"/>|query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Robots" [color="black", fontcolor="black", label=<{Robots|subreddit_sitemap<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.robots.RobotsController" [color="black", fontcolor="black", label=<{RobotsController|<br ALIGN="LEFT"/>|GET_crossdomain()<br ALIGN="LEFT"/>GET_robots()<br ALIGN="LEFT"/>on_crawlable_domain()<br ALIGN="LEFT"/><I>post</I>()<br ALIGN="LEFT"/><I>pre</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.automoderator.Rule" [color="black", fontcolor="black", label=<{Rule|actions : set<br ALIGN="LEFT"/>base_target_type<br ALIGN="LEFT"/>checks : set<br ALIGN="LEFT"/>is_inapplicable_to_mods<br ALIGN="LEFT"/>is_removal_rule<br ALIGN="LEFT"/>is_unrepeatable<br ALIGN="LEFT"/>matches<br ALIGN="LEFT"/>needs_media_data<br ALIGN="LEFT"/>targets : dict<br ALIGN="LEFT"/>unique_id : str<br ALIGN="LEFT"/>yaml : NoneType<br ALIGN="LEFT"/>|build_message(text, item, data, disclaimer, permalink)<br ALIGN="LEFT"/>check_item(item, data)<br ALIGN="LEFT"/>get_target_item(item, data, key)<br ALIGN="LEFT"/>has_any_actions(targets_only)<br ALIGN="LEFT"/>has_any_checks(targets_only)<br ALIGN="LEFT"/>item_is_correct_type(item)<br ALIGN="LEFT"/>perform_actions(item, data)<br ALIGN="LEFT"/>should_check_item(item, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.automoderator.RuleComponent" [color="black", fontcolor="black", label=<{RuleComponent|aliases : list<br ALIGN="LEFT"/>component_type : NoneType<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>valid_regex : NoneType<br ALIGN="LEFT"/>valid_targets<br ALIGN="LEFT"/>valid_types : NoneType<br ALIGN="LEFT"/>valid_values : NoneType<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.automoderator.RuleTarget" [color="black", fontcolor="black", label=<{RuleTarget|actions : set<br ALIGN="LEFT"/>approve_banned : bool<br ALIGN="LEFT"/>checks : set<br ALIGN="LEFT"/>match_fields : set<br ALIGN="LEFT"/>match_patterns : dict<br ALIGN="LEFT"/>matches : dict<br ALIGN="LEFT"/>needs_media_data<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>set_flair : dict, list<br ALIGN="LEFT"/>set_suggested_sort : str<br ALIGN="LEFT"/>target_type<br ALIGN="LEFT"/>|check_account_thresholds(account, data)<br ALIGN="LEFT"/>check_item(item, data)<br ALIGN="LEFT"/>check_match_patterns(item, data)<br ALIGN="LEFT"/>check_nonpattern_conditions(item, data)<br ALIGN="LEFT"/>get_field_value_from_item(item, data, field)<br ALIGN="LEFT"/>get_match_patterns(values)<br ALIGN="LEFT"/>parse_match_fields_key(key)<br ALIGN="LEFT"/>perform_actions(item, data)<br ALIGN="LEFT"/>set_values(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Rules" [color="black", fontcolor="black", label=<{Rules|can_edit<br ALIGN="LEFT"/>kind_labels<br ALIGN="LEFT"/>rules<br ALIGN="LEFT"/>site_rules<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.RulesJsonTemplate" [color="black", fontcolor="black", label=<{RulesJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.automoderator.Ruleset" [color="black", fontcolor="black", label=<{Ruleset|init_time : datetime<br ALIGN="LEFT"/>nonremoval_rules<br ALIGN="LEFT"/>removal_rules<br ALIGN="LEFT"/>rules : list<br ALIGN="LEFT"/>|apply_to_item(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.commands.RunCommand" [color="black", fontcolor="black", label=<{RunCommand|group_name : str<br ALIGN="LEFT"/>max_args : int<br ALIGN="LEFT"/>min_args : int<br ALIGN="LEFT"/>parser<br ALIGN="LEFT"/>summary : str<br ALIGN="LEFT"/>usage : str<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.media.s3.S3MediaProvider" [color="black", fontcolor="black", label=<{S3MediaProvider|buckets : dict<br ALIGN="LEFT"/>config : dict<br ALIGN="LEFT"/>|make_inaccessible(url)<br ALIGN="LEFT"/>purge(url)<br ALIGN="LEFT"/>put(category, name, contents, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.SRMember" [color="black", fontcolor="black", label=<{SRMember|encoded_permissions : str<br ALIGN="LEFT"/>|get_permissions()<br ALIGN="LEFT"/>has_permission(perm)<br ALIGN="LEFT"/>is_superuser()<br ALIGN="LEFT"/>set_permissions(perm_set)<br ALIGN="LEFT"/>update_permissions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.subreddit_test.SRMemberTest" [color="black", fontcolor="black", label=<{SRMemberTest|rel<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_permissions()<br ALIGN="LEFT"/>test_has_permission()<br ALIGN="LEFT"/>test_is_superuser()<br ALIGN="LEFT"/>test_set_permissions()<br ALIGN="LEFT"/>test_update_permissions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.recommender.SRRecommendation" [color="black", fontcolor="black", label=<{SRRecommendation|<br ALIGN="LEFT"/>|for_srs(srid36, to_omit, count, source, match_set)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.thing.SafeSetAttr" [color="black", fontcolor="black", label=<{SafeSetAttr|cls<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.config.middleware.SafetyMiddleware" [color="black", fontcolor="black", label=<{SafetyMiddleware|app<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>has_bad_characters<br ALIGN="LEFT"/>sanitizer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.log.SanitizeStackLocalsProcessor" [color="black", fontcolor="black", label=<{SanitizeStackLocalsProcessor|classes_to_remove : tuple<br ALIGN="LEFT"/>keys_to_remove : tuple<br ALIGN="LEFT"/>|filter_stacktrace(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.SavedBuilder" [color="black", fontcolor="black", label=<{SavedBuilder|<br ALIGN="LEFT"/>|wrap_items(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.strings.Score" [color="black", fontcolor="black", label=<{Score|PERSON_LABEL : str<br ALIGN="LEFT"/>|none(x)<br ALIGN="LEFT"/>number_only(x)<br ALIGN="LEFT"/>points(x)<br ALIGN="LEFT"/>readers(x)<br ALIGN="LEFT"/>safepoints(x)<br ALIGN="LEFT"/>somethings(x, word)<br ALIGN="LEFT"/>subscribers(x)<br ALIGN="LEFT"/>users_here_now(x, prepend)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.media.Scraper" [color="black", fontcolor="black", label=<{Scraper|<br ALIGN="LEFT"/>|for_url(url, autoplay, maxwidth, use_youtube_scraper)<br ALIGN="LEFT"/><I>media_embed</I>(media_object)<br ALIGN="LEFT"/><I>scrape</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SearchBar" [color="black", fontcolor="black", label=<{SearchBar|converted_data : NoneType<br ALIGN="LEFT"/>header : NoneType<br ALIGN="LEFT"/>prev_search : str<br ALIGN="LEFT"/>search_form<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.builder.SearchBuilder" [color="black", fontcolor="black", label=<{SearchBuilder|names : list, tuple<br ALIGN="LEFT"/>results<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>skip_deleted_authors : bool<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>subreddit_facets<br ALIGN="LEFT"/>total_num<br ALIGN="LEFT"/>|init_query()<br ALIGN="LEFT"/>keep_item(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.common.SearchError" [color="black", fontcolor="red", label=<{SearchError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SearchForm" [color="black", fontcolor="black", label=<{SearchForm|over18_url : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.common.SearchHTTPError" [color="black", fontcolor="black", label=<{SearchHTTPError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.SearchListing" [color="black", fontcolor="black", label=<{SearchListing|heading<br ALIGN="LEFT"/>nav_menus<br ALIGN="LEFT"/>subreddit_facets<br ALIGN="LEFT"/>timing<br ALIGN="LEFT"/>|listing(legacy_render_class)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.SearchListingJsonTemplate" [color="black", fontcolor="black", label=<{SearchListingJsonTemplate|<br ALIGN="LEFT"/>|raw_data(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SearchPage" [color="black", fontcolor="black", label=<{SearchPage|extra_page_classes : list<br ALIGN="LEFT"/>searchbar<br ALIGN="LEFT"/>searchbox : bool<br ALIGN="LEFT"/>sr_facets<br ALIGN="LEFT"/>subreddits : NoneType<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.SearchProvider" [color="black", fontcolor="black", label=<{SearchProvider|<br ALIGN="LEFT"/>|<I>InvalidQuery</I>()<br ALIGN="LEFT"/><I>Query</I>()<br ALIGN="LEFT"/><I>SearchException</I>()<br ALIGN="LEFT"/><I>SubredditSearchQuery</I>()<br ALIGN="LEFT"/><I>run_changed</I>()<br ALIGN="LEFT"/><I>sorts</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link.SearchResultLink" [color="black", fontcolor="black", label=<{SearchResultLink|<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.SearchResultSubreddit" [color="black", fontcolor="black", label=<{SearchResultSubreddit|<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.SearchSortMenu" [color="black", fontcolor="black", label=<{SearchSortMenu|<br ALIGN="LEFT"/>|hidden_options()<br ALIGN="LEFT"/>make_buttons()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.SelfEmptyingCache" [color="black", fontcolor="black", label=<{SelfEmptyingCache|max_size : int<br ALIGN="LEFT"/>|add(key, val, time)<br ALIGN="LEFT"/>maybe_reset()<br ALIGN="LEFT"/>set(key, val, time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SelfTextChild" [color="black", fontcolor="black", label=<{SelfTextChild|css_style : str<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.ServerSecondsBar" [color="black", fontcolor="black", label=<{ServerSecondsBar|gift_message : str<br ALIGN="LEFT"/>is_public<br ALIGN="LEFT"/>is_user<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>my_gift_message<br ALIGN="LEFT"/>my_message<br ALIGN="LEFT"/>their_gift_message<br ALIGN="LEFT"/>their_message<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|make_message(seconds, my_message, their_message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.bidding.Sessionized" [color="black", fontcolor="black", label=<{Sessionized|session<br ALIGN="LEFT"/>|add(key)<br ALIGN="LEFT"/>delete(key)<br ALIGN="LEFT"/>get(key)<br ALIGN="LEFT"/>lookup()<br ALIGN="LEFT"/>one()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.Share" [color="black", fontcolor="black", label=<{Share|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ShareClose" [color="black", fontcolor="black", label=<{ShareClose|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SideBox" [color="black", fontcolor="black", label=<{SideBox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SideContentBox" [color="black", fontcolor="black", label=<{SideContentBox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SidebarMessage" [color="black", fontcolor="black", label=<{SidebarMessage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SidebarModList" [color="black", fontcolor="black", label=<{SidebarModList|subreddits<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SidebarMultiList" [color="black", fontcolor="black", label=<{SidebarMultiList|multis<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.signing.SigningResult" [color="black", fontcolor="black", label=<{SigningResult|epoch : NoneType, int<br ALIGN="LEFT"/>errors : dict<br ALIGN="LEFT"/>global_version : int<br ALIGN="LEFT"/>ignored_errors : list<br ALIGN="LEFT"/>mac : NoneType<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>valid_hmac : bool<br ALIGN="LEFT"/>version : int<br ALIGN="LEFT"/>|add_error(error, field, details)<br ALIGN="LEFT"/>add_ignore(ignored_error)<br ALIGN="LEFT"/>has_errors()<br ALIGN="LEFT"/>is_valid()<br ALIGN="LEFT"/>update(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.signing_tests.SigningTests" [color="black", fontcolor="black", label=<{SigningTests|<br ALIGN="LEFT"/>|assert_invalid(body, header, error)<br ALIGN="LEFT"/>assert_valid(body, header)<br ALIGN="LEFT"/>make_sig_header(body, platform, version, epoch)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_expired_header()<br ALIGN="LEFT"/>test_future_header()<br ALIGN="LEFT"/>test_garbage_header()<br ALIGN="LEFT"/>test_get_token()<br ALIGN="LEFT"/>test_invalid(_)<br ALIGN="LEFT"/>test_invalid_header()<br ALIGN="LEFT"/>test_no_header()<br ALIGN="LEFT"/>test_signing()<br ALIGN="LEFT"/>test_valid_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.SimpleBuilder" [color="black", fontcolor="black", label=<{SimpleBuilder|names : list, tuple<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>init_query()<br ALIGN="LEFT"/>thing_lookup(names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.inventory_optimization.SimpleCampaign" [color="black", fontcolor="black", label=<{SimpleCampaign|impressions<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>target_names<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.ratelimit.SimpleRateLimit" [color="black", fontcolor="black", label=<{SimpleRateLimit|key<br ALIGN="LEFT"/>limit<br ALIGN="LEFT"/>seconds<br ALIGN="LEFT"/>|record_and_check()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.utils.SimpleSillyStub" [color="black", fontcolor="black", label=<{SimpleSillyStub|<br ALIGN="LEFT"/>|<I>stub</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.inventory_optimization.SimpleTarget" [color="black", fontcolor="black", label=<{SimpleTarget|impressions<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.models.thing_test.SimpleThing" [color="black", fontcolor="black", label=<{SimpleThing|other_prop : int<br ALIGN="LEFT"/>prop_for_data : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.SimpleXMLObject" [color="black", fontcolor="black", label=<{SimpleXMLObject|<br ALIGN="LEFT"/>|fromXML(data)<br ALIGN="LEFT"/>simple_tag(name, content)<br ALIGN="LEFT"/>toXML()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.authorize.test_api.SimpleXMLObjectTest" [color="black", fontcolor="black", label=<{SimpleXMLObjectTest|basic_object<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_address()<br ALIGN="LEFT"/>test_credit_card()<br ALIGN="LEFT"/>test_from_xml()<br ALIGN="LEFT"/>test_payment_profile()<br ALIGN="LEFT"/>test_simple_tag()<br ALIGN="LEFT"/>test_to_xml()<br ALIGN="LEFT"/>test_transaction()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.SitewidePageviews" [color="black", fontcolor="black", label=<{SitewidePageviews|date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|history(interval)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.SitewideTraffic" [color="black", fontcolor="black", label=<{SitewideTraffic|subreddit_summary : list<br ALIGN="LEFT"/>|get_data_for_interval(interval, columns)<br ALIGN="LEFT"/>get_dow_summary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.SitewideTrafficPage" [color="black", fontcolor="black", label=<{SitewideTrafficPage|extra_page_classes : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.Slot" [color="black", fontcolor="black", label=<{Slot|lval<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|in_(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.operators.Slots" [color="black", fontcolor="black", label=<{Slots|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.SolrLinkUploader" [color="black", fontcolor="black", label=<{SolrLinkUploader|accounts : dict<br ALIGN="LEFT"/>fullnames<br ALIGN="LEFT"/>srs : dict<br ALIGN="LEFT"/>things<br ALIGN="LEFT"/>types : tuple<br ALIGN="LEFT"/>|batch_lookups()<br ALIGN="LEFT"/>fields(thing)<br ALIGN="LEFT"/>should_index(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.SolrSearchProvider" [color="black", fontcolor="black", label=<{SolrSearchProvider|InvalidQuery : tuple<br ALIGN="LEFT"/>SOLR_VERSION : int<br ALIGN="LEFT"/>SearchException : tuple<br ALIGN="LEFT"/>SearchQuery<br ALIGN="LEFT"/>SubredditSearchQuery<br ALIGN="LEFT"/>config : dict<br ALIGN="LEFT"/>|rebuild_link_index(start_at, sleeptime, cls, uploader, estimate, chunk_size)<br ALIGN="LEFT"/>run_changed(drain, min_size, limit, sleep_time, use_safe_get, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.SolrSearchQuery" [color="black", fontcolor="black", label=<{SolrSearchQuery|bq : NoneType, str<br ALIGN="LEFT"/>converted_data : NoneType<br ALIGN="LEFT"/>default_syntax : str<br ALIGN="LEFT"/>faceting : NoneType<br ALIGN="LEFT"/>include_over18 : bool<br ALIGN="LEFT"/>num : int<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>rank_expressions : NoneType<br ALIGN="LEFT"/>recent : NoneType<br ALIGN="LEFT"/>recents : dict<br ALIGN="LEFT"/>results : NoneType<br ALIGN="LEFT"/>search_api : NoneType<br ALIGN="LEFT"/>sort : str<br ALIGN="LEFT"/>sr : NoneType<br ALIGN="LEFT"/>start : int<br ALIGN="LEFT"/>syntax : NoneType, str<br ALIGN="LEFT"/>|customize_query(q)<br ALIGN="LEFT"/>run(after, reverse, num, _update)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.SolrSearchUploader" [color="black", fontcolor="black", label=<{SolrSearchUploader|fullnames : NoneType<br ALIGN="LEFT"/>solr_host<br ALIGN="LEFT"/>solr_port<br ALIGN="LEFT"/>things : dict<br ALIGN="LEFT"/>|add_xml(thing)<br ALIGN="LEFT"/>batch_lookups()<br ALIGN="LEFT"/>delete_ids(ids)<br ALIGN="LEFT"/>delete_xml(thing)<br ALIGN="LEFT"/>desired_fullnames(items)<br ALIGN="LEFT"/>inject(quiet)<br ALIGN="LEFT"/>send_documents(docs)<br ALIGN="LEFT"/>xml_from_things()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.SolrSubredditSearchQuery" [color="black", fontcolor="black", label=<{SolrSubredditSearchQuery|default_syntax : str<br ALIGN="LEFT"/>known_syntaxes : tuple<br ALIGN="LEFT"/>search_api<br ALIGN="LEFT"/>sorts : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.solr.SolrSubredditUploader" [color="black", fontcolor="black", label=<{SolrSubredditUploader|types : tuple<br ALIGN="LEFT"/>|fields(thing)<br ALIGN="LEFT"/>should_index(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.SortMenu" [color="black", fontcolor="black", label=<{SortMenu|button_cls<br ALIGN="LEFT"/>hidden_options : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|make_buttons()<br ALIGN="LEFT"/>make_title(attr)<br ALIGN="LEFT"/>operator(sort)<br ALIGN="LEFT"/>sort(operator)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.souptest.SoupDetectedCrasherError" [color="black", fontcolor="red", label=<{SoupDetectedCrasherError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupError" [color="black", fontcolor="red", label=<{SoupError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupReprError" [color="black", fontcolor="red", label=<{SoupReprError|HUMAN_MESSAGE : NoneType<br ALIGN="LEFT"/>obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupSyntaxError" [color="black", fontcolor="red", label=<{SoupSyntaxError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnexpectedCDataSectionError" [color="black", fontcolor="red", label=<{SoupUnexpectedCDataSectionError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnexpectedCommentError" [color="black", fontcolor="red", label=<{SoupUnexpectedCommentError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnsupportedAttrError" [color="black", fontcolor="red", label=<{SoupUnsupportedAttrError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnsupportedEntityError" [color="black", fontcolor="red", label=<{SoupUnsupportedEntityError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>entity : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnsupportedNodeError" [color="black", fontcolor="red", label=<{SoupUnsupportedNodeError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnsupportedSchemeError" [color="black", fontcolor="red", label=<{SoupUnsupportedSchemeError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.souptest.SoupUnsupportedTagError" [color="black", fontcolor="red", label=<{SoupUnsupportedTagError|HUMAN_MESSAGE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.js.Source" [color="black", fontcolor="black", label=<{Source|dependencies<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>|<I>get_source</I>()<br ALIGN="LEFT"/><I>use</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.promotecontroller.SponsorController" [color="black", fontcolor="black", label=<{SponsorController|<br ALIGN="LEFT"/>|GET_lookup_user(id_user, email)<br ALIGN="LEFT"/>GET_promote_inventory(start, end, sr_name, collection_name)<br ALIGN="LEFT"/>GET_report(start, end, grouping, link_text, owner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.promotecontroller.SponsorListingController" [color="black", fontcolor="black", label=<{SponsorListingController|base_path : str<br ALIGN="LEFT"/>exclude_unpaid : NoneType<br ALIGN="LEFT"/>include_managed : bool<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>sort : str<br ALIGN="LEFT"/>sr : NoneType<br ALIGN="LEFT"/>title_text<br ALIGN="LEFT"/>titles : dict<br ALIGN="LEFT"/>|GET_listing(srname, include_managed, exclude_unpaid, sort)<br ALIGN="LEFT"/>get_house_link_names()<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>listing()<br ALIGN="LEFT"/>live_by_subreddit(sr)<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SponsorLookupUser" [color="black", fontcolor="black", label=<{SponsorLookupUser|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.admin_pages.SponsorSidebar" [color="black", fontcolor="black", label=<{SponsorSidebar|user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SponsorshipBox" [color="black", fontcolor="black", label=<{SponsorshipBox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.SpotlightListing" [color="black", fontcolor="black", label=<{SpotlightListing|interestbar<br ALIGN="LEFT"/>interestbar_prob<br ALIGN="LEFT"/>keywords : str<br ALIGN="LEFT"/>navigable<br ALIGN="LEFT"/>nextprev : bool<br ALIGN="LEFT"/>show_nums : bool<br ALIGN="LEFT"/>show_placeholder<br ALIGN="LEFT"/>show_promo<br ALIGN="LEFT"/>things<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>listing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.nymph.SpritableImage" [color="black", fontcolor="black", label=<{SpritableImage|filenames : list<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>stretch : bool<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|stretch_to_width(width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.nymph.SpriteBin" [color="black", fontcolor="black", label=<{SpriteBin|bounding_box<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>offset : int<br ALIGN="LEFT"/>|add_image(image)<br ALIGN="LEFT"/>has_space_for(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.SrMessageBuilder" [color="black", fontcolor="black", label=<{SrMessageBuilder|sr<br ALIGN="LEFT"/>|get_tree()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.StaleCacheChain" [color="black", fontcolor="black", label=<{StaleCacheChain|caches : tuple<br ALIGN="LEFT"/>localcache<br ALIGN="LEFT"/>realcache<br ALIGN="LEFT"/>stalecache<br ALIGN="LEFT"/>staleness : int<br ALIGN="LEFT"/>stats : NoneType<br ALIGN="LEFT"/>|get(key, default, stale)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>simple_get_multi(keys, stale, stat_subname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.stats.StaleCacheStats" [color="black", fontcolor="black", label=<{StaleCacheStats|stale_hit_name<br ALIGN="LEFT"/>stale_hit_stat_template<br ALIGN="LEFT"/>stale_miss_name<br ALIGN="LEFT"/>stale_miss_stat_template<br ALIGN="LEFT"/>stale_total_name<br ALIGN="LEFT"/>stale_total_stat_template<br ALIGN="LEFT"/>|stale_hit(delta, subname)<br ALIGN="LEFT"/>stale_miss(delta, subname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.middleware.StaticTestMiddleware" [color="black", fontcolor="black", label=<{StaticTestMiddleware|app<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>static_path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.stats.Stats" [color="black", fontcolor="black", label=<{Stats|CACHE_SAMPLE_RATE : float<br ALIGN="LEFT"/>CASSANDRA_KEY_SUFFIXES : list<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>|action_count(counter_name, name, delta)<br ALIGN="LEFT"/>action_event_count(event_name, state, delta, true_name, false_name)<br ALIGN="LEFT"/>amqp_processor(queue_name)<br ALIGN="LEFT"/>cache_count_multi(data, sample_rate)<br ALIGN="LEFT"/>cassandra_counter(operation, column_families, suffix, delta)<br ALIGN="LEFT"/>cassandra_timing(operation, column_families, success, start, end)<br ALIGN="LEFT"/>cf_key_iter(operation, column_families, suffix)<br ALIGN="LEFT"/>count_string(key, value, count)<br ALIGN="LEFT"/>end_logging_timings()<br ALIGN="LEFT"/>event_count(event_name, name, sample_rate)<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>get_counter(name)<br ALIGN="LEFT"/>get_timer(name, publish)<br ALIGN="LEFT"/>pg_after_cursor_execute(conn, cursor, statement, parameters, context, executemany)<br ALIGN="LEFT"/>pg_before_cursor_execute(conn, cursor, statement, parameters, context, executemany)<br ALIGN="LEFT"/>pg_event(db_server, db_name, start, end)<br ALIGN="LEFT"/>quick_time()<br ALIGN="LEFT"/>simple_event(event_name, delta)<br ALIGN="LEFT"/>simple_timing(event_name, ms)<br ALIGN="LEFT"/>start_logging_timings()<br ALIGN="LEFT"/>transact(action, start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.stats.StatsCollectingConnectionPool" [color="black", fontcolor="black", label=<{StatsCollectingConnectionPool|stats : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.stats.StatsdClient" [color="black", fontcolor="black", label=<{StatsdClient|conn<br ALIGN="LEFT"/>counting_stats<br ALIGN="LEFT"/>sample_rate : float<br ALIGN="LEFT"/>string_counts<br ALIGN="LEFT"/>timing_stats<br ALIGN="LEFT"/>|connect(addr)<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.StatsdClientTest" [color="black", fontcolor="black", label=<{StatsdClientTest|<br ALIGN="LEFT"/>|test_flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.StatsdClientUnderTest" [color="black", fontcolor="black", label=<{StatsdClientUnderTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.stats.StatsdConnection" [color="black", fontcolor="black", label=<{StatsdConnection|compress : bool<br ALIGN="LEFT"/>host : NoneType<br ALIGN="LEFT"/>port : NoneType, int<br ALIGN="LEFT"/>sock : NoneType, socket<br ALIGN="LEFT"/>|send(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.StatsdConnectionTest" [color="black", fontcolor="black", label=<{StatsdConnectionTest|<br ALIGN="LEFT"/>|connect(compress)<br ALIGN="LEFT"/>test_parse_addr()<br ALIGN="LEFT"/>test_send()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.StatsdConnectionUnderTest" [color="black", fontcolor="black", label=<{StatsdConnectionUnderTest|sock : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.utils.Storage" [color="black", fontcolor="black", label=<{Storage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.stats.StringCountBuffer" [color="black", fontcolor="black", label=<{StringCountBuffer|data : defaultdict<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>record(key, value, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.StringCountBufferTest" [color="black", fontcolor="black", label=<{StringCountBufferTest|<br ALIGN="LEFT"/>|test_encode_string()<br ALIGN="LEFT"/>test_scb()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.strings.StringHandler" [color="black", fontcolor="black", label=<{StringHandler|string_dict : dict<br ALIGN="LEFT"/>|get(attr, default)<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.StringsSource" [color="black", fontcolor="black", label=<{StringsSource|invalid_formatting_specifier_re<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>|get_localized_source(lang)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.ipn.StripeController" [color="black", fontcolor="black", label=<{StripeController|event_type_mappings : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>webhook_secret<br ALIGN="LEFT"/>|POST_cancel_subscription(form, jquery, user)<br ALIGN="LEFT"/>POST_goldcharge(form, jquery, token, passthrough, pennies, months, period)<br ALIGN="LEFT"/>POST_modify_subscription(form, jquery, token)<br ALIGN="LEFT"/>cancel_subscription(form, user)<br ALIGN="LEFT"/>charge_customer(form, customer, pennies, passthrough, description)<br ALIGN="LEFT"/>create_customer(form, token, description)<br ALIGN="LEFT"/>process_response()<br ALIGN="LEFT"/>set_creditcard(form, user, token)<br ALIGN="LEFT"/>set_subscription(form, customer, plan_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.StylesheetTemplate" [color="black", fontcolor="black", label=<{StylesheetTemplate|<br ALIGN="LEFT"/>|images()<br ALIGN="LEFT"/>kind(wrapped)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cssfilter.StylesheetValidator" [color="black", fontcolor="black", label=<{StylesheetValidator|images<br ALIGN="LEFT"/>|check_for_evil_codepoints(source_lines)<br ALIGN="LEFT"/>parse_and_validate(stylesheet_source)<br ALIGN="LEFT"/>validate_at_rule(rule)<br ALIGN="LEFT"/>validate_block(block)<br ALIGN="LEFT"/>validate_component_values(component_values)<br ALIGN="LEFT"/>validate_declaration(declaration)<br ALIGN="LEFT"/>validate_declaration_list(declarations)<br ALIGN="LEFT"/>validate_function(function_node)<br ALIGN="LEFT"/>validate_list(nodes, validators_by_type, ignored_types)<br ALIGN="LEFT"/>validate_qualified_rule(rule)<br ALIGN="LEFT"/>validate_rule_list(rules)<br ALIGN="LEFT"/>validate_url(url_node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.gold.StylesheetsEverywhere" [color="black", fontcolor="black", label=<{StylesheetsEverywhere|checked : bool<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_enabled : bool<br ALIGN="LEFT"/>preview_url<br ALIGN="LEFT"/>tagline<br ALIGN="LEFT"/>thumbnail_url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.Subreddit" [color="black", fontcolor="black", label=<{Subreddit|ACCENT_COLORS : tuple<br ALIGN="LEFT"/>BANNER_ASPECT_RATIO : float<br ALIGN="LEFT"/>BANNER_MAX_SIZE : tuple<br ALIGN="LEFT"/>BANNER_MIN_SIZE : tuple<br ALIGN="LEFT"/>DEFAULT_LIMIT : object<br ALIGN="LEFT"/>ICON_EXACT_SIZE : tuple<br ALIGN="LEFT"/>KEY_COLORS : OrderedDict<br ALIGN="LEFT"/>MAX_STICKIES : int<br ALIGN="LEFT"/>SRNAME_NOTFOUND : str<br ALIGN="LEFT"/>SRNAME_TTL : int<br ALIGN="LEFT"/>SubredditActivity : SubredditActivity<br ALIGN="LEFT"/>activity_contexts : tuple<br ALIGN="LEFT"/>allow_ads<br ALIGN="LEFT"/>allow_gilding<br ALIGN="LEFT"/>allowed_types<br ALIGN="LEFT"/>allows_referrers<br ALIGN="LEFT"/>author_slow<br ALIGN="LEFT"/>cache_ignore<br ALIGN="LEFT"/>community_rules<br ALIGN="LEFT"/>discoverable<br ALIGN="LEFT"/>gold_limit : int<br ALIGN="LEFT"/>has_max_stickies<br ALIGN="LEFT"/>hide_contributors<br ALIGN="LEFT"/>hide_num_users_info<br ALIGN="LEFT"/>hide_subscribers<br ALIGN="LEFT"/>is_embeddable<br ALIGN="LEFT"/>moderators<br ALIGN="LEFT"/>prev_stylesheet<br ALIGN="LEFT"/>private_types : set<br ALIGN="LEFT"/>related_subreddits<br ALIGN="LEFT"/>sr_limit : int<br ALIGN="LEFT"/>sticky_fullnames : list<br ALIGN="LEFT"/>stylesheet_url : str<br ALIGN="LEFT"/>stylesheet_url_http : str<br ALIGN="LEFT"/>stylesheet_url_https : str<br ALIGN="LEFT"/>subscribers<br ALIGN="LEFT"/>valid_types : set<br ALIGN="LEFT"/>wiki_use_subreddit_karma<br ALIGN="LEFT"/>wikibanned<br ALIGN="LEFT"/>wikicontributor<br ALIGN="LEFT"/>|add_gilding_seconds()<br ALIGN="LEFT"/>add_moderator(user)<br ALIGN="LEFT"/>add_props(user, wrapped)<br ALIGN="LEFT"/>add_rel_note(type, user, note)<br ALIGN="LEFT"/>add_subscriber(user)<br ALIGN="LEFT"/>can_ban(user)<br ALIGN="LEFT"/>can_change_stylesheet(user)<br ALIGN="LEFT"/>can_comment(user)<br ALIGN="LEFT"/>can_demod(bully, victim)<br ALIGN="LEFT"/>can_distinguish(user)<br ALIGN="LEFT"/>can_mute(muter, user)<br ALIGN="LEFT"/>can_submit(user, promotion)<br ALIGN="LEFT"/>can_submit_link(user)<br ALIGN="LEFT"/>can_submit_text(user)<br ALIGN="LEFT"/>can_view(user)<br ALIGN="LEFT"/>can_view_in_modlist(user)<br ALIGN="LEFT"/>change_css(content, parsed, prev, reason, author, force)<br ALIGN="LEFT"/>count_activity()<br ALIGN="LEFT"/>default_subreddits(ids)<br ALIGN="LEFT"/>featured_subreddits()<br ALIGN="LEFT"/>fetch_stylesheet_source()<br ALIGN="LEFT"/>get_all_mod_ids(srs)<br ALIGN="LEFT"/>get_live_promos()<br ALIGN="LEFT"/>get_muted_items(names)<br ALIGN="LEFT"/>get_promote_srid()<br ALIGN="LEFT"/>get_rgb(fade)<br ALIGN="LEFT"/>get_sr_user_relations(user, srs)<br ALIGN="LEFT"/>get_tempbans(type, names)<br ALIGN="LEFT"/>is_allowed_to_view(user)<br ALIGN="LEFT"/>is_contributor(user)<br ALIGN="LEFT"/>is_exposed(user)<br ALIGN="LEFT"/>is_special(user)<br ALIGN="LEFT"/>is_subscriber(user)<br ALIGN="LEFT"/>is_valid_name(name, allow_language_srs, allow_time_srs, allow_reddit_dot_com)<br ALIGN="LEFT"/>keep_for_rising(sr_id)<br ALIGN="LEFT"/>keep_item(wrapped)<br ALIGN="LEFT"/>load_subreddits(links, return_dict, stale)<br ALIGN="LEFT"/>moderator_invites_with_perms()<br ALIGN="LEFT"/>moderators_with_perms()<br ALIGN="LEFT"/>parse_css(content, verify)<br ALIGN="LEFT"/>random_reddit(over18, user)<br ALIGN="LEFT"/>random_reddits(user_name, sr_ids, limit)<br ALIGN="LEFT"/>random_reddits_cached(user_name, sr_ids, limit)<br ALIGN="LEFT"/>random_subscription(user)<br ALIGN="LEFT"/>record_visitor_activity(context, visitor_id)<br ALIGN="LEFT"/>remove_moderator(user)<br ALIGN="LEFT"/>remove_sticky(link, log_user)<br ALIGN="LEFT"/>remove_subscriber(user)<br ALIGN="LEFT"/>reverse_subscriber_ids(user)<br ALIGN="LEFT"/>schedule_unban(kind, victim, banner, duration)<br ALIGN="LEFT"/>set_sticky(link, log_user, num)<br ALIGN="LEFT"/>should_ratelimit(user, kind)<br ALIGN="LEFT"/>spammy()<br ALIGN="LEFT"/>special_reddits(user, query_param)<br ALIGN="LEFT"/>subscribe_defaults(user)<br ALIGN="LEFT"/>subscribe_multiple(user, srs)<br ALIGN="LEFT"/>subscribed_ids_by_user(user)<br ALIGN="LEFT"/>unschedule_unban(victim, type)<br ALIGN="LEFT"/>update_moderator_permissions(user)<br ALIGN="LEFT"/>update_popular_subreddits(limit)<br ALIGN="LEFT"/>user_subreddits(user, ids, limit)<br ALIGN="LEFT"/>wiki_can_submit(user)<br ALIGN="LEFT"/>wrapped_cache_key(wrapped, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.SubredditButton" [color="black", fontcolor="black", label=<{SubredditButton|bare_path : str<br ALIGN="LEFT"/>isselected<br ALIGN="LEFT"/>name_overrides : dict<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>|build(base_path)<br ALIGN="LEFT"/>cachable_attrs()<br ALIGN="LEFT"/>is_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.SubredditExists" [color="black", fontcolor="red", label=<{SubredditExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditFacets" [color="black", fontcolor="black", label=<{SubredditFacets|prev_search : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.search.common.SubredditFields" [color="black", fontcolor="black", label=<{SubredditFields|sr<br ALIGN="LEFT"/>|activity()<br ALIGN="LEFT"/>description()<br ALIGN="LEFT"/>header_title()<br ALIGN="LEFT"/>language()<br ALIGN="LEFT"/>link_type()<br ALIGN="LEFT"/>name()<br ALIGN="LEFT"/>over18()<br ALIGN="LEFT"/>sidebar()<br ALIGN="LEFT"/>subscribers()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>type_()<br ALIGN="LEFT"/>type_id()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditInfoBar" [color="black", fontcolor="black", label=<{SubredditInfoBar|active_visitors<br ALIGN="LEFT"/>creator_text<br ALIGN="LEFT"/>description_usertext<br ALIGN="LEFT"/>flair_prefs : NoneType<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>quarantine<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>sr_ban_info<br ALIGN="LEFT"/>sr_style_toggle : bool<br ALIGN="LEFT"/>subscribers<br ALIGN="LEFT"/>use_subreddit_style : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.SubredditJsonTemplate" [color="black", fontcolor="black", label=<{SubredditJsonTemplate|<br ALIGN="LEFT"/>|raw_data(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.SubredditListingController" [color="black", fontcolor="black", label=<{SubredditListingController|private_referrer : bool<br ALIGN="LEFT"/>render_params<br ALIGN="LEFT"/>|canonical_link()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.SubredditMenu" [color="black", fontcolor="black", label=<{SubredditMenu|<br ALIGN="LEFT"/>|find_selected()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.middleware.SubredditMiddleware" [color="black", fontcolor="black", label=<{SubredditMiddleware|app<br ALIGN="LEFT"/>sr_pattern<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.SubredditMock" [color="black", fontcolor="black", label=<{SubredditMock|lang<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>spam_links<br ALIGN="LEFT"/>spam_selfposts<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.account.SubredditParticipationByAccount" [color="black", fontcolor="black", label=<{SubredditParticipationByAccount|<br ALIGN="LEFT"/>|mark_participated(account, subreddit)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.query_cache.SubredditQueryCache" [color="black", fontcolor="black", label=<{SubredditQueryCache|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditReportForm" [color="black", fontcolor="black", label=<{SubredditReportForm|kind : NoneType, str<br ALIGN="LEFT"/>rules : list<br ALIGN="LEFT"/>sr_name : NoneType<br ALIGN="LEFT"/>system_rules<br ALIGN="LEFT"/>thing_fullname<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.rules.SubredditRules" [color="black", fontcolor="black", label=<{SubredditRules|<br ALIGN="LEFT"/>|create(subreddit, short_name, description, kind, created_utc)<br ALIGN="LEFT"/>get_rule(subreddit, short_name)<br ALIGN="LEFT"/>get_rule_blob(short_name, description, priority, kind, created_utc)<br ALIGN="LEFT"/>get_rules(subreddit, kind)<br ALIGN="LEFT"/>remove_rule(subreddit, short_name)<br ALIGN="LEFT"/>reorder(subreddit, short_name, priority)<br ALIGN="LEFT"/>update(subreddit, old_short_name, short_name, description, kind)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.SubredditSearchSortMenu" [color="black", fontcolor="black", label=<{SubredditSearchSortMenu|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditSelector" [color="black", fontcolor="black", label=<{SubredditSelector|class_name : NoneType<br ALIGN="LEFT"/>default_sr : NoneType<br ALIGN="LEFT"/>include_searches : bool<br ALIGN="LEFT"/>placeholder : NoneType<br ALIGN="LEFT"/>required : bool<br ALIGN="LEFT"/>show_add : bool<br ALIGN="LEFT"/>sr_searches<br ALIGN="LEFT"/>subreddit_names<br ALIGN="LEFT"/>subreddits : NoneType, list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.SubredditSettingsTemplate" [color="black", fontcolor="black", label=<{SubredditSettingsTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>raw_data(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditStylesheet" [color="black", fontcolor="black", label=<{SubredditStylesheet|<br ALIGN="LEFT"/>|find_preview_comments(sr)<br ALIGN="LEFT"/>find_preview_links(sr)<br ALIGN="LEFT"/>rendered_comment(comments, gilded)<br ALIGN="LEFT"/>rendered_link(links, media, compress, stickied)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditStylesheetBase" [color="black", fontcolor="black", label=<{SubredditStylesheetBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditStylesheetSource" [color="black", fontcolor="black", label=<{SubredditStylesheetSource|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.SubredditTempBan" [color="black", fontcolor="black", label=<{SubredditTempBan|banner<br ALIGN="LEFT"/>duration<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>who<br ALIGN="LEFT"/>|cancel_colkey(name)<br ALIGN="LEFT"/>cancel_rowkey(name, type)<br ALIGN="LEFT"/>schedule(sr, kind, victim, banner, duration)<br ALIGN="LEFT"/>schedule_rowkey()<br ALIGN="LEFT"/>search(srname, bantype, subjects)<br ALIGN="LEFT"/>unschedule(srname, victim_name, bantype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditTopBar" [color="black", fontcolor="black", label=<{SubredditTopBar|location<br ALIGN="LEFT"/>my_reddits<br ALIGN="LEFT"/>my_subreddits_dropdown<br ALIGN="LEFT"/>pop_reddits<br ALIGN="LEFT"/>|my_reddits_dropdown()<br ALIGN="LEFT"/>popular_reddits(exclude_mine)<br ALIGN="LEFT"/>special_reddits()<br ALIGN="LEFT"/>sr_bar()<br ALIGN="LEFT"/>subscribed_reddits()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.SubredditTraffic" [color="black", fontcolor="black", label=<{SubredditTraffic|codenames<br ALIGN="LEFT"/>|get_data_for_interval(interval, columns)<br ALIGN="LEFT"/>get_dow_summary()<br ALIGN="LEFT"/>make_period_link(interval, date)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.SubredditTrafficReport" [color="black", fontcolor="black", label=<{SubredditTrafficReport|csv_url<br ALIGN="LEFT"/>invalid_srs : list<br ALIGN="LEFT"/>report : list<br ALIGN="LEFT"/>srs : list<br ALIGN="LEFT"/>textarea<br ALIGN="LEFT"/>|as_csv()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.providers.search.cloudsearch.SubredditUploader" [color="black", fontcolor="black", label=<{SubredditUploader|types : tuple<br ALIGN="LEFT"/>|fields(thing)<br ALIGN="LEFT"/>should_index(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.SubredditsActiveForFrontPage" [color="black", fontcolor="black", label=<{SubredditsActiveForFrontPage|ROWKEY : str<br ALIGN="LEFT"/>|filter_inactive_ids(subreddit_ids)<br ALIGN="LEFT"/>mark_new_post(subreddit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.subreddit_search.SubredditsByPartialName" [color="black", fontcolor="black", label=<{SubredditsByPartialName|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubredditsPage" [color="black", fontcolor="black", label=<{SubredditsPage|interestbar : NoneType<br ALIGN="LEFT"/>searchbar<br ALIGN="LEFT"/>searchbox : bool<br ALIGN="LEFT"/>sr_infobar<br ALIGN="LEFT"/>submit_box : bool<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>rightbox()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubscribeButton" [color="black", fontcolor="black", label=<{SubscribeButton|data_attrs : dict<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.SubscribedSubredditsByAccount" [color="black", fontcolor="black", label=<{SubscribedSubredditsByAccount|<br ALIGN="LEFT"/>|get_all_sr_ids(user)<br ALIGN="LEFT"/>value_for(user, sr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.SubscriptionBox" [color="black", fontcolor="black", label=<{SubscriptionBox|goldlink : NoneType, str<br ALIGN="LEFT"/>goldmsg : NoneType<br ALIGN="LEFT"/>multi_path : NoneType, str<br ALIGN="LEFT"/>multi_text : NoneType<br ALIGN="LEFT"/>prelink : NoneType, list<br ALIGN="LEFT"/>reddits<br ALIGN="LEFT"/>srs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.subreddit.SubscriptionsByDay" [color="black", fontcolor="black", label=<{SubscriptionsByDay|<br ALIGN="LEFT"/>|create(srs, user)<br ALIGN="LEFT"/>get_all_counts(date)<br ALIGN="LEFT"/>write_counts(days_ago)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.SubscriptionsBySubreddit" [color="black", fontcolor="black", label=<{SubscriptionsBySubreddit|date<br ALIGN="LEFT"/>subreddit<br ALIGN="LEFT"/>subscriber_count<br ALIGN="LEFT"/>|history(interval, subreddit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.support_tickets.SupportTickerNotFoundError" [color="black", fontcolor="red", label=<{SupportTickerNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.support_tickets.SupportTicketError" [color="black", fontcolor="red", label=<{SupportTicketError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.SuspiciousPaymentEmail" [color="black", fontcolor="black", label=<{SuspiciousPaymentEmail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.inventory_optimization.System" [color="black", fontcolor="black", label=<{System|campaigns : list<br ALIGN="LEFT"/>priority_target_names<br ALIGN="LEFT"/>targets<br ALIGN="LEFT"/>|combine_campaigns(campaigns)<br ALIGN="LEFT"/>get_free_impressions()<br ALIGN="LEFT"/>reduce_campaigns(campaigns, targets)<br ALIGN="LEFT"/>reduce_targets(campaigns, targets)<br ALIGN="LEFT"/>simplify(campaigns, targets)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TabbedPane" [color="black", fontcolor="black", label=<{TabbedPane|tabmenu<br ALIGN="LEFT"/>tabs<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.TableListing" [color="black", fontcolor="black", label=<{TableListing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.TakedownJsonTemplate" [color="black", fontcolor="black", label=<{TakedownJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TakedownPage" [color="black", fontcolor="black", label=<{TakedownPage|<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TakedownPane" [color="black", fontcolor="black", label=<{TakedownPane|explanation<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.promo.Target" [color="black", fontcolor="black", label=<{Target|collection<br ALIGN="LEFT"/>is_collection : bool<br ALIGN="LEFT"/>over_18<br ALIGN="LEFT"/>pretty_name<br ALIGN="LEFT"/>subreddit_name<br ALIGN="LEFT"/>subreddit_names<br ALIGN="LEFT"/>subreddits_slow<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.traffic.TargetedClickthroughsByCodename" [color="black", fontcolor="black", label=<{TargetedClickthroughsByCodename|codename<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>subreddit<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|campaign_history(codenames, start, stop)<br ALIGN="LEFT"/>promotion_history(codename, start, stop)<br ALIGN="LEFT"/>total_by_codename(codenames)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.traffic.TargetedImpressionsByCodename" [color="black", fontcolor="black", label=<{TargetedImpressionsByCodename|codename<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>pageview_count<br ALIGN="LEFT"/>subreddit<br ALIGN="LEFT"/>unique_count<br ALIGN="LEFT"/>|campaign_history(codenames, start, stop)<br ALIGN="LEFT"/>promotion_history(codename, start, stop)<br ALIGN="LEFT"/>total_by_codename(codenames)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.TdbException" [color="black", fontcolor="red", label=<{TdbException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.TdbTransactionContext" [color="black", fontcolor="black", label=<{TdbTransactionContext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.bans.TempTimeout" [color="black", fontcolor="black", label=<{TempTimeout|<br ALIGN="LEFT"/>|cancel_rowkey()<br ALIGN="LEFT"/>schedule_rowkey()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.js.TemplateFileSource" [color="black", fontcolor="black", label=<{TemplateFileSource|name<br ALIGN="LEFT"/>|get_content(use_built_statics)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.cssfilter_test.TestCSSFilter" [color="black", fontcolor="black", label=<{TestCSSFilter|<br ALIGN="LEFT"/>|assertInvalid(css)<br ALIGN="LEFT"/>test_attr_url()<br ALIGN="LEFT"/>test_control_chars()<br ALIGN="LEFT"/>test_embedded_nulls()<br ALIGN="LEFT"/>test_escape_function_obfuscation()<br ALIGN="LEFT"/>test_escape_prelude()<br ALIGN="LEFT"/>test_escape_url()<br ALIGN="LEFT"/>test_escaped_url()<br ALIGN="LEFT"/>test_import()<br ALIGN="LEFT"/>test_import_rule()<br ALIGN="LEFT"/>test_invalid_function()<br ALIGN="LEFT"/>test_invalid_function_prelude()<br ALIGN="LEFT"/>test_invalid_property()<br ALIGN="LEFT"/>test_nested_url()<br ALIGN="LEFT"/>test_offsite_url()<br ALIGN="LEFT"/>test_semicolon_block()<br ALIGN="LEFT"/>test_semicolon_function()<br ALIGN="LEFT"/>test_url_prelude()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.utils_test.TestCanonicalizeEmail" [color="black", fontcolor="black", label=<{TestCanonicalizeEmail|<br ALIGN="LEFT"/>|test_empty_string()<br ALIGN="LEFT"/>test_localonly()<br ALIGN="LEFT"/>test_multiple_ats()<br ALIGN="LEFT"/>test_remove_dots()<br ALIGN="LEFT"/>test_remove_plus_address()<br ALIGN="LEFT"/>test_unicode()<br ALIGN="LEFT"/>test_unicode_in_byte_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.TestCommentQaSort" [color="black", fontcolor="black", label=<{TestCommentQaSort|<br ALIGN="LEFT"/>|test_multiple_op_responses()<br ALIGN="LEFT"/>test_simple_downvotes()<br ALIGN="LEFT"/>test_simple_length()<br ALIGN="LEFT"/>test_simple_op_comments()<br ALIGN="LEFT"/>test_simple_op_responses()<br ALIGN="LEFT"/>test_simple_upvotes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.configparse_test.TestConfigValue" [color="black", fontcolor="black", label=<{TestConfigValue|<br ALIGN="LEFT"/>|test_bool()<br ALIGN="LEFT"/>test_choice()<br ALIGN="LEFT"/>test_dict()<br ALIGN="LEFT"/>test_float()<br ALIGN="LEFT"/>test_int()<br ALIGN="LEFT"/>test_set()<br ALIGN="LEFT"/>test_set_of()<br ALIGN="LEFT"/>test_str()<br ALIGN="LEFT"/>test_timeinterval()<br ALIGN="LEFT"/>test_tuple()<br ALIGN="LEFT"/>test_tuple_of()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.cookie_upgrade_test.TestCookieUpgrade" [color="black", fontcolor="black", label=<{TestCookieUpgrade|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_cookie_unchanged()<br ALIGN="LEFT"/>test_dont_remember_recent_session()<br ALIGN="LEFT"/>test_no_upgrade_gets()<br ALIGN="LEFT"/>test_no_upgrade_http()<br ALIGN="LEFT"/>test_no_upgrade_loggedout()<br ALIGN="LEFT"/>test_no_upgrade_no_cookie()<br ALIGN="LEFT"/>test_no_upgrade_oauth()<br ALIGN="LEFT"/>test_no_upgrade_secure_session()<br ALIGN="LEFT"/>test_remember_old_session()<br ALIGN="LEFT"/>test_upgrade_posts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.tracking_test.TestEncryption" [color="black", fontcolor="black", label=<{TestEncryption|<br ALIGN="LEFT"/>|test_decrypt()<br ALIGN="LEFT"/>test_encrypt()<br ALIGN="LEFT"/>test_salt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.urlparser_test.TestEquality" [color="black", fontcolor="black", label=<{TestEquality|<br ALIGN="LEFT"/>|test_different_domains()<br ALIGN="LEFT"/>test_different_fragments()<br ALIGN="LEFT"/>test_different_objects()<br ALIGN="LEFT"/>test_different_params()<br ALIGN="LEFT"/>test_different_paths()<br ALIGN="LEFT"/>test_different_ports()<br ALIGN="LEFT"/>test_different_protocols()<br ALIGN="LEFT"/>test_different_queries()<br ALIGN="LEFT"/>test_integer_query_params()<br ALIGN="LEFT"/>test_same_url()<br ALIGN="LEFT"/>test_unicode_query_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.eventcollector_tests.TestEventCollector" [color="black", fontcolor="black", label=<{TestEventCollector|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_message_event()<br ALIGN="LEFT"/>test_mod_event()<br ALIGN="LEFT"/>test_modmail_event()<br ALIGN="LEFT"/>test_quarantine_event()<br ALIGN="LEFT"/>test_report_event_link()<br ALIGN="LEFT"/>test_submit_event()<br ALIGN="LEFT"/>test_vote_event()<br ALIGN="LEFT"/>test_vote_event_with_prev()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.config.experiment_test.TestExperiment" [color="black", fontcolor="black", label=<{TestExperiment|longMessage : bool<br ALIGN="LEFT"/>|assert_no_experiment(users)<br ALIGN="LEFT"/>do_experiment_simulation(users, loid_generator)<br ALIGN="LEFT"/>get_loggedin_users(num_users)<br ALIGN="LEFT"/>get_loggedout_users(num_users)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_calculate_bucket()<br ALIGN="LEFT"/>test_choose_variant()<br ALIGN="LEFT"/>test_loggedin_experiment(num_users)<br ALIGN="LEFT"/>test_loggedin_experiment_explicit_disable(num_users)<br ALIGN="LEFT"/>test_loggedin_experiment_explicit_enable(num_users)<br ALIGN="LEFT"/>test_loggedout_experiment(num_users)<br ALIGN="LEFT"/>test_loggedout_experiment_explicit_disable(num_users)<br ALIGN="LEFT"/>test_loggedout_experiment_explicit_enable(num_users)<br ALIGN="LEFT"/>test_loggedout_experiment_global_disable(num_users)<br ALIGN="LEFT"/>test_loggedout_experiment_missing_loids(num_users)<br ALIGN="LEFT"/>test_mixed_experiment(num_users)<br ALIGN="LEFT"/>test_mixed_experiment_disable(num_users)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.config.feature_test.TestFeature" [color="black", fontcolor="black", label=<{TestFeature|<br ALIGN="LEFT"/>|test_admin_disabled()<br ALIGN="LEFT"/>test_admin_enabled()<br ALIGN="LEFT"/>test_beta_disabled()<br ALIGN="LEFT"/>test_beta_enabled()<br ALIGN="LEFT"/>test_disabled()<br ALIGN="LEFT"/>test_employee_disabled()<br ALIGN="LEFT"/>test_employee_enabled()<br ALIGN="LEFT"/>test_enabled()<br ALIGN="LEFT"/>test_gold_disabled()<br ALIGN="LEFT"/>test_gold_enabled()<br ALIGN="LEFT"/>test_loggedin_disabled()<br ALIGN="LEFT"/>test_loggedin_enabled()<br ALIGN="LEFT"/>test_loggedout_disabled()<br ALIGN="LEFT"/>test_loggedout_enabled()<br ALIGN="LEFT"/>test_multiple()<br ALIGN="LEFT"/>test_percent_loggedin()<br ALIGN="LEFT"/>test_percent_loggedout()<br ALIGN="LEFT"/>test_subdomain_in()<br ALIGN="LEFT"/>test_subdomain_not_in()<br ALIGN="LEFT"/>test_subreddit_in()<br ALIGN="LEFT"/>test_subreddit_not_in()<br ALIGN="LEFT"/>test_url_disabled()<br ALIGN="LEFT"/>test_url_enabled()<br ALIGN="LEFT"/>test_user_in()<br ALIGN="LEFT"/>test_user_not_in()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.config.feature_test.TestFeatureBase" [color="black", fontcolor="black", label=<{TestFeatureBase|longMessage : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.js_test.TestFileSource" [color="black", fontcolor="black", label=<{TestFileSource|<br ALIGN="LEFT"/>|get_source()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.media_test.TestGetScrapeUrl" [color="black", fontcolor="black", label=<{TestGetScrapeUrl|<br ALIGN="LEFT"/>|test_image_link()<br ALIGN="LEFT"/>test_imgur_link()<br ALIGN="LEFT"/>test_link_post(Link)<br ALIGN="LEFT"/>test_simple_self_post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.providers.image_resizing.imgix_test.TestImgixResizer" [color="black", fontcolor="black", label=<{TestImgixResizer|provider<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_censor()<br ALIGN="LEFT"/>test_cropping()<br ALIGN="LEFT"/>test_no_resize()<br ALIGN="LEFT"/>test_resize()<br ALIGN="LEFT"/>test_sign_url()<br ALIGN="LEFT"/>test_too_small()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.urlparser_test.TestIsRedditURL" [color="black", fontcolor="black", label=<{TestIsRedditURL|<br ALIGN="LEFT"/>|assertIsNotSafeRedditUrl(url, subreddit)<br ALIGN="LEFT"/>assertIsSafeRedditUrl(url, subreddit)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_browser_quirks()<br ALIGN="LEFT"/>test_http_auth()<br ALIGN="LEFT"/>test_incorrect_anchoring()<br ALIGN="LEFT"/>test_nbsp_allowances()<br ALIGN="LEFT"/>test_normal_urls()<br ALIGN="LEFT"/>test_protocol_relative()<br ALIGN="LEFT"/>test_url_mutation()<br ALIGN="LEFT"/>test_weird_protocols()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.providers.image_resizing.no_op_test.TestLocalResizer" [color="black", fontcolor="black", label=<{TestLocalResizer|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>test_no_resize()<br ALIGN="LEFT"/>test_resize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.providers.image_resizing.unsplashit_test.TestLocalResizer" [color="black", fontcolor="black", label=<{TestLocalResizer|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>test_no_resize()<br ALIGN="LEFT"/>test_resize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.js_test.TestModule" [color="black", fontcolor="black", label=<{TestModule|<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>get_default_source(source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.js_test.TestModuleGetFlattenedSources" [color="black", fontcolor="black", label=<{TestModuleGetFlattenedSources|<br ALIGN="LEFT"/>|test_filtered_modules_do_not_include_filtered_sources()<br ALIGN="LEFT"/>test_flat_modules_include_all_sources()<br ALIGN="LEFT"/>test_flat_modules_only_include_sources_once()<br ALIGN="LEFT"/>test_nested_modules_include_all_sources()<br ALIGN="LEFT"/>test_nested_modules_only_include_sources_once()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.tracking_test.TestPadding" [color="black", fontcolor="black", label=<{TestPadding|<br ALIGN="LEFT"/>|test_pad_empty_string()<br ALIGN="LEFT"/>test_pad_round_string()<br ALIGN="LEFT"/>test_padding_roundtrip()<br ALIGN="LEFT"/>test_unpad_empty_message()<br ALIGN="LEFT"/>test_unpad_evil_message()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.urlparser_test.TestPathExtension" [color="black", fontcolor="black", label=<{TestPathExtension|<br ALIGN="LEFT"/>|test_directory()<br ALIGN="LEFT"/>test_empty_extension()<br ALIGN="LEFT"/>test_nested_file()<br ALIGN="LEFT"/>test_no_extension()<br ALIGN="LEFT"/>test_no_path()<br ALIGN="LEFT"/>test_only_extension()<br ALIGN="LEFT"/>test_root_file()<br ALIGN="LEFT"/>test_two_extensions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.permissions_test.TestPermissionSet" [color="black", fontcolor="black", label=<{TestPermissionSet|info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.models.subreddit_test.TestPermissionSet" [color="black", fontcolor="black", label=<{TestPermissionSet|info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.promote_test.TestPromoteRefunds" [color="black", fontcolor="black", label=<{TestPromoteRefunds|billable_amount : float<br ALIGN="LEFT"/>billable_impressions : int<br ALIGN="LEFT"/>campaign<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>refund_amount : float<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_refund_amount_rounding()<br ALIGN="LEFT"/>test_get_refund_amount_when_zero()<br ALIGN="LEFT"/>test_refund_campaign_failed(promotion_log_add, refund_transaction)<br ALIGN="LEFT"/>test_refund_campaign_success(emailer_refunded_promo, queries_unset, promotion_log_add, refund_transaction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.ratelimit_test.RateLimitTest.TestRateLimit" [color="black", fontcolor="black", label=<{TestRateLimit|event_name : str<br ALIGN="LEFT"/>event_type : str<br ALIGN="LEFT"/>key : str<br ALIGN="LEFT"/>limit : int<br ALIGN="LEFT"/>seconds : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.ratelimit_test.LiveConfigRateLimitTest.TestRateLimit" [color="black", fontcolor="black", label=<{TestRateLimit|event_name : str<br ALIGN="LEFT"/>event_type : str<br ALIGN="LEFT"/>key : str<br ALIGN="LEFT"/>limit_live_key : str<br ALIGN="LEFT"/>seconds_live_key : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.promote_test.TestSRNamesFromSite" [color="black", fontcolor="black", label=<{TestSRNamesFromSite|logged_in<br ALIGN="LEFT"/>logged_out<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_frontpage_logged_in(user_subreddits)<br ALIGN="LEFT"/>test_frontpage_logged_out()<br ALIGN="LEFT"/>test_get_nsfw_collections_srnames(get_all)<br ALIGN="LEFT"/>test_multi_logged_in(user_subreddits)<br ALIGN="LEFT"/>test_multi_logged_out()<br ALIGN="LEFT"/>test_nsfw_subscriptions_arent_included_when_viewing_frontpage(user_subreddits)<br ALIGN="LEFT"/>test_quarantined_subscriptions_are_never_included(user_subreddits)<br ALIGN="LEFT"/>test_remove_nsfw_collection_srnames_on_frontpage(get_nsfw_collections_srnames)<br ALIGN="LEFT"/>test_subreddit_logged_in(user_subreddits)<br ALIGN="LEFT"/>test_subreddit_logged_out()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.souptest_test.TestSoupTest" [color="black", fontcolor="black", label=<{TestSoupTest|<br ALIGN="LEFT"/>|assertFragmentRaises(fragment, error)<br ALIGN="LEFT"/>assertFragmentValid(fragment)<br ALIGN="LEFT"/>test_attr_whitelist()<br ALIGN="LEFT"/>test_attr_xmlns()<br ALIGN="LEFT"/>test_benign()<br ALIGN="LEFT"/>test_cdata_section()<br ALIGN="LEFT"/>test_crashers()<br ALIGN="LEFT"/>test_doctype()<br ALIGN="LEFT"/>test_entities()<br ALIGN="LEFT"/>test_entity_declarations()<br ALIGN="LEFT"/>test_invalid_comment()<br ALIGN="LEFT"/>test_processing_instruction()<br ALIGN="LEFT"/>test_quoting()<br ALIGN="LEFT"/>test_schemes()<br ALIGN="LEFT"/>test_tag_whitelist()<br ALIGN="LEFT"/>test_tag_xmlns()<br ALIGN="LEFT"/>test_unbalanced()<br ALIGN="LEFT"/>test_unclosed_comment()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.TestSubmit" [color="black", fontcolor="black", label=<{TestSubmit|links_by_url_add_link<br ALIGN="LEFT"/>links_by_url_remove_link<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_changing_from_self_doesnt_remove_links_by_url()<br ALIGN="LEFT"/>test_changing_non_promo_fails()<br ALIGN="LEFT"/>test_changing_to_self_removes_links_by_url()<br ALIGN="LEFT"/>test_changing_url_adds_links_by_url()<br ALIGN="LEFT"/>test_new_self_post_doesnt_modify_links_by_url()<br ALIGN="LEFT"/>test_new_self_post_has_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.urlparser_test.TestSwitchSubdomainByExtension" [color="black", fontcolor="black", label=<{TestSwitchSubdomainByExtension|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_default_prefix()<br ALIGN="LEFT"/>test_normal_urls()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.thing_test.TestThingIncr" [color="black", fontcolor="black", label=<{TestThingIncr|lock<br ALIGN="LEFT"/>thing_id : int<br ALIGN="LEFT"/>|reset_mocks()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_incr_base_prop(incr_thing_prop)<br ALIGN="LEFT"/>test_incr_data_prop(incr_thing_data)<br ALIGN="LEFT"/>test_incr_dirty()<br ALIGN="LEFT"/>test_incr_unset_data_prop(set_thing_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.thing_test.TestThingReadCaching" [color="black", fontcolor="black", label=<{TestThingReadCaching|get_things_from_cache<br ALIGN="LEFT"/>get_things_from_db<br ALIGN="LEFT"/>write_things_to_cache<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_cache_hit()<br ALIGN="LEFT"/>test_cache_miss()<br ALIGN="LEFT"/>test_not_found()<br ALIGN="LEFT"/>test_partial_hit()<br ALIGN="LEFT"/>test_partial_not_found()<br ALIGN="LEFT"/>test_partial_not_found_ignore()<br ALIGN="LEFT"/>test_return_list()<br ALIGN="LEFT"/>test_single_hit()<br ALIGN="LEFT"/>test_single_miss()<br ALIGN="LEFT"/>test_single_not_found()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.thing_test.TestThingWrite" [color="black", fontcolor="black", label=<{TestThingWrite|lock<br ALIGN="LEFT"/>thing_id : int<br ALIGN="LEFT"/>|reset_mocks()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_modify()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.thing_test.TestThingWriteConflict" [color="black", fontcolor="black", label=<{TestThingWriteConflict|lock<br ALIGN="LEFT"/>thing_id : int<br ALIGN="LEFT"/>|reset_mocks()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_fail(write_new_thing_to_db)<br ALIGN="LEFT"/>test_dont_overwrite(get_things_from_cache)<br ALIGN="LEFT"/>test_lock_fail(get_read_modify_write_lock)<br ALIGN="LEFT"/>test_modify_fail(write_changes_to_db)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.utils_test.TestTruncString" [color="black", fontcolor="black", label=<{TestTruncString|<br ALIGN="LEFT"/>|test_empty_string()<br ALIGN="LEFT"/>test_really_long_words()<br ALIGN="LEFT"/>test_short_enough()<br ALIGN="LEFT"/>test_suffix()<br ALIGN="LEFT"/>test_word_breaks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.utils_test.TestUrlToThing" [color="black", fontcolor="black", label=<{TestUrlToThing|<br ALIGN="LEFT"/>|test_frontpage()<br ALIGN="LEFT"/>test_subreddit()<br ALIGN="LEFT"/>test_subreddit_noslash()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.validator.test_validator.TestVSubmitParent" [color="black", fontcolor="black", label=<{TestVSubmitParent|validator<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_archived_link()<br ALIGN="LEFT"/>test_blocked_user()<br ALIGN="LEFT"/>test_deleted_comment()<br ALIGN="LEFT"/>test_invalid_comment()<br ALIGN="LEFT"/>test_invalid_link()<br ALIGN="LEFT"/>test_invalid_promo()<br ALIGN="LEFT"/>test_invalid_thing()<br ALIGN="LEFT"/>test_locked_link()<br ALIGN="LEFT"/>test_locked_link_mod_reply()<br ALIGN="LEFT"/>test_no_fullname()<br ALIGN="LEFT"/>test_not_found()<br ALIGN="LEFT"/>test_not_loggedin()<br ALIGN="LEFT"/>test_removed_comment()<br ALIGN="LEFT"/>test_removed_comment_mod_reply()<br ALIGN="LEFT"/>test_removed_comment_self_reply()<br ALIGN="LEFT"/>test_removed_link()<br ALIGN="LEFT"/>test_valid_comment()<br ALIGN="LEFT"/>test_valid_link()<br ALIGN="LEFT"/>test_valid_message()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.validator.test_validator.TestVSubredditName" [color="black", fontcolor="black", label=<{TestVSubredditName|validator<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_r_slash()<br ALIGN="LEFT"/>test_slash_not_prefix()<br ALIGN="LEFT"/>test_slash_r_slash()<br ALIGN="LEFT"/>test_two_prefixes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.validator.test_vverifypassword.TestVVerifyPassword" [color="black", fontcolor="black", label=<{TestVVerifyPassword|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>test_loggedout()<br ALIGN="LEFT"/>test_no_password()<br ALIGN="LEFT"/>test_right_password()<br ALIGN="LEFT"/>test_wrong_password()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.validator.test_validator.TestValidEmail" [color="black", fontcolor="black", label=<{TestValidEmail|validator<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_blank_email()<br ALIGN="LEFT"/>test_no_hostname()<br ALIGN="LEFT"/>test_no_username()<br ALIGN="LEFT"/>test_no_whitespace()<br ALIGN="LEFT"/>test_two_hostnames()<br ALIGN="LEFT"/>test_valid_emails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.vote_test.TestVoteValidator" [color="black", fontcolor="black", label=<{TestVoteValidator|thing<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>vote_data : dict<br ALIGN="LEFT"/>|assert_vote_effects(vote, affects_score, affects_karma, affected_thing_attr, notes)<br ALIGN="LEFT"/>cast_vote()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_downvote_effects()<br ALIGN="LEFT"/>test_upvote_effects()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.authorize.test_api.SimpleXMLObjectTest.test_from_xml.TestXML" [color="black", fontcolor="black", label=<{TestXML|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.Thanks" [color="black", fontcolor="black", label=<{Thanks|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.Thing" [color="black", fontcolor="black", label=<{Thing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.Thing" [color="black", fontcolor="black", label=<{Thing|is_distinguished<br ALIGN="LEFT"/>is_votable : bool<br ALIGN="LEFT"/>num_votes<br ALIGN="LEFT"/>|get_things_from_db(ids)<br ALIGN="LEFT"/>record_cache_write(event, delta)<br ALIGN="LEFT"/>sort_ids_by_data_value(thing_ids, value_name, limit, desc)<br ALIGN="LEFT"/>update_search_index(boost_only)<br ALIGN="LEFT"/>write_new_thing_to_db()<br ALIGN="LEFT"/>write_props_to_db(props, data_props, brand_new_thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.ThingBase" [color="black", fontcolor="black", label=<{ThingBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.ThingJsonTemplate" [color="black", fontcolor="black", label=<{ThingJsonTemplate|<br ALIGN="LEFT"/>|data(thing)<br ALIGN="LEFT"/>data_attrs()<br ALIGN="LEFT"/>kind(wrapped)<br ALIGN="LEFT"/>raw_data(thing)<br ALIGN="LEFT"/>render(thing, action)<br ALIGN="LEFT"/>rendered_data(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" [color="black", fontcolor="black", label=<{ThingMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.ThingMeta" [color="black", fontcolor="black", label=<{ThingMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.models.link_test.ThingMock" [color="black", fontcolor="black", label=<{ThingMock|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.ThingTemplate" [color="black", fontcolor="black", label=<{ThingTemplate|<br ALIGN="LEFT"/>|get_json(item)<br ALIGN="LEFT"/>get_kind(item)<br ALIGN="LEFT"/>get_rendered(item, render_style)<br ALIGN="LEFT"/>render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.query_cache.ThingTupleComparator" [color="black", fontcolor="black", label=<{ThingTupleComparator|sorts<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.ThingUpdater" [color="black", fontcolor="black", label=<{ThingUpdater|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.thing.Things" [color="black", fontcolor="black", label=<{Things|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.support.TicketProvider" [color="black", fontcolor="black", label=<{TicketProvider|<br ALIGN="LEFT"/>|<I>build_ticket_url_from_id</I>(ticket_id)<br ALIGN="LEFT"/><I>create</I>()<br ALIGN="LEFT"/><I>get</I>(ticket_id)<br ALIGN="LEFT"/><I>update</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.menus.TimeMenu" [color="black", fontcolor="black", label=<{TimeMenu|name : str<br ALIGN="LEFT"/>|operator(time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TimeSeriesChart" [color="black", fontcolor="black", label=<{TimeSeriesChart|classes : str<br ALIGN="LEFT"/>columns<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>latest_available_data<br ALIGN="LEFT"/>make_period_link : NoneType<br ALIGN="LEFT"/>rows<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.ratelimit.TimeSlice" [color="black", fontcolor="black", label=<{TimeSlice|remaining<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.lock.TimeoutExpired" [color="black", fontcolor="red", label=<{TimeoutExpired|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.utils.TimeoutFunction" [color="black", fontcolor="black", label=<{TimeoutFunction|function<br ALIGN="LEFT"/>timeout<br ALIGN="LEFT"/>|handle_timeout(signum, frame)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.utils.TimeoutFunctionException" [color="black", fontcolor="red", label=<{TimeoutFunctionException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.stats.Timer" [color="black", fontcolor="black", label=<{Timer|client<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>publish : bool<br ALIGN="LEFT"/>|elapsed_seconds()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>intermediate(subname)<br ALIGN="LEFT"/>send(subname, start, end)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop(subname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.stats.TimingStatBuffer" [color="black", fontcolor="black", label=<{TimingStatBuffer|Timing : Timing<br ALIGN="LEFT"/>data : defaultdict<br ALIGN="LEFT"/>log : _local<br ALIGN="LEFT"/>|end_logging()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>record(key, start, end, publish)<br ALIGN="LEFT"/>start_logging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.stats_test.TimingStatBufferTest" [color="black", fontcolor="black", label=<{TimingStatBufferTest|<br ALIGN="LEFT"/>|test_tsb()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.token.Token" [color="black", fontcolor="black", label=<{Token|<br ALIGN="LEFT"/>|get_token(_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit.TooManySubredditsError" [color="black", fontcolor="red", label=<{TooManySubredditsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.toolbar.ToolbarController" [color="black", fontcolor="black", label=<{ToolbarController|allow_stylesheets : bool<br ALIGN="LEFT"/>|GET_goto(link1, link2)<br ALIGN="LEFT"/>GET_redirect()<br ALIGN="LEFT"/>GET_s(urloid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.TopCommentBuilder" [color="black", fontcolor="black", label=<{TopCommentBuilder|<br ALIGN="LEFT"/>|get_items()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.traffic.emr_traffic.TrafficBase" [color="black", fontcolor="black", label=<{TrafficBase|BOOTSTRAP_NAME : str<br ALIGN="LEFT"/>BOOTSTRAP_SCRIPT<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.TrafficJsonTemplate" [color="black", fontcolor="black", label=<{TrafficJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.trafficpages.TrafficPage" [color="black", fontcolor="black", label=<{TrafficPage|extension_handling : bool<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>|build_toolbars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.Transaction" [color="black", fontcolor="black", label=<{Transaction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.authorize.api.TransactionError" [color="black", fontcolor="red", label=<{TransactionError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_sql.TransactionSet" [color="black", fontcolor="black", label=<{TransactionSet|transacting_engines : set<br ALIGN="LEFT"/>transaction_begun : bool<br ALIGN="LEFT"/>|add_engine(engine)<br ALIGN="LEFT"/>begin()<br ALIGN="LEFT"/>commit()<br ALIGN="LEFT"/>rollback()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cache.TransitionalCache" [color="black", fontcolor="black", label=<{TransitionalCache|add<br ALIGN="LEFT"/>add_multi<br ALIGN="LEFT"/>append<br ALIGN="LEFT"/>caches<br ALIGN="LEFT"/>decr<br ALIGN="LEFT"/>delete<br ALIGN="LEFT"/>delete_multi<br ALIGN="LEFT"/>flush_all<br ALIGN="LEFT"/>get<br ALIGN="LEFT"/>get_multi<br ALIGN="LEFT"/>incr<br ALIGN="LEFT"/>incr_multi<br ALIGN="LEFT"/>key_transform : NoneType<br ALIGN="LEFT"/>original<br ALIGN="LEFT"/>prepend<br ALIGN="LEFT"/>read_chain<br ALIGN="LEFT"/>read_original<br ALIGN="LEFT"/>replace<br ALIGN="LEFT"/>replacement<br ALIGN="LEFT"/>set<br ALIGN="LEFT"/>set_multi<br ALIGN="LEFT"/>simple_get_multi<br ALIGN="LEFT"/>stats<br ALIGN="LEFT"/>|make_get_fn()<br ALIGN="LEFT"/>make_set_fn()<br ALIGN="LEFT"/>transform_memcache_key(args, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TrendingSubredditsBar" [color="black", fontcolor="black", label=<{TrendingSubredditsBar|comment_count<br ALIGN="LEFT"/>comment_label<br ALIGN="LEFT"/>comment_label_cls : str<br ALIGN="LEFT"/>comment_url<br ALIGN="LEFT"/>subreddit_names<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.award.Trophy" [color="black", fontcolor="black", label=<{Trophy|description : NoneType<br ALIGN="LEFT"/>trophy_url<br ALIGN="LEFT"/>url : NoneType<br ALIGN="LEFT"/>|by_account(account, _update)<br ALIGN="LEFT"/>by_account_cache(account_id)<br ALIGN="LEFT"/>by_award(award, _update)<br ALIGN="LEFT"/>by_award_cache(award_id)<br ALIGN="LEFT"/>claim(user, uid, award, description, url)<br ALIGN="LEFT"/>update_caches()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TrophyCase" [color="black", fontcolor="black", label=<{TrophyCase|invisible_trophies : list<br ALIGN="LEFT"/>trophies : list<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.TrophyJsonTemplate" [color="black", fontcolor="black", label=<{TrophyJsonTemplate|<br ALIGN="LEFT"/>|kind(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.TrophyListJsonTemplate" [color="black", fontcolor="black", label=<{TrophyListJsonTemplate|<br ALIGN="LEFT"/>|data(trophies)<br ALIGN="LEFT"/>kind(wrapped)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.TryCompact" [color="black", fontcolor="black", label=<{TryCompact|compact<br ALIGN="LEFT"/>like<br ALIGN="LEFT"/>mobile<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.trylater.TryLater" [color="black", fontcolor="black", label=<{TryLater|<br ALIGN="LEFT"/>|cleanup(rowkey, ready_items, ready_timestamps, unripe_timestamps)<br ALIGN="LEFT"/>process_ready_items(rowkey, ready_fn)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>schedule(system, data, delay)<br ALIGN="LEFT"/>search(rowkey, when)<br ALIGN="LEFT"/>unschedule(rowkey, column_keys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.trylater.TryLaterBySubject" [color="black", fontcolor="black", label=<{TryLaterBySubject|<br ALIGN="LEFT"/>|schedule(system, subject, data, delay, trylater_rowkey)<br ALIGN="LEFT"/>search(rowkey, subjects)<br ALIGN="LEFT"/>unschedule(rowkey, colkey, schedule_rowkey)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.userrel.UserRel.UR" [color="black", fontcolor="black", label=<{UR|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.userrel.MigratingUserRel.URM" [color="black", fontcolor="black", label=<{URM|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.js.Uglify" [color="black", fontcolor="black", label=<{Uglify|<br ALIGN="LEFT"/>|compile(data, dest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.reddit_base.UnloggedUser" [color="black", fontcolor="black", label=<{UnloggedUser|COOKIE_NAME : str<br ALIGN="LEFT"/>allowed_prefs : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.UnreadMessagesSuggestions" [color="black", fontcolor="black", label=<{UnreadMessagesSuggestions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.image_resizing.unsplashit.UnsplashitImageResizingProvider" [color="black", fontcolor="black", label=<{UnsplashitImageResizingProvider|<br ALIGN="LEFT"/>|resize_image(image, width, censor_nsfw, max_ratio)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.authorize.api.UpdateCustomerPaymentProfileRequest" [color="black", fontcolor="black", label=<{UpdateCustomerPaymentProfileRequest|<br ALIGN="LEFT"/>|process_error(res)<br ALIGN="LEFT"/>process_response(res)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.UploadedImage" [color="black", fontcolor="black", label=<{UploadedImage|errors : list<br ALIGN="LEFT"/>|render()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.UploadedImageJsonTemplate" [color="black", fontcolor="black", label=<{UploadedImageJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.mr_tools.mr_tools.UpperMapper" [color="black", fontcolor="black", label=<{UpperMapper|<br ALIGN="LEFT"/>|process(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.utils.utils.UrlParser" [color="black", fontcolor="black", label=<{UrlParser|hostname<br ALIGN="LEFT"/>netloc<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>query_dict<br ALIGN="LEFT"/>scheme : str<br ALIGN="LEFT"/>valid_schemes : tuple<br ALIGN="LEFT"/>|base_url(url)<br ALIGN="LEFT"/>canonicalize()<br ALIGN="LEFT"/>domain_permutations(fragments, subdomains)<br ALIGN="LEFT"/>get_subreddit()<br ALIGN="LEFT"/>has_image_extension()<br ALIGN="LEFT"/>has_static_image_extension()<br ALIGN="LEFT"/>is_reddit_url(subreddit)<br ALIGN="LEFT"/>is_web_safe_url()<br ALIGN="LEFT"/>path_add_subreddit(subreddit)<br ALIGN="LEFT"/>path_extension()<br ALIGN="LEFT"/>path_has_subreddit()<br ALIGN="LEFT"/>perform_paranoid_check(check)<br ALIGN="LEFT"/>set_extension(extension)<br ALIGN="LEFT"/>switch_subdomain_by_extension(extension)<br ALIGN="LEFT"/>unparse()<br ALIGN="LEFT"/>update_query()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.UserAwards" [color="black", fontcolor="black", label=<{UserAwards|invisibles : list<br ALIGN="LEFT"/>manuals : list<br ALIGN="LEFT"/>regular_winners : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.UserBlockedInterstitial" [color="black", fontcolor="black", label=<{UserBlockedInterstitial|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.UserController" [color="black", fontcolor="black", label=<{UserController|builder_cls<br ALIGN="LEFT"/>menus<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>render_params<br ALIGN="LEFT"/>robots : str<br ALIGN="LEFT"/>savedcategory : NoneType<br ALIGN="LEFT"/>savedsr : NoneType<br ALIGN="LEFT"/>show<br ALIGN="LEFT"/>show_chooser : bool<br ALIGN="LEFT"/>show_nums : bool<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>suppress_reply_buttons : bool<br ALIGN="LEFT"/>time : str<br ALIGN="LEFT"/>vuser<br ALIGN="LEFT"/>where<br ALIGN="LEFT"/>|GET_about(vuser)<br ALIGN="LEFT"/>GET_listing(where, vuser, sort, time, show)<br ALIGN="LEFT"/>GET_rel_user_redirect(rest)<br ALIGN="LEFT"/>GET_saved_redirect()<br ALIGN="LEFT"/>GET_trophies(user)<br ALIGN="LEFT"/>keep_fn()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.UserIPHistory" [color="black", fontcolor="black", label=<{UserIPHistory|ips : list<br ALIGN="LEFT"/>my_apps : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.builder.UserListBuilder" [color="black", fontcolor="black", label=<{UserListBuilder|<br ALIGN="LEFT"/>|must_skip(item)<br ALIGN="LEFT"/>thing_lookup(rels)<br ALIGN="LEFT"/>valid_after(after)<br ALIGN="LEFT"/>wrap_items(rels)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.jsontemplates.UserListJsonTemplate" [color="black", fontcolor="black", label=<{UserListJsonTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>rendered_data(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.listingcontroller.UserListListingController" [color="black", fontcolor="black", label=<{UserListListingController|allow_stylesheets : bool<br ALIGN="LEFT"/>builder_cls<br ALIGN="LEFT"/>builder_wrapper<br ALIGN="LEFT"/>editable : bool<br ALIGN="LEFT"/>friends_compat : bool<br ALIGN="LEFT"/>infotext<br ALIGN="LEFT"/>jump_to_val : NoneType<br ALIGN="LEFT"/>listing_cls : NoneType<br ALIGN="LEFT"/>paginated : bool<br ALIGN="LEFT"/>render_cls<br ALIGN="LEFT"/>render_params<br ALIGN="LEFT"/>show_jump_to : bool<br ALIGN="LEFT"/>show_not_found : bool<br ALIGN="LEFT"/>skip : bool<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>where<br ALIGN="LEFT"/>|GET_listing(where, user)<br ALIGN="LEFT"/>GET_user_prefs(where)<br ALIGN="LEFT"/>content()<br ALIGN="LEFT"/>invited_mod_listing()<br ALIGN="LEFT"/>listing()<br ALIGN="LEFT"/>moderator_wrap(rel, invited)<br ALIGN="LEFT"/>name()<br ALIGN="LEFT"/>query()<br ALIGN="LEFT"/>rel()<br ALIGN="LEFT"/>title()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.UserListing" [color="black", fontcolor="black", label=<{UserListing|addable : bool<br ALIGN="LEFT"/>container_name<br ALIGN="LEFT"/>destination : str<br ALIGN="LEFT"/>form_title : str<br ALIGN="LEFT"/>has_add_form : bool<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>jump_to_value : NoneType<br ALIGN="LEFT"/>permissions_form : NoneType<br ALIGN="LEFT"/>show_jump_to : bool<br ALIGN="LEFT"/>show_not_found : bool<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.UserListingJsonTemplate" [color="black", fontcolor="black", label=<{UserListingJsonTemplate|<br ALIGN="LEFT"/>|kind(wrapped)<br ALIGN="LEFT"/>raw_data(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.UserMessageBuilder" [color="black", fontcolor="black", label=<{UserMessageBuilder|user<br ALIGN="LEFT"/>|get_tree()<br ALIGN="LEFT"/>valid_after(after)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.models.user_message_builder_test.UserMessageBuilderTest" [color="black", fontcolor="black", label=<{UserMessageBuilderTest|message<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|mock_preparation(is_admin)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_view_message_on_admin_and_del()<br ALIGN="LEFT"/>test_view_message_on_receiver_side()<br ALIGN="LEFT"/>test_view_message_on_receiver_side_and_del()<br ALIGN="LEFT"/>test_view_message_on_receiver_side_and_spam()<br ALIGN="LEFT"/>test_view_message_on_sender_side_and_del()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.query_cache.UserQueryCache" [color="black", fontcolor="black", label=<{UserQueryCache|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.userrel.UserRelManager" [color="black", fontcolor="black", label=<{UserRelManager|name<br ALIGN="LEFT"/>permission_class<br ALIGN="LEFT"/>relation<br ALIGN="LEFT"/>|add(thing, user, permissions)<br ALIGN="LEFT"/>by_thing(thing)<br ALIGN="LEFT"/>get(thing, user)<br ALIGN="LEFT"/>ids(thing)<br ALIGN="LEFT"/>mutate(thing, user)<br ALIGN="LEFT"/>remove(thing, user)<br ALIGN="LEFT"/>reverse_ids(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.errors.UserRequiredException" [color="black", fontcolor="red", label=<{UserRequiredException|code : int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.UserTableItem" [color="black", fontcolor="black", label=<{UserTableItem|author_cls : str<br ALIGN="LEFT"/>cells : tuple<br ALIGN="LEFT"/>editable : bool<br ALIGN="LEFT"/>executed_message<br ALIGN="LEFT"/>remove_action : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.UserTableItemJsonTemplate" [color="black", fontcolor="black", label=<{UserTableItemJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>thing_attr(thing, attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.bans.UserTempBan" [color="black", fontcolor="black", label=<{UserTempBan|<br ALIGN="LEFT"/>|cancel_colkey(name)<br ALIGN="LEFT"/>schedule(victim, duration)<br ALIGN="LEFT"/>search(subjects)<br ALIGN="LEFT"/>unschedule(victim)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.UserText" [color="black", fontcolor="black", label=<{UserText|cachable : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.tests.unit.lib.utils_test.UtilsTest" [color="black", fontcolor="black", label=<{UtilsTest|<br ALIGN="LEFT"/>|check_exponential_backoff_sleep_times(start, num)<br ALIGN="LEFT"/>test_coerce_url_to_protocol()<br ALIGN="LEFT"/>test_exponential_retrier()<br ALIGN="LEFT"/>test_extract_subdomain()<br ALIGN="LEFT"/>test_retriable_fetch_things_exception_rethrow()<br ALIGN="LEFT"/>test_retriable_fetch_things_passthrough()<br ALIGN="LEFT"/>test_retriable_fetch_things_recover_from_fail()<br ALIGN="LEFT"/>test_sanitize_url()<br ALIGN="LEFT"/>test_weighted_lottery()<br ALIGN="LEFT"/>test_weighted_lottery_errors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.UuidThing" [color="black", fontcolor="black", label=<{UuidThing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VAccountByName" [color="black", fontcolor="black", label=<{VAccountByName|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VAdmin" [color="black", fontcolor="black", label=<{VAdmin|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VAvailableSubredditName" [color="black", fontcolor="black", label=<{VAvailableSubredditName|<br ALIGN="LEFT"/>|run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VAvailableSubredditRuleName" [color="black", fontcolor="black", label=<{VAvailableSubredditRuleName|updating : bool<br ALIGN="LEFT"/>|run(short_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VAward" [color="black", fontcolor="black", label=<{VAward|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VAwardByCodename" [color="black", fontcolor="black", label=<{VAwardByCodename|<br ALIGN="LEFT"/>|run(codename, required_fullname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VBoolean" [color="black", fontcolor="black", label=<{VBoolean|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VByName" [color="black", fontcolor="black", label=<{VByName|backend : str<br ALIGN="LEFT"/>ignore_missing : bool<br ALIGN="LEFT"/>limit : NoneType<br ALIGN="LEFT"/>multiple : bool<br ALIGN="LEFT"/>re<br ALIGN="LEFT"/>splitter<br ALIGN="LEFT"/>thing_cls : NoneType<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VByNameIfAuthor" [color="black", fontcolor="black", label=<{VByNameIfAuthor|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(fullname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCanDistinguish" [color="black", fontcolor="black", label=<{VCanDistinguish|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(thing_name, how)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCaptcha" [color="black", fontcolor="black", label=<{VCaptcha|default_param : tuple<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(iden, solution)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCnameDomain" [color="black", fontcolor="black", label=<{VCnameDomain|domain_re<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(domain)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCollection" [color="black", fontcolor="black", label=<{VCollection|<br ALIGN="LEFT"/>|run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VColor" [color="black", fontcolor="black", label=<{VColor|color<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(color)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCommentByID" [color="black", fontcolor="black", label=<{VCommentByID|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCommentID" [color="black", fontcolor="black", label=<{VCommentID|<br ALIGN="LEFT"/>|run(cid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCommentIDs" [color="black", fontcolor="black", label=<{VCommentIDs|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(id_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCount" [color="black", fontcolor="black", label=<{VCount|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCssMeasure" [color="black", fontcolor="black", label=<{VCssMeasure|measure<br ALIGN="LEFT"/>|run(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VCssName" [color="black", fontcolor="black", label=<{VCssName|r_css_name<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VDate" [color="black", fontcolor="black", label=<{VDate|format : str<br ALIGN="LEFT"/>required : bool<br ALIGN="LEFT"/>|run(datestr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VDecimal" [color="black", fontcolor="black", label=<{VDecimal|<br ALIGN="LEFT"/>|cast(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VDestination" [color="black", fontcolor="black", label=<{VDestination|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(dest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VEmployee" [color="black", fontcolor="black", label=<{VEmployee|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VExistingUname" [color="black", fontcolor="black", label=<{VExistingUname|allow_deleted : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFlairAccount" [color="black", fontcolor="black", label=<{VFlairAccount|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFlairCss" [color="black", fontcolor="black", label=<{VFlairCss|max_css_classes : int<br ALIGN="LEFT"/>|run(css)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFlairLink" [color="black", fontcolor="black", label=<{VFlairLink|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFlairTemplateByID" [color="black", fontcolor="black", label=<{VFlairTemplateByID|<br ALIGN="LEFT"/>|run(flair_template_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFlairText" [color="black", fontcolor="black", label=<{VFlairText|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFloat" [color="black", fontcolor="black", label=<{VFloat|<br ALIGN="LEFT"/>|cast(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFrequencyCap" [color="black", fontcolor="black", label=<{VFrequencyCap|<br ALIGN="LEFT"/>|run(frequency_capped, frequency_cap)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VFriendOfMine" [color="black", fontcolor="black", label=<{VFriendOfMine|<br ALIGN="LEFT"/>|run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VGTMContainerId" [color="black", fontcolor="black", label=<{VGTMContainerId|<br ALIGN="LEFT"/>|run(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VGold" [color="black", fontcolor="black", label=<{VGold|notes : str<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VImageType" [color="black", fontcolor="black", label=<{VImageType|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(img_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VInt" [color="black", fontcolor="black", label=<{VInt|<br ALIGN="LEFT"/>|cast(val)<br ALIGN="LEFT"/>param_docs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VJSON" [color="black", fontcolor="black", label=<{VJSON|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(json_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VLang" [color="black", fontcolor="black", label=<{VLang|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(lang)<br ALIGN="LEFT"/>validate_lang(lang, strict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VLength" [color="black", fontcolor="black", label=<{VLength|empty_error<br ALIGN="LEFT"/>length_error<br ALIGN="LEFT"/>max_length<br ALIGN="LEFT"/>min_length : int<br ALIGN="LEFT"/>only_whitespace<br ALIGN="LEFT"/>short_error<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(text, text2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VLimit" [color="black", fontcolor="black", label=<{VLimit|default_limit : int<br ALIGN="LEFT"/>max_limit : int<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(limit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VLink" [color="black", fontcolor="black", label=<{VLink|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VList" [color="black", fontcolor="black", label=<{VList|NICE_SEP : dict<br ALIGN="LEFT"/>choices : NoneType<br ALIGN="LEFT"/>error<br ALIGN="LEFT"/>separator : str<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VLocation" [color="black", fontcolor="black", label=<{VLocation|default_param : tuple<br ALIGN="LEFT"/>|run(country, region, metro)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VLoggedOut" [color="black", fontcolor="black", label=<{VLoggedOut|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMarkdown" [color="black", fontcolor="black", label=<{VMarkdown|renderer : str<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(text, text2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMarkdownLength" [color="black", fontcolor="black", label=<{VMarkdownLength|empty_error<br ALIGN="LEFT"/>length_error<br ALIGN="LEFT"/>max_length : int<br ALIGN="LEFT"/>|run(text, text2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMenu" [color="black", fontcolor="black", label=<{VMenu|nav<br ALIGN="LEFT"/>remember : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(sort, where)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMessage" [color="black", fontcolor="black", label=<{VMessage|<br ALIGN="LEFT"/>|run(message_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMessageID" [color="black", fontcolor="black", label=<{VMessageID|<br ALIGN="LEFT"/>|run(cid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMessageRecipient" [color="black", fontcolor="black", label=<{VMessageRecipient|<br ALIGN="LEFT"/>|run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VModhash" [color="black", fontcolor="black", label=<{VModhash|default_param : str<br ALIGN="LEFT"/>fatal : bool<br ALIGN="LEFT"/>handles_csrf : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(modhash)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VModhashIfLoggedIn" [color="black", fontcolor="black", label=<{VModhashIfLoggedIn|default_param : str<br ALIGN="LEFT"/>fatal : bool<br ALIGN="LEFT"/>handles_csrf : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(modhash)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMultiByPath" [color="black", fontcolor="black", label=<{VMultiByPath|kinds<br ALIGN="LEFT"/>require_edit : bool<br ALIGN="LEFT"/>require_view : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VMultiPath" [color="black", fontcolor="black", label=<{VMultiPath|kinds<br ALIGN="LEFT"/>required : bool<br ALIGN="LEFT"/>|normalize(path)<br ALIGN="LEFT"/>param_docs()<br ALIGN="LEFT"/>run(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VNotInTimeout" [color="black", fontcolor="black", label=<{VNotInTimeout|<br ALIGN="LEFT"/>|run(target_fullname, fatal, action_name, details_text, target, subreddit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VNumber" [color="black", fontcolor="black", label=<{VNumber|coerce : bool<br ALIGN="LEFT"/>error<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>num_default : NoneType<br ALIGN="LEFT"/>|<I>cast</I>(val)<br ALIGN="LEFT"/>run(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOAuth2ClientDeveloper" [color="black", fontcolor="black", label=<{VOAuth2ClientDeveloper|default_param_doc<br ALIGN="LEFT"/>|run(client_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOAuth2ClientID" [color="black", fontcolor="black", label=<{VOAuth2ClientID|default_param : str<br ALIGN="LEFT"/>default_param_doc<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(client_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOAuth2RefreshToken" [color="black", fontcolor="black", label=<{VOAuth2RefreshToken|<br ALIGN="LEFT"/>|run(refresh_token_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOAuth2Scope" [color="black", fontcolor="black", label=<{VOAuth2Scope|default_param : str<br ALIGN="LEFT"/>|run(scope)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOSVersion" [color="black", fontcolor="black", label=<{VOSVersion|os<br ALIGN="LEFT"/>|assign_error()<br ALIGN="LEFT"/>run(version_range)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOneOf" [color="black", fontcolor="black", label=<{VOneOf|options : tuple<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOneTimePassword" [color="black", fontcolor="black", label=<{VOneTimePassword|allowed_skew : list<br ALIGN="LEFT"/>ratelimit : int<br ALIGN="LEFT"/>required<br ALIGN="LEFT"/>|run(password)<br ALIGN="LEFT"/>validate_otp(secret, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VOneTimeToken" [color="black", fontcolor="black", label=<{VOneTimeToken|model<br ALIGN="LEFT"/>|run(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.make_or_admin_secret_cls.VOrAdminSecret" [color="black", fontcolor="black", label=<{VOrAdminSecret|handles_csrf : bool<br ALIGN="LEFT"/>|run(secret)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPassword" [color="black", fontcolor="black", label=<{VPassword|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPasswordChange" [color="black", fontcolor="black", label=<{VPasswordChange|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(password, verify)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPermissions" [color="black", fontcolor="black", label=<{VPermissions|types : dict<br ALIGN="LEFT"/>|run(type, permissions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPrintable" [color="black", fontcolor="black", label=<{VPrintable|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(text, text2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPriority" [color="black", fontcolor="black", label=<{VPriority|<br ALIGN="LEFT"/>|run(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPromoCampaign" [color="black", fontcolor="black", label=<{VPromoCampaign|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VPromoTarget" [color="black", fontcolor="black", label=<{VPromoTarget|default_param : tuple<br ALIGN="LEFT"/>|run(targeting, sr_name, collection_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VRatelimit" [color="black", fontcolor="black", label=<{VRatelimit|cache_prefix : str<br ALIGN="LEFT"/>error<br ALIGN="LEFT"/>fatal : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>rate_ip : bool<br ALIGN="LEFT"/>rate_user : bool<br ALIGN="LEFT"/>seconds : NoneType<br ALIGN="LEFT"/>|ratelimit(rate_user, rate_ip, prefix, seconds)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VRatelimitImproved" [color="black", fontcolor="black", label=<{VRatelimitImproved|error<br ALIGN="LEFT"/>ip_limit : NoneType<br ALIGN="LEFT"/>seconds : NoneType<br ALIGN="LEFT"/>user_limit : NoneType<br ALIGN="LEFT"/>|ratelimit(user_limit, ip_limit)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VRedirectUri" [color="black", fontcolor="black", label=<{VRedirectUri|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VRequired" [color="black", fontcolor="black", label=<{VRequired|<br ALIGN="LEFT"/>|error(e)<br ALIGN="LEFT"/>run(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VResultTypes" [color="black", fontcolor="black", label=<{VResultTypes|default : list<br ALIGN="LEFT"/>options : set<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(result_types)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSRByName" [color="black", fontcolor="black", label=<{VSRByName|required : bool<br ALIGN="LEFT"/>return_srname : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(sr_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSRByNames" [color="black", fontcolor="black", label=<{VSRByNames|required : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(sr_names_csv)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSanitizedUrl" [color="black", fontcolor="black", label=<{VSanitizedUrl|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSavedCategory" [color="black", fontcolor="black", label=<{VSavedCategory|savedcategory_rx<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VShamedDomain" [color="black", fontcolor="black", label=<{VShamedDomain|<br ALIGN="LEFT"/>|run(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VShareRatelimit" [color="black", fontcolor="black", label=<{VShareRatelimit|IP_LIMIT<br ALIGN="LEFT"/>USER_LIMIT<br ALIGN="LEFT"/>|ratelimit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSigned" [color="black", fontcolor="black", label=<{VSigned|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSponsor" [color="black", fontcolor="black", label=<{VSponsor|<br ALIGN="LEFT"/>|run(link_id, campaign_id)<br ALIGN="LEFT"/>user_test(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSponsorAdmin" [color="black", fontcolor="black", label=<{VSponsorAdmin|<br ALIGN="LEFT"/>|run(link_id)<br ALIGN="LEFT"/>user_test(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSrCanAlter" [color="black", fontcolor="black", label=<{VSrCanAlter|<br ALIGN="LEFT"/>|run(thing_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSrCanBan" [color="black", fontcolor="black", label=<{VSrCanBan|<br ALIGN="LEFT"/>|run(thing_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSrModerator" [color="black", fontcolor="black", label=<{VSrModerator|fatal : bool<br ALIGN="LEFT"/>perms<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSrSpecial" [color="black", fontcolor="black", label=<{VSrSpecial|<br ALIGN="LEFT"/>|run(thing_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubmitParent" [color="black", fontcolor="black", label=<{VSubmitParent|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(fullname, fullname2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubmitSR" [color="black", fontcolor="black", label=<{VSubmitSR|promotion : bool<br ALIGN="LEFT"/>require_linktype : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(sr_name, link_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubredditDesc" [color="black", fontcolor="black", label=<{VSubredditDesc|<br ALIGN="LEFT"/>|run(description)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubredditList" [color="black", fontcolor="black", label=<{VSubredditList|allow_language_srs : bool<br ALIGN="LEFT"/>limit : int<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(subreddits)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubredditName" [color="black", fontcolor="black", label=<{VSubredditName|allow_language_srs : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubredditRule" [color="black", fontcolor="black", label=<{VSubredditRule|<br ALIGN="LEFT"/>|run(short_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubredditTitle" [color="black", fontcolor="black", label=<{VSubredditTitle|<br ALIGN="LEFT"/>|run(title)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VSubscribeSR" [color="black", fontcolor="black", label=<{VSubscribeSR|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(sr_id, sr_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VTarget" [color="black", fontcolor="black", label=<{VTarget|target_re<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VThing" [color="black", fontcolor="black", label=<{VThing|redirect : bool<br ALIGN="LEFT"/>thingclass<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(thing_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VThrottledLogin" [color="black", fontcolor="black", label=<{VThrottledLogin|seconds : NoneType<br ALIGN="LEFT"/>vlength<br ALIGN="LEFT"/>|get_ratelimits(account)<br ALIGN="LEFT"/>param_docs()<br ALIGN="LEFT"/>run(username, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VTitle" [color="black", fontcolor="black", label=<{VTitle|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VTrophy" [color="black", fontcolor="black", label=<{VTrophy|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.VUname" [color="black", fontcolor="black", label=<{VUname|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(user_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VUploadLength" [color="black", fontcolor="black", label=<{VUploadLength|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(upload, text2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VUrl" [color="black", fontcolor="black", label=<{VUrl|allow_self : bool<br ALIGN="LEFT"/>require_scheme : bool<br ALIGN="LEFT"/>valid_schemes<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VUser" [color="black", fontcolor="black", label=<{VUser|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VUserWithEmail" [color="black", fontcolor="black", label=<{VUserWithEmail|<br ALIGN="LEFT"/>|run(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VValidatedJSON" [color="black", fontcolor="black", label=<{VValidatedJSON|spec<br ALIGN="LEFT"/>|docs_model()<br ALIGN="LEFT"/>param_docs()<br ALIGN="LEFT"/>run(json_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VVerifiedSponsor" [color="black", fontcolor="black", label=<{VVerifiedSponsor|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VVerifiedUser" [color="black", fontcolor="black", label=<{VVerifiedUser|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.VVerifyPassword" [color="black", fontcolor="black", label=<{VVerifyPassword|fatal : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.wiki.VWikiModerator" [color="black", fontcolor="black", label=<{VWikiModerator|perms : list<br ALIGN="LEFT"/>|run(page)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.wiki.VWikiPage" [color="black", fontcolor="black", label=<{VWikiPage|allow_hidden_revision : bool<br ALIGN="LEFT"/>modonly : bool<br ALIGN="LEFT"/>required : bool<br ALIGN="LEFT"/>restricted : bool<br ALIGN="LEFT"/>|param_docs(param)<br ALIGN="LEFT"/>run(page)<br ALIGN="LEFT"/>validpage(page)<br ALIGN="LEFT"/>validversion(version, pageid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.wiki.VWikiPageAndVersion" [color="black", fontcolor="black", label=<{VWikiPageAndVersion|<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>run(page)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.wiki.VWikiPageName" [color="black", fontcolor="black", label=<{VWikiPageName|error_on_name_normalized : bool<br ALIGN="LEFT"/>|run(page)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.wiki.VWikiPageRevise" [color="black", fontcolor="black", label=<{VWikiPageRevise|<br ALIGN="LEFT"/>|may_not_create(page)<br ALIGN="LEFT"/>param_docs()<br ALIGN="LEFT"/>run(page, previous)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.ValidAddress" [color="black", fontcolor="black", label=<{ValidAddress|<br ALIGN="LEFT"/>|run(firstName, lastName, company, address, city, state, zipCode, country, phoneNumber)<br ALIGN="LEFT"/>set_error(msg, field)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.ValidCard" [color="black", fontcolor="black", label=<{ValidCard|valid_date<br ALIGN="LEFT"/>|run(cardNumber, expirationDate, cardCode)<br ALIGN="LEFT"/>set_error(msg, field)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.ValidEmail" [color="black", fontcolor="black", label=<{ValidEmail|<br ALIGN="LEFT"/>|run(email)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.ValidEmails" [color="black", fontcolor="black", label=<{ValidEmails|email_re<br ALIGN="LEFT"/>num : int<br ALIGN="LEFT"/>separator<br ALIGN="LEFT"/>|run(emails0)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.validator.validator.ValidEmailsOrExistingUnames" [color="black", fontcolor="black", label=<{ValidEmailsOrExistingUnames|num : int<br ALIGN="LEFT"/>|run(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.cssfilter.ValidationError" [color="black", fontcolor="black", label=<{ValidationError|error_code<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>message_key<br ALIGN="LEFT"/>message_params : dict<br ALIGN="LEFT"/>offending_line<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.Validator" [color="black", fontcolor="black", label=<{Validator|body : bool<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>default_param : NoneType<br ALIGN="LEFT"/>docs : NoneType<br ALIGN="LEFT"/>get : bool<br ALIGN="LEFT"/>get_multiple : bool<br ALIGN="LEFT"/>has_errors : bool<br ALIGN="LEFT"/>notes : NoneType<br ALIGN="LEFT"/>param : NoneType<br ALIGN="LEFT"/>post : bool<br ALIGN="LEFT"/>url : bool<br ALIGN="LEFT"/>|param_docs()<br ALIGN="LEFT"/>set_error(error, msg_params, field, code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.tests.unit.lib.validator.test_validator.ValidatorTests" [color="black", fontcolor="black", label=<{ValidatorTests|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.errors.VerifiedUserRequiredException" [color="black", fontcolor="red", label=<{VerifiedUserRequiredException|code : int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.VerifyEmail" [color="black", fontcolor="black", label=<{VerifyEmail|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_cassandra.View" [color="black", fontcolor="black", label=<{View|<br ALIGN="LEFT"/>|add_object(obj)<br ALIGN="LEFT"/>get_time_sorted_columns(rowkey, limit)<br ALIGN="LEFT"/>query(rowkeys, after, reverse, count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.Vote" [color="black", fontcolor="black", label=<{Vote|DESERIALIZED_DIRECTIONS<br ALIGN="LEFT"/>DIRECTIONS<br ALIGN="LEFT"/>SERIALIZED_DIRECTIONS : dict<br ALIGN="LEFT"/>affected_thing_attr<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>delay<br ALIGN="LEFT"/>direction<br ALIGN="LEFT"/>effects<br ALIGN="LEFT"/>event_data : NoneType<br ALIGN="LEFT"/>is_automatic_initial_vote<br ALIGN="LEFT"/>is_downvote<br ALIGN="LEFT"/>is_self_vote<br ALIGN="LEFT"/>is_upvote<br ALIGN="LEFT"/>previous_vote : NoneType<br ALIGN="LEFT"/>thing<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|apply_effects()<br ALIGN="LEFT"/>commit()<br ALIGN="LEFT"/>deserialize_direction(direction)<br ALIGN="LEFT"/>serialize_direction(direction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.VoteDetailsByComment" [color="black", fontcolor="black", label=<{VoteDetailsByComment|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.vote.VoteDetailsByLink" [color="black", fontcolor="black", label=<{VoteDetailsByLink|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.vote.VoteDetailsByThing" [color="black", fontcolor="black", label=<{VoteDetailsByThing|<br ALIGN="LEFT"/>|convert_old_details(old_data)<br ALIGN="LEFT"/>create(user, thing, vote)<br ALIGN="LEFT"/>get_details(thing, voters)<br ALIGN="LEFT"/>get_vote(user, thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.VoteEffects" [color="black", fontcolor="black", label=<{VoteEffects|affects_karma : bool<br ALIGN="LEFT"/>affects_score : bool<br ALIGN="LEFT"/>karma_change : int<br ALIGN="LEFT"/>note_codes : dict<br ALIGN="LEFT"/>notes<br ALIGN="LEFT"/>other_effects : NoneType, dict<br ALIGN="LEFT"/>serializable_data<br ALIGN="LEFT"/>validator : NoneType<br ALIGN="LEFT"/>|add_note(code, message)<br ALIGN="LEFT"/>determine_affects_karma(vote)<br ALIGN="LEFT"/>determine_affects_score(vote)<br ALIGN="LEFT"/>determine_other_effects(vote)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.VoteNote" [color="black", fontcolor="black", label=<{VoteNote|<br ALIGN="LEFT"/>|get(vote)<br ALIGN="LEFT"/>set(vote, note)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.VoterIPByThing" [color="black", fontcolor="black", label=<{VoterIPByThing|<br ALIGN="LEFT"/>|create(vote, ip)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.vote.VotesByAccount" [color="black", fontcolor="black", label=<{VotesByAccount|<br ALIGN="LEFT"/>|rel(thing_cls)<br ALIGN="LEFT"/>value_for(thing1, thing2, vote)<br ALIGN="LEFT"/>write_vote(vote)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.web.WebLogController" [color="black", fontcolor="black", label=<{WebLogController|on_validation_error : staticmethod<br ALIGN="LEFT"/>|OPTIONS_report_cache_poisoning()<br ALIGN="LEFT"/>POST_message(level, logs)<br ALIGN="LEFT"/>POST_report_cache_poisoning(report_mac, poisoner_name, poisoner_id, poisoner_canary, victim_canary, render_time, route_name, url, source, cache_policy, resp_headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.ipn.Webhook" [color="black", fontcolor="black", label=<{Webhook|buyer : NoneType<br ALIGN="LEFT"/>buyer_email : NoneType<br ALIGN="LEFT"/>giftmessage : NoneType<br ALIGN="LEFT"/>goldtype : NoneType<br ALIGN="LEFT"/>months : NoneType<br ALIGN="LEFT"/>passthrough : NoneType<br ALIGN="LEFT"/>payer_email : str<br ALIGN="LEFT"/>payer_id : str<br ALIGN="LEFT"/>pennies : NoneType<br ALIGN="LEFT"/>recipient : NoneType<br ALIGN="LEFT"/>signed : bool<br ALIGN="LEFT"/>subscr_id : NoneType<br ALIGN="LEFT"/>thing : NoneType<br ALIGN="LEFT"/>transaction_id : NoneType<br ALIGN="LEFT"/>|load_blob()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.WelcomeBar" [color="black", fontcolor="black", label=<{WelcomeBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.WidgetDemoPanel" [color="black", fontcolor="black", label=<{WidgetDemoPanel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.wiki.WikiApiController" [color="black", fontcolor="black", label=<{WikiApiController|<br ALIGN="LEFT"/>|POST_wiki_allow_editor(act, page, user)<br ALIGN="LEFT"/>POST_wiki_edit(pageandprevious, content, page_name, reason)<br ALIGN="LEFT"/>POST_wiki_revision_delete(pv, deleted)<br ALIGN="LEFT"/>POST_wiki_revision_hide(pv)<br ALIGN="LEFT"/>POST_wiki_revision_revert(pv)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.wiki.WikiBadRevision" [color="black", fontcolor="red", label=<{WikiBadRevision|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.WikiBannedListing" [color="black", fontcolor="black", label=<{WikiBannedListing|form_title<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.WikiBannedTableItem" [color="black", fontcolor="black", label=<{WikiBannedTableItem|type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiBasePage" [color="black", fontcolor="black", label=<{WikiBasePage|action<br ALIGN="LEFT"/>base_url<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>extra_page_classes : list<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>pageactions : list<br ALIGN="LEFT"/>pagetitle : NoneType<br ALIGN="LEFT"/>|content()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.controllers.wiki.WikiController" [color="black", fontcolor="black", label=<{WikiController|GET_help<br ALIGN="LEFT"/>allow_stylesheets : bool<br ALIGN="LEFT"/>editconflict : bool<br ALIGN="LEFT"/>|GET_faq()<br ALIGN="LEFT"/>GET_wiki_create(wp, page)<br ALIGN="LEFT"/>GET_wiki_discussions(page, num, after, reverse, count)<br ALIGN="LEFT"/>GET_wiki_listing()<br ALIGN="LEFT"/>GET_wiki_page(pv, page_name)<br ALIGN="LEFT"/>GET_wiki_recent(num, after, reverse, count)<br ALIGN="LEFT"/>GET_wiki_redirect(page)<br ALIGN="LEFT"/>GET_wiki_revise(wp, page, message)<br ALIGN="LEFT"/>GET_wiki_revisions(num, after, reverse, count, page)<br ALIGN="LEFT"/>GET_wiki_settings(page)<br ALIGN="LEFT"/>POST_wiki_settings(page, permlevel, listed)<br ALIGN="LEFT"/>handle_error(code, reason)<br ALIGN="LEFT"/>on_validation_error(error)<br ALIGN="LEFT"/>pre()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiCreate" [color="black", fontcolor="black", label=<{WikiCreate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiDiscussions" [color="black", fontcolor="black", label=<{WikiDiscussions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiEdit" [color="black", fontcolor="black", label=<{WikiEdit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiEditPage" [color="black", fontcolor="black", label=<{WikiEditPage|base_url<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>page_content : str<br ALIGN="LEFT"/>previous : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.WikiJsonTemplate" [color="black", fontcolor="black", label=<{WikiJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiListing" [color="black", fontcolor="black", label=<{WikiListing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.listing.WikiMayContributeListing" [color="black", fontcolor="black", label=<{WikiMayContributeListing|form_title<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.pages.WikiMayContributeTableItem" [color="black", fontcolor="black", label=<{WikiMayContributeTableItem|type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiNotFound" [color="black", fontcolor="black", label=<{WikiNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.WikiPage" [color="black", fontcolor="black", label=<{WikiPage|content : str<br ALIGN="LEFT"/>last_edit_by : NoneType<br ALIGN="LEFT"/>last_edit_date<br ALIGN="LEFT"/>permlevel<br ALIGN="LEFT"/>restricted<br ALIGN="LEFT"/>revision : str<br ALIGN="LEFT"/>special<br ALIGN="LEFT"/>|add_editor(user)<br ALIGN="LEFT"/>add_to_listing()<br ALIGN="LEFT"/>change_permlevel(permlevel, force)<br ALIGN="LEFT"/>create(sr, name)<br ALIGN="LEFT"/>get(sr, name)<br ALIGN="LEFT"/>get_author()<br ALIGN="LEFT"/>get_editor_accounts()<br ALIGN="LEFT"/>get_editors(properties)<br ALIGN="LEFT"/>get_listing(sr, filter_check)<br ALIGN="LEFT"/>get_multiple(pages)<br ALIGN="LEFT"/>get_pages(sr, after, filter_check)<br ALIGN="LEFT"/>get_revisions(after, count)<br ALIGN="LEFT"/>get_special_view_permlevel(page)<br ALIGN="LEFT"/>has_editor(editor)<br ALIGN="LEFT"/>id_for(sr, name)<br ALIGN="LEFT"/>is_automatically_created(page)<br ALIGN="LEFT"/>is_impossible(page)<br ALIGN="LEFT"/>is_restricted(page)<br ALIGN="LEFT"/>is_special(page)<br ALIGN="LEFT"/>remove_editor(user)<br ALIGN="LEFT"/>revise(content, previous, author, force, reason)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiPageDiscussions" [color="black", fontcolor="black", label=<{WikiPageDiscussions|listing<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.WikiPageEditors" [color="black", fontcolor="black", label=<{WikiPageEditors|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.WikiPageExists" [color="black", fontcolor="red", label=<{WikiPageExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.WikiPageIniItem" [color="black", fontcolor="black", label=<{WikiPageIniItem|<br ALIGN="LEFT"/>|get_all(return_dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiPageListing" [color="black", fontcolor="black", label=<{WikiPageListing|base_url<br ALIGN="LEFT"/>linear_pages<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>pages<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.WikiPageListingJsonTemplate" [color="black", fontcolor="black", label=<{WikiPageListingJsonTemplate|<br ALIGN="LEFT"/>|data(thing)<br ALIGN="LEFT"/>kind(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiPageNotFound" [color="black", fontcolor="black", label=<{WikiPageNotFound|base_url<br ALIGN="LEFT"/>page<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiPageRevisions" [color="black", fontcolor="black", label=<{WikiPageRevisions|listing<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiPageSettings" [color="black", fontcolor="black", label=<{WikiPageSettings|base_url<br ALIGN="LEFT"/>listed<br ALIGN="LEFT"/>mayedit<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>permlevel<br ALIGN="LEFT"/>show_editors : bool<br ALIGN="LEFT"/>show_settings : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiPageView" [color="black", fontcolor="black", label=<{WikiPageView|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.WikiPagesBySR" [color="black", fontcolor="black", label=<{WikiPagesBySR|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiRecent" [color="black", fontcolor="black", label=<{WikiRecent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.builder.WikiRecentRevisionBuilder" [color="black", fontcolor="black", label=<{WikiRecentRevisionBuilder|show_extended : bool<br ALIGN="LEFT"/>|must_skip(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.wiki.WikiRevision" [color="black", fontcolor="black", label=<{WikiRevision|cache_ignore<br ALIGN="LEFT"/>hidden<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>is_hidden<br ALIGN="LEFT"/>page<br ALIGN="LEFT"/>sr<br ALIGN="LEFT"/>|add_props(user, wrapped)<br ALIGN="LEFT"/>create(pageid, content, author, reason)<br ALIGN="LEFT"/>get(revid, pageid)<br ALIGN="LEFT"/>get_author()<br ALIGN="LEFT"/>get_authors(revisions)<br ALIGN="LEFT"/>get_printable_authors(revisions)<br ALIGN="LEFT"/>get_recent(sr, count)<br ALIGN="LEFT"/>toggle_hide()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.builder.WikiRevisionBuilder" [color="black", fontcolor="black", label=<{WikiRevisionBuilder|page : NoneType<br ALIGN="LEFT"/>show_extended : bool<br ALIGN="LEFT"/>sr : NoneType<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|keep_item(item)<br ALIGN="LEFT"/>must_skip(item)<br ALIGN="LEFT"/>wrap_items(items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.wiki.WikiRevisionHistoryByPage" [color="black", fontcolor="black", label=<{WikiRevisionHistoryByPage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.WikiRevisionJsonTemplate" [color="black", fontcolor="black", label=<{WikiRevisionJsonTemplate|<br ALIGN="LEFT"/>|render(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.listing.WikiRevisionListing" [color="black", fontcolor="black", label=<{WikiRevisionListing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiRevisions" [color="black", fontcolor="black", label=<{WikiRevisions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.wiki.WikiRevisionsRecentBySR" [color="black", fontcolor="black", label=<{WikiRevisionsRecentBySR|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiSettings" [color="black", fontcolor="black", label=<{WikiSettings|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.WikiSettingsJsonTemplate" [color="black", fontcolor="black", label=<{WikiSettingsJsonTemplate|<br ALIGN="LEFT"/>|data(thing)<br ALIGN="LEFT"/>kind(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.wiki.WikiView" [color="black", fontcolor="black", label=<{WikiView|base_url<br ALIGN="LEFT"/>diff : NoneType<br ALIGN="LEFT"/>edit_by<br ALIGN="LEFT"/>edit_date<br ALIGN="LEFT"/>may_revise : bool<br ALIGN="LEFT"/>page : NoneType<br ALIGN="LEFT"/>page_content : NoneType, str<br ALIGN="LEFT"/>page_content_md<br ALIGN="LEFT"/>renderer : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.jsontemplates.WikiViewJsonTemplate" [color="black", fontcolor="black", label=<{WikiViewJsonTemplate|<br ALIGN="LEFT"/>|data(thing)<br ALIGN="LEFT"/>kind(thing)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.amqp.Worker" [color="black", fontcolor="black", label=<{Worker|q : Queue<br ALIGN="LEFT"/>t : Thread<br ALIGN="LEFT"/>|do(fn)<br ALIGN="LEFT"/>join()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.config.feature.world.World" [color="black", fontcolor="black", label=<{World|<br ALIGN="LEFT"/>|current_loid()<br ALIGN="LEFT"/>current_loid_obj()<br ALIGN="LEFT"/>current_oauth_client()<br ALIGN="LEFT"/>current_subdomain()<br ALIGN="LEFT"/>current_subreddit()<br ALIGN="LEFT"/>current_user()<br ALIGN="LEFT"/>has_gold(user)<br ALIGN="LEFT"/>is_admin(user)<br ALIGN="LEFT"/>is_employee(user)<br ALIGN="LEFT"/>is_user_loggedin(user)<br ALIGN="LEFT"/>live_config(name)<br ALIGN="LEFT"/>live_config_iteritems()<br ALIGN="LEFT"/>simple_event(name)<br ALIGN="LEFT"/>stacked_proxy_safe_get(stacked_proxy, key, default)<br ALIGN="LEFT"/>url_features()<br ALIGN="LEFT"/>user_has_beta_enabled(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.pages.pages.WrappedUser" [color="black", fontcolor="black", label=<{WrappedUser|FLAIR_CSS_PREFIX : str<br ALIGN="LEFT"/>cachable : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.providers.support.zendesk.ZenDeskProvider" [color="black", fontcolor="black", label=<{ZenDeskProvider|<br ALIGN="LEFT"/>|build_ticket_url_from_id(ticket_id)<br ALIGN="LEFT"/>create(subject, group_id, comment_body, comment_is_public, requester_id, custom_fields)<br ALIGN="LEFT"/>get(ticket_id)<br ALIGN="LEFT"/>get_ticket_id_from_url(ticket_url)<br ALIGN="LEFT"/>update(ticket, status, comment_body, comment_is_public, tag_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress._BaseAddress" [color="black", fontcolor="black", label=<{_BaseAddress|version<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress._BaseNetwork" [color="black", fontcolor="black", label=<{_BaseNetwork|broadcast_address<br ALIGN="LEFT"/>hostmask<br ALIGN="LEFT"/>network<br ALIGN="LEFT"/>num_addresses<br ALIGN="LEFT"/>prefixlen<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>with_hostmask<br ALIGN="LEFT"/>with_netmask<br ALIGN="LEFT"/>with_prefixlen<br ALIGN="LEFT"/>|address_exclude(other)<br ALIGN="LEFT"/>compare_networks(other)<br ALIGN="LEFT"/>hosts()<br ALIGN="LEFT"/>masked()<br ALIGN="LEFT"/>overlaps(other)<br ALIGN="LEFT"/>subnets(prefixlen_diff, new_prefix)<br ALIGN="LEFT"/>supernet(prefixlen_diff, new_prefix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.query_cache._BaseQueryCache" [color="black", fontcolor="black", label=<{_BaseQueryCache|<br ALIGN="LEFT"/>|get(keys)<br ALIGN="LEFT"/>index_mangle_keys(keys)<br ALIGN="LEFT"/>insert(mutator, key, columns, ttl)<br ALIGN="LEFT"/>remove(mutator, key, columns)<br ALIGN="LEFT"/>remove_if_unchanged(mutator, key, columns, timestamps)<br ALIGN="LEFT"/>remove_older_than(mutator, key, removal_timestamp)<br ALIGN="LEFT"/>replace(mutator, key, columns, ttl)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress._BaseV4" [color="black", fontcolor="black", label=<{_BaseV4|is_link_local<br ALIGN="LEFT"/>is_loopback<br ALIGN="LEFT"/>is_multicast<br ALIGN="LEFT"/>is_private<br ALIGN="LEFT"/>is_reserved<br ALIGN="LEFT"/>is_unspecified<br ALIGN="LEFT"/>max_prefixlen<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress._BaseV6" [color="black", fontcolor="black", label=<{_BaseV6|ipv4_mapped<br ALIGN="LEFT"/>is_link_local<br ALIGN="LEFT"/>is_loopback<br ALIGN="LEFT"/>is_multicast<br ALIGN="LEFT"/>is_private<br ALIGN="LEFT"/>is_reserved<br ALIGN="LEFT"/>is_site_local<br ALIGN="LEFT"/>is_unspecified<br ALIGN="LEFT"/>max_prefixlen<br ALIGN="LEFT"/>packed<br ALIGN="LEFT"/>sixtofour<br ALIGN="LEFT"/>teredo<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.query_cache._CachedQueryBase" [color="black", fontcolor="black", label=<{_CachedQueryBase|data : list<br ALIGN="LEFT"/>sort<br ALIGN="LEFT"/>sort_cols<br ALIGN="LEFT"/>|fetch(force)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.subreddit._DefaultSR" [color="black", fontcolor="black", label=<{_DefaultSR|analytics_name : str<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|get_links(sort, time)<br ALIGN="LEFT"/>is_moderator(user)<br ALIGN="LEFT"/>keep_for_rising(sr_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.media._EmbedlyScraper" [color="black", fontcolor="black", label=<{_EmbedlyScraper|EMBEDLY_API_URL : str<br ALIGN="LEFT"/>embedly_params : dict<br ALIGN="LEFT"/>maxwidth : int<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|media_embed(media_object)<br ALIGN="LEFT"/>scrape()<br ALIGN="LEFT"/>validate_secure_oembed(oembed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.contrib.ipaddress._IPAddressBase" [color="black", fontcolor="black", label=<{_IPAddressBase|compressed<br ALIGN="LEFT"/>exploded<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link._SaveHideByAccount" [color="black", fontcolor="black", label=<{_SaveHideByAccount|<br ALIGN="LEFT"/>|destroy(user, things)<br ALIGN="LEFT"/>value_for(thing1, thing2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link._ThingHidesByAccount" [color="black", fontcolor="black", label=<{_ThingHidesByAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.models.link._ThingSavesByAccount" [color="black", fontcolor="black", label=<{_ThingSavesByAccount|<br ALIGN="LEFT"/>|value_for(thing1, thing2, category)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link._ThingSavesByCategory" [color="black", fontcolor="black", label=<{_ThingSavesByCategory|<br ALIGN="LEFT"/>|create(user, things, category)<br ALIGN="LEFT"/>destroy(user, things, categories)<br ALIGN="LEFT"/>get_saved_categories(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.models.link._ThingSavesBySubreddit" [color="black", fontcolor="black", label=<{_ThingSavesBySubreddit|<br ALIGN="LEFT"/>|create(user, things)<br ALIGN="LEFT"/>destroy(user, things)<br ALIGN="LEFT"/>get_saved_subreddits(user)<br ALIGN="LEFT"/>get_saved_values(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.media._ThumbnailOnlyScraper" [color="black", fontcolor="black", label=<{_ThumbnailOnlyScraper|protocol<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|scrape()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.filters._Unsafe" [color="black", fontcolor="black", label=<{_Unsafe|<br ALIGN="LEFT"/>|cache_key(style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.media._YouTubeScraper" [color="black", fontcolor="black", label=<{_YouTubeScraper|OEMBED_ENDPOINT : str<br ALIGN="LEFT"/>URL_MATCH<br ALIGN="LEFT"/>maxwidth<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|matches(url)<br ALIGN="LEFT"/>media_embed(media_object)<br ALIGN="LEFT"/>scrape()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.operators.and_" [color="black", fontcolor="black", label=<{and_|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.asc" [color="black", fontcolor="black", label=<{asc|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.base_url" [color="black", fontcolor="black", label=<{base_url|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.utils.utils.class_property" [color="black", fontcolor="black", label=<{class_property|function<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.manager.db_manager.db_manager" [color="black", fontcolor="black", label=<{db_manager|avoid_master_reads : dict<br ALIGN="LEFT"/>dead : dict<br ALIGN="LEFT"/>relation_type_db : NoneType<br ALIGN="LEFT"/>type_db : NoneType<br ALIGN="LEFT"/>|add_relation(name, type1, type2, relation_dbs, avoid_master)<br ALIGN="LEFT"/>add_thing(name, thing_dbs, avoid_master)<br ALIGN="LEFT"/>get_engine(name)<br ALIGN="LEFT"/>get_engines(names)<br ALIGN="LEFT"/>get_read_table(tables)<br ALIGN="LEFT"/>mark_dead(engine, g_override)<br ALIGN="LEFT"/>rels_iter()<br ALIGN="LEFT"/>setup_db(db_name, g_override)<br ALIGN="LEFT"/>test_engine(engine, g_override)<br ALIGN="LEFT"/>things_iter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.operators.desc" [color="black", fontcolor="black", label=<{desc|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.domain" [color="black", fontcolor="black", label=<{domain|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.eq" [color="black", fontcolor="black", label=<{eq|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.gt" [color="black", fontcolor="black", label=<{gt|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.gte" [color="black", fontcolor="black", label=<{gte|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.in_" [color="black", fontcolor="black", label=<{in_|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.ip_network" [color="black", fontcolor="black", label=<{ip_network|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.lower" [color="black", fontcolor="black", label=<{lower|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.lt" [color="black", fontcolor="black", label=<{lt|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.lte" [color="black", fontcolor="black", label=<{lte|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.ne" [color="black", fontcolor="black", label=<{ne|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.validator.validator.nop" [color="black", fontcolor="black", label=<{nop|<br ALIGN="LEFT"/>|run(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.operators.not_" [color="black", fontcolor="black", label=<{not_|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.op" [color="black", fontcolor="black", label=<{op|lval<br ALIGN="LEFT"/>lval_name<br ALIGN="LEFT"/>rval<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.or_" [color="black", fontcolor="black", label=<{or_|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.query_func" [color="black", fontcolor="black", label=<{query_func|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.shuffled" [color="black", fontcolor="black", label=<{shuffled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.sort" [color="black", fontcolor="black", label=<{sort|col<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.tdb_lite.tdb_lite" [color="black", fontcolor="black", label=<{tdb_lite|gc<br ALIGN="LEFT"/>|create_table(table, index_commands)<br ALIGN="LEFT"/>db2py(val, kind)<br ALIGN="LEFT"/>index_str(table, name, on, where)<br ALIGN="LEFT"/>make_metadata(engine)<br ALIGN="LEFT"/>py2db(val, return_kind)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.merge.test_globals" [color="black", fontcolor="black", label=<{test_globals|diff3_temp_location : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.db.operators.timeago" [color="black", fontcolor="black", label=<{timeago|interval<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.lib.manager.tp_manager.tp_manager" [color="black", fontcolor="black", label=<{tp_manager|Template<br ALIGN="LEFT"/>cache_override_styles : set<br ALIGN="LEFT"/>templates : dict<br ALIGN="LEFT"/>|add_handler(name, style, handler)<br ALIGN="LEFT"/>cache_template(cls, style, template)<br ALIGN="LEFT"/>get(thing, style)<br ALIGN="LEFT"/>get_template(cls, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"r2.lib.db.operators.year_func" [color="black", fontcolor="black", label=<{year_func|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"r2.controllers.api.ApiController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.api.ApiminimalController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.apiv1.gold.APIv1GoldController" -> "r2.controllers.reddit_base.OAuth2OnlyController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.apiv1.login.APIv1LoginController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.apiv1.scopes.APIv1ScopesController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.apiv1.user.APIv1UserController" -> "r2.controllers.reddit_base.OAuth2OnlyController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.embed.EmbedController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.error.ErrorController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.front.FormsController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.front.FrontController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.front.FrontUnstyledController" -> "r2.controllers.front.FrontController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.googletagmanager.GoogleTagManagerController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.health.HealthController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.ipn.CoinbaseController" -> "r2.controllers.ipn.GoldPaymentController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.ipn.GoldPaymentController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.ipn.IpnController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.ipn.RedditGiftsController" -> "r2.controllers.ipn.GoldPaymentController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.ipn.StripeController" -> "r2.controllers.ipn.GoldPaymentController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.AdsController" -> "r2.controllers.listingcontroller.SubredditListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.BrowseController" -> "r2.controllers.listingcontroller.ListingWithPromos" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.ByIDController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.CommentsController" -> "r2.controllers.listingcontroller.SubredditListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.GildedController" -> "r2.controllers.listingcontroller.SubredditListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.HotController" -> "r2.controllers.listingcontroller.ListingWithPromos" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.ListingWithPromos" -> "r2.controllers.listingcontroller.SubredditListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.MessageController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.MyredditsController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.NewController" -> "r2.controllers.listingcontroller.ListingWithPromos" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.RandomrisingController" -> "r2.controllers.listingcontroller.ListingWithPromos" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.RedditsController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.RisingController" -> "r2.controllers.listingcontroller.NewController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.SubredditListingController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.UserController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.listingcontroller.UserListListingController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.mailgun.MailgunWebhookController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.mediaembed.AdController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.mediaembed.MediaembedController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.multi.MultiApiController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.newsletter.NewsletterController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.oembed.OEmbedController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.policies.PoliciesController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.promotecontroller.PromoteApiController" -> "r2.controllers.api.ApiController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.promotecontroller.PromoteController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.promotecontroller.PromoteListingController" -> "r2.controllers.listingcontroller.ListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.promotecontroller.SponsorController" -> "r2.controllers.promotecontroller.PromoteController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.promotecontroller.SponsorListingController" -> "r2.controllers.promotecontroller.PromoteListingController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.reddit_base.MinimalController" -> "r2.lib.base.BaseController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.reddit_base.OAuth2OnlyController" -> "r2.controllers.reddit_base.OAuth2ResourceController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.reddit_base.OAuth2ResourceController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.reddit_base.RedditController" -> "r2.controllers.reddit_base.OAuth2ResourceController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.redirect.RedirectController" -> "r2.lib.base.BaseController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.robots.RobotsController" -> "r2.controllers.reddit_base.MinimalController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.web.WebLogController" -> "r2.controllers.reddit_base.RedditController" [arrowhead="empty", arrowtail="none"];
"r2.controllers.wiki.WikiApiController" -> "r2.controllers.wiki.WikiController" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.Address" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.Auth" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.AuthorizeNetRequest" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.CreateCustomerPaymentProfileRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.CreateCustomerProfileRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.CreateCustomerProfileTransactionRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.CreditCard" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.DeleteCustomerPaymentProfileRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.DuplicateTransactionError" -> "r2.lib.authorize.api.TransactionError" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.GetCustomerProfileRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.GetSettledBatchListRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.Order" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.PaymentProfile" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.Profile" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.ProfileTransAuthOnly" -> "r2.lib.authorize.api.Transaction" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.ProfileTransPriorAuthCapture" -> "r2.lib.authorize.api.Transaction" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.ProfileTransRefund" -> "r2.lib.authorize.api.Transaction" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.ProfileTransVoid" -> "r2.lib.authorize.api.Transaction" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.Transaction" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.lib.authorize.api.UpdateCustomerPaymentProfileRequest" -> "r2.lib.authorize.api.AuthorizeNetRequest" [arrowhead="empty", arrowtail="none"];
"r2.lib.automoderator.AutoModeratorRuleTypeError" -> "r2.lib.automoderator.AutoModeratorSyntaxError" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.CMemcache" -> "r2.lib.cache.CacheUtils" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.CacheChain" -> "r2.lib.cache.CacheUtils" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.HardCache" -> "r2.lib.cache.CacheUtils" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.HardcacheChain" -> "r2.lib.cache.CacheChain" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.LocalCache" -> "r2.lib.cache.CacheUtils" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.Mcrouter" -> "r2.lib.cache.CMemcache" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.cache.CacheChain" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.SelfEmptyingCache" -> "r2.lib.cache.LocalCache" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.StaleCacheChain" -> "r2.lib.cache.CacheChain" [arrowhead="empty", arrowtail="none"];
"r2.lib.cache.TransitionalCache" -> "r2.lib.cache.CacheUtils" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress._BaseAddress" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress._BaseV4" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv4Interface" -> "r2.lib.contrib.ipaddress.IPv4Address" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv4Network" -> "r2.lib.contrib.ipaddress._BaseNetwork" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv4Network" -> "r2.lib.contrib.ipaddress._BaseV4" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress._BaseAddress" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress._BaseV6" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv6Interface" -> "r2.lib.contrib.ipaddress.IPv6Address" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv6Network" -> "r2.lib.contrib.ipaddress._BaseNetwork" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress.IPv6Network" -> "r2.lib.contrib.ipaddress._BaseV6" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress._BaseAddress" -> "r2.lib.contrib.ipaddress._IPAddressBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.contrib.ipaddress._BaseNetwork" -> "r2.lib.contrib.ipaddress._IPAddressBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.and_" -> "r2.lib.db.operators.BooleanOp" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.asc" -> "r2.lib.db.operators.sort" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.base_url" -> "r2.lib.db.operators.query_func" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.desc" -> "r2.lib.db.operators.sort" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.domain" -> "r2.lib.db.operators.query_func" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.eq" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.gt" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.gte" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.in_" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.ip_network" -> "r2.lib.db.operators.query_func" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.lower" -> "r2.lib.db.operators.query_func" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.lt" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.lte" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.ne" -> "r2.lib.db.operators.op" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.not_" -> "r2.lib.db.operators.BooleanOp" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.or_" -> "r2.lib.db.operators.BooleanOp" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.query_func" -> "r2.lib.db.operators.Slot" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.shuffled" -> "r2.lib.db.operators.desc" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.operators.year_func" -> "r2.lib.db.operators.query_func" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.ConfigurationException" -> "r2.lib.db.tdb_cassandra.CassandraException" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.DenormalizedView" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.InvariantException" -> "r2.lib.db.tdb_cassandra.CassandraException" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.NotFound" -> "r2.lib.db.tdb_cassandra.CassandraException" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.TdbException" -> "r2.lib.db.tdb_cassandra.CassandraException" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.Thing" -> "r2.lib.db.tdb_cassandra.ThingBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.UuidThing" -> "r2.lib.db.tdb_cassandra.ThingBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.tdb_cassandra.View" -> "r2.lib.db.tdb_cassandra.ThingBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.Merge" -> "r2.lib.db.thing.MultiQuery" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.MergeCursor" -> "r2.lib.db.thing.MultiCursor" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.MultiQuery" -> "r2.lib.db.thing.Query" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.Relation.RelationCls" -> "r2.lib.db.thing.DataThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.Relations" -> "r2.lib.db.thing.Query" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.RelationsPropsOnly" -> "r2.lib.db.thing.Relations" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.Thing" -> "r2.lib.db.thing.DataThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.thing.Things" -> "r2.lib.db.thing.Query" [arrowhead="empty", arrowtail="none"];
"r2.lib.db.userrel.MemoizedUserRelManager" -> "r2.lib.db.userrel.UserRelManager" [arrowhead="empty", arrowtail="none"];
"r2.lib.errors.UserRequiredException" -> "r2.lib.errors.RedditError" [arrowhead="empty", arrowtail="none"];
"r2.lib.errors.VerifiedUserRequiredException" -> "r2.lib.errors.RedditError" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.DataSource" -> "r2.lib.js.Source" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.FileSource" -> "r2.lib.js.Source" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.LocalizedModule" -> "r2.lib.js.Module" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.Module" -> "r2.lib.js.Source" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.PermissionsDataSource" -> "r2.lib.js.DataSource" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.PluralForms" -> "r2.lib.js.LocaleSpecificSource" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.StringsSource" -> "r2.lib.js.LocaleSpecificSource" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.TemplateFileSource" -> "r2.lib.js.DataSource" [arrowhead="empty", arrowtail="none"];
"r2.lib.js.TemplateFileSource" -> "r2.lib.js.FileSource" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsonresponse.JQueryResponse" -> "r2.lib.jsonresponse.JsonResponse" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.AccountJsonTemplate" -> "r2.lib.jsontemplates.IdentityJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.BannedTableItemJsonTemplate" -> "r2.lib.jsontemplates.RelTableItemJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.CommentJsonTemplate" -> "r2.lib.jsontemplates.ThingTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.FlairCsvJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.FlairListJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.FlairSelectorJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.FriendTableItemJsonTemplate" -> "r2.lib.jsontemplates.RelTableItemJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.IdentityJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.InvitedModTableItemJsonTemplate" -> "r2.lib.jsontemplates.RelTableItemJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.KarmaListJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.LabeledMultiDescriptionJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.LabeledMultiJsonTemplate" -> "r2.lib.jsontemplates.LabeledMultiDescriptionJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.LinkJsonTemplate" -> "r2.lib.jsontemplates.ThingTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.ListingJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.MessageJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.ModActionTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.MoreCommentJsonTemplate" -> "r2.lib.jsontemplates.ThingTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.MutedTableItemJsonTemplate" -> "r2.lib.jsontemplates.RelTableItemJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.NullJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.OrganicListingJsonTemplate" -> "r2.lib.jsontemplates.ListingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.PanestackJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.PolicyViewJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.PrefsJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.PromotedLinkJsonTemplate" -> "r2.lib.jsontemplates.LinkJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.RedditJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.RelTableItemJsonTemplate" -> "r2.lib.jsontemplates.UserTableItemJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.RulesJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.SearchListingJsonTemplate" -> "r2.lib.jsontemplates.ListingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.StylesheetTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.SubredditJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.SubredditSettingsTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.TakedownJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.ThingJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.TrafficJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.TrophyJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.TrophyListJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.UploadedImageJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.UserListJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.UserListingJsonTemplate" -> "r2.lib.jsontemplates.ListingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.UserTableItemJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.WikiJsonTemplate" -> "r2.lib.jsontemplates.JsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.WikiPageListingJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.WikiRevisionJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.WikiSettingsJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.jsontemplates.WikiViewJsonTemplate" -> "r2.lib.jsontemplates.ThingJsonTemplate" [arrowhead="empty", arrowtail="none"];
"r2.lib.media._EmbedlyScraper" -> "r2.lib.media.Scraper" [arrowhead="empty", arrowtail="none"];
"r2.lib.media._ThumbnailOnlyScraper" -> "r2.lib.media.Scraper" [arrowhead="empty", arrowtail="none"];
"r2.lib.media._YouTubeScraper" -> "r2.lib.media.Scraper" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.AdminKindMenu" -> "r2.lib.menus.KindMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.AdminReporterMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.AdminTimeMenu" -> "r2.lib.menus.TimeMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.CommentSortMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.CommentsTimeMenu" -> "r2.lib.menus.TimeMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.ControversyTimeMenu" -> "r2.lib.menus.TimeMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.JsButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.JsNavMenu" -> "r2.lib.menus.NavMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.KindMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.MenuHandler" -> "r2.lib.strings.StringHandler" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.ModeratorMailButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.NamedButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.OffsiteButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.PostButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.ProfileOverviewTimeMenu" -> "r2.lib.menus.TimeMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.ProfileSortMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.QueryButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.RecSortMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.SearchSortMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.SortMenu" -> "r2.lib.menus.NavMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.SubredditButton" -> "r2.lib.menus.NavButton" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.SubredditMenu" -> "r2.lib.menus.NavMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.SubredditSearchSortMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.menus.TimeMenu" -> "r2.lib.menus.SortMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.mr_tools.mr_tools.UpperMapper" -> "r2.lib.mr_tools.mr_tools.Mapper" [arrowhead="empty", arrowtail="none"];
"r2.lib.newsletter.EmailUnacceptableError" -> "r2.lib.newsletter.NewsletterError" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.admin_pages.AdminLinkMenu" -> "r2.lib.menus.NavMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.admin_pages.AdminProfileMenu" -> "r2.lib.menus.NavMenu" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.AccountActivityPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.AdminInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ArchivedInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.BannedInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.BannedTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.BannedUserInterstitial" -> "r2.lib.pages.pages.BannedInterstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.BoringPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ButtonLite" -> "r2.lib.pages.pages.Button" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ClientInfoBar" -> "r2.lib.pages.pages.InfoBar" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ContributorTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.DeletedUserInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.DetailsPage" -> "r2.lib.pages.pages.LinkInfoPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.EditReddit" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.EnemyTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.FormPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.FriendTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.GoldOnlyInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.HelpPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.HtmlPaneStack" -> "r2.lib.pages.pages.PaneStack" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.InTimeoutInterstitial" -> "r2.lib.pages.pages.BannedInterstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.InterstitialPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.InvitedModTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.LinkInfoPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.LockedInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.LoginPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.MediaChild" -> "r2.lib.pages.pages.LinkChild" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.MessagePage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ModTableItem" -> "r2.lib.pages.pages.InvitedModTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ModToolsPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ModeratorMessageCompose" -> "r2.lib.pages.pages.MessageCompose" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.MutedTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.MySubredditsPage" -> "r2.lib.pages.pages.SubredditsPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.Newsletter" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.NewsletterBar" -> "r2.lib.pages.pages.InfoBar" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.OAuth2AuthorizationPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.Over18Interstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PolicyPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PrefsPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PrivateInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.ProfilePage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PromoteInventory" -> "r2.lib.pages.pages.PromoteLinkBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PromoteLinkEdit" -> "r2.lib.pages.pages.PromoteLinkBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PromoteLinkNew" -> "r2.lib.pages.pages.PromoteLinkBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PromotePage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PromotePost" -> "r2.lib.pages.pages.PromoteLinkBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.PromoteReport" -> "r2.lib.pages.pages.PromoteLinkBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.QuarantineInterstitial" -> "r2.lib.pages.pages.Interstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.RedditError" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.RedditInfoBar" -> "r2.lib.pages.pages.InfoBar" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.RefundPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.Register" -> "r2.lib.pages.pages.Login" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.RegisterPage" -> "r2.lib.pages.pages.LoginPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.RelTableItem" -> "r2.lib.pages.pages.UserTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.SearchPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.SelfTextChild" -> "r2.lib.pages.pages.LinkChild" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.SponsorLookupUser" -> "r2.lib.pages.pages.PromoteLinkBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.SubredditStylesheet" -> "r2.lib.pages.pages.SubredditStylesheetBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.SubredditStylesheetSource" -> "r2.lib.pages.pages.SubredditStylesheetBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.SubredditsPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.TakedownPage" -> "r2.lib.pages.pages.BoringPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.TryCompact" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.UserBlockedInterstitial" -> "r2.lib.pages.pages.BannedInterstitial" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.WelcomeBar" -> "r2.lib.pages.pages.InfoBar" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.WikiBannedTableItem" -> "r2.lib.pages.pages.BannedTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.pages.WikiMayContributeTableItem" -> "r2.lib.pages.pages.RelTableItem" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.things.BanButtons" -> "r2.lib.pages.things.PrintableButtons" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.things.CommentButtons" -> "r2.lib.pages.things.PrintableButtons" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.things.LinkButtons" -> "r2.lib.pages.things.PrintableButtons" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.things.MessageButtons" -> "r2.lib.pages.things.PrintableButtons" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.AdvertTraffic" -> "r2.lib.pages.trafficpages.RedditTraffic" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.AdvertTrafficPage" -> "r2.lib.pages.trafficpages.TrafficPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.AdvertTrafficSummary" -> "r2.lib.pages.trafficpages.RedditTraffic" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.LanguageTraffic" -> "r2.lib.pages.trafficpages.RedditTraffic" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.LanguageTrafficPage" -> "r2.lib.pages.trafficpages.TrafficPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.SitewideTraffic" -> "r2.lib.pages.trafficpages.RedditTraffic" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.SitewideTrafficPage" -> "r2.lib.pages.trafficpages.TrafficPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.SubredditTraffic" -> "r2.lib.pages.trafficpages.RedditTraffic" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.trafficpages.TrafficPage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiBasePage" -> "r2.lib.pages.pages.Reddit" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiCreate" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiDiscussions" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiEdit" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiListing" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiNotFound" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiPageView" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiRecent" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiRevisions" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.pages.wiki.WikiSettings" -> "r2.lib.pages.wiki.WikiBasePage" [arrowhead="empty", arrowtail="none"];
"r2.lib.permissions.ModeratorPermissionSet" -> "r2.lib.permissions.PermissionSet" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.cloudsearch.CloudSearchSubredditSearchQuery" -> "r2.lib.providers.search.cloudsearch.CloudSearchQuery" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.cloudsearch.LinkSearchQuery" -> "r2.lib.providers.search.cloudsearch.CloudSearchQuery" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.cloudsearch.LinkUploader" -> "r2.lib.providers.search.cloudsearch.CloudSearchUploader" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.cloudsearch.SubredditUploader" -> "r2.lib.providers.search.cloudsearch.CloudSearchUploader" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.common.LinkFields" -> "r2.lib.providers.search.common.FieldsBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.common.SubredditFields" -> "r2.lib.providers.search.common.FieldsBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.solr.LinkSearchQuery" -> "r2.lib.providers.search.solr.SolrSearchQuery" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.solr.SolrLinkUploader" -> "r2.lib.providers.search.solr.SolrSearchUploader" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.solr.SolrSubredditSearchQuery" -> "r2.lib.providers.search.solr.SolrSearchQuery" [arrowhead="empty", arrowtail="none"];
"r2.lib.providers.search.solr.SolrSubredditUploader" -> "r2.lib.providers.search.solr.SolrSearchUploader" [arrowhead="empty", arrowtail="none"];
"r2.lib.ratelimit.LiveConfigRateLimit" -> "r2.lib.ratelimit.RateLimit" [arrowhead="empty", arrowtail="none"];
"r2.lib.ratelimit.SimpleRateLimit" -> "r2.lib.ratelimit.RateLimit" [arrowhead="empty", arrowtail="none"];
"r2.lib.recommender.SRRecommendation" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupDetectedCrasherError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupReprError" -> "r2.lib.souptest.SoupError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupSyntaxError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnexpectedCDataSectionError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnexpectedCommentError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnsupportedAttrError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnsupportedEntityError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnsupportedNodeError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnsupportedSchemeError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.souptest.SoupUnsupportedTagError" -> "r2.lib.souptest.SoupReprError" [arrowhead="empty", arrowtail="none"];
"r2.lib.stats.StaleCacheStats" -> "r2.lib.stats.CacheStats" [arrowhead="empty", arrowtail="none"];
"r2.lib.subreddit_search.SubredditsByPartialName" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.lib.support_tickets.SupportTickerNotFoundError" -> "r2.lib.support_tickets.SupportTicketError" [arrowhead="empty", arrowtail="none"];
"r2.lib.template_helpers.JSPreload" -> "r2.lib.js.DataSource" [arrowhead="empty", arrowtail="none"];
"r2.lib.traffic.emr_traffic.TrafficBase" -> "r2.lib.emr_helpers.EmrJob" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.AlienBlueDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.BaconReaderDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.McRedditDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.NarwhalForRedditDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.ReaditDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.RedditAndroidDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.RedditBrowser" -> "r2.lib.utils.reddit_agent_parser.RedditDetectorBase" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.RedditIOSDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.RedditIsFunDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.RedditSyncDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.reddit_agent_parser.RelayForRedditDetector" -> "r2.lib.utils.reddit_agent_parser.RedditBrowser" [arrowhead="empty", arrowtail="none"];
"r2.lib.utils.utils.Enum" -> "r2.lib.utils.utils.Storage" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VAccountByName" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VAdmin" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VAvailableSubredditName" -> "r2.lib.validator.validator.VSubredditName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VAvailableSubredditRuleName" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VAward" -> "r2.lib.validator.validator.VThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VAwardByCodename" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VBoolean" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VByName" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VByNameIfAuthor" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCanDistinguish" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCaptcha" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCnameDomain" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCollection" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VColor" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCommentByID" -> "r2.lib.validator.validator.VThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCommentID" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCommentIDs" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCount" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCssMeasure" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VCssName" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VDate" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VDecimal" -> "r2.lib.validator.validator.VNumber" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VDestination" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VEmployee" -> "r2.lib.validator.validator.VVerifiedUser" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VExistingUname" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFlairAccount" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFlairCss" -> "r2.lib.validator.validator.VCssName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFlairLink" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFlairTemplateByID" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFlairText" -> "r2.lib.validator.validator.VLength" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFloat" -> "r2.lib.validator.validator.VNumber" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFrequencyCap" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VFriendOfMine" -> "r2.lib.validator.validator.VAccountByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VGTMContainerId" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VGold" -> "r2.lib.validator.validator.VUser" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VImageType" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VInt" -> "r2.lib.validator.validator.VNumber" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VJSON" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VLang" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VLength" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VLimit" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VLink" -> "r2.lib.validator.validator.VThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VList" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VLocation" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VLoggedOut" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMarkdown" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMarkdownLength" -> "r2.lib.validator.validator.VMarkdown" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMenu" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMessage" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMessageID" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMessageRecipient" -> "r2.lib.validator.validator.VExistingUname" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VModhash" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VModhashIfLoggedIn" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMultiByPath" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VMultiPath" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VNotInTimeout" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VNumber" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOAuth2ClientDeveloper" -> "r2.lib.validator.validator.VOAuth2ClientID" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOAuth2ClientID" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOAuth2RefreshToken" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOAuth2Scope" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOSVersion" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOneOf" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOneTimePassword" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VOneTimeToken" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPassword" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPasswordChange" -> "r2.lib.validator.validator.VPassword" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPermissions" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPrintable" -> "r2.lib.validator.validator.VLength" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPriority" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPromoCampaign" -> "r2.lib.validator.validator.VThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VPromoTarget" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VRatelimit" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VRatelimitImproved" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VRatelimitImproved.RateLimit" -> "r2.lib.ratelimit.RateLimit" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VRedirectUri" -> "r2.lib.validator.validator.VUrl" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VRequired" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VResultTypes" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSRByName" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSRByNames" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSanitizedUrl" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSavedCategory" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VShamedDomain" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VShareRatelimit" -> "r2.lib.validator.validator.VRatelimitImproved" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSigned" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSponsor" -> "r2.lib.validator.validator.VUser" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSponsorAdmin" -> "r2.lib.validator.validator.VVerifiedUser" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSrCanAlter" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSrCanBan" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSrModerator" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSrSpecial" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubmitParent" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubmitSR" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubredditDesc" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubredditList" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubredditName" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubredditRule" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubredditTitle" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VSubscribeSR" -> "r2.lib.validator.validator.VByName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VTarget" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VThing" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VThrottledLogin" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VTitle" -> "r2.lib.validator.validator.VLength" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VTrophy" -> "r2.lib.validator.validator.VThing" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VUname" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VUploadLength" -> "r2.lib.validator.validator.VLength" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VUrl" -> "r2.lib.validator.validator.VRequired" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VUser" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VUserWithEmail" -> "r2.lib.validator.validator.VExistingUname" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VValidatedJSON" -> "r2.lib.validator.validator.VJSON" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VValidatedJSON.PartialObject" -> "r2.lib.validator.validator.VValidatedJSON.Object" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VVerifiedSponsor" -> "r2.lib.validator.validator.VSponsor" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VVerifiedUser" -> "r2.lib.validator.validator.VUser" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.VVerifyPassword" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.ValidAddress" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.ValidCard" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.ValidEmail" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.ValidEmails" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.ValidEmailsOrExistingUnames" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.validator.nop" -> "r2.lib.validator.validator.Validator" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.wiki.VWikiPage" -> "r2.lib.validator.wiki.VWikiPageName" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.wiki.VWikiPageAndVersion" -> "r2.lib.validator.wiki.VWikiPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.validator.wiki.VWikiPageRevise" -> "r2.lib.validator.wiki.VWikiPage" [arrowhead="empty", arrowtail="none"];
"r2.lib.zookeeper.IPNetworkLiveList" -> "r2.lib.zookeeper.ReducedLiveList" [arrowhead="empty", arrowtail="none"];
"r2.models.account.Account" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.account.AccountsByCanonicalEmail" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.account.BlockedSubredditsByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.account.DeletedUser" -> "r2.models.account.FakeAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.account.FakeAccount" -> "r2.models.account.Account" [arrowhead="empty", arrowtail="none"];
"r2.models.account.Friend" -> "r2.lib.db.thing.Relation.RelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.account.QuarantinedSubredditOptInsByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.account.SubredditParticipationByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.admin_notes.AdminNotesBySystem" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.automoderator.PerformedRulesByThing" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.award.Award" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.award.Trophy" -> "r2.lib.db.thing.Relation.RelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.bans.TempTimeout" -> "r2.models.bans.UserTempBan" [arrowhead="empty", arrowtail="none"];
"r2.models.bidding.Bid" -> "r2.models.bidding.Sessionized" [arrowhead="empty", arrowtail="none"];
"r2.models.bidding.CustomerID" -> "r2.models.bidding.Sessionized" [arrowhead="empty", arrowtail="none"];
"r2.models.bidding.PayID" -> "r2.models.bidding.Sessionized" [arrowhead="empty", arrowtail="none"];
"r2.models.bidding.PromotionWeights" -> "r2.models.bidding.Sessionized" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.ActionBuilder" -> "r2.models.builder.IDBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.CampaignBuilder" -> "r2.models.builder.IDBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.ChildrenCommentOrderer" -> "r2.models.builder.CommentOrdererBase" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.CommentBuilder" -> "r2.models.builder.Builder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.CommentOrderer" -> "r2.models.builder.CommentOrdererBase" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.FlairListBuilder" -> "r2.models.builder.UserListBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.IDBuilder" -> "r2.models.builder.QueryBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.MessageBuilder" -> "r2.models.builder.Builder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.ModActionBuilder" -> "r2.models.builder.QueryBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.ModeratorMessageBuilder" -> "r2.models.builder.MessageBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.MultiredditMessageBuilder" -> "r2.models.builder.MessageBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.PermalinkCommentOrderer" -> "r2.models.builder.CommentOrdererBase" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.QACommentOrderer" -> "r2.models.builder.CommentOrderer" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.QueryBuilder" -> "r2.models.builder.Builder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.SavedBuilder" -> "r2.models.builder.IDBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.SearchBuilder" -> "r2.models.builder.IDBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.SimpleBuilder" -> "r2.models.builder.IDBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.SrMessageBuilder" -> "r2.models.builder.MessageBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.TopCommentBuilder" -> "r2.models.builder.CommentBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.UserListBuilder" -> "r2.models.builder.QueryBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.UserMessageBuilder" -> "r2.models.builder.MessageBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.WikiRecentRevisionBuilder" -> "r2.models.builder.WikiRevisionBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.builder.WikiRevisionBuilder" -> "r2.models.builder.QueryBuilder" [arrowhead="empty", arrowtail="none"];
"r2.models.flair.Flair" -> "r2.lib.db.thing.Relation.RelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.flair.FlairTemplate" -> "r2.lib.db.tdb_cassandra.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.flair.FlairTemplateBySubredditIndex" -> "r2.lib.db.tdb_cassandra.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.gold.GildedCommentsByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.gold.GildedLinksByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.gold.GildingsByDay" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.gold.GildingsByThing" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.gold.StylesheetsEverywhere" -> "r2.models.wiki.WikiPageIniItem" [arrowhead="empty", arrowtail="none"];
"r2.models.ip.AccountsByIP" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.ip.IPsByAccount" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.keyvalue.NamedGlobals" -> "r2.models.keyvalue.KeyValueStore" [arrowhead="empty", arrowtail="none"];
"r2.models.last_modified.LastModified" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.link.Comment" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.link.CommentSavesByAccount" -> "r2.models.link._ThingSavesByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.link.CommentSavesByCategory" -> "r2.models.link._ThingSavesByCategory" [arrowhead="empty", arrowtail="none"];
"r2.models.link.CommentSavesBySubreddit" -> "r2.models.link._ThingSavesBySubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.link.CommentScoresByLink" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.link.CommentVisitsByUser" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.link.CommentsByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.link.Inbox" -> "r2.lib.db.thing.MultiRelation.MultiRelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LegacySearchResultLink" -> "r2.models.link.Link" [arrowhead="empty", arrowtail="none"];
"r2.models.link.Link" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinkHidesByAccount" -> "r2.models.link._ThingHidesByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinkSavesByAccount" -> "r2.models.link._ThingSavesByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinkSavesByCategory" -> "r2.models.link._ThingSavesByCategory" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinkSavesBySubreddit" -> "r2.models.link._ThingSavesBySubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinkVisitsByAccount" -> "r2.models.link._SaveHideByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinksByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinksByImage" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.link.LinksByUrlAndSubreddit" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.link.Message" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.link.MessagesByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.link.ModeratorInbox" -> "r2.lib.db.thing.Relation.RelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.link.MoreChildren" -> "r2.models.link.MoreComments" [arrowhead="empty", arrowtail="none"];
"r2.models.link.MoreRecursion" -> "r2.models.link.MoreComments" [arrowhead="empty", arrowtail="none"];
"r2.models.link.PromotedLink" -> "r2.models.link.Link" [arrowhead="empty", arrowtail="none"];
"r2.models.link.ReadNextLink" -> "r2.models.link.Link" [arrowhead="empty", arrowtail="none"];
"r2.models.link.SearchResultLink" -> "r2.models.link.Link" [arrowhead="empty", arrowtail="none"];
"r2.models.link._SaveHideByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.link._ThingHidesByAccount" -> "r2.models.link._SaveHideByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.link._ThingSavesByAccount" -> "r2.models.link._SaveHideByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.link._ThingSavesByCategory" -> "r2.models.link._ThingSavesBySubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.link._ThingSavesBySubreddit" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.BannedListing" -> "r2.models.listing.UserListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.ContributorListing" -> "r2.models.listing.UserListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.EnemyListing" -> "r2.models.listing.UserListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.FriendListing" -> "r2.models.listing.UserListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.InvitedModListing" -> "r2.models.listing.UserListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.LinkListing" -> "r2.models.listing.Listing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.ModActionListing" -> "r2.models.listing.TableListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.ModListing" -> "r2.models.listing.InvitedModListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.MutedListing" -> "r2.models.listing.UserListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.NestedListing" -> "r2.models.listing.Listing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.ReadNextListing" -> "r2.models.listing.Listing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.SearchListing" -> "r2.models.listing.LinkListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.SpotlightListing" -> "r2.models.listing.Listing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.TableListing" -> "r2.models.listing.Listing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.UserListing" -> "r2.models.listing.TableListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.WikiBannedListing" -> "r2.models.listing.BannedListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.WikiMayContributeListing" -> "r2.models.listing.ContributorListing" [arrowhead="empty", arrowtail="none"];
"r2.models.listing.WikiRevisionListing" -> "r2.models.listing.TableListing" [arrowhead="empty", arrowtail="none"];
"r2.models.media_cache.MediaByURL" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.modaction.ModAction" -> "r2.lib.db.tdb_cassandra.UuidThing" [arrowhead="empty", arrowtail="none"];
"r2.models.modaction.ModActionBySR" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.modaction.ModActionBySRAction" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.modaction.ModActionBySRActionMod" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.modaction.ModActionBySRMod" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.AuctionPriority" -> "r2.models.promo.PriorityLevel" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.CollectionStorage" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.HighPriority" -> "r2.models.promo.PriorityLevel" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.HousePriority" -> "r2.models.promo.PriorityLevel" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.MediumPriority" -> "r2.models.promo.PriorityLevel" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.PromoCampaign" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.PromotionLog" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.PromotionPrices" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.promo.RemnantPriority" -> "r2.models.promo.PriorityLevel" [arrowhead="empty", arrowtail="none"];
"r2.models.promo_metrics.LocationPromoMetrics" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.promo_metrics.PromoMetrics" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.query_cache.CachedQuery" -> "r2.models.query_cache._CachedQueryBase" [arrowhead="empty", arrowtail="none"];
"r2.models.query_cache.MergedCachedQuery" -> "r2.models.query_cache._CachedQueryBase" [arrowhead="empty", arrowtail="none"];
"r2.models.query_cache.SubredditQueryCache" -> "r2.models.query_cache._BaseQueryCache" [arrowhead="empty", arrowtail="none"];
"r2.models.query_cache.UserQueryCache" -> "r2.models.query_cache._BaseQueryCache" [arrowhead="empty", arrowtail="none"];
"r2.models.recommend.AccountSRFeedback" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.recommend.ExploreSettings" -> "r2.lib.db.tdb_cassandra.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.report.Report" -> "r2.lib.db.thing.MultiRelation.MultiRelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.rules.SubredditRules" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.AllFiltered" -> "r2.models.subreddit.AllMinus" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.AllFiltered" -> "r2.models.subreddit.Filtered" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.AllMinus" -> "r2.models.subreddit.AllSR" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.AllSR" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.BaseLocalizedSubreddits" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.ContribSR" -> "r2.models.subreddit.ModContribSR" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.DefaultSR" -> "r2.models.subreddit._DefaultSR" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.DomainSR" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.FakeSubreddit" -> "r2.models.subreddit.BaseSite" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.FriendsSR" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.LabeledMulti" -> "r2.lib.db.tdb_cassandra.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.LabeledMulti" -> "r2.models.subreddit.MultiReddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.LabeledMultiByOwner" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.LocalizedDefaultSubreddits" -> "r2.models.subreddit.BaseLocalizedSubreddits" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.LocalizedFeaturedSubreddits" -> "r2.models.subreddit.BaseLocalizedSubreddits" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.ModContribSR" -> "r2.models.subreddit.MultiReddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.ModFiltered" -> "r2.models.subreddit.Filtered" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.ModFiltered" -> "r2.models.subreddit.ModMinus" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.ModMinus" -> "r2.models.subreddit.ModSR" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.ModSR" -> "r2.models.subreddit.ModContribSR" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.MultiReddit" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.RandomNSFWReddit" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.RandomReddit" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.RandomSubscriptionReddit" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.SRMember" -> "r2.lib.db.thing.Relation.RelationCls" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.SearchResultSubreddit" -> "r2.models.subreddit.Subreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.Subreddit" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.Subreddit" -> "r2.models.subreddit.BaseSite" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.SubredditsActiveForFrontPage" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.SubscribedSubredditsByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit.SubscriptionsByDay" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.subreddit._DefaultSR" -> "r2.models.subreddit.FakeSubreddit" [arrowhead="empty", arrowtail="none"];
"r2.models.token.AwardClaimToken" -> "r2.models.token.ConsumableToken" [arrowhead="empty", arrowtail="none"];
"r2.models.token.ConsumableToken" -> "r2.models.token.Token" [arrowhead="empty", arrowtail="none"];
"r2.models.token.EmailVerificationToken" -> "r2.models.token.ConsumableToken" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2AccessToken" -> "r2.models.token.Token" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2AccessTokensByUser" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2AuthorizationCode" -> "r2.models.token.ConsumableToken" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2Client" -> "r2.models.token.Token" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2ClientsByDeveloper" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2RefreshToken" -> "r2.models.token.OAuth2AccessToken" [arrowhead="empty", arrowtail="none"];
"r2.models.token.OAuth2RefreshTokensByUser" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.token.PasswordResetToken" -> "r2.models.token.ConsumableToken" [arrowhead="empty", arrowtail="none"];
"r2.models.token.Token" -> "r2.lib.db.tdb_cassandra.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.trylater.TryLater" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.trylater.TryLaterBySubject" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.CommentVotesByAccount" -> "r2.models.vote.VotesByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.LinkVotesByAccount" -> "r2.models.vote.VotesByAccount" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.VoteDetailsByComment" -> "r2.models.vote.VoteDetailsByThing" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.VoteDetailsByLink" -> "r2.models.vote.VoteDetailsByThing" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.VoteDetailsByThing" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.VoteNote" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.VoterIPByThing" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.vote.VotesByAccount" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.ImagesByWikiPage" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiPage" -> "r2.lib.db.tdb_cassandra.Thing" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiPageEditors" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiPagesBySR" -> "r2.lib.db.tdb_cassandra.DenormalizedView" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiRevision" -> "r2.lib.db.tdb_cassandra.UuidThing" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiRevision" -> "r2.models.printable.Printable" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiRevisionHistoryByPage" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="empty", arrowtail="none"];
"r2.models.wiki.WikiRevisionsRecentBySR" -> "r2.lib.db.tdb_cassandra.DenormalizedView" [arrowhead="empty", arrowtail="none"];
"r2.tests.RedditControllerTestCase" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.functional.controller.del_msg_test.DelMsgTest" -> "r2.tests.RedditControllerTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.functional.controller.login.api_tests.LoginRegTests" -> "r2.tests.RedditControllerTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.functional.controller.login.apiv1_tests.APIV1LoginTests" -> "r2.tests.RedditControllerTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.functional.controller.login.post_tests.PostLoginRegTests" -> "r2.tests.RedditControllerTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.config.experiment_test.TestExperiment" -> "r2.tests.unit.config.feature_test.TestFeatureBase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.config.feature_test.MockWorld" -> "r2.config.feature.world.World" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.config.feature_test.MockWorld._make_state.MockState" -> "r2.config.feature.state.FeatureState" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.config.feature_test.TestFeatureBase" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.authorize.test_api.AuthorizeNetExceptionTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.authorize.test_api.SimpleXMLObjectTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.authorize.test_api.SimpleXMLObjectTest.test_from_xml.TestXML" -> "r2.lib.authorize.api.SimpleXMLObject" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.authorize.test_interaction.InteractionTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.cookie_upgrade_test.TestCookieUpgrade" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.eventcollector_tests.TestEventCollector" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.js_test.TestFileSource" -> "r2.lib.js.FileSource" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.js_test.TestModule" -> "r2.lib.js.Module" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.loid_tests.LoidTests" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.permissions_test.TestPermissionSet" -> "r2.lib.permissions.PermissionSet" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.promote_test.TestSRNamesFromSite" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.providers.image_resizing.imgix_test.TestImgixResizer" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.reddit_agent_parser_test.AgentDetectorTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.reddit_agent_parser_test.HAPIntegrationTests" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.signing_tests.SigningTests" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.stats_test.StatsdClientUnderTest" -> "r2.lib.stats.StatsdClient" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.stats_test.StatsdConnectionUnderTest" -> "r2.lib.stats.StatsdConnection" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.urlparser_test.TestIsRedditURL" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.urlparser_test.TestSwitchSubdomainByExtension" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.validator.test_validator.TestVSubmitParent" -> "r2.tests.unit.lib.validator.test_validator.ValidatorTests" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.validator.test_validator.TestVSubredditName" -> "r2.tests.unit.lib.validator.test_validator.ValidatorTests" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.validator.test_validator.TestValidEmail" -> "r2.tests.unit.lib.validator.test_validator.ValidatorTests" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.lib.validator.test_validator.ValidatorTests" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.commentbuilder_test.CommentOrderTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.link_test.AccountMock" -> "r2.tests.unit.models.link_test.ThingMock" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.link_test.CommentMock" -> "r2.models.link.Comment" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.link_test.LinkMock" -> "r2.models.link.Link" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.link_test.SubredditMock" -> "r2.tests.unit.models.link_test.ThingMock" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.promo_test.CollectionOrderTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.promo_test.CollectionStorageTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.promo_test.CollectionTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.subreddit_test.TestPermissionSet" -> "r2.lib.permissions.PermissionSet" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.thing_test.SimpleThing" -> "r2.lib.db.thing.Thing" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.thing_test.TestThingIncr" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.thing_test.TestThingReadCaching" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.thing_test.TestThingWrite" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.thing_test.TestThingWriteConflict" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.user_message_builder_test.UserMessageBuilderTest" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.models.vote_test.TestVoteValidator" -> "r2.tests.RedditTestCase" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.ratelimit_test.LiveConfigRateLimitTest.TestRateLimit" -> "r2.lib.ratelimit.LiveConfigRateLimit" [arrowhead="empty", arrowtail="none"];
"r2.tests.unit.ratelimit_test.RateLimitTest.TestRateLimit" -> "r2.lib.ratelimit.RateLimit" [arrowhead="empty", arrowtail="none"];
"r2.config.queues.Queues" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queues", style="solid"];
"r2.lib.app_globals.PermissionFilteredEmployeeList" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="admins", style="solid"];
"r2.lib.app_globals.PermissionFilteredEmployeeList" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sponsors", style="solid"];
"r2.lib.app_globals.PermissionFilteredEmployeeList" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="employees", style="solid"];
"r2.lib.authorize.api.SimpleXMLObject" -> "r2.tests.unit.lib.authorize.test_api.SimpleXMLObjectTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="basic_object", style="solid"];
"r2.lib.cache.CMemcache" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lock_cache", style="solid"];
"r2.lib.cache.CacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gencache", style="solid"];
"r2.lib.cache.CacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="thingcache", style="solid"];
"r2.lib.cache.HardcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hardcache", style="solid"];
"r2.lib.cache.LocalCache" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cassandra_local_cache", style="solid"];
"r2.lib.cache.LocalCache" -> "r2.tests.unit.ratelimit_test.RateLimitStandaloneFunctionsTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cache", style="solid"];
"r2.lib.cache.LocalCache" -> "r2.tests.unit.ratelimit_test.RateLimitTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cache", style="solid"];
"r2.lib.cache.Mcrouter" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mcrouter", style="solid"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="memoizecache", style="solid"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="srmembercache", style="solid"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="relcache", style="solid"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ratelimitcache", style="solid"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rendercache", style="solid"];
"r2.lib.cache.MemcacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="commentpanecache", style="solid"];
"r2.lib.cache.Permacache" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="permacache", style="solid"];
"r2.lib.cache.SelfEmptyingCache" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cassandra_local_cache", style="solid"];
"r2.lib.cache.StaleCacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gencache", style="solid"];
"r2.lib.cache.StaleCacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="thingcache", style="solid"];
"r2.lib.cache.StaleCacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="memoizecache", style="solid"];
"r2.lib.cache.StaleCacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="srmembercache", style="solid"];
"r2.lib.cache.StaleCacheChain" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="relcache", style="solid"];
"r2.lib.configparse.ConfigValueParser" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"r2.lib.configparse.ConfigValueParser" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="live_config", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hostmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv4Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Address" -> "r2.lib.contrib.ipaddress.IPv6Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hostmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Network" -> "r2.lib.contrib.ipaddress.IPv4Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network", style="solid"];
"r2.lib.contrib.ipaddress.IPv4Network" -> "r2.lib.contrib.ipaddress.IPv4Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv4Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hostmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hostmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_address", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Address" -> "r2.lib.contrib.ipaddress.IPv6Network" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="netmask", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Network" -> "r2.lib.contrib.ipaddress.IPv6Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network", style="solid"];
"r2.lib.contrib.ipaddress.IPv6Network" -> "r2.lib.contrib.ipaddress.IPv6Interface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network", style="solid"];
"r2.lib.db.operators.Slots" -> "r2.lib.db.thing.DataThing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"r2.lib.db.operators.Slots" -> "r2.lib.db.thing.MultiRelation.MultiRelationCls" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"r2.lib.db.tdb_cassandra.ColumnQuery" -> "r2.lib.db.tdb_cassandra.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_query_cls", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" -> "r2.lib.db.tdb_cassandra.DenormalizedRelation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" -> "r2.lib.db.tdb_cassandra.ThingBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" -> "r2.models.account.AccountsByCanonicalEmail" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" -> "r2.models.gold.GoldRevenueGoalByDate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" -> "r2.models.keyvalue.KeyValueStore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.tdb_cassandra.ThingMeta" -> "r2.models.query_cache._BaseQueryCache" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.tdb_lite.tdb_lite" -> "r2.lib.hardcachebackend.HardCacheBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tdb", style="solid"];
"r2.lib.db.thing.RelationMeta" -> "r2.lib.db.thing.Relation.RelationCls" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.db.thing.ThingMeta" -> "r2.lib.db.thing.Thing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.eventcollector.EventQueue" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="events", style="solid"];
"r2.lib.hardcachebackend.HardCacheBackend" -> "r2.lib.cache.HardCache" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="backend", style="solid"];
"r2.lib.manager.db_manager.db_manager" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dbm", style="solid"];
"r2.lib.menus.JsNavMenu" -> "r2.lib.pages.pages.NewLink" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formtabs_menu", style="solid"];
"r2.lib.menus.JsNavMenu" -> "r2.lib.pages.pages.TabbedPane" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tabmenu", style="solid"];
"r2.lib.menus.PostButton" -> "r2.lib.menus.ControversyTimeMenu" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="button_cls", style="solid"];
"r2.lib.menus.QueryButton" -> "r2.lib.menus.SortMenu" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="button_cls", style="solid"];
"r2.lib.menus.SubredditMenu" -> "r2.lib.pages.pages.SubredditTopBar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="my_subreddits_dropdown", style="solid"];
"r2.lib.pages.pages.ClientInfoBar" -> "r2.lib.pages.pages.LoginPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="infobar", style="solid"];
"r2.lib.pages.pages.DebugFooter" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="debug_footer", style="solid"];
"r2.lib.pages.pages.FlairPrefs" -> "r2.lib.pages.pages.SubredditInfoBar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flair_prefs", style="solid"];
"r2.lib.pages.pages.HtmlPaneStack" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="popup_panes", style="solid"];
"r2.lib.pages.pages.InfoBar" -> "r2.lib.pages.pages.SubredditsPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sr_infobar", style="solid"];
"r2.lib.pages.pages.LocationBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="locationbar", style="solid"];
"r2.lib.pages.pages.MobileWebRedirectBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mobilewebredirectbar", style="solid"];
"r2.lib.pages.pages.ModeratorPermissions" -> "r2.lib.pages.pages.InvitedModTableItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="permissions", style="solid"];
"r2.lib.pages.pages.NewsletterBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="newsletterbar", style="solid"];
"r2.lib.pages.pages.PaneStack" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_content", style="solid"];
"r2.lib.pages.pages.RedditFooter" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="footer", style="solid"];
"r2.lib.pages.pages.RedditInfoBar" -> "r2.lib.pages.pages.PromoteLinkEdit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="infobar", style="solid"];
"r2.lib.pages.pages.RedditInfoBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="infobar", style="solid"];
"r2.lib.pages.pages.RedditInfoBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="infobar", style="solid"];
"r2.lib.pages.pages.RedditInfoBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="infobar", style="solid"];
"r2.lib.pages.pages.SearchBar" -> "r2.lib.pages.pages.SearchPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="searchbar", style="solid"];
"r2.lib.pages.pages.SearchBar" -> "r2.lib.pages.pages.SubredditsPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="searchbar", style="solid"];
"r2.lib.pages.pages.SearchForm" -> "r2.lib.pages.pages.SearchBar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="search_form", style="solid"];
"r2.lib.pages.pages.SubredditFacets" -> "r2.lib.pages.pages.SearchPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sr_facets", style="solid"];
"r2.lib.pages.pages.SubredditSelector" -> "r2.lib.pages.pages.CreateSubreddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subreddit_selector", style="solid"];
"r2.lib.pages.pages.SubredditSelector" -> "r2.lib.pages.pages.MultiInfoBar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subreddit_selector", style="solid"];
"r2.lib.pages.pages.SubredditSelector" -> "r2.lib.pages.pages.PromoteInventory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subreddit_selector", style="solid"];
"r2.lib.pages.pages.SubredditSelector" -> "r2.lib.pages.pages.PromoteLinkEdit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subreddit_selector", style="solid"];
"r2.lib.pages.pages.SubredditTopBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="srtopbar", style="solid"];
"r2.lib.pages.pages.TimeSeriesChart" -> "r2.lib.pages.trafficpages.AdvertTrafficSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="totals", style="solid"];
"r2.lib.pages.pages.UserText" -> "r2.lib.pages.pages.MessagePage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="replybox", style="solid"];
"r2.lib.pages.pages.UserText" -> "r2.lib.pages.pages.SubredditInfoBar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description_usertext", style="solid"];
"r2.lib.pages.pages.WelcomeBar" -> "r2.lib.pages.pages.Reddit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="welcomebar", style="solid"];
"r2.lib.plugin.PluginLoader" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="plugins", style="solid"];
"r2.lib.providers.image_resizing.imgix.ImgixImageResizingProvider" -> "r2.tests.unit.lib.providers.image_resizing.imgix_test.TestImgixResizer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="provider", style="solid"];
"r2.lib.providers.search.cloudsearch.CloudSearchSubredditSearchQuery" -> "r2.lib.providers.search.cloudsearch.CloudSearchProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SubredditSearchQuery", style="solid"];
"r2.lib.providers.search.cloudsearch.LinkSearchQuery" -> "r2.lib.providers.search.cloudsearch.CloudSearchProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SearchQuery", style="solid"];
"r2.lib.providers.search.common.FieldsMeta" -> "r2.lib.providers.search.common.FieldsBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"r2.lib.providers.search.common.Results" -> "r2.lib.providers.search.cloudsearch.CloudSearchQuery" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="results", style="solid"];
"r2.lib.providers.search.common.Results" -> "r2.lib.providers.search.solr.SolrSearchQuery" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="results", style="solid"];
"r2.lib.providers.search.solr.LinkSearchQuery" -> "r2.lib.providers.search.solr.SolrSearchProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SearchQuery", style="solid"];
"r2.lib.providers.search.solr.SolrSubredditSearchQuery" -> "r2.lib.providers.search.solr.SolrSearchProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SubredditSearchQuery", style="solid"];
"r2.lib.stats.CountingStatBuffer" -> "r2.lib.stats.StatsdClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="counting_stats", style="solid"];
"r2.lib.stats.Stats" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stats", style="solid"];
"r2.lib.stats.StatsdClient" -> "r2.lib.stats.Stats" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"r2.lib.stats.StatsdConnection" -> "r2.lib.stats.StatsdClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn", style="solid"];
"r2.lib.stats.StatsdConnection" -> "r2.lib.stats.StatsdClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn", style="solid"];
"r2.lib.stats.StatsdConnection" -> "r2.lib.stats.StatsdClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_make_conn", style="solid"];
"r2.lib.stats.StringCountBuffer" -> "r2.lib.stats.StatsdClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="string_counts", style="solid"];
"r2.lib.stats.Timer" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="startup_timer", style="solid"];
"r2.lib.stats.TimingStatBuffer" -> "r2.lib.stats.StatsdClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timing_stats", style="solid"];
"r2.lib.validator.validator.VLength" -> "r2.lib.validator.validator.VThrottledLogin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vlength", style="solid"];
"r2.lib.validator.validator.VRatelimitImproved.RateLimit" -> "r2.lib.validator.validator.VShareRatelimit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="USER_LIMIT", style="solid"];
"r2.lib.validator.validator.VRatelimitImproved.RateLimit" -> "r2.lib.validator.validator.VShareRatelimit" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="IP_LIMIT", style="solid"];
"r2.lib.zookeeper.IPNetworkLiveList" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="throttles", style="solid"];
"r2.lib.zookeeper.LiveConfig" -> "r2.lib.app_globals.Globals" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="live_config", style="solid"];
"r2.lib.zookeeper.LiveList" -> "r2.lib.zookeeper.ReducedLiveList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="live_list", style="solid"];
"r2.models.mail_queue.EmailHandler" -> "r2.models.mail_queue.Email" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler", style="solid"];
"r2.models.modaction.ModAction" -> "r2.models.modaction.ModActionBySR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.modaction.ModAction" -> "r2.models.modaction.ModActionBySRAction" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.modaction.ModAction" -> "r2.models.modaction.ModActionBySRActionMod" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.modaction.ModAction" -> "r2.models.modaction.ModActionBySRMod" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.subreddit.SRMember" -> "r2.tests.unit.models.subreddit_test.SRMemberTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rel", style="solid"];
"r2.models.token.OAuth2AccessToken" -> "r2.models.token.OAuth2AccessTokensByUser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.token.OAuth2Client" -> "r2.models.token.OAuth2ClientsByDeveloper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.token.OAuth2RefreshToken" -> "r2.models.token.OAuth2RefreshTokensByUser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.vote.VoteEffects" -> "r2.models.vote.Vote" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="effects", style="solid"];
"r2.models.wiki.WikiPage" -> "r2.models.wiki.WikiPagesBySR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.wiki.WikiRevision" -> "r2.models.wiki.WikiRevisionHistoryByPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.models.wiki.WikiRevision" -> "r2.models.wiki.WikiRevisionsRecentBySR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_of", style="solid"];
"r2.tests.unit.lib.stats_test.FakeUdpSocket" -> "r2.tests.unit.lib.stats_test.StatsdConnectionUnderTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_make_socket", style="solid"];
"r2.tests.unit.models.thing_test.FakeLock" -> "r2.tests.unit.models.thing_test.TestThingIncr" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lock", style="solid"];
"r2.tests.unit.models.thing_test.FakeLock" -> "r2.tests.unit.models.thing_test.TestThingWrite" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lock", style="solid"];
"r2.tests.unit.models.thing_test.FakeLock" -> "r2.tests.unit.models.thing_test.TestThingWriteConflict" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lock", style="solid"];
"r2.config.queues.Queues" -> "r2.config.queues.Queues" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__dict__", style="solid"];
"r2.lib.db.thing.SafeSetAttr" -> "r2.lib.db.thing.DataThing" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="safe_set_attr", style="solid"];
"r2.lib.jsonresponse.JQueryResponse" -> "r2.lib.jsonresponse.JQueryResponse" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="top_node", style="solid"];
"r2.models.promo.Target" -> "r2.models.promo.PromoCampaign" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_target", style="solid"];
"r2.models.query_cache.CachedQuery" -> "r2.lib.db.queries.CachedResults" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="new_query", style="solid"];
"r2.tests.unit.models.subreddit_test.TestPermissionSet" -> "r2.models.subreddit.SRMember" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_permission_class", style="solid"];
}
