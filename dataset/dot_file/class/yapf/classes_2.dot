digraph "classes_2" {
rankdir=BT
charset="utf-8"
"yapftests.pytree_utils_test.AnnotationsTest" [color="black", fontcolor="black", label=<{AnnotationsTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>testGetWhenNone()<br ALIGN="LEFT"/>testMultiple()<br ALIGN="LEFT"/>testSetAgain()<br ALIGN="LEFT"/>testSetOnNode()<br ALIGN="LEFT"/>testSetWhenNone()<br ALIGN="LEFT"/>testSubtype()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.yapf_test.BadInputTest" [color="black", fontcolor="black", label=<{BadInputTest|<br ALIGN="LEFT"/>|testBadSyntax()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.BasicReformatterTest" [color="black", fontcolor="black", label=<{BasicReformatterTest|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testBinaryOperators()<br ALIGN="LEFT"/>testBlankLinesAtEndOfFile()<br ALIGN="LEFT"/>testBlankLinesBeforeDecorators()<br ALIGN="LEFT"/>testBlankLinesBeforeFunctionsNotInColumnZero()<br ALIGN="LEFT"/>testClosingBracketIndent()<br ALIGN="LEFT"/>testClosingBracketsInlinedInCall()<br ALIGN="LEFT"/>testCommentBeforeFuncDef()<br ALIGN="LEFT"/>testCommentBetweenDecorators()<br ALIGN="LEFT"/>testComments()<br ALIGN="LEFT"/>testCommentsInDataLiteral()<br ALIGN="LEFT"/>testCommentsWithContinuationMarkers()<br ALIGN="LEFT"/>testComprehensionForAndIf()<br ALIGN="LEFT"/>testContinuationIndent()<br ALIGN="LEFT"/>testContinuationMarkers()<br ALIGN="LEFT"/>testContinuationSpaceRetention()<br ALIGN="LEFT"/>testDictSetGenerator()<br ALIGN="LEFT"/>testDictionaryMakerFormatting()<br ALIGN="LEFT"/>testDocstringAndMultilineComment()<br ALIGN="LEFT"/>testDocstrings()<br ALIGN="LEFT"/>testEmptyContainers()<br ALIGN="LEFT"/>testEndingComment()<br ALIGN="LEFT"/>testEndingWhitespaceAfterSimpleStatement()<br ALIGN="LEFT"/>testExcessCharacters()<br ALIGN="LEFT"/>testExcessLineCountWithDefaultKeywords()<br ALIGN="LEFT"/>testExpressionPenalties()<br ALIGN="LEFT"/>testFunctionCallArguments()<br ALIGN="LEFT"/>testFunctionCallContinuationLine()<br ALIGN="LEFT"/>testFunctionCallInDict()<br ALIGN="LEFT"/>testFunctionCallInNestedDict()<br ALIGN="LEFT"/>testI18n()<br ALIGN="LEFT"/>testI18nCommentsInDataLiteral()<br ALIGN="LEFT"/>testI18nNonFormatting()<br ALIGN="LEFT"/>testIfConditionalParens()<br ALIGN="LEFT"/>testIfExpressionWithFunctionCall()<br ALIGN="LEFT"/>testLineDepthOfSingleLineStatement()<br ALIGN="LEFT"/>testLineWrapInForExpression()<br ALIGN="LEFT"/>testListComprehension()<br ALIGN="LEFT"/>testMatchingParenSplittingMatching()<br ALIGN="LEFT"/>testMultilineComment()<br ALIGN="LEFT"/>testMultilineCommentReformatted()<br ALIGN="LEFT"/>testMultilineDocstringAndMultilineComment()<br ALIGN="LEFT"/>testMultilineShebang()<br ALIGN="LEFT"/>testMultilineString()<br ALIGN="LEFT"/>testMultipleUgliness()<br ALIGN="LEFT"/>testNoBreakOutsideOfBracket()<br ALIGN="LEFT"/>testNoKeywordArgumentBreakage()<br ALIGN="LEFT"/>testNoPenaltySplitting()<br ALIGN="LEFT"/>testNoQueueSeletionInMiddleOfLine()<br ALIGN="LEFT"/>testNoSpaceBetweenUnaryOpAndOpeningParen()<br ALIGN="LEFT"/>testNoSpacesAroundKeywordDefaultValues()<br ALIGN="LEFT"/>testNoSpacesBetweenOpeningBracketAndStartingOperator()<br ALIGN="LEFT"/>testNoSpacesBetweenSubscriptsAndCalls()<br ALIGN="LEFT"/>testNoSplittingAroundTermOperators()<br ALIGN="LEFT"/>testNoSplittingBeforeEndingSubscriptBracket()<br ALIGN="LEFT"/>testNoSplittingOnSingleArgument()<br ALIGN="LEFT"/>testNoSplittingWithinSubscriptList()<br ALIGN="LEFT"/>testOpeningAndClosingBrackets()<br ALIGN="LEFT"/>testOverColumnLimit()<br ALIGN="LEFT"/>testRelativeImportStatements()<br ALIGN="LEFT"/>testRelaxArraySubscriptAffinity()<br ALIGN="LEFT"/>testSimple()<br ALIGN="LEFT"/>testSimpleFunctions()<br ALIGN="LEFT"/>testSimpleFunctionsWithTrailingComments()<br ALIGN="LEFT"/>testSimpleMultilineCode()<br ALIGN="LEFT"/>testSimpleMultilineWithComments()<br ALIGN="LEFT"/>testSingleComment()<br ALIGN="LEFT"/>testSingleLineFunctions()<br ALIGN="LEFT"/>testSingleLineList()<br ALIGN="LEFT"/>testSpaceAfterNotOperator()<br ALIGN="LEFT"/>testSplitListWithComment()<br ALIGN="LEFT"/>testSplitListWithInterspersedComments()<br ALIGN="LEFT"/>testSplitListWithTerminatingComma()<br ALIGN="LEFT"/>testSplitStringsIfSurroundedByParens()<br ALIGN="LEFT"/>testSplittingArraysSensibly()<br ALIGN="LEFT"/>testTrailerOnSingleLine()<br ALIGN="LEFT"/>testTrailingCommaAndBracket()<br ALIGN="LEFT"/>testTupleCommaBeforeLastParen()<br ALIGN="LEFT"/>testUnaryNotOperator()<br ALIGN="LEFT"/>testUnaryOpInDictionaryValue()<br ALIGN="LEFT"/>testUnbreakableNot()<br ALIGN="LEFT"/>testUnformattedAfterMultilineString()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.blank_line_calculator_test.BlankLineCalculatorTest" [color="black", fontcolor="black", label=<{BlankLineCalculatorTest|<br ALIGN="LEFT"/>|testCodeAfterFunctionsAndClasses()<br ALIGN="LEFT"/>testComemntsBeforeDecorator()<br ALIGN="LEFT"/>testCommentBeforeMethod()<br ALIGN="LEFT"/>testCommentSpacing()<br ALIGN="LEFT"/>testCommentsBeforeClassDefs()<br ALIGN="LEFT"/>testComplexDecorators()<br ALIGN="LEFT"/>testDecorators()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.file_resources_test.BufferedByteStream" [color="black", fontcolor="black", label=<{BufferedByteStream|buffer<br ALIGN="LEFT"/>stream : BytesIO<br ALIGN="LEFT"/>|getvalue()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.BuganizerFixes" [color="black", fontcolor="black", label=<{BuganizerFixes|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testB13900309()<br ALIGN="LEFT"/>testB14406499()<br ALIGN="LEFT"/>testB14468247()<br ALIGN="LEFT"/>testB15438132()<br ALIGN="LEFT"/>testB15542157()<br ALIGN="LEFT"/>testB15597568()<br ALIGN="LEFT"/>testB15697268()<br ALIGN="LEFT"/>testB15884241()<br ALIGN="LEFT"/>testB16572361()<br ALIGN="LEFT"/>testB16783631()<br ALIGN="LEFT"/>testB17011869()<br ALIGN="LEFT"/>testB17133019()<br ALIGN="LEFT"/>testB17489866()<br ALIGN="LEFT"/>testB17534869()<br ALIGN="LEFT"/>testB18255697()<br ALIGN="LEFT"/>testB18256666()<br ALIGN="LEFT"/>testB18256826()<br ALIGN="LEFT"/>testB18257115()<br ALIGN="LEFT"/>testB19073499()<br ALIGN="LEFT"/>testB19194420()<br ALIGN="LEFT"/>testB19287512()<br ALIGN="LEFT"/>testB19353268()<br ALIGN="LEFT"/>testB19372573()<br ALIGN="LEFT"/>testB19377034()<br ALIGN="LEFT"/>testB19547210()<br ALIGN="LEFT"/>testB19626808()<br ALIGN="LEFT"/>testB20016122()<br ALIGN="LEFT"/>testB20073838()<br ALIGN="LEFT"/>testB20127686()<br ALIGN="LEFT"/>testB20128830()<br ALIGN="LEFT"/>testB20551180()<br ALIGN="LEFT"/>testB20559654()<br ALIGN="LEFT"/>testB20562732()<br ALIGN="LEFT"/>testB20605036()<br ALIGN="LEFT"/>testB20813997()<br ALIGN="LEFT"/>testB20849933()<br ALIGN="LEFT"/>testB22527411()<br ALIGN="LEFT"/>testB23445244()<br ALIGN="LEFT"/>testB23935890()<br ALIGN="LEFT"/>testB23943842()<br ALIGN="LEFT"/>testB23944849()<br ALIGN="LEFT"/>testB25131481()<br ALIGN="LEFT"/>testB25136704()<br ALIGN="LEFT"/>testB25136820()<br ALIGN="LEFT"/>testB25157123()<br ALIGN="LEFT"/>testB25165602()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.yapf_test.CommandLineTest" [color="black", fontcolor="black", label=<{CommandLineTest|<br ALIGN="LEFT"/>|assertYapfReformats(unformatted, expected, extra_options)<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>testCommentFollowingMultilineString()<br ALIGN="LEFT"/>testDedentClosingBracket()<br ALIGN="LEFT"/>testDisableButAdjustIndentations()<br ALIGN="LEFT"/>testDisableFormattingInDataLiteral()<br ALIGN="LEFT"/>testDisableWhenSpecifyingLines()<br ALIGN="LEFT"/>testDisableWholeDataStructure()<br ALIGN="LEFT"/>testDisabledMultilineStrings()<br ALIGN="LEFT"/>testEncodingVerification()<br ALIGN="LEFT"/>testFormatLinesSpecifiedInMiddleOfExpression()<br ALIGN="LEFT"/>testInPlaceReformatting()<br ALIGN="LEFT"/>testInPlaceReformattingBlank()<br ALIGN="LEFT"/>testInPlaceReformattingEmpty()<br ALIGN="LEFT"/>testREtainingVerticalWhitespace()<br ALIGN="LEFT"/>testReadFromStdin()<br ALIGN="LEFT"/>testReadFromStdinWithEscapedStrings()<br ALIGN="LEFT"/>testReadSingleLineCodeFromStdin()<br ALIGN="LEFT"/>testReformattingSkippingLines()<br ALIGN="LEFT"/>testReformattingSkippingSingleLine()<br ALIGN="LEFT"/>testReformattingSkippingToEndOfFile()<br ALIGN="LEFT"/>testReformattingSpecificLines()<br ALIGN="LEFT"/>testRetainVerticalFormattingBetweenDisabledAndEnabledLines()<br ALIGN="LEFT"/>testRetainingHorizontalWhitespace()<br ALIGN="LEFT"/>testRetainingSemicolonsWhenSpecifyingLines()<br ALIGN="LEFT"/>testSetChromiumStyle()<br ALIGN="LEFT"/>testSetCustomStyleBasedOnChromium()<br ALIGN="LEFT"/>testUnicodeEncodingPipedToFile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.comment_splicer_test.CommentSplicerTest" [color="black", fontcolor="black", label=<{CommentSplicerTest|<br ALIGN="LEFT"/>|testCommentBeforeDedent()<br ALIGN="LEFT"/>testCommentBeforeDedentTwoLevel()<br ALIGN="LEFT"/>testCommentBeforeDedentTwoLevelImproperlyIndented()<br ALIGN="LEFT"/>testCommentIsFirstChildInCompound()<br ALIGN="LEFT"/>testCommentIsLastChildInCompound()<br ALIGN="LEFT"/>testCommentsInClass()<br ALIGN="LEFT"/>testCommentsOnDedents()<br ALIGN="LEFT"/>testExprComments()<br ALIGN="LEFT"/>testInlineAfterSeparateLine()<br ALIGN="LEFT"/>testMultipleBlockComments()<br ALIGN="LEFT"/>testMultipleCommentsInOneExpr()<br ALIGN="LEFT"/>testSeparateLineAfterInline()<br ALIGN="LEFT"/>testSimpleInline()<br ALIGN="LEFT"/>testSimpleSeparateLine()<br ALIGN="LEFT"/>testTwoLineComment()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.yapf_test.FormatCodeTest" [color="black", fontcolor="black", label=<{FormatCodeTest|<br ALIGN="LEFT"/>|testNoEndingNewline()<br ALIGN="LEFT"/>testSimple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.format_decision_state_test.FormatDecisionStateTest" [color="black", fontcolor="black", label=<{FormatDecisionStateTest|<br ALIGN="LEFT"/>|testSimpleFunctionDefWithNoSplitting()<br ALIGN="LEFT"/>testSimpleFunctionDefWithSplitting()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.yapf_test.FormatFileTest" [color="black", fontcolor="black", label=<{FormatFileTest|test_tmpdir<br ALIGN="LEFT"/>|assertCodeEqual(expected_code, code)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>testCommentsUnformatted()<br ALIGN="LEFT"/>testDisableAndReenableLinesPattern()<br ALIGN="LEFT"/>testDisableLinesPattern()<br ALIGN="LEFT"/>testDisablePartOfMultilineComment()<br ALIGN="LEFT"/>testDisabledHorizontalFormattingOnNewLine()<br ALIGN="LEFT"/>testDisabledSemiColonSeparatedStatements()<br ALIGN="LEFT"/>testFormatFile()<br ALIGN="LEFT"/>testFormatFileDiff()<br ALIGN="LEFT"/>testFormatFileInPlace()<br ALIGN="LEFT"/>testFormatFileLinesSelection()<br ALIGN="LEFT"/>testNoFile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.format_token_test.FormatTokenTest" [color="black", fontcolor="black", label=<{FormatTokenTest|<br ALIGN="LEFT"/>|testSimple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.file_resources_test.GetCommandLineFilesTest" [color="black", fontcolor="black", label=<{GetCommandLineFilesTest|test_tmpdir<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_find_files_not_dirs()<br ALIGN="LEFT"/>test_nonrecursive_find_in_dir()<br ALIGN="LEFT"/>test_recursive_find_in_dir()<br ALIGN="LEFT"/>test_recursive_find_in_dir_with_exclude()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.file_resources_test.GetDefaultStyleForDirTest" [color="black", fontcolor="black", label=<{GetDefaultStyleForDirTest|test_tmpdir<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_no_local_style()<br ALIGN="LEFT"/>test_with_local_style()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_utils_test.InsertNodesBeforeAfterTest" [color="black", fontcolor="black", label=<{InsertNodesBeforeAfterTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>testInsertNodesAfter()<br ALIGN="LEFT"/>testInsertNodesAfterLastChild()<br ALIGN="LEFT"/>testInsertNodesBefore()<br ALIGN="LEFT"/>testInsertNodesBeforeFirstChild()<br ALIGN="LEFT"/>testInsertNodesWhichHasParent()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.file_resources_test.IsPythonFileTest" [color="black", fontcolor="black", label=<{IsPythonFileTest|test_tmpdir<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_empty_without_py_extension()<br ALIGN="LEFT"/>test_python_shebang()<br ALIGN="LEFT"/>test_with_invalid_encoding()<br ALIGN="LEFT"/>test_with_latin_encoding()<br ALIGN="LEFT"/>test_with_py_extension()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.line_joiner_test.LineJoinerTest" [color="black", fontcolor="black", label=<{LineJoinerTest|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testOverColumnLimit()<br ALIGN="LEFT"/>testSimpleMultipleLineComplexStatement()<br ALIGN="LEFT"/>testSimpleMultipleLineStatement()<br ALIGN="LEFT"/>testSimpleMultipleLineStatementWithComment()<br ALIGN="LEFT"/>testSimpleMultipleLineStatementWithLargeIndent()<br ALIGN="LEFT"/>testSimpleSingleLineStatement()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.main_test.MainTest" [color="black", fontcolor="black", label=<{MainTest|<br ALIGN="LEFT"/>|testEchoBadInput()<br ALIGN="LEFT"/>testEchoInput()<br ALIGN="LEFT"/>testEchoInputWithStyle()<br ALIGN="LEFT"/>testHelp()<br ALIGN="LEFT"/>testNoPythonFilesMatched()<br ALIGN="LEFT"/>testVersion()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_unwrapper_test.MatchBracketsTest" [color="black", fontcolor="black", label=<{MatchBracketsTest|<br ALIGN="LEFT"/>|testClassDef()<br ALIGN="LEFT"/>testDecorator()<br ALIGN="LEFT"/>testFunctionDef()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_utils_test.NodeNameTest" [color="black", fontcolor="black", label=<{NodeNameTest|<br ALIGN="LEFT"/>|testNodeNameForLeaf()<br ALIGN="LEFT"/>testNodeNameForNode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_utils_test.ParseCodeToTreeTest" [color="black", fontcolor="black", label=<{ParseCodeToTreeTest|<br ALIGN="LEFT"/>|testParseCodeToTree()<br ALIGN="LEFT"/>testPrintFunctionToTree()<br ALIGN="LEFT"/>testPrintStatementToTree()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.style_test.PredefinedStylesByNameTest" [color="black", fontcolor="black", label=<{PredefinedStylesByNameTest|<br ALIGN="LEFT"/>|testDefault()<br ALIGN="LEFT"/>testFacebookByName()<br ALIGN="LEFT"/>testGoogleByName()<br ALIGN="LEFT"/>testPEP8ByName()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_unwrapper_test.PytreeUnwrapperTest" [color="black", fontcolor="black", label=<{PytreeUnwrapperTest|<br ALIGN="LEFT"/>|testFileScopeWithInlineComment()<br ALIGN="LEFT"/>testIfElifElse()<br ALIGN="LEFT"/>testIfWithCommentsInside()<br ALIGN="LEFT"/>testMultipleComments()<br ALIGN="LEFT"/>testNestedCompoundTwoLevel()<br ALIGN="LEFT"/>testSimpleClassDef()<br ALIGN="LEFT"/>testSimpleFileScope()<br ALIGN="LEFT"/>testSimpleFuncdef()<br ALIGN="LEFT"/>testSimpleIf()<br ALIGN="LEFT"/>testSimpleIfWithComments()<br ALIGN="LEFT"/>testSimpleMultilineStatement()<br ALIGN="LEFT"/>testSimpleTry()<br ALIGN="LEFT"/>testSimpleWhile()<br ALIGN="LEFT"/>testSingleLineStmtInFunc()<br ALIGN="LEFT"/>testSplitListWithComment()<br ALIGN="LEFT"/>testTwoFuncDefs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_visitor_test.PytreeVisitorTest" [color="black", fontcolor="black", label=<{PytreeVisitorTest|<br ALIGN="LEFT"/>|testCollectAllNodeNamesNestedCode()<br ALIGN="LEFT"/>testCollectAllNodeNamesSimpleCode()<br ALIGN="LEFT"/>testDumpPyTree()<br ALIGN="LEFT"/>testDumper()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.ReformatterTest" [color="black", fontcolor="black", label=<{ReformatterTest|<br ALIGN="LEFT"/>|assertCodeEqual(expected_code, code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.main_test.RunMainTest" [color="black", fontcolor="black", label=<{RunMainTest|<br ALIGN="LEFT"/>|testShouldHandleYapfError()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.split_penalty_test.SplitPenaltyTest" [color="black", fontcolor="black", label=<{SplitPenaltyTest|<br ALIGN="LEFT"/>|testFuncCalls()<br ALIGN="LEFT"/>testStronglyConnected()<br ALIGN="LEFT"/>testUnbreakable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.style_test.StyleFromCommandLine" [color="black", fontcolor="black", label=<{StyleFromCommandLine|<br ALIGN="LEFT"/>|testDefaultBasedOnStyle()<br ALIGN="LEFT"/>testDefaultBasedOnStyleBadString()<br ALIGN="LEFT"/>testDefaultBasedOnStyleNotStrict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.style_test.StyleFromFileTest" [color="black", fontcolor="black", label=<{StyleFromFileTest|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>testBoolOptionValue()<br ALIGN="LEFT"/>testDefaultBasedOnChromiumStyle()<br ALIGN="LEFT"/>testDefaultBasedOnFacebookStyle()<br ALIGN="LEFT"/>testDefaultBasedOnGoogleStyle()<br ALIGN="LEFT"/>testDefaultBasedOnPEP8Style()<br ALIGN="LEFT"/>testDefaultBasedOnStyle()<br ALIGN="LEFT"/>testErrorNoStyleFile()<br ALIGN="LEFT"/>testErrorNoStyleSection()<br ALIGN="LEFT"/>testErrorUnknownStyleOption()<br ALIGN="LEFT"/>testStringListOptionValue()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.style_test.StyleHelp" [color="black", fontcolor="black", label=<{StyleHelp|<br ALIGN="LEFT"/>|testHelpKeys()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.subtype_assigner_test.SubtypeAssignerTest" [color="black", fontcolor="black", label=<{SubtypeAssignerTest|<br ALIGN="LEFT"/>|testBitwiseOperators()<br ALIGN="LEFT"/>testFuncCallWithDefaultAssign()<br ALIGN="LEFT"/>testFuncDefDefaultAssign()<br ALIGN="LEFT"/>testFunctionCallWithStarExpression()<br ALIGN="LEFT"/>testSetComprehension()<br ALIGN="LEFT"/>testSubscriptColon()<br ALIGN="LEFT"/>testUnaryNotOperator()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.TestVerifyNoVerify" [color="black", fontcolor="black", label=<{TestVerifyNoVerify|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testContinuationLineShouldBeDistinguished()<br ALIGN="LEFT"/>testNoVerify()<br ALIGN="LEFT"/>testVerifyException()<br ALIGN="LEFT"/>testVerifyFutureImport()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.TestingNotInParameters" [color="black", fontcolor="black", label=<{TestingNotInParameters|<br ALIGN="LEFT"/>|testNotInParams()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.TestsForFBStyle" [color="black", fontcolor="black", label=<{TestsForFBStyle|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testBreakAfterOpeningBracketIfContentsTooBig()<br ALIGN="LEFT"/>testBrokenIdempotency()<br ALIGN="LEFT"/>testDedentClosingBracket()<br ALIGN="LEFT"/>testDedentClosingBracketWithComments()<br ALIGN="LEFT"/>testDedentImportAsNames()<br ALIGN="LEFT"/>testDedentTestListGexp()<br ALIGN="LEFT"/>testIfExprHangingIndent()<br ALIGN="LEFT"/>testNoNeedForLineBreaks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.TestsForPEP8Style" [color="black", fontcolor="black", label=<{TestsForPEP8Style|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testAlignClosingBracketWithVisualIndentation()<br ALIGN="LEFT"/>testB20016122()<br ALIGN="LEFT"/>testContinuedNonOudentedLine()<br ALIGN="LEFT"/>testHangingIndentCollision()<br ALIGN="LEFT"/>testIndent4()<br ALIGN="LEFT"/>testIndentSizeChanging()<br ALIGN="LEFT"/>testNoBlankBetweenClassAndDef()<br ALIGN="LEFT"/>testSingleLineIfStatements()<br ALIGN="LEFT"/>testSingleWhiteBeforeTrailingComment()<br ALIGN="LEFT"/>testSpaceBetweenEndingCommandAndClosingBracket()<br ALIGN="LEFT"/>testSplittingSemicolonStatements()<br ALIGN="LEFT"/>testWrappingPercentExpressions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.TestsForPython3Code" [color="black", fontcolor="black", label=<{TestsForPython3Code|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>testAnnotations()<br ALIGN="LEFT"/>testExecAsNonKeyword()<br ALIGN="LEFT"/>testKeywordOnlyArgSpecifier()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.unwrapped_line_test.UnwrappedLineBasicTest" [color="black", fontcolor="black", label=<{UnwrappedLineBasicTest|<br ALIGN="LEFT"/>|testAppendNode()<br ALIGN="LEFT"/>testAppendToken()<br ALIGN="LEFT"/>testAsCode()<br ALIGN="LEFT"/>testConstruction()<br ALIGN="LEFT"/>testFirstLast()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.unwrapped_line_test.UnwrappedLineFormattingInformationTest" [color="black", fontcolor="black", label=<{UnwrappedLineFormattingInformationTest|<br ALIGN="LEFT"/>|testFuncDef()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.style_test.UtilsTest" [color="black", fontcolor="black", label=<{UtilsTest|<br ALIGN="LEFT"/>|testBoolConverter()<br ALIGN="LEFT"/>testStringListConverter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.file_resources_test.WriteReformattedCodeTest" [color="black", fontcolor="black", label=<{WriteReformattedCodeTest|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_write_encoded_to_stdout()<br ALIGN="LEFT"/>test_write_to_file()<br ALIGN="LEFT"/>test_write_to_stdout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.pytree_visitor_test._NodeNameCollector" [color="black", fontcolor="black", label=<{_NodeNameCollector|all_node_names : list<br ALIGN="LEFT"/>name_node_values : list<br ALIGN="LEFT"/>|DefaultLeafVisit(leaf)<br ALIGN="LEFT"/>DefaultNodeVisit(node)<br ALIGN="LEFT"/>Visit_NAME(leaf)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapftests.reformatter_test.BasicReformatterTest" -> "yapftests.reformatter_test.ReformatterTest" [arrowhead="empty", arrowtail="none"];
"yapftests.reformatter_test.BuganizerFixes" -> "yapftests.reformatter_test.ReformatterTest" [arrowhead="empty", arrowtail="none"];
"yapftests.reformatter_test.TestVerifyNoVerify" -> "yapftests.reformatter_test.ReformatterTest" [arrowhead="empty", arrowtail="none"];
"yapftests.reformatter_test.TestsForFBStyle" -> "yapftests.reformatter_test.ReformatterTest" [arrowhead="empty", arrowtail="none"];
"yapftests.reformatter_test.TestsForPEP8Style" -> "yapftests.reformatter_test.ReformatterTest" [arrowhead="empty", arrowtail="none"];
"yapftests.reformatter_test.TestsForPython3Code" -> "yapftests.reformatter_test.ReformatterTest" [arrowhead="empty", arrowtail="none"];
}
