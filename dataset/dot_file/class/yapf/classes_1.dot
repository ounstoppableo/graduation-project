digraph "classes_1" {
rankdir=BT
charset="utf-8"
"yapf.yapflib.pytree_utils.Annotation" [color="black", fontcolor="black", label=<{Annotation|CHILD_INDENT : str<br ALIGN="LEFT"/>MUST_SPLIT : str<br ALIGN="LEFT"/>NEWLINES : str<br ALIGN="LEFT"/>SPLIT_PENALTY : str<br ALIGN="LEFT"/>SUBTYPE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.py3compat.ConfigParser" [color="black", fontcolor="black", label=<{ConfigParser|<br ALIGN="LEFT"/>|read_file(fp, source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.format_decision_state.FormatDecisionState" [color="black", fontcolor="black", label=<{FormatDecisionState|column : int<br ALIGN="LEFT"/>first_indent<br ALIGN="LEFT"/>ignore_stack_for_comparison : bool<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>lowest_level_on_line : int<br ALIGN="LEFT"/>newline : bool<br ALIGN="LEFT"/>next_token<br ALIGN="LEFT"/>paren_level : int<br ALIGN="LEFT"/>previous : NoneType<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>start_of_line_level : int<br ALIGN="LEFT"/>|AddTokenToState(newline, dry_run, must_split)<br ALIGN="LEFT"/>CanSplit()<br ALIGN="LEFT"/>Clone()<br ALIGN="LEFT"/>MustSplit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.format_token.FormatToken" [color="black", fontcolor="black", label=<{FormatToken|can_break_before : bool<br ALIGN="LEFT"/>column<br ALIGN="LEFT"/>is_binary_op<br ALIGN="LEFT"/>is_comment<br ALIGN="LEFT"/>is_continuation<br ALIGN="LEFT"/>is_docstring<br ALIGN="LEFT"/>is_keyword<br ALIGN="LEFT"/>is_multiline_string<br ALIGN="LEFT"/>is_name<br ALIGN="LEFT"/>is_number<br ALIGN="LEFT"/>is_pseudo_paren<br ALIGN="LEFT"/>is_string<br ALIGN="LEFT"/>lineno<br ALIGN="LEFT"/>matching_bracket : NoneType<br ALIGN="LEFT"/>must_break_before : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>newlines<br ALIGN="LEFT"/>next_token : NoneType<br ALIGN="LEFT"/>node<br ALIGN="LEFT"/>node_split_penalty<br ALIGN="LEFT"/>previous_token : NoneType<br ALIGN="LEFT"/>spaces_required_before : int<br ALIGN="LEFT"/>split_penalty : int<br ALIGN="LEFT"/>subtypes<br ALIGN="LEFT"/>total_length : int<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>whitespace_prefix : str<br ALIGN="LEFT"/>|AddWhitespacePrefix(newlines_before, spaces, indent_level)<br ALIGN="LEFT"/>AdjustNewlinesBefore(newlines_before)<br ALIGN="LEFT"/>ClosesScope()<br ALIGN="LEFT"/>GetPytreeNode()<br ALIGN="LEFT"/>OpensScope()<br ALIGN="LEFT"/>RetainHorizontalSpacing(first_column, depth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.verifier.InternalError" [color="black", fontcolor="red", label=<{InternalError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.pytree_visitor.PyTreeDumper" [color="black", fontcolor="black", label=<{PyTreeDumper|<br ALIGN="LEFT"/>|DefaultLeafVisit(leaf)<br ALIGN="LEFT"/>DefaultNodeVisit(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.pytree_unwrapper.PyTreeUnwrapper" [color="black", fontcolor="black", label=<{PyTreeUnwrapper|<br ALIGN="LEFT"/>|DefaultLeafVisit(leaf)<br ALIGN="LEFT"/>GetUnwrappedLines()<br ALIGN="LEFT"/>Visit_arglist(node)<br ALIGN="LEFT"/>Visit_classdef(node)<br ALIGN="LEFT"/>Visit_decorated(node)<br ALIGN="LEFT"/>Visit_decorators(node)<br ALIGN="LEFT"/>Visit_dictsetmaker(node)<br ALIGN="LEFT"/>Visit_except_clause(node)<br ALIGN="LEFT"/>Visit_for_stmt(node)<br ALIGN="LEFT"/>Visit_funcdef(node)<br ALIGN="LEFT"/>Visit_if_stmt(node)<br ALIGN="LEFT"/>Visit_import_as_names(node)<br ALIGN="LEFT"/>Visit_listmaker(node)<br ALIGN="LEFT"/>Visit_simple_stmt(node)<br ALIGN="LEFT"/>Visit_suite(node)<br ALIGN="LEFT"/>Visit_testlist_gexp(node)<br ALIGN="LEFT"/>Visit_try_stmt(node)<br ALIGN="LEFT"/>Visit_typedargslist(node)<br ALIGN="LEFT"/>Visit_while_stmt(node)<br ALIGN="LEFT"/>Visit_with_stmt(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.pytree_visitor.PyTreeVisitor" [color="black", fontcolor="black", label=<{PyTreeVisitor|<br ALIGN="LEFT"/>|<I>DefaultLeafVisit</I>(leaf)<br ALIGN="LEFT"/>DefaultNodeVisit(node)<br ALIGN="LEFT"/>Visit(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.style.StyleConfigError" [color="black", fontcolor="red", label=<{StyleConfigError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.format_token.Subtype" [color="black", fontcolor="black", label=<{Subtype|ASSIGN_OPERATOR : int<br ALIGN="LEFT"/>BINARY_OPERATOR : int<br ALIGN="LEFT"/>COMP_FOR : int<br ALIGN="LEFT"/>COMP_IF : int<br ALIGN="LEFT"/>DEFAULT_OR_NAMED_ASSIGN : int<br ALIGN="LEFT"/>DEFAULT_OR_NAMED_ASSIGN_ARG_LIST : int<br ALIGN="LEFT"/>DICTIONARY_KEY : int<br ALIGN="LEFT"/>DICTIONARY_VALUE : int<br ALIGN="LEFT"/>DICT_SET_GENERATOR : int<br ALIGN="LEFT"/>KWARGS_STAR_STAR : int<br ALIGN="LEFT"/>NONE : int<br ALIGN="LEFT"/>SUBSCRIPT_COLON : int<br ALIGN="LEFT"/>UNARY_OPERATOR : int<br ALIGN="LEFT"/>VARARGS_STAR : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.unwrapped_line.UnwrappedLine" [color="black", fontcolor="black", label=<{UnwrappedLine|depth<br ALIGN="LEFT"/>disable : bool<br ALIGN="LEFT"/>first<br ALIGN="LEFT"/>is_comment<br ALIGN="LEFT"/>last<br ALIGN="LEFT"/>lineno<br ALIGN="LEFT"/>tokens<br ALIGN="LEFT"/>|AppendNode(node)<br ALIGN="LEFT"/>AppendToken(token)<br ALIGN="LEFT"/>AsCode(indent_per_depth)<br ALIGN="LEFT"/>CalculateFormattingInformation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.errors.YapfError" [color="black", fontcolor="red", label=<{YapfError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.blank_line_calculator._BlankLineCalculator" [color="black", fontcolor="black", label=<{_BlankLineCalculator|class_level : int<br ALIGN="LEFT"/>function_level : int<br ALIGN="LEFT"/>last_comment_lineno : int<br ALIGN="LEFT"/>last_was_class_or_function : bool<br ALIGN="LEFT"/>last_was_decorator : bool<br ALIGN="LEFT"/>|DefaultNodeVisit(node)<br ALIGN="LEFT"/>Visit_classdef(node)<br ALIGN="LEFT"/>Visit_decorator(node)<br ALIGN="LEFT"/>Visit_funcdef(node)<br ALIGN="LEFT"/>Visit_simple_stmt(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.format_decision_state._ParenState" [color="black", fontcolor="black", label=<{_ParenState|break_before_paremeter : bool<br ALIGN="LEFT"/>closing_scope_indent : int<br ALIGN="LEFT"/>indent<br ALIGN="LEFT"/>last_space : int<br ALIGN="LEFT"/>num_line_splits : int<br ALIGN="LEFT"/>split_before_closing_bracket : bool<br ALIGN="LEFT"/>split_before_parameter : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.reformatter._StateNode" [color="black", fontcolor="black", label=<{_StateNode|newline<br ALIGN="LEFT"/>previous<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"yapf.yapflib.subtype_assigner._SubtypeAssigner" [color="black", fontcolor="black", label=<{_SubtypeAssigner|<br ALIGN="LEFT"/>|Visit_and_expr(node)<br ALIGN="LEFT"/>Visit_and_test(node)<br ALIGN="LEFT"/>Visit_arglist(node)<br ALIGN="LEFT"/>Visit_argument(node)<br ALIGN="LEFT"/>Visit_arith_expr(node)<br ALIGN="LEFT"/>Visit_comp_for(node)<br ALIGN="LEFT"/>Visit_comp_if(node)<br ALIGN="LEFT"/>Visit_comparison(node)<br ALIGN="LEFT"/>Visit_dictsetmaker(node)<br ALIGN="LEFT"/>Visit_expr(node)<br ALIGN="LEFT"/>Visit_expr_stmt(node)<br ALIGN="LEFT"/>Visit_factor(node)<br ALIGN="LEFT"/>Visit_not_test(node)<br ALIGN="LEFT"/>Visit_or_test(node)<br ALIGN="LEFT"/>Visit_power(node)<br ALIGN="LEFT"/>Visit_shift_expr(node)<br ALIGN="LEFT"/>Visit_sliceop(node)<br ALIGN="LEFT"/>Visit_star_expr(node)<br ALIGN="LEFT"/>Visit_subscript(node)<br ALIGN="LEFT"/>Visit_term(node)<br ALIGN="LEFT"/>Visit_typedargslist(node)<br ALIGN="LEFT"/>Visit_varargslist(node)<br ALIGN="LEFT"/>Visit_xor_expr(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.split_penalty._TreePenaltyAssigner" [color="black", fontcolor="black", label=<{_TreePenaltyAssigner|<br ALIGN="LEFT"/>|Visit_argument(node)<br ALIGN="LEFT"/>Visit_arith_expr(node)<br ALIGN="LEFT"/>Visit_atom(node)<br ALIGN="LEFT"/>Visit_classdef(node)<br ALIGN="LEFT"/>Visit_comp_for(node)<br ALIGN="LEFT"/>Visit_comp_if(node)<br ALIGN="LEFT"/>Visit_comparison(node)<br ALIGN="LEFT"/>Visit_dictsetmaker(node)<br ALIGN="LEFT"/>Visit_dotted_name(node)<br ALIGN="LEFT"/>Visit_funcdef(node)<br ALIGN="LEFT"/>Visit_import_as_names(node)<br ALIGN="LEFT"/>Visit_lambdef(node)<br ALIGN="LEFT"/>Visit_not_test(node)<br ALIGN="LEFT"/>Visit_parameters(node)<br ALIGN="LEFT"/>Visit_power(node)<br ALIGN="LEFT"/>Visit_subscript(node)<br ALIGN="LEFT"/>Visit_trailer(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"yapf.yapflib.blank_line_calculator._BlankLineCalculator" -> "yapf.yapflib.pytree_visitor.PyTreeVisitor" [arrowhead="empty", arrowtail="none"];
"yapf.yapflib.pytree_unwrapper.PyTreeUnwrapper" -> "yapf.yapflib.pytree_visitor.PyTreeVisitor" [arrowhead="empty", arrowtail="none"];
"yapf.yapflib.pytree_visitor.PyTreeDumper" -> "yapf.yapflib.pytree_visitor.PyTreeVisitor" [arrowhead="empty", arrowtail="none"];
"yapf.yapflib.split_penalty._TreePenaltyAssigner" -> "yapf.yapflib.pytree_visitor.PyTreeVisitor" [arrowhead="empty", arrowtail="none"];
"yapf.yapflib.style.StyleConfigError" -> "yapf.yapflib.errors.YapfError" [arrowhead="empty", arrowtail="none"];
"yapf.yapflib.subtype_assigner._SubtypeAssigner" -> "yapf.yapflib.pytree_visitor.PyTreeVisitor" [arrowhead="empty", arrowtail="none"];
"yapf.yapflib.unwrapped_line.UnwrappedLine" -> "yapf.yapflib.pytree_unwrapper.PyTreeUnwrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cur_unwrapped_line", style="solid"];
"yapf.yapflib.unwrapped_line.UnwrappedLine" -> "yapf.yapflib.pytree_unwrapper.PyTreeUnwrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cur_unwrapped_line", style="solid"];
}
