digraph "classes_1" {
rankdir=BT
charset="utf-8"
"mailpile.commands.Abort" [color="black", fontcolor="black", label=<{Abort|ABOUT : str<br ALIGN="LEFT"/>COMMAND_SECURITY : list<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.AddContact" [color="black", fontcolor="black", label=<{AddContact|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.groups.AddGroup" [color="black", fontcolor="black", label=<{AddGroup|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.AddProfile" [color="black", fontcolor="black", label=<{AddProfile|HTTP_POST_VARS<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.tags.AddTag" [color="black", fontcolor="black", label=<{AddTag|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>OPTIONAL_VARS : list<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.AddVCard" [color="black", fontcolor="black", label=<{AddVCard|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>IGNORED_EMAILS_AND_DOMAINS : tuple<br ALIGN="LEFT"/>KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(recipients, quietly, internal)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailutils.AddressHeaderParser" [color="black", fontcolor="black", label=<{AddressHeaderParser|DEFAULT_CHARSET_ORDER : tuple<br ALIGN="LEFT"/>RE_ESCAPES<br ALIGN="LEFT"/>RE_IGNORED_GROUP_TOKENS<br ALIGN="LEFT"/>RE_MAYBE_EMAIL<br ALIGN="LEFT"/>RE_MUNGE_STRIP<br ALIGN="LEFT"/>RE_MUNGE_TOKENSPACERS : tuple<br ALIGN="LEFT"/>RE_MUNGE_TOKENSTRIPPERS : tuple<br ALIGN="LEFT"/>RE_QUOTED<br ALIGN="LEFT"/>RE_SHOULD_ESCAPE<br ALIGN="LEFT"/>RE_SHOULD_QUOTE<br ALIGN="LEFT"/>RE_TOKENIZER<br ALIGN="LEFT"/>TEST_EXPECT_NORMALIZED_ADDRESSES : list<br ALIGN="LEFT"/>TEST_HEADER_DATA : str<br ALIGN="LEFT"/>TEST_UNICODE_DATA : str<br ALIGN="LEFT"/>TEST_UNICODE_NAME : str<br ALIGN="LEFT"/>TXT_RE_QUOTE : str<br ALIGN="LEFT"/>TXT_RE_QUOTE_NG : str<br ALIGN="LEFT"/>charset_order : list, tuple<br ALIGN="LEFT"/>|escape(strng)<br ALIGN="LEFT"/>normalized()<br ALIGN="LEFT"/>normalized_addresses(addresses, quote, with_keys, force_name)<br ALIGN="LEFT"/>parse(data)<br ALIGN="LEFT"/>quote(strng)<br ALIGN="LEFT"/>unescape(string)<br ALIGN="LEFT"/>unquote(string, charset_order)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.AddressInfo" [color="black", fontcolor="black", label=<{AddressInfo|address<br ALIGN="LEFT"/>crypto_policy<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>fn<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>protocol<br ALIGN="LEFT"/>rank<br ALIGN="LEFT"/>|merge_vcard(vcard)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.AddressSearch" [color="black", fontcolor="black", label=<{AddressSearch|HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.Attach" [color="black", fontcolor="black", label=<{Attach|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>WITH_CONTEXT : tuple<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|command(emails)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.auth.Authenticate" [color="black", fontcolor="black", label=<{Authenticate|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>IS_INTERACTIVE : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|RedirectBack(url, data)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag.AutoTag" [color="black", fontcolor="black", label=<{AutoTag|ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag.AutoTagCommand" [color="black", fontcolor="black", label=<{AutoTagCommand|command<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.autotag.AutoTagger" [color="black", fontcolor="black", label=<{AutoTagger|tagger<br ALIGN="LEFT"/>trained : bool<br ALIGN="LEFT"/>trainer<br ALIGN="LEFT"/>|learn()<br ALIGN="LEFT"/>reset(at_config)<br ALIGN="LEFT"/>should_tag()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.BadDataError" [color="black", fontcolor="red", label=<{BadDataError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mail_source.imap._Mocks.BadLogin" [color="black", fontcolor="black", label=<{BadLogin|RESULTS : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.urlmap.BadMethodError" [color="black", fontcolor="red", label=<{BadMethodError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mail_source.BaseMailSource" [color="black", fontcolor="black", label=<{BaseMailSource|BORING_FOLDER_RE<br ALIGN="LEFT"/>DEFAULT_JITTER : int<br ALIGN="LEFT"/>INTERNAL_ERROR_SLEEP : int<br ALIGN="LEFT"/>MAX_MAILBOXES : int<br ALIGN="LEFT"/>MAX_PATHS : int<br ALIGN="LEFT"/>RESCAN_BATCH_SIZE : int<br ALIGN="LEFT"/>SAVE_STATE_INTERVAL : int<br ALIGN="LEFT"/>TAGNAME_STRIP_RE<br ALIGN="LEFT"/>alive : NoneType, bool<br ALIGN="LEFT"/>daemon<br ALIGN="LEFT"/>event : NoneType<br ALIGN="LEFT"/>jitter : int<br ALIGN="LEFT"/>my_config<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>discover_mailboxes(paths)<br ALIGN="LEFT"/>interrupt_rescan(reason)<br ALIGN="LEFT"/>is_mailbox(fn)<br ALIGN="LEFT"/>open()<br ALIGN="LEFT"/>open_mailbox(mbx_id, fn)<br ALIGN="LEFT"/>quit(join)<br ALIGN="LEFT"/>rescan_mailbox(mbx_key, mbx_cfg, path, stop_after)<br ALIGN="LEFT"/>rescan_now(session, started_callback)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>sync_mail()<br ALIGN="LEFT"/>take_over_mailbox(mailbox_idx, policy, create_local, save, apply_tags, visible_tags)<br ALIGN="LEFT"/>wake_up(after)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.BrowseOrLaunch" [color="black", fontcolor="black", label=<{BrowseOrLaunch|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>RAISES : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|Browse(sspec)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Cached" [color="black", fontcolor="black", label=<{Cached|HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>LOG_NOTHING : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.eventlog.Cancel" [color="black", fontcolor="black", label=<{Cancel|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_carddav.CardDAV" [color="black", fontcolor="black", label=<{CardDAV|url<br ALIGN="LEFT"/>|cd(url)<br ALIGN="LEFT"/>get_vcard(url)<br ALIGN="LEFT"/>list_vcards()<br ALIGN="LEFT"/>put_vcard(url, vcard)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_carddav.CardDAVImporter" [color="black", fontcolor="black", label=<{CardDAVImporter|CONFIG_RULES : dict<br ALIGN="LEFT"/>FORMAT_DESCRIPTION : str<br ALIGN="LEFT"/>FORMAT_NAME : str<br ALIGN="LEFT"/>OPTIONAL_PARAMETERS : list<br ALIGN="LEFT"/>REQUIRED_PARAMETERS : list<br ALIGN="LEFT"/>SHORT_NAME : str<br ALIGN="LEFT"/>carddav<br ALIGN="LEFT"/>|<I>filter_contacts</I>(terms)<br ALIGN="LEFT"/>get_contacts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.CatFile" [color="black", fontcolor="black", label=<{CatFile|COMMAND_SECURITY : list<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_mork.MorkImporter.Cell" [color="black", fontcolor="black", label=<{Cell|atom : NoneType<br ALIGN="LEFT"/>column : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.commands.ChangeDir" [color="black", fontcolor="black", label=<{ChangeDir|COMMAND_SECURITY : list<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.ChecksummingStreamer" [color="black", fontcolor="black", label=<{ChecksummingStreamer|fd : _TemporaryFileWrapper<br ALIGN="LEFT"/>finished : bool<br ALIGN="LEFT"/>md5filter<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>outer_md5 : NoneType, md5<br ALIGN="LEFT"/>outer_md5sum : NoneType, str<br ALIGN="LEFT"/>saved : bool<br ALIGN="LEFT"/>tempfile : _TemporaryFileWrapper<br ALIGN="LEFT"/>temppath<br ALIGN="LEFT"/>|calculate_outer_md5sum()<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>save(filename, finish, mode)<br ALIGN="LEFT"/>save_copy(ofd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ChooseFromAddress" [color="black", fontcolor="black", label=<{ChooseFromAddress|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag.Classify" [color="black", fontcolor="black", label=<{Classify|ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Command" [color="black", fontcolor="black", label=<{Command|API_VERSION : NoneType<br ALIGN="LEFT"/>CHANGES_SESSION_CONTEXT : bool<br ALIGN="LEFT"/>COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>COMMAND_SECURITY : NoneType<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>FAILURE : str<br ALIGN="LEFT"/>HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_BANNED_VARS : dict<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>IS_HANGING_ACTIVITY : bool<br ALIGN="LEFT"/>IS_INTERACTIVE : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>LOG_ARGUMENTS : bool<br ALIGN="LEFT"/>LOG_FINISHED : str<br ALIGN="LEFT"/>LOG_NOTHING : bool<br ALIGN="LEFT"/>LOG_PROGRESS : bool<br ALIGN="LEFT"/>LOG_STARTING : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>RAISES : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>SYNOPSIS_ARGS : NoneType<br ALIGN="LEFT"/>UI_CONTEXT : NoneType<br ALIGN="LEFT"/>WITH_CONTEXT : tuple<br ALIGN="LEFT"/>args : tuple<br ALIGN="LEFT"/>context : NoneType<br ALIGN="LEFT"/>data : dict<br ALIGN="LEFT"/>error_info : dict<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>result : NoneType<br ALIGN="LEFT"/>run_async : bool<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>|cache_id(sqa)<br ALIGN="LEFT"/><I>cache_requirements</I>(result)<br ALIGN="LEFT"/>cache_result(result)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>etag_data()<br ALIGN="LEFT"/>max_age()<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>state_as_query_args()<br ALIGN="LEFT"/>template_path(ttype, template_id, template)<br ALIGN="LEFT"/>view(result)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.command_cache.CommandCache" [color="black", fontcolor="black", label=<{CommandCache|cache : dict<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>dirty : list<br ALIGN="LEFT"/>lock<br ALIGN="LEFT"/>|cache_result(fprint, expires, req, cmd_obj, result_obj)<br ALIGN="LEFT"/>dirty_set(after)<br ALIGN="LEFT"/>get_result(fprint, dirty_check, extend)<br ALIGN="LEFT"/>mark_dirty(requirements)<br ALIGN="LEFT"/>refresh(extend, runtime, event_log)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Command.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|command_name<br ALIGN="LEFT"/>command_obj<br ALIGN="LEFT"/>doc<br ALIGN="LEFT"/>error_info : dict<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>rendered : dict<br ALIGN="LEFT"/>renderers : dict<br ALIGN="LEFT"/>result<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>template_id : NoneType<br ALIGN="LEFT"/>|as_(what)<br ALIGN="LEFT"/>as_css(template)<br ALIGN="LEFT"/>as_csv(template, result)<br ALIGN="LEFT"/>as_dict()<br ALIGN="LEFT"/>as_html(template)<br ALIGN="LEFT"/>as_js(template)<br ALIGN="LEFT"/>as_json()<br ALIGN="LEFT"/>as_rss(template)<br ALIGN="LEFT"/>as_template(ttype, mode, wrap_in_json, template)<br ALIGN="LEFT"/>as_text()<br ALIGN="LEFT"/>as_txt(template)<br ALIGN="LEFT"/>as_xml(template)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.ProgramStatus.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.GpgCommand.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.ListDir.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.CatFile.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Help.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>commands_as_text()<br ALIGN="LEFT"/>splash_as_text()<br ALIGN="LEFT"/>variables_as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.HelpUrlMap.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_html()<br ALIGN="LEFT"/>as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.VCardCommand.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|IGNORE : tuple<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeySearch.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeyImportFromMail.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGUsageStatistics.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGCheckKeys.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Search.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|fixed_up : bool<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>|as_dict()<br ALIGN="LEFT"/>as_html()<br ALIGN="LEFT"/>as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Extract.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|fixed_up : bool<br ALIGN="LEFT"/>|as_dict()<br ALIGN="LEFT"/>as_html()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.Tag.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.AddTag.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.ListTags.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.DeleteTag.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.ListFilters.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_gnupg.PGPKeysAsVCards.CommandResult" [color="black", fontcolor="black", label=<{CommandResult|<br ALIGN="LEFT"/>|as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.Compose" [color="black", fontcolor="black", label=<{Compose|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|CreateMessage(idx, session, msgid, cid, ephemeral)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.CompositionCommand" [color="black", fontcolor="black", label=<{CompositionCommand|HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>UPDATE_HEADERS : tuple<br ALIGN="LEFT"/>UPDATE_STRING_DATA : dict<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.commands.ConfigAdd" [color="black", fontcolor="black", label=<{ConfigAdd|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.ConfigPrint" [color="black", fontcolor="black", label=<{ConfigPrint|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.ConfigSet" [color="black", fontcolor="black", label=<{ConfigSet|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.ConfigUnset" [color="black", fontcolor="black", label=<{ConfigUnset|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.ConfigureMailboxes" [color="black", fontcolor="black", label=<{ConfigureMailboxes|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>MAX_PATHS : int<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.Contact" [color="black", fontcolor="black", label=<{Contact|SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ContactImport" [color="black", fontcolor="black", label=<{ContactImport|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(format, terms)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ContactImporters" [color="black", fontcolor="black", label=<{ContactImporters|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ContactVCard.ContactVCardCommand" [color="black", fontcolor="black", label=<{ContactVCardCommand|KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>VCARD : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.gui.test_contacts.ContactsGuiTest" [color="black", fontcolor="black", label=<{ContactsGuiTest|<br ALIGN="LEFT"/>|test_add_new_contact()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.ContentTxf" [color="black", fontcolor="black", label=<{ContentTxf|<br ALIGN="LEFT"/>|TransformOutgoing(sender, rcpts, msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.workers.Cron" [color="black", fontcolor="black", label=<{Cron|ALIVE : bool<br ALIGN="LEFT"/>daemon<br ALIGN="LEFT"/>last_run<br ALIGN="LEFT"/>lock<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>running : str<br ALIGN="LEFT"/>schedule : dict<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>sleep : int<br ALIGN="LEFT"/>|add_task(name, interval, task)<br ALIGN="LEFT"/>cancel_task(name)<br ALIGN="LEFT"/>quit(session, join)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.state.CryptoInfo" [color="black", fontcolor="black", label=<{CryptoInfo|DEFAULTS : dict<br ALIGN="LEFT"/>KEYS : list<br ALIGN="LEFT"/>STATUSES : list<br ALIGN="LEFT"/>bubbles : list<br ALIGN="LEFT"/>bubbly : bool<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>part_status<br ALIGN="LEFT"/>|bubble_up(parent)<br ALIGN="LEFT"/>mix_bubbles()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_policy.CryptoPolicy" [color="black", fontcolor="black", label=<{CryptoPolicy|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|ShouldAttachKey(config, vcards, emails, ttl)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>crypto_policy(session, idx, emails)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_policy.CryptoPolicyBaseAction" [color="black", fontcolor="black", label=<{CryptoPolicyBaseAction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.test_crypto_policy.CryptoPolicyBaseTest" [color="black", fontcolor="black", label=<{CryptoPolicyBaseTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_crypto_policy.CryptoPolicyForUserTest" [color="black", fontcolor="black", label=<{CryptoPolicyForUserTest|<br ALIGN="LEFT"/>|test_no_email_provided()<br ALIGN="LEFT"/>test_no_msg_with_email_()<br ALIGN="LEFT"/>test_vcard_overrides_mail_history()<br ALIGN="LEFT"/>test_with_encrypted_email()<br ALIGN="LEFT"/>test_with_signed_email()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.CryptoTxf" [color="black", fontcolor="black", label=<{CryptoTxf|<br ALIGN="LEFT"/>|TransformOutgoing(sender, rcpts, msg, crypto_policy, prefer_inline, cleaner)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_carddav.DAVClient" [color="black", fontcolor="black", label=<{DAVClient|auth : NoneType<br ALIGN="LEFT"/>baseurl<br ALIGN="LEFT"/>cwd : str<br ALIGN="LEFT"/>host<br ALIGN="LEFT"/>last_body<br ALIGN="LEFT"/>last_headers : dict<br ALIGN="LEFT"/>last_status<br ALIGN="LEFT"/>last_statusmessage<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>port : NoneType, int<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>username : NoneType<br ALIGN="LEFT"/>|options(url)<br ALIGN="LEFT"/>request(url, method, headers, body)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.dnspka.DNSPKALookupHandler" [color="black", fontcolor="black", label=<{DNSPKALookupHandler|NAME : str<br ALIGN="LEFT"/>PRIORITY : int<br ALIGN="LEFT"/>TIMEOUT : int<br ALIGN="LEFT"/>req<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.vcard_mork.MorkImporter.Database" [color="black", fontcolor="black", label=<{Database|adict : dict<br ALIGN="LEFT"/>cdict : dict<br ALIGN="LEFT"/>tables : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.auth.DeAuthenticate" [color="black", fontcolor="black", label=<{DeAuthenticate|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>IS_INTERACTIVE : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_generator.DecodedGenerator" [color="black", fontcolor="black", label=<{DecodedGenerator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.streamer.DecryptingStreamer" [color="black", fontcolor="black", label=<{DecryptingStreamer|BEGIN_MED : str<br ALIGN="LEFT"/>BEGIN_MED2 : str<br ALIGN="LEFT"/>BEGIN_PGP : str<br ALIGN="LEFT"/>DEFAULT_CIPHER : str<br ALIGN="LEFT"/>END_MED : str<br ALIGN="LEFT"/>END_PGP : str<br ALIGN="LEFT"/>STATE_BEGIN : int<br ALIGN="LEFT"/>STATE_DATA : int<br ALIGN="LEFT"/>STATE_END : int<br ALIGN="LEFT"/>STATE_ERROR : int<br ALIGN="LEFT"/>STATE_HEADER : int<br ALIGN="LEFT"/>STATE_ONLY_DATA : int<br ALIGN="LEFT"/>STATE_PGP_DATA : int<br ALIGN="LEFT"/>STATE_RAW_DATA : int<br ALIGN="LEFT"/>buffered : str<br ALIGN="LEFT"/>cipher : str<br ALIGN="LEFT"/>data_filter<br ALIGN="LEFT"/>expected_inner_md5sum : NoneType<br ALIGN="LEFT"/>expected_outer_md5sum : NoneType<br ALIGN="LEFT"/>gpg_pass : NoneType<br ALIGN="LEFT"/>inner_md5 : md5<br ALIGN="LEFT"/>mep_key : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>outer_md5 : md5<br ALIGN="LEFT"/>read_fd<br ALIGN="LEFT"/>startup_lock : NoneType<br ALIGN="LEFT"/>state : int<br ALIGN="LEFT"/>|EndEncrypted(line)<br ALIGN="LEFT"/>StartEncrypted(line)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>verify(testing, _raise)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.DeleteFilter" [color="black", fontcolor="black", label=<{DeleteFilter|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.DeleteTag" [color="black", fontcolor="black", label=<{DeleteTag|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.plugins.DisablePlugin" [color="black", fontcolor="black", label=<{DisablePlugin|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.Draft" [color="black", fontcolor="black", label=<{Draft|HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.workers.DumbWorker" [color="black", fontcolor="black", label=<{DumbWorker|<br ALIGN="LEFT"/>|add_task(session, name, task, unique)<br ALIGN="LEFT"/>add_unique_task(session, name, task)<br ALIGN="LEFT"/>do(session, name, task, unique)<br ALIGN="LEFT"/><I>run</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.EditProfile" [color="black", fontcolor="black", label=<{EditProfile|HTTP_QUERY_VARS<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.EditableSearchResults" [color="black", fontcolor="black", label=<{EditableSearchResults|new_messages<br ALIGN="LEFT"/>sent_messages<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.gui.ElementHasClass" [color="black", fontcolor="black", label=<{ElementHasClass|class_name<br ALIGN="LEFT"/>locator<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.gui.ElementHasNotClass" [color="black", fontcolor="black", label=<{ElementHasNotClass|class_name<br ALIGN="LEFT"/>locator<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailutils.Email" [color="black", fontcolor="black", label=<{Email|BARE_QUOTE_STARTS<br ALIGN="LEFT"/>CHARSET_PRIORITY_LIST : list<br ALIGN="LEFT"/>GIT_DIFF_LINE<br ALIGN="LEFT"/>GIT_DIFF_STARTS<br ALIGN="LEFT"/>HEADER_ORDER : dict<br ALIGN="LEFT"/>MANDATORY_HEADERS : tuple<br ALIGN="LEFT"/>MIME_HEADERS : tuple<br ALIGN="LEFT"/>PGP_OK : dict<br ALIGN="LEFT"/>RE_EXCESS_WHITESPACE<br ALIGN="LEFT"/>RE_HTML_BORING<br ALIGN="LEFT"/>RE_HTML_IMGS<br ALIGN="LEFT"/>RE_HTML_IMG_ALT<br ALIGN="LEFT"/>RE_HTML_LINKS<br ALIGN="LEFT"/>RE_HTML_NEWLINES<br ALIGN="LEFT"/>RE_HTML_PARAGRAPHS<br ALIGN="LEFT"/>UNEDITABLE_HEADERS : tuple<br ALIGN="LEFT"/>WANT_MSG_TREE_PGP : tuple<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>ephemeral_mid : NoneType<br ALIGN="LEFT"/>index<br ALIGN="LEFT"/>msg_idx_pos<br ALIGN="LEFT"/>msg_info : NoneType<br ALIGN="LEFT"/>msg_parsed : NoneType<br ALIGN="LEFT"/>msg_parsed_pgpmime : NoneType<br ALIGN="LEFT"/>|Create(idx, mbox_id, mbx, msg_to, msg_cc, msg_bcc, msg_from, msg_subject, msg_text, msg_references, msg_id, msg_atts, save, ephemeral_mid, append_sig)<br ALIGN="LEFT"/>add_attachments(session, filenames, filedata)<br ALIGN="LEFT"/>clear_from_parse_cache()<br ALIGN="LEFT"/>decode_payload(part)<br ALIGN="LEFT"/>decode_text(payload, charset, binary)<br ALIGN="LEFT"/>encoded_hdr(msg, hdr, value)<br ALIGN="LEFT"/>evaluate_pgp(tree, check_sigs, decrypt, crypto_state_feedback)<br ALIGN="LEFT"/>extract_attachment(session, att_id, name_fmt, mode)<br ALIGN="LEFT"/>get(field, default)<br ALIGN="LEFT"/>get_editing_string(tree, estrings, attachment_headers)<br ALIGN="LEFT"/>get_editing_strings(tree)<br ALIGN="LEFT"/>get_file()<br ALIGN="LEFT"/>get_headerprint()<br ALIGN="LEFT"/>get_mbox_ptr_and_fd()<br ALIGN="LEFT"/>get_message_tags()<br ALIGN="LEFT"/>get_message_tree(want)<br ALIGN="LEFT"/>get_metadata_kws()<br ALIGN="LEFT"/>get_msg(pgpmime, crypto_state_feedback)<br ALIGN="LEFT"/>get_msg_info(field, uncached)<br ALIGN="LEFT"/>get_msg_size()<br ALIGN="LEFT"/>get_msg_summary()<br ALIGN="LEFT"/>is_editable(quick)<br ALIGN="LEFT"/>is_thread()<br ALIGN="LEFT"/>msg_mid()<br ALIGN="LEFT"/>parse_line_type(line, block)<br ALIGN="LEFT"/>parse_text_part(data, charset, crypto)<br ALIGN="LEFT"/>remove_attachments(session)<br ALIGN="LEFT"/>reset_caches(msg_info, msg_parsed, msg_parsed_pgpmime, clear_parse_cache)<br ALIGN="LEFT"/>update_from_msg(session, newmsg)<br ALIGN="LEFT"/>update_from_string(session, data, final)<br ALIGN="LEFT"/>update_parse_cache(newmsg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.email_keylookup.EmailKeyLookupHandler" [color="black", fontcolor="black", label=<{EmailKeyLookupHandler|LOCAL : bool<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>PRIORITY : int<br ALIGN="LEFT"/>TIMEOUT : int<br ALIGN="LEFT"/>key_cache : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.EmailTransform" [color="black", fontcolor="black", label=<{EmailTransform|config<br ALIGN="LEFT"/>|TransformIncoming()<br ALIGN="LEFT"/>TransformOutgoing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.EmptyOutbox" [color="black", fontcolor="black", label=<{EmptyOutbox|IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>args : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>sendmail(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.EncryptingDelimitedStreamer" [color="black", fontcolor="black", label=<{EncryptingDelimitedStreamer|BEGIN_DATA : str<br ALIGN="LEFT"/>DEFAULT_CIPHER : str<br ALIGN="LEFT"/>END_DATA : str<br ALIGN="LEFT"/>EXTRA_DATA : dict<br ALIGN="LEFT"/>EXTRA_HEADERS : str<br ALIGN="LEFT"/>cipher : str<br ALIGN="LEFT"/>header_data : NoneType, dict<br ALIGN="LEFT"/>inner_md5 : md5<br ALIGN="LEFT"/>inner_md5sum : NoneType, str<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>nonce<br ALIGN="LEFT"/>|finish()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.EncryptingUndelimitedStreamer" [color="black", fontcolor="black", label=<{EncryptingUndelimitedStreamer|BEGIN_DATA : str<br ALIGN="LEFT"/>END_DATA : str<br ALIGN="LEFT"/>EXTRA_DATA : dict<br ALIGN="LEFT"/>EXTRA_HEADERS : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.mime.EncryptionFailureError" [color="black", fontcolor="red", label=<{EncryptionFailureError|to_keys<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.state.EncryptionInfo" [color="black", fontcolor="black", label=<{EncryptionInfo|KEYS : list<br ALIGN="LEFT"/>STATUSES : list<br ALIGN="LEFT"/>part_status : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.eventlog.Event" [color="black", fontcolor="black", label=<{Event|COMPLETE : str<br ALIGN="LEFT"/>FUTURE : str<br ALIGN="LEFT"/>INCOMPLETE : str<br ALIGN="LEFT"/>POSTAMBLE_HTML : str<br ALIGN="LEFT"/>PREAMBLE_HTML : str<br ALIGN="LEFT"/>PRIVATE_HTML : str<br ALIGN="LEFT"/>PUBLIC_HTML : str<br ALIGN="LEFT"/>RUNNING : str<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>date<br ALIGN="LEFT"/>event_id<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>private_data<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>source_class<br ALIGN="LEFT"/>ts<br ALIGN="LEFT"/>|Parse(json_string)<br ALIGN="LEFT"/>as_dict(private)<br ALIGN="LEFT"/>as_html(private)<br ALIGN="LEFT"/>as_json(private)<br ALIGN="LEFT"/>as_text(private, compact)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.eventlog.EventLog" [color="black", fontcolor="black", label=<{EventLog|KEEP_LOGS : int<br ALIGN="LEFT"/>decryption_key_func<br ALIGN="LEFT"/>encryption_key_func<br ALIGN="LEFT"/>logdir<br ALIGN="LEFT"/>rollover : int<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>events()<br ALIGN="LEFT"/>get(event_id, default)<br ALIGN="LEFT"/>incomplete()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>log()<br ALIGN="LEFT"/>log_event(event)<br ALIGN="LEFT"/>purge_old_logfiles(keep)<br ALIGN="LEFT"/>since(ts)<br ALIGN="LEFT"/>ui_unwatch(ui)<br ALIGN="LEFT"/>ui_watch(ui)<br ALIGN="LEFT"/>wait(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.eventlog.Events" [color="black", fontcolor="black", label=<{Events|DEFAULT_WAIT_TIME : float<br ALIGN="LEFT"/>GATHER_TIME : float<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>IS_HANGING_ACTIVITY : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>LOG_NOTHING : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.exporters.ExportMail" [color="black", fontcolor="black", label=<{ExportMail|COMMAND_SECURITY : list<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(save)<br ALIGN="LEFT"/>create_mailbox(mbox_type, path)<br ALIGN="LEFT"/>export_path(mbox_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Extract" [color="black", fontcolor="black", label=<{Extract|IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>RAISES : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vfs.FilePath" [color="black", fontcolor="black", label=<{FilePath|flags : NoneType<br ALIGN="LEFT"/>raw_fp : NoneType, str<br ALIGN="LEFT"/>|alias(fp)<br ALIGN="LEFT"/>display()<br ALIGN="LEFT"/>display_basename()<br ALIGN="LEFT"/>encoded()<br ALIGN="LEFT"/>endswith(stuff)<br ALIGN="LEFT"/>join()<br ALIGN="LEFT"/>lower()<br ALIGN="LEFT"/>startswith(stuff)<br ALIGN="LEFT"/>unalias(fp)<br ALIGN="LEFT"/>upper()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.Filter" [color="black", fontcolor="black", label=<{Filter|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.FilterCommand" [color="black", fontcolor="black", label=<{FilterCommand|<br ALIGN="LEFT"/>|finish(save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.Forward" [color="black", fontcolor="black", label=<{Forward|HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|CreateForward(idx, session, refs, msgid, with_atts, cid, ephemeral)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGCheckKeys" [color="black", fontcolor="black", label=<{GPGCheckKeys|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>MIN_KEYSIZE : int<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeyImport" [color="black", fontcolor="black", label=<{GPGKeyImport|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeyImportFromMail" [color="black", fontcolor="black", label=<{GPGKeyImportFromMail|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeyList" [color="black", fontcolor="black", label=<{GPGKeyList|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeyListSecret" [color="black", fontcolor="black", label=<{GPGKeyListSecret|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeyReceive" [color="black", fontcolor="black", label=<{GPGKeyReceive|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeySearch" [color="black", fontcolor="black", label=<{GPGKeySearch|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGKeySign" [color="black", fontcolor="black", label=<{GPGKeySign|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_gnupg.GPGUsageStatistics" [color="black", fontcolor="black", label=<{GPGUsageStatistics|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_generator.Generator" [color="black", fontcolor="black", label=<{Generator|<br ALIGN="LEFT"/>|clone(fp)<br ALIGN="LEFT"/>flatten(msg, unixfrom, linesep)<br ALIGN="LEFT"/>write(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.postinglist.GlobalPostingList" [color="black", fontcolor="black", label=<{GlobalPostingList|WORDS : NoneType, dict<br ALIGN="LEFT"/>filename : str<br ALIGN="LEFT"/>lock<br ALIGN="LEFT"/>|GetFile(session, sig, mode)<br ALIGN="LEFT"/>SaveFile(session, prefix)<br ALIGN="LEFT"/>hits()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>remove(eids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.GnuPG" [color="black", fontcolor="black", label=<{GnuPG|ARMOR_BEGIN_ENCRYPTED : str<br ALIGN="LEFT"/>ARMOR_BEGIN_SIGNATURE : str<br ALIGN="LEFT"/>ARMOR_BEGIN_SIGNED : str<br ALIGN="LEFT"/>ARMOR_END_ENCRYPTED : str<br ALIGN="LEFT"/>ARMOR_END_SIGNATURE : str<br ALIGN="LEFT"/>ARMOR_END_SIGNED : str<br ALIGN="LEFT"/>LAST_KEY_USED : str<br ALIGN="LEFT"/>available : NoneType, bool<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>gpgbinary : str<br ALIGN="LEFT"/>homedir : NoneType<br ALIGN="LEFT"/>outputbuffers : dict<br ALIGN="LEFT"/>outputfds : list<br ALIGN="LEFT"/>passphrase : NoneType<br ALIGN="LEFT"/>passphrases : NoneType<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>threads : dict<br ALIGN="LEFT"/>use_agent : NoneType<br ALIGN="LEFT"/>|address_to_keys(address)<br ALIGN="LEFT"/>chat(gpg_args, callback)<br ALIGN="LEFT"/>decrypt(data, outputfd, passphrase, as_lines)<br ALIGN="LEFT"/>encrypt(data, tokeys, armor, sign, fromkey)<br ALIGN="LEFT"/>get_pubkey(keyid)<br ALIGN="LEFT"/>import_keys(key_data)<br ALIGN="LEFT"/>is_available()<br ALIGN="LEFT"/>list_keys(selectors)<br ALIGN="LEFT"/>list_secret_keys(selectors)<br ALIGN="LEFT"/>parse_keylist(keylist)<br ALIGN="LEFT"/>parse_status(line)<br ALIGN="LEFT"/>parse_stderr(line)<br ALIGN="LEFT"/>parse_stdout(line)<br ALIGN="LEFT"/>prepare_passphrase(keyid, signing, decrypting)<br ALIGN="LEFT"/>recv_key(keyid, keyservers, keyserver_options)<br ALIGN="LEFT"/>remove_armor(text)<br ALIGN="LEFT"/>run(args, gpg_input, outputfd, partial_read_ok, send_passphrase, _raise)<br ALIGN="LEFT"/>search_key(term, keyservers, keyserver_options)<br ALIGN="LEFT"/>set_home(path)<br ALIGN="LEFT"/>sign(data, fromkey, armor, detatch, clearsign, passphrase)<br ALIGN="LEFT"/>sign_key(keyid, signingkey)<br ALIGN="LEFT"/>verify(data, signature)<br ALIGN="LEFT"/>version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.GnuPGExpectScript" [color="black", fontcolor="black", label=<{GnuPGExpectScript|FINISHED : str<br ALIGN="LEFT"/>RUNNING_STATES : list<br ALIGN="LEFT"/>SCRIPT : list<br ALIGN="LEFT"/>STARTUP : str<br ALIGN="LEFT"/>START_GPG : str<br ALIGN="LEFT"/>VARIABLES : dict<br ALIGN="LEFT"/>before : str<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>failed<br ALIGN="LEFT"/>gpg : NoneType<br ALIGN="LEFT"/>logfile : NoneType<br ALIGN="LEFT"/>main_script : list<br ALIGN="LEFT"/>running<br ALIGN="LEFT"/>sps : NoneType<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>variables : dict<br ALIGN="LEFT"/>|expect_exact(proc, exp, timeout)<br ALIGN="LEFT"/>gpg_args()<br ALIGN="LEFT"/><I>in_state</I>(state)<br ALIGN="LEFT"/>on_complete(name, callback)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>run_script(proc, script)<br ALIGN="LEFT"/>sendline(proc, line)<br ALIGN="LEFT"/>set_state(state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_gnupg.GnuPGImporter" [color="black", fontcolor="black", label=<{GnuPGImporter|CONFIG_RULES : dict<br ALIGN="LEFT"/>FORMAT_DESCRIPTION : str<br ALIGN="LEFT"/>FORMAT_NAME : str<br ALIGN="LEFT"/>MERGE_BY : list<br ALIGN="LEFT"/>SHORT_NAME : str<br ALIGN="LEFT"/>UPDATE_INDEX : bool<br ALIGN="LEFT"/>VCL_KEY_FMT : str<br ALIGN="LEFT"/>|get_guid(vcard)<br ALIGN="LEFT"/>get_vcards(selectors, public, secret, vcards)<br ALIGN="LEFT"/>gnupg_keys_as_vcards(gnupg, selectors, public, secret)<br ALIGN="LEFT"/>import_vcards(session, vcard_store)<br ALIGN="LEFT"/>key_is_useless(key)<br ALIGN="LEFT"/>key_vcl(key_id, key)<br ALIGN="LEFT"/>vcards_merged(keys, vcards)<br ALIGN="LEFT"/>vcards_one_per_uid(keys, vcards, kindhint)<br ALIGN="LEFT"/>vcards_per_key(keys, vcards)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.GnuPGKeyEditor" [color="black", fontcolor="black", label=<{GnuPGKeyEditor|ADDED_UID : str<br ALIGN="LEFT"/>ADDING_UID : str<br ALIGN="LEFT"/>ADD_UID_SCRIPT : list<br ALIGN="LEFT"/>DELETED_UIDS : str<br ALIGN="LEFT"/>DELETE_SCRIPT : list<br ALIGN="LEFT"/>DELETING_UID : str<br ALIGN="LEFT"/>HAVE_SKEY : str<br ALIGN="LEFT"/>RUNNING_STATES : list<br ALIGN="LEFT"/>SAVED : str<br ALIGN="LEFT"/>SAVE_SCRIPT : list<br ALIGN="LEFT"/>SCRIPT : list<br ALIGN="LEFT"/>VARIABLES : dict<br ALIGN="LEFT"/>keyid<br ALIGN="LEFT"/>uids : NoneType<br ALIGN="LEFT"/>variables : dict<br ALIGN="LEFT"/>|gpg_args()<br ALIGN="LEFT"/>in_state(state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.GnuPGKeyGenerator" [color="black", fontcolor="black", label=<{GnuPGKeyGenerator|CREATED_KEY : str<br ALIGN="LEFT"/>GATHER_ENTROPY : str<br ALIGN="LEFT"/>HAVE_KEY : str<br ALIGN="LEFT"/>KEY_SETUP : str<br ALIGN="LEFT"/>RUNNING_STATES : list<br ALIGN="LEFT"/>SCRIPT : list<br ALIGN="LEFT"/>VARIABLES : dict<br ALIGN="LEFT"/>failed<br ALIGN="LEFT"/>generated_key : NoneType<br ALIGN="LEFT"/>|gpg_args()<br ALIGN="LEFT"/>in_state(state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.GnuPGRecordParser" [color="black", fontcolor="black", label=<{GnuPGRecordParser|curkey : NoneType<br ALIGN="LEFT"/>dispatch : dict<br ALIGN="LEFT"/>keys : dict<br ALIGN="LEFT"/>record_fields : list<br ALIGN="LEFT"/>record_parsers : list<br ALIGN="LEFT"/>record_types : list<br ALIGN="LEFT"/>|parse(lines)<br ALIGN="LEFT"/>parse_fingerprint(line)<br ALIGN="LEFT"/>parse_line(line)<br ALIGN="LEFT"/><I>parse_none</I>()<br ALIGN="LEFT"/>parse_privkey(line)<br ALIGN="LEFT"/>parse_pubkey(line)<br ALIGN="LEFT"/><I>parse_revocation_key</I>(line)<br ALIGN="LEFT"/><I>parse_revoke</I>(line)<br ALIGN="LEFT"/>parse_signature(line)<br ALIGN="LEFT"/>parse_subkey(line)<br ALIGN="LEFT"/><I>parse_trust</I>(line)<br ALIGN="LEFT"/>parse_uidline(line)<br ALIGN="LEFT"/>parse_unknown(line)<br ALIGN="LEFT"/><I>parse_userattribute</I>(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.GnuPGResultParser" [color="black", fontcolor="black", label=<{GnuPGResultParser|encryption_info<br ALIGN="LEFT"/>plaintext : str<br ALIGN="LEFT"/>signature_info<br ALIGN="LEFT"/>|parse(retvals)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.GpgCommand" [color="black", fontcolor="black", label=<{GpgCommand|IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_gravatar.GravatarImporter" [color="black", fontcolor="black", label=<{GravatarImporter|CONFIG_RULES : dict<br ALIGN="LEFT"/>FORMAT_DESCRIPTION : str<br ALIGN="LEFT"/>FORMAT_NAME : str<br ALIGN="LEFT"/>SHORT_NAME : str<br ALIGN="LEFT"/>VCARD_IMG : str<br ALIGN="LEFT"/>VCARD_TS : str<br ALIGN="LEFT"/>|check_gravatar(vcard, email)<br ALIGN="LEFT"/>get_vcards()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.groups.Group" [color="black", fontcolor="black", label=<{Group|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.groups.GroupAddLines" [color="black", fontcolor="black", label=<{GroupAddLines|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.groups.GroupVCard.GroupVCardCommand" [color="black", fontcolor="black", label=<{GroupVCardCommand|KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.smtp_server.HashCash" [color="black", fontcolor="black", label=<{HashCash|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Help" [color="black", fontcolor="black", label=<{Help|ABOUT : str<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.HelpSplash" [color="black", fontcolor="black", label=<{HelpSplash|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(interactive)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.HelpUrlMap" [color="black", fontcolor="black", label=<{HelpUrlMap|SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.HelpVars" [color="black", fontcolor="black", label=<{HelpVars|ABOUT : str<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.httpd.HttpRequestHandler" [color="black", fontcolor="black", label=<{HttpRequestHandler|session<br ALIGN="LEFT"/>wfile<br ALIGN="LEFT"/>|csrf()<br ALIGN="LEFT"/>do_GET()<br ALIGN="LEFT"/>do_HEAD()<br ALIGN="LEFT"/>do_POST(method)<br ALIGN="LEFT"/>do_PUT()<br ALIGN="LEFT"/>do_UPDATE()<br ALIGN="LEFT"/>guess_mimetype(fpath)<br ALIGN="LEFT"/>http_host()<br ALIGN="LEFT"/>http_session()<br ALIGN="LEFT"/>log_message(fmt)<br ALIGN="LEFT"/>send_file(config, filename, suppress_body)<br ALIGN="LEFT"/>send_full_response(message, code, msg, mimetype, header_list, cachectrl, suppress_body)<br ALIGN="LEFT"/>send_http_redirect(destination)<br ALIGN="LEFT"/>send_http_response(code, msg)<br ALIGN="LEFT"/>send_standard_headers(header_list, cachectrl, mimetype)<br ALIGN="LEFT"/>server_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.httpd.HttpServer" [color="black", fontcolor="black", label=<{HttpServer|daemon_threads : bool<br ALIGN="LEFT"/>secret<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>session_cookie : NoneType<br ALIGN="LEFT"/>sessions : dict<br ALIGN="LEFT"/>sspec : tuple<br ALIGN="LEFT"/>|finish_request(request, client_address)<br ALIGN="LEFT"/>make_session_id(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.httpd.HttpWorker" [color="black", fontcolor="black", label=<{HttpWorker|daemon : bool<br ALIGN="LEFT"/>httpd : NoneType<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|quit(join)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap_starttls.IMAP4" [color="black", fontcolor="black", label=<{IMAP4|capabilities : tuple<br ALIGN="LEFT"/>file : BufferedRWPair, SocketIO<br ALIGN="LEFT"/>sock<br ALIGN="LEFT"/>|starttls(keyfile, certfile)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.imap.IMAPMailbox" [color="black", fontcolor="black", label=<{IMAPMailbox|mailbox : NoneType, str<br ALIGN="LEFT"/>|add(message)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/><I>get_bytes</I>(key)<br ALIGN="LEFT"/>get_file(key)<br ALIGN="LEFT"/>get_message(key)<br ALIGN="LEFT"/>iterkeys()<br ALIGN="LEFT"/><I>lock</I>()<br ALIGN="LEFT"/>remove(key)<br ALIGN="LEFT"/><I>unlock</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap.IMAP_IOError" [color="black", fontcolor="red", label=<{IMAP_IOError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.streamer.IOCoprocess" [color="black", fontcolor="black", label=<{IOCoprocess|name : NoneType<br ALIGN="LEFT"/>stderr : str<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.IOFilter" [color="black", fontcolor="black", label=<{IOFilter|BLOCKSIZE : int<br ALIGN="LEFT"/>aborting : bool, str<br ALIGN="LEFT"/>callback<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>error_callback : NoneType<br ALIGN="LEFT"/>exc_info : NoneType<br ALIGN="LEFT"/>exposed_fd : NoneType<br ALIGN="LEFT"/>fd<br ALIGN="LEFT"/>info : str<br ALIGN="LEFT"/>my_pipe_fd : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>pipe_reader<br ALIGN="LEFT"/>pipe_writer<br ALIGN="LEFT"/>reading_from : NoneType<br ALIGN="LEFT"/>writing : NoneType, bool<br ALIGN="LEFT"/>writing_to : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>join(aborting)<br ALIGN="LEFT"/>reader()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>writer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap.ImapMailSource" [color="black", fontcolor="black", label=<{ImapMailSource|CONN_ERRORS : tuple<br ALIGN="LEFT"/>TIMEOUT_INITIAL : int<br ALIGN="LEFT"/>TIMEOUT_LIVE : int<br ALIGN="LEFT"/>capabilities : set<br ALIGN="LEFT"/>conn : NoneType<br ALIGN="LEFT"/>conn_id : str<br ALIGN="LEFT"/>flag_cache : dict<br ALIGN="LEFT"/>last_op : int<br ALIGN="LEFT"/>namespaces : dict<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>watching : int<br ALIGN="LEFT"/>|Tester(conn_cls)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>discover_mailboxes(paths)<br ALIGN="LEFT"/>open(conn_cls, throw)<br ALIGN="LEFT"/>open_mailbox(mbx_id, mfn)<br ALIGN="LEFT"/>quit()<br ALIGN="LEFT"/>timed()<br ALIGN="LEFT"/>timed_imap()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.workers.ImportantWorker" [color="black", fontcolor="black", label=<{ImportantWorker|PAUSE_DEADLINE : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.streamer.InputCoprocess" [color="black", fontcolor="black", label=<{InputCoprocess|<br ALIGN="LEFT"/>|read()<br ALIGN="LEFT"/>readline()<br ALIGN="LEFT"/>readlines()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailutils.InsecureSmtpError" [color="black", fontcolor="red", label=<{InsecureSmtpError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.app.InteractCommand" [color="black", fontcolor="black", label=<{InteractCommand|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>RAISES : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.html_magic.JsApi" [color="black", fontcolor="black", label=<{JsApi|HTTP_AUTH_REQUIRED : str<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(save, auto)<br ALIGN="LEFT"/>etag_data()<br ALIGN="LEFT"/>max_age()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.KeyImport" [color="black", fontcolor="black", label=<{KeyImport|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.KeyLookup" [color="black", fontcolor="black", label=<{KeyLookup|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.state.KeyLookupError" [color="black", fontcolor="red", label=<{KeyLookupError|missing<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.KeychainLookupHandler" [color="black", fontcolor="black", label=<{KeychainLookupHandler|LOCAL : bool<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>PRIORITY : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.KeyserverLookupHandler" [color="black", fontcolor="black", label=<{KeyserverLookupHandler|LOCAL : bool<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>PRIORITY : int<br ALIGN="LEFT"/>TIMEOUT : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ListContacts" [color="black", fontcolor="black", label=<{ListContacts|SYNOPSIS : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.commands.ListDir" [color="black", fontcolor="black", label=<{ListDir|COMMAND_SECURITY : list<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.ListFilters" [color="black", fontcolor="black", label=<{ListFilters|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(want_fid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.groups.ListGroups" [color="black", fontcolor="black", label=<{ListGroups|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ListProfiles" [color="black", fontcolor="black", label=<{ListProfiles|SYNOPSIS : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.tags.ListTags" [color="black", fontcolor="black", label=<{ListTags|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|cache_requirements(result)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ListVCards" [color="black", fontcolor="black", label=<{ListVCards|HTTP_CALLABLE : str<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Load" [color="black", fontcolor="black", label=<{Load|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_INTERACTIVE : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(reset, wait, wait_all, quiet)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.plugins.LoadPlugin" [color="black", fontcolor="black", label=<{LoadPlugin|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.local.LocalMailSource" [color="black", fontcolor="black", label=<{LocalMailSource|watching : int<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/>is_mailbox(fn)<br ALIGN="LEFT"/>open()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.LookupHandler" [color="black", fontcolor="black", label=<{LookupHandler|LOCAL : bool<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>PRIORITY : int<br ALIGN="LEFT"/>TIMEOUT : int<br ALIGN="LEFT"/>known_keys<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|key_import(address)<br ALIGN="LEFT"/>lookup(address, strict_email_match, get)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.macmail.MacMaildir" [color="black", fontcolor="black", label=<{MacMaildir|<br ALIGN="LEFT"/>|discard(key)<br ALIGN="LEFT"/>get_file(key)<br ALIGN="LEFT"/>get_message(key)<br ALIGN="LEFT"/>has_key(key)<br ALIGN="LEFT"/>iterkeys()<br ALIGN="LEFT"/>remove(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.macmail.MacMaildirMessage" [color="black", fontcolor="black", label=<{MacMaildirMessage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.gui.test_mail.MailGuiTest" [color="black", fontcolor="black", label=<{MailGuiTest|<br ALIGN="LEFT"/>|test_read_mail()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.MailPileUnittest" [color="black", fontcolor="black", label=<{MailPileUnittest|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap.ImapMailSource.MailSourceVfs" [color="black", fontcolor="black", label=<{MailSourceVfs|<br ALIGN="LEFT"/>|abspath_(fp)<br ALIGN="LEFT"/>display_name_(fp, config)<br ALIGN="LEFT"/>getflags_(fp, cfg)<br ALIGN="LEFT"/>getsize_(path)<br ALIGN="LEFT"/>isdir_(fp)<br ALIGN="LEFT"/>listdir_(where)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.BaseMailSource.MailSourceVfs" [color="black", fontcolor="black", label=<{MailSourceVfs|config<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>|Handles(path)<br ALIGN="LEFT"/>abspath_(path)<br ALIGN="LEFT"/>display_name_(path, config)<br ALIGN="LEFT"/>exists_(fp)<br ALIGN="LEFT"/>getsize_(path)<br ALIGN="LEFT"/>glob_()<br ALIGN="LEFT"/>isdir_(fp)<br ALIGN="LEFT"/>ismailsource_(fp)<br ALIGN="LEFT"/>listdir_(where)<br ALIGN="LEFT"/>mailbox_type_(fp, config)<br ALIGN="LEFT"/>open_(fp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.Mailpile" [color="black", fontcolor="black", label=<{Mailpile|<br ALIGN="LEFT"/>|Interact()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.www.jinjaextensions.MailpileCommand" [color="black", fontcolor="black", label=<{MailpileCommand|URL_DANGER_ALERT<br ALIGN="LEFT"/>URL_RE_HTTP<br ALIGN="LEFT"/>URL_RE_HTTP_PROTO<br ALIGN="LEFT"/>URL_RE_MAILTO<br ALIGN="LEFT"/>env<br ALIGN="LEFT"/>tags : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailboxes.gmvault.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|<br ALIGN="LEFT"/>|get_file(key)<br ALIGN="LEFT"/>parse_path(config, fn, create)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.imap.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|UNPICKLABLE : list<br ALIGN="LEFT"/>|get_msg_size(toc_id)<br ALIGN="LEFT"/>parse_path(config, path, create)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.macmail.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|<br ALIGN="LEFT"/>|parse_path(config, fn, create)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.maildir.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|supported_platform : NoneType<br ALIGN="LEFT"/>|get_metadata_keywords(toc_id)<br ALIGN="LEFT"/>parse_path(config, fn, create)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.maildirwin.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|colon : str<br ALIGN="LEFT"/>supported_platform : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailboxes.mbox.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|editable : bool<br ALIGN="LEFT"/>is_local : bool<br ALIGN="LEFT"/>|get_bytes(toc_id)<br ALIGN="LEFT"/>get_file_by_ptr(msg_ptr)<br ALIGN="LEFT"/>get_metadata_keywords(toc_id)<br ALIGN="LEFT"/>get_msg_cs(start, cs_size, max_length)<br ALIGN="LEFT"/>get_msg_cs1k(start, max_length)<br ALIGN="LEFT"/>get_msg_cs80b(start, max_length)<br ALIGN="LEFT"/>get_msg_ptr(mboxid, toc_id)<br ALIGN="LEFT"/>get_msg_size(toc_id)<br ALIGN="LEFT"/>parse_path(config, fn, create)<br ALIGN="LEFT"/>save(session, to, pickler)<br ALIGN="LEFT"/><I>set_metadata_keywords</I>()<br ALIGN="LEFT"/>update_toc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.pop3.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|UNPICKLABLE : list<br ALIGN="LEFT"/>|parse_path(config, path, create)<br ALIGN="LEFT"/><I>save</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.wervd.MailpileMailbox" [color="black", fontcolor="black", label=<{MailpileMailbox|colon : str<br ALIGN="LEFT"/>supported_platform : NoneType<br ALIGN="LEFT"/>|add(message, copies)<br ALIGN="LEFT"/>get_file(key)<br ALIGN="LEFT"/>get_message(key)<br ALIGN="LEFT"/>get_metadata_keywords(toc_id)<br ALIGN="LEFT"/>get_string(key)<br ALIGN="LEFT"/>parse_path(config, fn, create)<br ALIGN="LEFT"/>remove(key)<br ALIGN="LEFT"/>set_metadata_keywords(toc_id, kws)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.gui.MailpileSeleniumTest" [color="black", fontcolor="black", label=<{MailpileSeleniumTest|DRIVER : NoneType<br ALIGN="LEFT"/>driver : NoneType<br ALIGN="LEFT"/>http_worker : NoneType<br ALIGN="LEFT"/>|assert_link_with_text(text)<br ALIGN="LEFT"/>assert_text(text)<br ALIGN="LEFT"/>click_element_with_class(class_name)<br ALIGN="LEFT"/>click_element_with_id(element_id)<br ALIGN="LEFT"/>click_element_with_link_text(text)<br ALIGN="LEFT"/>dump_source_to(filename)<br ALIGN="LEFT"/>fill_form_field(field, text)<br ALIGN="LEFT"/>find_element_by_class_name(class_name)<br ALIGN="LEFT"/>find_element_by_id(id)<br ALIGN="LEFT"/>find_element_by_xpath(xpath)<br ALIGN="LEFT"/>find_element_containing_text(text)<br ALIGN="LEFT"/>go_to_mailpile_home()<br ALIGN="LEFT"/>navigate_to(name)<br ALIGN="LEFT"/>page_title()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>submit_form(form_id)<br ALIGN="LEFT"/>take_screenshot(filename)<br ALIGN="LEFT"/><I>tearDown</I>()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>wait_for_element_condition(expected_conditions)<br ALIGN="LEFT"/>wait_until_element_has_class(locator_tuple, class_name)<br ALIGN="LEFT"/>wait_until_element_has_not_class(locator_tuple, class_name)<br ALIGN="LEFT"/>wait_until_element_is_invisible_by_locator(locator_tuple)<br ALIGN="LEFT"/>wait_until_element_is_visible(element_id)<br ALIGN="LEFT"/>wait_until_element_is_visible_by_locator(locator_tuple)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.MailpileVCard" [color="black", fontcolor="black", label=<{MailpileVCard|DEFAULT_CLIENT : str<br ALIGN="LEFT"/>HISTORY_MAX_AGE : int<br ALIGN="LEFT"/>MPCARD_SINGLETONS : tuple<br ALIGN="LEFT"/>MPCARD_SUPPRESSED : tuple<br ALIGN="LEFT"/>PRIORITY_CLIENT : str<br ALIGN="LEFT"/>USER_CLIENT : str<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>crypto_format<br ALIGN="LEFT"/>crypto_policy<br ALIGN="LEFT"/>decryption_key_func<br ALIGN="LEFT"/>encryption_key_func<br ALIGN="LEFT"/>filename : NoneType<br ALIGN="LEFT"/>pgp_key<br ALIGN="LEFT"/>pgp_key_shared<br ALIGN="LEFT"/>random_uid<br ALIGN="LEFT"/>route<br ALIGN="LEFT"/>signature<br ALIGN="LEFT"/>tag<br ALIGN="LEFT"/>|add_scope(scope)<br ALIGN="LEFT"/>add_source(source_id)<br ALIGN="LEFT"/>as_mpCard()<br ALIGN="LEFT"/>configure_encryption(config)<br ALIGN="LEFT"/>get_source_by_proto(protocol, create, name)<br ALIGN="LEFT"/>load(filename, data, config)<br ALIGN="LEFT"/>prefer_sender(address, sender)<br ALIGN="LEFT"/>recent_history(now)<br ALIGN="LEFT"/>record_history(what, when, mid, now)<br ALIGN="LEFT"/>same_domain(address)<br ALIGN="LEFT"/>save(filename)<br ALIGN="LEFT"/>sending_profile(address)<br ALIGN="LEFT"/>sends_to(address)<br ALIGN="LEFT"/>sources()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vfs.MailpileVFS" [color="black", fontcolor="black", label=<{MailpileVFS|<br ALIGN="LEFT"/>|abspath_(path)<br ALIGN="LEFT"/>display_name_(path)<br ALIGN="LEFT"/>exists_(path)<br ALIGN="LEFT"/>getflags_(path)<br ALIGN="LEFT"/>getsize_(path)<br ALIGN="LEFT"/>glob_(path)<br ALIGN="LEFT"/>isdir_(path)<br ALIGN="LEFT"/>ismailsource_(path)<br ALIGN="LEFT"/>listdir_(path)<br ALIGN="LEFT"/>mailbox_type_(path, config)<br ALIGN="LEFT"/>open_(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vfs.MailpileVfsBase" [color="black", fontcolor="black", label=<{MailpileVfsBase|FS_ROOT : NoneType<br ALIGN="LEFT"/>abspath_<br ALIGN="LEFT"/>exists_<br ALIGN="LEFT"/>getsize_<br ALIGN="LEFT"/>glob_<br ALIGN="LEFT"/>isdir_<br ALIGN="LEFT"/>ismailsource_<br ALIGN="LEFT"/>listdir_<br ALIGN="LEFT"/>mailbox_type_<br ALIGN="LEFT"/>open_<br ALIGN="LEFT"/>|Handles(path)<br ALIGN="LEFT"/>abspath(fp)<br ALIGN="LEFT"/>display_name(fp, config)<br ALIGN="LEFT"/>display_name_(fp, config)<br ALIGN="LEFT"/>exists(fp)<br ALIGN="LEFT"/>getflags(fp, config)<br ALIGN="LEFT"/>getflags_(fp, config)<br ALIGN="LEFT"/>getinfo(fp, config)<br ALIGN="LEFT"/>getinfo_(fp, config)<br ALIGN="LEFT"/>getsize(fp)<br ALIGN="LEFT"/>glob(fp)<br ALIGN="LEFT"/>isdir(fp)<br ALIGN="LEFT"/>ismailsource(fp)<br ALIGN="LEFT"/>listdir(fp)<br ALIGN="LEFT"/>mailbox_type(fp, config)<br ALIGN="LEFT"/>open(fp)<br ALIGN="LEFT"/>open_mailbox(fp)<br ALIGN="LEFT"/>path_join(fp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vfs.MailpileVfsLocal" [color="black", fontcolor="black", label=<{MailpileVfsLocal|<br ALIGN="LEFT"/>|Handles(path)<br ALIGN="LEFT"/>abspath_(path)<br ALIGN="LEFT"/>exists_(path)<br ALIGN="LEFT"/>getsize_(path)<br ALIGN="LEFT"/>glob_()<br ALIGN="LEFT"/>isdir_(path)<br ALIGN="LEFT"/>ismailsource_(fp)<br ALIGN="LEFT"/>listdir_()<br ALIGN="LEFT"/>mailbox_type_(path, config)<br ALIGN="LEFT"/>open_()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vfs.MailpileVfsRoot" [color="black", fontcolor="black", label=<{MailpileVfsRoot|config<br ALIGN="LEFT"/>entries : dict<br ALIGN="LEFT"/>|Handles(path)<br ALIGN="LEFT"/>abspath_(fp)<br ALIGN="LEFT"/>display_name_(fp, config)<br ALIGN="LEFT"/>exists_(fp)<br ALIGN="LEFT"/>getsize_(fp)<br ALIGN="LEFT"/>glob_()<br ALIGN="LEFT"/>isdir_(fp)<br ALIGN="LEFT"/>ismailsource_(fp)<br ALIGN="LEFT"/>listdir_(fp)<br ALIGN="LEFT"/>mailbox_type_(fp, config)<br ALIGN="LEFT"/>open_(fp)<br ALIGN="LEFT"/>rescan()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.migrate.Migrate" [color="black", fontcolor="black", label=<{Migrate|COMMAND_SECURITY : list<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(before_setup, after_setup)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.mime.MimeEncryptingWrapper" [color="black", fontcolor="black", label=<{MimeEncryptingWrapper|CONTAINER_PARAMS : tuple<br ALIGN="LEFT"/>CONTAINER_TYPE : str<br ALIGN="LEFT"/>ENCRYPTION_TYPE : str<br ALIGN="LEFT"/>ENCRYPTION_VERSION : int<br ALIGN="LEFT"/>enc_data : MIMEBase<br ALIGN="LEFT"/>version : MIMEBase<br ALIGN="LEFT"/>|wrap(msg, prefer_inline)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.mime.MimeSigningWrapper" [color="black", fontcolor="black", label=<{MimeSigningWrapper|CONTAINER_PARAMS : tuple<br ALIGN="LEFT"/>CONTAINER_TYPE : str<br ALIGN="LEFT"/>SIGNATURE_DESC : str<br ALIGN="LEFT"/>SIGNATURE_TYPE : str<br ALIGN="LEFT"/>sigblock : MIMEBase<br ALIGN="LEFT"/>|wrap(msg, prefer_inline)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.mime.MimeWrapper" [color="black", fontcolor="black", label=<{MimeWrapper|CONTAINER_PARAMS : tuple<br ALIGN="LEFT"/>CONTAINER_TYPE : str<br ALIGN="LEFT"/>cleaner : NoneType<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>container : MIMEMultipart<br ALIGN="LEFT"/>recipients : list<br ALIGN="LEFT"/>sender : NoneType<br ALIGN="LEFT"/>|attach(part)<br ALIGN="LEFT"/>crypto()<br ALIGN="LEFT"/>flatten(msg, unixfrom)<br ALIGN="LEFT"/>get_keys(people)<br ALIGN="LEFT"/>get_only_text_part(msg)<br ALIGN="LEFT"/>wrap(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_mork.MorkImporter" [color="black", fontcolor="black", label=<{MorkImporter|CONFIG_RULES : dict<br ALIGN="LEFT"/>FORMAT_DESCRPTION : str<br ALIGN="LEFT"/>FORMAT_NAME : str<br ALIGN="LEFT"/>SHORT_NAME : str<br ALIGN="LEFT"/>backslash : dict<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>pCellEscape<br ALIGN="LEFT"/>pCellOid<br ALIGN="LEFT"/>pCellText<br ALIGN="LEFT"/>pMindyEscape<br ALIGN="LEFT"/>|addRow(db, table, rowid, cells)<br ALIGN="LEFT"/>addToDict(dict, cells)<br ALIGN="LEFT"/>decodeMorkValue(value)<br ALIGN="LEFT"/>delRow(db, table, rowid)<br ALIGN="LEFT"/>encodeMindyValue(value)<br ALIGN="LEFT"/>escapeData(match)<br ALIGN="LEFT"/>escapeMindy(match)<br ALIGN="LEFT"/>getRowIdScope(rowid, cdict)<br ALIGN="LEFT"/>get_vcards()<br ALIGN="LEFT"/>inputMork(data)<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>morkToHash()<br ALIGN="LEFT"/>unescapeMork(match)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.MoveFilter" [color="black", fontcolor="black", label=<{MoveFilter|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.postinglist.NewPostingList" [color="black", fontcolor="black", label=<{NewPostingList|HASH_LEN : int<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>plc : NoneType<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>sig<br ALIGN="LEFT"/>word<br ALIGN="LEFT"/>|Append(session, word, values, compact, sig)<br ALIGN="LEFT"/>Optimize(session, index, lazy, quick)<br ALIGN="LEFT"/>append()<br ALIGN="LEFT"/>hits()<br ALIGN="LEFT"/>remove(eids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Next" [color="black", fontcolor="black", label=<{Next|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.nicknym.Nicknym" [color="black", fontcolor="black", label=<{Nicknym|config<br ALIGN="LEFT"/>|get_key(address, keytype, server)<br ALIGN="LEFT"/>refresh_keys()<br ALIGN="LEFT"/><I>send_key</I>(address, public_key, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.nicknym.NicknymGetKey" [color="black", fontcolor="black", label=<{NicknymGetKey|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.keylookup.nicknym.NicknymRefreshKeys" [color="black", fontcolor="black", label=<{NicknymRefreshKeys|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap._Mocks.NoDns" [color="black", fontcolor="black", label=<{NoDns|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailutils.NoFromAddressError" [color="black", fontcolor="red", label=<{NoFromAddressError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailutils.NoRecipientError" [color="black", fontcolor="red", label=<{NoRecipientError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailutils.NoSuchMailboxError" [color="black", fontcolor="red", label=<{NoSuchMailboxError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailboxes.NoSuchMailboxError" [color="black", fontcolor="red", label=<{NoSuchMailboxError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailutils.NotEditableError" [color="black", fontcolor="red", label=<{NotEditableError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.postinglist.OldPostingList" [color="black", fontcolor="black", label=<{OldPostingList|CHARACTERS : str<br ALIGN="LEFT"/>HASH_LEN : int<br ALIGN="LEFT"/>MAX_SIZE : int<br ALIGN="LEFT"/>WORDS : dict<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>filename : NoneType<br ALIGN="LEFT"/>lock<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>sig<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>word<br ALIGN="LEFT"/>|Append()<br ALIGN="LEFT"/>GetFile(session, sig, mode)<br ALIGN="LEFT"/>Lock(lock, method)<br ALIGN="LEFT"/>Optimize()<br ALIGN="LEFT"/>SaveFile(session, prefix)<br ALIGN="LEFT"/>WordSig(word, config)<br ALIGN="LEFT"/>append(eid)<br ALIGN="LEFT"/>hits()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>remove(eids)<br ALIGN="LEFT"/>save(prefix, compact, mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.OpenPGPMimeEncryptingWrapper" [color="black", fontcolor="black", label=<{OpenPGPMimeEncryptingWrapper|CONTAINER_PARAMS : tuple<br ALIGN="LEFT"/>ENCRYPTION_TYPE : str<br ALIGN="LEFT"/>ENCRYPTION_VERSION : int<br ALIGN="LEFT"/>|crypto()<br ALIGN="LEFT"/>get_keys(who)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.OpenPGPMimeSignEncryptWrapper" [color="black", fontcolor="black", label=<{OpenPGPMimeSignEncryptWrapper|CONTAINER_PARAMS : tuple<br ALIGN="LEFT"/>ENCRYPTION_TYPE : str<br ALIGN="LEFT"/>ENCRYPTION_VERSION : int<br ALIGN="LEFT"/>|crypto()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.OpenPGPMimeSigningWrapper" [color="black", fontcolor="black", label=<{OpenPGPMimeSigningWrapper|CONTAINER_PARAMS : tuple<br ALIGN="LEFT"/>SIGNATURE_DESC : str<br ALIGN="LEFT"/>SIGNATURE_TYPE : str<br ALIGN="LEFT"/>|crypto()<br ALIGN="LEFT"/>get_keys(who)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Optimize" [color="black", fontcolor="black", label=<{Optimize|ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(slowly)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Order" [color="black", fontcolor="black", label=<{Order|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Output" [color="black", fontcolor="black", label=<{Output|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>LOG_NOTHING : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>etag_data()<br ALIGN="LEFT"/>get_render_mode()<br ALIGN="LEFT"/>max_age()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.OutputCoprocess" [color="black", fontcolor="black", label=<{OutputCoprocess|<br ALIGN="LEFT"/>|write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_gnupg.PGPKeysAsVCards" [color="black", fontcolor="black", label=<{PGPKeysAsVCards|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_gnupg.PGPKeysImportAsVCards" [color="black", fontcolor="black", label=<{PGPKeysImportAsVCards|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.pop3.POP3Mailbox" [color="black", fontcolor="black", label=<{POP3Mailbox|conn_cls : NoneType<br ALIGN="LEFT"/>debug : bool<br ALIGN="LEFT"/>host<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>port : NoneType<br ALIGN="LEFT"/>secure : bool<br ALIGN="LEFT"/>use_ssl : bool<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>get_bytes(key)<br ALIGN="LEFT"/>get_file(key)<br ALIGN="LEFT"/>get_message(key)<br ALIGN="LEFT"/>get_msg_size(key)<br ALIGN="LEFT"/>iterkeys()<br ALIGN="LEFT"/>stat()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.PartialDecryptingStreamer" [color="black", fontcolor="black", label=<{PartialDecryptingStreamer|start_data<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.commands.Pipe" [color="black", fontcolor="black", label=<{Pipe|COMMAND_SECURITY : list<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.PluginError" [color="black", fontcolor="red", label=<{PluginError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.PluginManager" [color="black", fontcolor="black", label=<{PluginManager|BUILTIN : list<br ALIGN="LEFT"/>CSS_FILES : dict<br ALIGN="LEFT"/>DATA_KW_EXTRACTORS : dict<br ALIGN="LEFT"/>DEFAULT : list<br ALIGN="LEFT"/>DISCOVERED : dict<br ALIGN="LEFT"/>FAST_PERIODIC_JOBS : dict<br ALIGN="LEFT"/>FILTER_HOOKS_POST : dict<br ALIGN="LEFT"/>FILTER_HOOKS_PRE : dict<br ALIGN="LEFT"/>INCOMING_EMAIL_CONTENT : dict<br ALIGN="LEFT"/>INCOMING_EMAIL_ENCRYPTION : dict<br ALIGN="LEFT"/>JS_CLASSES : dict<br ALIGN="LEFT"/>LOADED : list<br ALIGN="LEFT"/>META_KW_EXTRACTORS : dict<br ALIGN="LEFT"/>OUTGOING_EMAIL_CONTENT : dict<br ALIGN="LEFT"/>OUTGOING_EMAIL_ENCRYPTION : dict<br ALIGN="LEFT"/>RENAMED : dict<br ALIGN="LEFT"/>REQUIRED : list<br ALIGN="LEFT"/>SEARCH_TERMS : dict<br ALIGN="LEFT"/>SLOW_PERIODIC_JOBS : dict<br ALIGN="LEFT"/>TEXT_KW_EXTRACTORS : dict<br ALIGN="LEFT"/>UI_ELEMENTS : dict<br ALIGN="LEFT"/>VCARD_CONTEXT_PROVIDERS : dict<br ALIGN="LEFT"/>VCARD_EXPORTERS : dict<br ALIGN="LEFT"/>VCARD_IMPORTERS : dict<br ALIGN="LEFT"/>WANTED : list<br ALIGN="LEFT"/>WEB_ASSETS : dict<br ALIGN="LEFT"/>WORKERS : list<br ALIGN="LEFT"/>builtin : bool<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>deprecated : bool<br ALIGN="LEFT"/>loading_builtin : NoneType, bool<br ALIGN="LEFT"/>loading_plugin : NoneType<br ALIGN="LEFT"/>manifests : list<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>|available()<br ALIGN="LEFT"/>discover(paths, update)<br ALIGN="LEFT"/>get_css_files()<br ALIGN="LEFT"/>get_data_kw_extractors()<br ALIGN="LEFT"/>get_filter_hooks(hooks)<br ALIGN="LEFT"/>get_js_classes()<br ALIGN="LEFT"/>get_meta_kw_extractors()<br ALIGN="LEFT"/>get_search_term(term, default)<br ALIGN="LEFT"/>get_text_kw_extractors()<br ALIGN="LEFT"/>get_ui_elements(ui_type, context)<br ALIGN="LEFT"/>get_web_asset(path, default)<br ALIGN="LEFT"/>incoming_email_content_transform(config, msg)<br ALIGN="LEFT"/>incoming_email_crypto_transform(cfg, msg)<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>loadable()<br ALIGN="LEFT"/>outgoing_email_content_transform(cfg, s, r, m)<br ALIGN="LEFT"/>outgoing_email_crypto_transform(cfg, s, r, m)<br ALIGN="LEFT"/>process_manifests()<br ALIGN="LEFT"/>process_shutdown_hooks()<br ALIGN="LEFT"/>register_commands()<br ALIGN="LEFT"/>register_config_section()<br ALIGN="LEFT"/>register_config_variables()<br ALIGN="LEFT"/>register_contact_context_providers()<br ALIGN="LEFT"/>register_contact_exporters()<br ALIGN="LEFT"/>register_css(plugin, classname, filename)<br ALIGN="LEFT"/>register_data_kw_extractor(term, function)<br ALIGN="LEFT"/>register_fast_periodic_job(name, period, callback)<br ALIGN="LEFT"/>register_filter_hook_post(name, hook)<br ALIGN="LEFT"/>register_filter_hook_pre(name, hook)<br ALIGN="LEFT"/>register_incoming_email_content_transform(name, transform)<br ALIGN="LEFT"/>register_incoming_email_crypto_transform(name, transform)<br ALIGN="LEFT"/>register_js(plugin, classname, filename)<br ALIGN="LEFT"/>register_meta_kw_extractor(term, function)<br ALIGN="LEFT"/>register_outgoing_email_content_transform(name, transform)<br ALIGN="LEFT"/>register_outgoing_email_crypto_transform(name, transform)<br ALIGN="LEFT"/>register_search_term(term, function)<br ALIGN="LEFT"/>register_slow_periodic_job(name, period, callback)<br ALIGN="LEFT"/>register_text_kw_extractor(term, function)<br ALIGN="LEFT"/>register_ui_element(ui_type, context, name, text, icon, description, url, javascript_setup, javascript_events)<br ALIGN="LEFT"/>register_vcard_importers()<br ALIGN="LEFT"/>register_web_asset(plugin, path, filename, mimetype)<br ALIGN="LEFT"/>register_worker(thread_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_plugin.PluginTest" [color="black", fontcolor="black", label=<{PluginTest|plugin_dir<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_code_files_are_loaded_in_order()<br ALIGN="LEFT"/>test_plugin_is_discovered()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.plugins.Plugins" [color="black", fontcolor="black", label=<{Plugins|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.pop3.Pop3MailSource" [color="black", fontcolor="black", label=<{Pop3MailSource|watching : int<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>discover_mailboxes(paths)<br ALIGN="LEFT"/>is_mailbox(fn)<br ALIGN="LEFT"/>open()<br ALIGN="LEFT"/>open_mailbox(mbx_id, mfn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.postinglist.PostingListContainer" [color="black", fontcolor="black", label=<{PostingListContainer|MAX_HASH_LEN : int<br ALIGN="LEFT"/>MAX_ITEMS : int<br ALIGN="LEFT"/>changed : bool<br ALIGN="LEFT"/>changes : int<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>fd : NoneType<br ALIGN="LEFT"/>lock<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>sig : NoneType<br ALIGN="LEFT"/>words : dict<br ALIGN="LEFT"/>|Load(session, sig, uncached_cb)<br ALIGN="LEFT"/>add()<br ALIGN="LEFT"/>get(sig, default)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>save(split)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Previous" [color="black", fontcolor="black", label=<{Previous|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.Profile" [color="black", fontcolor="black", label=<{Profile|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.ProfileVCard.ProfileVCardCommand" [color="black", fontcolor="black", label=<{ProfileVCardCommand|DEFAULT_KEYTYPE : str<br ALIGN="LEFT"/>KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>VCARD : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.commands.ProgramStatus" [color="black", fontcolor="black", label=<{ProgramStatus|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>LOG_NOTHING : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(args)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Quit" [color="black", fontcolor="black", label=<{Quit|ABOUT : str<br ALIGN="LEFT"/>COMMAND_SECURITY : list<br ALIGN="LEFT"/>CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>RAISES : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.View.RawResult" [color="black", fontcolor="black", label=<{RawResult|<br ALIGN="LEFT"/>|as_html()<br ALIGN="LEFT"/>as_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.streamer.ReadLineIOFilter" [color="black", fontcolor="black", label=<{ReadLineIOFilter|info : str<br ALIGN="LEFT"/>start_data : NoneType<br ALIGN="LEFT"/>stop_check : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.compose.RelativeCompose" [color="black", fontcolor="black", label=<{RelativeCompose|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.RemoveContact" [color="black", fontcolor="black", label=<{RemoveContact|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.groups.RemoveGroup" [color="black", fontcolor="black", label=<{RemoveGroup|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.RemoveProfile" [color="black", fontcolor="black", label=<{RemoveProfile|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.RemoveVCard" [color="black", fontcolor="black", label=<{RemoveVCard|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.RenderPage" [color="black", fontcolor="black", label=<{RenderPage|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_STRICT_VARS : bool<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>template_path(ttype, template_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.Reply" [color="black", fontcolor="black", label=<{Reply|HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|CreateReply(idx, session, refs, msgid, reply_all, cid, ephemeral)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.Rescan" [color="black", fontcolor="black", label=<{Rescan|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>LOG_PROGRESS : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(slowly, cron)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag.Retrain" [color="black", fontcolor="black", label=<{Retrain|SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>interval_retrain(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_mork.MorkImporter.Row" [color="black", fontcolor="black", label=<{Row|cells : list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>scope : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.commands.RunWWW" [color="black", fontcolor="black", label=<{RunWWW|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.smtp_client.SMTP" [color="black", fontcolor="black", label=<{SMTP|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.smtp_server.SMTPChannel" [color="black", fontcolor="black", label=<{SMTPChannel|HASHCASH_URL : str<br ALIGN="LEFT"/>HASHCASH_WANT_BITS : int<br ALIGN="LEFT"/>MAX_MESSAGE_SIZE : int<br ALIGN="LEFT"/>is_spam : bool<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>too_much_data : bool<br ALIGN="LEFT"/>want_hashcash : dict<br ALIGN="LEFT"/>|collect_incoming_data(data)<br ALIGN="LEFT"/>push(msg)<br ALIGN="LEFT"/>smtp_DATA(arg)<br ALIGN="LEFT"/>smtp_MAIL(arg)<br ALIGN="LEFT"/>smtp_RCPT(arg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.smtp_server.SMTPServer" [color="black", fontcolor="black", label=<{SMTPServer|session<br ALIGN="LEFT"/>|handle_accept()<br ALIGN="LEFT"/>process_message(peer, mailfrom, rcpttos, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.smtp_server.SMTPWorker" [color="black", fontcolor="black", label=<{SMTPWorker|quitting : bool<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|quit(join)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.smtp_client.SMTP_SSL" [color="black", fontcolor="black", label=<{SMTP_SSL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.safe_popen.Safe_Pipe" [color="black", fontcolor="black", label=<{Safe_Pipe|read_end<br ALIGN="LEFT"/>write_end<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>read()<br ALIGN="LEFT"/>write()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.safe_popen.Safe_Popen" [color="black", fontcolor="black", label=<{Safe_Popen|<br ALIGN="LEFT"/>|communicate()<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.Search" [color="black", fontcolor="black", label=<{Search|CHANGES_SESSION_CONTEXT : bool<br ALIGN="LEFT"/>COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>|cache_requirements(result)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>state_as_query_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.search_history.SearchHistory" [color="black", fontcolor="black", label=<{SearchHistory|DEFAULT_TTL : int<br ALIGN="LEFT"/>PICKLE_NAME : str<br ALIGN="LEFT"/>RAW_RESULT_TTL : int<br ALIGN="LEFT"/>cache : dict<br ALIGN="LEFT"/>changed : bool<br ALIGN="LEFT"/>|Load(config, merge)<br ALIGN="LEFT"/>add(terms, results, order)<br ALIGN="LEFT"/>expire(ttl, compact)<br ALIGN="LEFT"/>get(session, fprint)<br ALIGN="LEFT"/>save(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.SearchResults" [color="black", fontcolor="black", label=<{SearchResults|PRUNE_MSG_TREE : tuple<br ALIGN="LEFT"/>TAG_TYPE_FLAG_MAP : dict<br ALIGN="LEFT"/>WANT_MSG_TREE : tuple<br ALIGN="LEFT"/>emails : NoneType<br ALIGN="LEFT"/>idx<br ALIGN="LEFT"/>people : NoneType<br ALIGN="LEFT"/>results<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>urlmap<br ALIGN="LEFT"/>|add_email(e)<br ALIGN="LEFT"/>add_msg_info(mid, msg_info, full_threads, idxs)<br ALIGN="LEFT"/>as_text()<br ALIGN="LEFT"/>next_set()<br ALIGN="LEFT"/>previous_set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.gui.SeleniumScreenshotOnExceptionAspecter" [color="black", fontcolor="black", label=<{SeleniumScreenshotOnExceptionAspecter|<br ALIGN="LEFT"/>|wrap_method(method)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.smtp_client.SendMailError" [color="black", fontcolor="red", label=<{SendMailError|error_info : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.compose.Sendit" [color="black", fontcolor="black", label=<{Sendit|EVENT_SOURCE : str<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(emails)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.auth.SetPassphrase" [color="black", fontcolor="black", label=<{SetPassphrase|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>IS_INTERACTIVE : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.Setup" [color="black", fontcolor="black", label=<{Setup|HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>KEY_CREATING_THREAD : NoneType<br ALIGN="LEFT"/>KEY_EDITING_THREAD : NoneType<br ALIGN="LEFT"/>KEY_WORKER_LOCK<br ALIGN="LEFT"/>LOG_PROGRESS : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|Next(config, default, needed_auth)<br ALIGN="LEFT"/>cli_setup_command(session)<br ALIGN="LEFT"/>setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupConfigureKey" [color="black", fontcolor="black", label=<{SetupConfigureKey|HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>HTTP_QUERY_VARS<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>TEST_DATA : dict<br ALIGN="LEFT"/>|setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupCrypto" [color="black", fontcolor="black", label=<{SetupCrypto|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>TEST_DATA : dict<br ALIGN="LEFT"/>|gpg_key_ready(gpg_keygen)<br ALIGN="LEFT"/>list_secret_keys()<br ALIGN="LEFT"/>save_profiles_to_key(key_id, add_all, now, profiles)<br ALIGN="LEFT"/>setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupGetEmailSettings" [color="black", fontcolor="black", label=<{SetupGetEmailSettings|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS<br ALIGN="LEFT"/>ISPDB_URL : str<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>TEST_DATA : dict<br ALIGN="LEFT"/>deadline<br ALIGN="LEFT"/>tracking_id<br ALIGN="LEFT"/>|setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupMagic" [color="black", fontcolor="black", label=<{SetupMagic|COMMAND_SECURITY : list<br ALIGN="LEFT"/>LOG_PROGRESS : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>TAGS : dict<br ALIGN="LEFT"/>|basic_app_config(session, save_and_update_workers, want_daemons)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>make_master_key()<br ALIGN="LEFT"/><I>setup_command</I>(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupPassword" [color="black", fontcolor="black", label=<{SetupPassword|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupProfiles" [color="black", fontcolor="black", label=<{SetupProfiles|HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>HTTP_QUERY_VARS<br ALIGN="LEFT"/>PASSWORD_CACHE : dict<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>TEST_DATA : dict<br ALIGN="LEFT"/>|auto_create_profiles()<br ALIGN="LEFT"/>discover_new_email_addresses(profiles)<br ALIGN="LEFT"/>get_profiles(secret_keys)<br ALIGN="LEFT"/>setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupTestRoute" [color="black", fontcolor="black", label=<{SetupTestRoute|HTTP_AUTH_REQUIRED : bool<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>TEST_DATA : dict<br ALIGN="LEFT"/>|setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.SetupWelcome" [color="black", fontcolor="black", label=<{SetupWelcome|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|bg_setup_stage_1()<br ALIGN="LEFT"/>configure_language(session, config, language, save)<br ALIGN="LEFT"/>setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap.SharedImapConn" [color="black", fontcolor="black", label=<{SharedImapConn|daemon : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>mailbox_info(k, default)<br ALIGN="LEFT"/>quit()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>select(mailbox, readonly)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap.SharedImapMailbox" [color="black", fontcolor="black", label=<{SharedImapMailbox|config<br ALIGN="LEFT"/>conn_cls : NoneType<br ALIGN="LEFT"/>editable : bool<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>|add(message)<br ALIGN="LEFT"/><I>close</I>()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/>get(key, _bytes)<br ALIGN="LEFT"/>get_bytes(key)<br ALIGN="LEFT"/>get_file(key)<br ALIGN="LEFT"/>get_file_by_ptr(msg_ptr)<br ALIGN="LEFT"/>get_info(key)<br ALIGN="LEFT"/>get_message(key)<br ALIGN="LEFT"/>get_metadata_keywords(key)<br ALIGN="LEFT"/>get_msg_ptr(mboxid, key)<br ALIGN="LEFT"/>get_msg_size(key)<br ALIGN="LEFT"/>iterkeys()<br ALIGN="LEFT"/><I>lock</I>()<br ALIGN="LEFT"/>mailbox_info(k, default)<br ALIGN="LEFT"/>open_imap()<br ALIGN="LEFT"/>remove(key)<br ALIGN="LEFT"/><I>save</I>()<br ALIGN="LEFT"/>timed_imap()<br ALIGN="LEFT"/><I>unlock</I>()<br ALIGN="LEFT"/><I>update_toc</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.mime.SignatureFailureError" [color="black", fontcolor="red", label=<{SignatureFailureError|from_key<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.state.SignatureInfo" [color="black", fontcolor="black", label=<{SignatureInfo|KEYS : list<br ALIGN="LEFT"/>STATUSES : list<br ALIGN="LEFT"/>part_status : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.vcard.SimpleVCard" [color="black", fontcolor="black", label=<{SimpleVCard|MAX_SRC_PID : int<br ALIGN="LEFT"/>UNREMOVABLE : tuple<br ALIGN="LEFT"/>VCARD4_KEYS : dict<br ALIGN="LEFT"/>VCARD4_REQUIRED : tuple<br ALIGN="LEFT"/>VCARD_OTHER_KEYS : dict<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>filename : NoneType<br ALIGN="LEFT"/>fn<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>nickname<br ALIGN="LEFT"/>note<br ALIGN="LEFT"/>|add()<br ALIGN="LEFT"/>as_jCard()<br ALIGN="LEFT"/>as_lines()<br ALIGN="LEFT"/>as_vCard()<br ALIGN="LEFT"/>get(key, default, n, prefer)<br ALIGN="LEFT"/>get_all(key, sort)<br ALIGN="LEFT"/>get_clientpidmap()<br ALIGN="LEFT"/>get_pidmap(src_id, create)<br ALIGN="LEFT"/>merge(src_id, lines)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>remove_all(name)<br ALIGN="LEFT"/>set_line(ln, vcl)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag_sb.SpamBayesTagger" [color="black", fontcolor="black", label=<{SpamBayesTagger|<br ALIGN="LEFT"/>|should_tag(atagger, at_config, msg, keywords)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag_sb.SpamBayesTrainer" [color="black", fontcolor="black", label=<{SpamBayesTrainer|<br ALIGN="LEFT"/>|learn(atagger, at_config, msg, keywords, should_tag)<br ALIGN="LEFT"/>reset(atagger, at_config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.packing.StorageBackedData" [color="black", fontcolor="black", label=<{StorageBackedData|auto_save : bool<br ALIGN="LEFT"/>dirty : bool<br ALIGN="LEFT"/>interval : int<br ALIGN="LEFT"/>last_save<br ALIGN="LEFT"/>|add()<br ALIGN="LEFT"/>append()<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>count()<br ALIGN="LEFT"/>difference()<br ALIGN="LEFT"/>difference_update()<br ALIGN="LEFT"/>discard()<br ALIGN="LEFT"/>extend()<br ALIGN="LEFT"/>index()<br ALIGN="LEFT"/>insert()<br ALIGN="LEFT"/>intersection()<br ALIGN="LEFT"/>intersection_update()<br ALIGN="LEFT"/>isdisjoint()<br ALIGN="LEFT"/>issubset()<br ALIGN="LEFT"/>issuperset()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>reverse()<br ALIGN="LEFT"/>save(maybe)<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>symmetric_difference()<br ALIGN="LEFT"/>symmetric_difference_update()<br ALIGN="LEFT"/>union()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.packing.StorageBackedLongs" [color="black", fontcolor="black", label=<{StorageBackedLongs|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.packing.StorageBackedSet" [color="black", fontcolor="black", label=<{StorageBackedSet|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.StreamReader" [color="black", fontcolor="black", label=<{StreamReader|lines : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>|readin(fd, callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap_utf7.StreamReader" [color="black", fontcolor="black", label=<{StreamReader|<br ALIGN="LEFT"/>|decode(s, errors)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.gpgi.StreamWriter" [color="black", fontcolor="black", label=<{StreamWriter|name<br ALIGN="LEFT"/>partial_write_ok : bool<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>|writeout(fd, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap_utf7.StreamWriter" [color="black", fontcolor="black", label=<{StreamWriter|<br ALIGN="LEFT"/>|decode(s, errors)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.vcard_mork.MorkImporter.Table" [color="black", fontcolor="black", label=<{Table|id : NoneType<br ALIGN="LEFT"/>kind : NoneType<br ALIGN="LEFT"/>rows : dict<br ALIGN="LEFT"/>scope : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.tags.Tag" [color="black", fontcolor="black", label=<{Tag|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|Undo(undo, event)<br ALIGN="LEFT"/>command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.TagCommand" [color="black", fontcolor="black", label=<{TagCommand|<br ALIGN="LEFT"/>|finish(save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.gui.test_tags.TagGuiTest" [color="black", fontcolor="black", label=<{TagGuiTest|<br ALIGN="LEFT"/>|test_mark_read_unread()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.TagLater" [color="black", fontcolor="black", label=<{TagLater|SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.tags.TagTemporarily" [color="black", fontcolor="black", label=<{TagTemporarily|SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag.Tagger" [color="black", fontcolor="black", label=<{Tagger|<br ALIGN="LEFT"/>|should_tag(atagger, at_config, msg, keywords)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_command.TestCommandResult" [color="black", fontcolor="black", label=<{TestCommandResult|<br ALIGN="LEFT"/>|test_command_result_as_dict()<br ALIGN="LEFT"/>test_command_result_as_html()<br ALIGN="LEFT"/>test_command_result_as_json()<br ALIGN="LEFT"/>test_command_result_as_text()<br ALIGN="LEFT"/>test_command_result_as_text_for_boolean_result()<br ALIGN="LEFT"/>test_command_result_non_zero()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_command.TestCommands" [color="black", fontcolor="black", label=<{TestCommands|<br ALIGN="LEFT"/>|test_add()<br ALIGN="LEFT"/>test_add_mailbox_already_in_pile()<br ALIGN="LEFT"/>test_add_mailbox_no_such_directory()<br ALIGN="LEFT"/>test_crypto_policy_action()<br ALIGN="LEFT"/>test_help()<br ALIGN="LEFT"/>test_help_urlmap_as_text()<br ALIGN="LEFT"/>test_help_variables()<br ALIGN="LEFT"/>test_help_with_param_search()<br ALIGN="LEFT"/>test_index()<br ALIGN="LEFT"/>test_optimize()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>test_search()<br ALIGN="LEFT"/>test_set()<br ALIGN="LEFT"/>test_unset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_config.TestConfig" [color="black", fontcolor="black", label=<{TestConfig|<br ALIGN="LEFT"/>|test_B36Check()<br ALIGN="LEFT"/>test_BoolCheck_exception()<br ALIGN="LEFT"/>test_BoolCheck_falses()<br ALIGN="LEFT"/>test_BoolCheck_trues()<br ALIGN="LEFT"/>test_DirCheck_invalid()<br ALIGN="LEFT"/>test_DirCheck_valid()<br ALIGN="LEFT"/>test_EmailCheck_invalid()<br ALIGN="LEFT"/>test_EmailCheck_valid()<br ALIGN="LEFT"/>test_FileCheck_invalid()<br ALIGN="LEFT"/>test_FileCheck_valid()<br ALIGN="LEFT"/>test_HostNameCheck_invalid()<br ALIGN="LEFT"/>test_HostNameCheck_non_socket_errors_still_raised()<br ALIGN="LEFT"/>test_HostNameCheck_valid()<br ALIGN="LEFT"/>test_HostNameValid_hostname()<br ALIGN="LEFT"/>test_HostNameValid_ipv4()<br ALIGN="LEFT"/>test_HostNameValid_ipv6()<br ALIGN="LEFT"/>test_NewPathCheck_invalid()<br ALIGN="LEFT"/>test_NewPathCheck_valid()<br ALIGN="LEFT"/>test_PathCheck_invalid()<br ALIGN="LEFT"/>test_PathCheck_valid()<br ALIGN="LEFT"/>test_RouteProtocolCheck_invalid()<br ALIGN="LEFT"/>test_RouteProtocolCheck_valid()<br ALIGN="LEFT"/>test_SlashSlugCheck()<br ALIGN="LEFT"/>test_SlugCheck_invalid()<br ALIGN="LEFT"/>test_SlugCheck_valid()<br ALIGN="LEFT"/>test_UrlCheck_invalid()<br ALIGN="LEFT"/>test_UrlCheck_valid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_eventlog.TestEventlog" [color="black", fontcolor="black", label=<{TestEventlog|<br ALIGN="LEFT"/>|<I>setUp</I>()<br ALIGN="LEFT"/><I>tearDown</I>()<br ALIGN="LEFT"/>test_ClassName()<br ALIGN="LEFT"/>test_ClassName_unicode()<br ALIGN="LEFT"/>test_NewEventId()<br ALIGN="LEFT"/>test_event_Parse()<br ALIGN="LEFT"/>test_event_Parse_invalid()<br ALIGN="LEFT"/>test_event_as_dict()<br ALIGN="LEFT"/>test_event_as_dict_no_private()<br ALIGN="LEFT"/>test_event_as_html()<br ALIGN="LEFT"/>test_event_as_json()<br ALIGN="LEFT"/>test_event_as_json_no_private()<br ALIGN="LEFT"/>test_eventlog()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_command.TestGPG" [color="black", fontcolor="black", label=<{TestGPG|<br ALIGN="LEFT"/>|test_key_import()<br ALIGN="LEFT"/>test_key_receive()<br ALIGN="LEFT"/>test_key_search()<br ALIGN="LEFT"/><I>test_nicknym_get_key</I>()<br ALIGN="LEFT"/><I>test_nicknym_refresh_key</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_performance.checkSearch.TestSearch" [color="black", fontcolor="black", label=<{TestSearch|mp<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.test_search.checkSearch.TestSearch" [color="black", fontcolor="black", label=<{TestSearch|mp<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.tests.test_command.TestTagging" [color="black", fontcolor="black", label=<{TestTagging|<br ALIGN="LEFT"/>|<I>test_addtag</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_ui.TestUI" [color="black", fontcolor="black", label=<{TestUI|<br ALIGN="LEFT"/>|test_ui_clear_log()<br ALIGN="LEFT"/>test_ui_debug_log_debug_not_set()<br ALIGN="LEFT"/>test_ui_debug_log_debug_set()<br ALIGN="LEFT"/>test_ui_display_result_text()<br ALIGN="LEFT"/>test_ui_log_block()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_vcard.TestVCard" [color="black", fontcolor="black", label=<{TestVCard|<br ALIGN="LEFT"/>|test_VCardLine_ParseLine_quoted()<br ALIGN="LEFT"/>test_VCardLine_ParseLine_unquoted()<br ALIGN="LEFT"/>test_VCardLine_Quote()<br ALIGN="LEFT"/>test_VCardLine_no_args()<br ALIGN="LEFT"/>test_VCardLine_set_attr()<br ALIGN="LEFT"/>test_VCardLine_set_line_id()<br ALIGN="LEFT"/>test_VCardLine_with_args()<br ALIGN="LEFT"/>test_VCardLine_with_vcard_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.setup_magic.TestableWebbable" [color="black", fontcolor="black", label=<{TestableWebbable|HTTP_AUTH_REQUIRED : str<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>TRUTHY : dict<br ALIGN="LEFT"/>testing : NoneType<br ALIGN="LEFT"/>|setup_command(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.crypto.tor.Tor" [color="black", fontcolor="black", label=<{Tor|config : NoneType<br ALIGN="LEFT"/>original_getaddrinfo : NoneType<br ALIGN="LEFT"/>original_socket : NoneType, socket<br ALIGN="LEFT"/>tor_process : NoneType<br ALIGN="LEFT"/>|create_hidden_service(name, port, target)<br ALIGN="LEFT"/>destroy_hidden_service(name)<br ALIGN="LEFT"/>get_hidden_service_conf()<br ALIGN="LEFT"/>start_proxying_dns_through_tor()<br ALIGN="LEFT"/>start_proxying_through_tor()<br ALIGN="LEFT"/>start_tor()<br ALIGN="LEFT"/>stop_proxying_dns_through_tor()<br ALIGN="LEFT"/>stop_proxying_through_tor()<br ALIGN="LEFT"/>stop_tor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.autotag.Trainer" [color="black", fontcolor="black", label=<{Trainer|<br ALIGN="LEFT"/>|<I>learn</I>(atagger, at_config, msg, keywords, should_tag)<br ALIGN="LEFT"/><I>reset</I>(atagger, at_config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.TrustingQQQ" [color="black", fontcolor="black", label=<{TrustingQQQ|COMMAND_SECURITY : list<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.UnAttach" [color="black", fontcolor="black", label=<{UnAttach|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>WITH_CONTEXT : tuple<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|command(emails)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.UnThread" [color="black", fontcolor="black", label=<{UnThread|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.eventlog.Undo" [color="black", fontcolor="black", label=<{Undo|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.UnorderedPicklable.UnorderedPicklableMailbox" [color="black", fontcolor="black", label=<{UnorderedPicklableMailbox|UNPICKLABLE : list<br ALIGN="LEFT"/>editable : bool<br ALIGN="LEFT"/>is_local : bool<br ALIGN="LEFT"/>source_map : dict<br ALIGN="LEFT"/>|add_from_source(source_id, metadata_kws)<br ALIGN="LEFT"/>get_bytes(toc_id)<br ALIGN="LEFT"/>get_file()<br ALIGN="LEFT"/>get_file_by_ptr(msg_ptr)<br ALIGN="LEFT"/>get_metadata_keywords(toc_id)<br ALIGN="LEFT"/>get_msg_ptr(mboxid, toc_id)<br ALIGN="LEFT"/>get_msg_size(toc_id)<br ALIGN="LEFT"/>get_string()<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>save(session, to, pickler)<br ALIGN="LEFT"/><I>set_metadata_keywords</I>(toc_id, kws)<br ALIGN="LEFT"/>update_toc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.pop3.UnsupportedProtocolError" [color="black", fontcolor="red", label=<{UnsupportedProtocolError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.compose.Update" [color="black", fontcolor="black", label=<{Update|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>WITH_CONTEXT : tuple<br ALIGN="LEFT"/>|command(create, outbox)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.compose.UpdateAndSendit" [color="black", fontcolor="black", label=<{UpdateAndSendit|SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(create, outbox)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.crypto_policy.UpdateCryptoPolicyForUser" [color="black", fontcolor="black", label=<{UpdateCryptoPolicyForUser|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.tests.test_crypto_policy.UpdateCryptoPolicyForUserTest" [color="black", fontcolor="black", label=<{UpdateCryptoPolicyForUserTest|<br ALIGN="LEFT"/>|test_args_are_checked()<br ALIGN="LEFT"/>test_policies_are_validated()<br ALIGN="LEFT"/>test_vcard_has_to_exist()<br ALIGN="LEFT"/>test_vcard_is_updated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.UrlMap" [color="black", fontcolor="black", label=<{UrlMap|API_VERSIONS : tuple<br ALIGN="LEFT"/>MAP_API : str<br ALIGN="LEFT"/>MAP_ASYNC_API : str<br ALIGN="LEFT"/>MAP_PATHS : dict<br ALIGN="LEFT"/>OUTPUT_SUFFIXES : list<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>|canonical_url(cls)<br ALIGN="LEFT"/>context_url(cls)<br ALIGN="LEFT"/>map(request, method, path, query_data, post_data, authenticate)<br ALIGN="LEFT"/>map_as_markdown(prefix)<br ALIGN="LEFT"/>print_map_markdown()<br ALIGN="LEFT"/>redirect_to_auth(method, path, query_data)<br ALIGN="LEFT"/>redirect_to_auth_or_setup(method, path, query_data, setup)<br ALIGN="LEFT"/>ui_url(cls)<br ALIGN="LEFT"/>url_edit(message_id, output)<br ALIGN="LEFT"/>url_search(search_terms, tag, output)<br ALIGN="LEFT"/>url_sent(output)<br ALIGN="LEFT"/>url_source(message_id, output)<br ALIGN="LEFT"/>url_tag(tag_id, output)<br ALIGN="LEFT"/>url_thread(message_id, output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.UrlRedirect" [color="black", fontcolor="black", label=<{UrlRedirect|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.UrlRedirectEdit" [color="black", fontcolor="black", label=<{UrlRedirectEdit|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap.UrlRedirectThread" [color="black", fontcolor="black", label=<{UrlRedirectThread|HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.auth.UserSession" [color="black", fontcolor="black", label=<{UserSession|EXPIRE_AFTER : int<br ALIGN="LEFT"/>auth : NoneType<br ALIGN="LEFT"/>data : dict<br ALIGN="LEFT"/>ts<br ALIGN="LEFT"/>|is_expired(now)<br ALIGN="LEFT"/>update_ts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.auth.UserSessionCache" [color="black", fontcolor="black", label=<{UserSessionCache|<br ALIGN="LEFT"/>|delete_expired(now)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.VCard" [color="black", fontcolor="black", label=<{VCard|KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command(save)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.VCardAddLines" [color="black", fontcolor="black", label=<{VCardAddLines|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>HTTP_POST_VARS : dict<br ALIGN="LEFT"/>KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.contacts.VCardCommand" [color="black", fontcolor="black", label=<{VCardCommand|IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>VCARD : str<br ALIGN="LEFT"/>WITH_CONTEXT : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.vcard.VCardContextProvider" [color="black", fontcolor="black", label=<{VCardContextProvider|contact<br ALIGN="LEFT"/>|<I>get_recent_context</I>(max)<br ALIGN="LEFT"/><I>get_related_context</I>(query, max)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.VCardExporter" [color="black", fontcolor="black", label=<{VCardExporter|exporting : list<br ALIGN="LEFT"/>|add_contact(contact)<br ALIGN="LEFT"/>remove_contact(contact)<br ALIGN="LEFT"/><I>save</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.VCardImporter" [color="black", fontcolor="black", label=<{VCardImporter|MERGE_BY : list<br ALIGN="LEFT"/>UPDATE_INDEX : bool<br ALIGN="LEFT"/>|get_guid(vcard)<br ALIGN="LEFT"/>get_vcards()<br ALIGN="LEFT"/>import_vcards(session, vcard_store)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.VCardLine" [color="black", fontcolor="black", label=<{VCardLine|QUOTE_MAP : dict<br ALIGN="LEFT"/>QUOTE_RMAP : dict<br ALIGN="LEFT"/>attrs<br ALIGN="LEFT"/>line_id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|ParseLine(text)<br ALIGN="LEFT"/>Quote(text)<br ALIGN="LEFT"/>as_vcardline()<br ALIGN="LEFT"/>parse(line)<br ALIGN="LEFT"/>set_attr(attr, value)<br ALIGN="LEFT"/>set_attrs(value)<br ALIGN="LEFT"/>set_line_id(value)<br ALIGN="LEFT"/>set_name(value)<br ALIGN="LEFT"/>set_value(value)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.VCardPluginClass" [color="black", fontcolor="black", label=<{VCardPluginClass|CONFIG_RULES : NoneType<br ALIGN="LEFT"/>FORMAT_DESCRIPTION : str<br ALIGN="LEFT"/>FORMAT_NAME : NoneType<br ALIGN="LEFT"/>OPTIONAL_PARAMETERS : list<br ALIGN="LEFT"/>REQUIRED_PARAMETERS : list<br ALIGN="LEFT"/>SHORT_NAME : NoneType<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.contacts.VCardRemoveLines" [color="black", fontcolor="black", label=<{VCardRemoveLines|COMMAND_SECURITY : list<br ALIGN="LEFT"/>HTTP_CALLABLE : tuple<br ALIGN="LEFT"/>KIND : str<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.vcard.VCardStore" [color="black", fontcolor="black", label=<{VCardStore|KINDS_ALL : tuple<br ALIGN="LEFT"/>KINDS_PEOPLE : tuple<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>loaded : bool<br ALIGN="LEFT"/>loading : bool<br ALIGN="LEFT"/>vcard_dir<br ALIGN="LEFT"/>|add_vcards()<br ALIGN="LEFT"/>choose_from_address()<br ALIGN="LEFT"/>choose_from_addresses(config)<br ALIGN="LEFT"/>deindex_vcard(card)<br ALIGN="LEFT"/>del_vcards()<br ALIGN="LEFT"/>find_vcards(terms, kinds)<br ALIGN="LEFT"/>find_vcards_with_line(name, value)<br ALIGN="LEFT"/>get_vcard(email)<br ALIGN="LEFT"/>index_vcard(card, collision_callback)<br ALIGN="LEFT"/>load_vcards(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.search.View" [color="black", fontcolor="black", label=<{View|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>HTTP_QUERY_VARS : dict<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>state_as_query_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.app.WaitCommand" [color="black", fontcolor="black", label=<{WaitCommand|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>RAISES : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.plugins.eventlog.Watch" [color="black", fontcolor="black", label=<{Watch|IS_USER_ACTIVITY : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mail_source.imap.WithaBool" [color="black", fontcolor="black", label=<{WithaBool|v<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.workers.Worker" [color="black", fontcolor="black", label=<{Worker|ALIVE : bool<br ALIGN="LEFT"/>JOBS : list<br ALIGN="LEFT"/>JOBS_LATER : list<br ALIGN="LEFT"/>LOCK : Condition<br ALIGN="LEFT"/>PAUSE_DEADLINE : int<br ALIGN="LEFT"/>daemon<br ALIGN="LEFT"/>important : bool<br ALIGN="LEFT"/>last_run<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pauses : int<br ALIGN="LEFT"/>running : str<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|add_task(session, name, task, after, unique, first)<br ALIGN="LEFT"/>add_unique_task(session, name, task)<br ALIGN="LEFT"/>die_soon(session)<br ALIGN="LEFT"/>do(session, name, task, unique)<br ALIGN="LEFT"/>pause(session)<br ALIGN="LEFT"/>quit(session, join)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>unpause(session)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.commands.WritePID" [color="black", fontcolor="black", label=<{WritePID|CONFIG_REQUIRED : bool<br ALIGN="LEFT"/>ORDER : tuple<br ALIGN="LEFT"/>SPLIT_ARG : bool<br ALIGN="LEFT"/>SYNOPSIS : tuple<br ALIGN="LEFT"/>|command()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.urlmap._FancyString" [color="black", fontcolor="black", label=<{_FancyString|filename : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailboxes.macmail._MacMaildirPartialFile" [color="black", fontcolor="black", label=<{_MacMaildirPartialFile|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mail_source.imap._MockImap" [color="black", fontcolor="black", label=<{_MockImap|DEFAULT_RESULTS : dict<br ALIGN="LEFT"/>RESULTS : dict<br ALIGN="LEFT"/>host : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mailboxes.pop3._MockPOP3" [color="black", fontcolor="black", label=<{_MockPOP3|DEFAULT_RESULTS : dict<br ALIGN="LEFT"/>RESULTS : dict<br ALIGN="LEFT"/>TEST_MSG : str<br ALIGN="LEFT"/>|list(which)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"mailpile.mailboxes.pop3._MockPOP3_Without_UIDL" [color="black", fontcolor="black", label=<{_MockPOP3_Without_UIDL|RESULTS : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.mail_source.imap._Mocks" [color="black", fontcolor="black", label=<{_Mocks|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.i18n.i18n_disabler" [color="black", fontcolor="black", label=<{i18n_disabler|stack : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.plugins.compose.AddComposeMethods.newcls" [color="black", fontcolor="black", label=<{newcls|COMMAND_CACHE_TTL : int<br ALIGN="LEFT"/>COMMAND_SECURITY : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"mailpile.app.InteractCommand" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.app.WaitCommand" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.auth.Authenticate" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.auth.DeAuthenticate" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.auth.SetPassphrase" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Abort" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.BrowseOrLaunch" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Cached" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.CatFile" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.CatFile.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ChangeDir" -> "mailpile.commands.ListDir" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ConfigAdd" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ConfigPrint" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ConfigSet" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ConfigUnset" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ConfigureMailboxes" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.GpgCommand" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.GpgCommand.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Help" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Help.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.HelpSplash" -> "mailpile.commands.Help" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.HelpVars" -> "mailpile.commands.Help" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ListDir" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ListDir.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Load" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Optimize" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Output" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Pipe" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ProgramStatus" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.ProgramStatus.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Quit" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.RenderPage" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.Rescan" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.RunWWW" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.TrustingQQQ" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.commands.WritePID" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.gpgi.GnuPGKeyEditor" -> "mailpile.crypto.gpgi.GnuPGExpectScript" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.gpgi.GnuPGKeyGenerator" -> "mailpile.crypto.gpgi.GnuPGExpectScript" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.gpgi.OpenPGPMimeEncryptingWrapper" -> "mailpile.crypto.mime.MimeEncryptingWrapper" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.gpgi.OpenPGPMimeSignEncryptWrapper" -> "mailpile.crypto.gpgi.OpenPGPMimeEncryptingWrapper" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.gpgi.OpenPGPMimeSigningWrapper" -> "mailpile.crypto.mime.MimeSigningWrapper" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.mime.MimeEncryptingWrapper" -> "mailpile.crypto.mime.MimeWrapper" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.mime.MimeSigningWrapper" -> "mailpile.crypto.mime.MimeWrapper" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.state.EncryptionInfo" -> "mailpile.crypto.state.CryptoInfo" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.state.SignatureInfo" -> "mailpile.crypto.state.CryptoInfo" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.ChecksummingStreamer" -> "mailpile.crypto.streamer.OutputCoprocess" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.DecryptingStreamer" -> "mailpile.crypto.streamer.InputCoprocess" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.EncryptingDelimitedStreamer" -> "mailpile.crypto.streamer.ChecksummingStreamer" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.EncryptingUndelimitedStreamer" -> "mailpile.crypto.streamer.EncryptingDelimitedStreamer" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.InputCoprocess" -> "mailpile.crypto.streamer.IOCoprocess" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.OutputCoprocess" -> "mailpile.crypto.streamer.IOCoprocess" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.PartialDecryptingStreamer" -> "mailpile.crypto.streamer.DecryptingStreamer" [arrowhead="empty", arrowtail="none"];
"mailpile.crypto.streamer.ReadLineIOFilter" -> "mailpile.crypto.streamer.IOFilter" [arrowhead="empty", arrowtail="none"];
"mailpile.mail_generator.DecodedGenerator" -> "mailpile.mail_generator.Generator" [arrowhead="empty", arrowtail="none"];
"mailpile.mail_source.BaseMailSource.MailSourceVfs" -> "mailpile.vfs.MailpileVfsBase" [arrowhead="empty", arrowtail="none"];
"mailpile.mail_source.imap._Mocks.BadLogin" -> "mailpile.mail_source.imap._MockImap" [arrowhead="empty", arrowtail="none"];
"mailpile.mail_source.imap._Mocks.NoDns" -> "mailpile.mail_source.imap._MockImap" [arrowhead="empty", arrowtail="none"];
"mailpile.mailboxes.gmvault.MailpileMailbox" -> "mailpile.mailboxes.maildir.MailpileMailbox" [arrowhead="empty", arrowtail="none"];
"mailpile.mailboxes.maildirwin.MailpileMailbox" -> "mailpile.mailboxes.maildir.MailpileMailbox" [arrowhead="empty", arrowtail="none"];
"mailpile.mailboxes.pop3._MockPOP3_Without_UIDL" -> "mailpile.mailboxes.pop3._MockPOP3" [arrowhead="empty", arrowtail="none"];
"mailpile.packing.StorageBackedLongs" -> "mailpile.packing.StorageBackedData" [arrowhead="empty", arrowtail="none"];
"mailpile.packing.StorageBackedSet" -> "mailpile.packing.StorageBackedData" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.autotag.AutoTag" -> "mailpile.plugins.autotag.Classify" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.autotag.Tagger" -> "mailpile.plugins.autotag.AutoTagCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.autotag.Trainer" -> "mailpile.plugins.autotag.AutoTagCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.autotag_sb.SpamBayesTagger" -> "mailpile.plugins.autotag.Trainer" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.autotag_sb.SpamBayesTrainer" -> "mailpile.plugins.autotag.Trainer" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Attach" -> "mailpile.plugins.compose.CompositionCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Compose" -> "mailpile.plugins.compose.CompositionCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.CompositionCommand" -> "mailpile.plugins.compose.AddComposeMethods.newcls" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Draft" -> "mailpile.plugins.compose.AddComposeMethods.newcls" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.EditableSearchResults" -> "mailpile.commands.SearchResults" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.EmptyOutbox" -> "mailpile.plugins.compose.Sendit" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Forward" -> "mailpile.plugins.compose.RelativeCompose" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.RelativeCompose" -> "mailpile.plugins.compose.Compose" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Reply" -> "mailpile.plugins.compose.RelativeCompose" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Sendit" -> "mailpile.plugins.compose.CompositionCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.UnAttach" -> "mailpile.plugins.compose.CompositionCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.UnThread" -> "mailpile.plugins.compose.CompositionCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.Update" -> "mailpile.plugins.compose.CompositionCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.compose.UpdateAndSendit" -> "mailpile.plugins.compose.Update" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.AddContact" -> "mailpile.plugins.contacts.ContactVCard.ContactVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.AddProfile" -> "mailpile.plugins.contacts.ProfileVCard.ProfileVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.AddVCard" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.AddressSearch" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.ChooseFromAddress" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.Contact" -> "mailpile.plugins.contacts.ContactVCard.ContactVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.ContactImport" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.ContactImporters" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.EditProfile" -> "mailpile.plugins.contacts.AddProfile" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.ListContacts" -> "mailpile.plugins.contacts.ContactVCard.ContactVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.ListProfiles" -> "mailpile.plugins.contacts.ProfileVCard.ProfileVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.ListVCards" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.Profile" -> "mailpile.plugins.contacts.ProfileVCard.ProfileVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.RemoveContact" -> "mailpile.plugins.contacts.ContactVCard.ContactVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.RemoveProfile" -> "mailpile.plugins.contacts.ProfileVCard.ProfileVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.RemoveVCard" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.VCard" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.VCardAddLines" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.VCardCommand" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.VCardCommand.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.contacts.VCardRemoveLines" -> "mailpile.plugins.contacts.VCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGCheckKeys" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGCheckKeys.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeyImport" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeyImportFromMail" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeyImportFromMail.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeyList" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeyListSecret" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeyReceive" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeySearch" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeySearch.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGKeySign" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGUsageStatistics" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_gnupg.GPGUsageStatistics.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_policy.CryptoPolicy" -> "mailpile.plugins.crypto_policy.CryptoPolicyBaseAction" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_policy.CryptoPolicyBaseAction" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.crypto_policy.UpdateCryptoPolicyForUser" -> "mailpile.plugins.crypto_policy.CryptoPolicyBaseAction" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.eventlog.Cancel" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.eventlog.Events" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.eventlog.Undo" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.eventlog.Watch" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.exporters.ExportMail" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.groups.AddGroup" -> "mailpile.plugins.groups.GroupVCard.GroupVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.groups.Group" -> "mailpile.plugins.groups.GroupVCard.GroupVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.groups.GroupAddLines" -> "mailpile.plugins.groups.GroupVCard.GroupVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.groups.ListGroups" -> "mailpile.plugins.groups.GroupVCard.GroupVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.groups.RemoveGroup" -> "mailpile.plugins.groups.GroupVCard.GroupVCardCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.html_magic.JsApi" -> "mailpile.commands.RenderPage" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.KeyImport" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.KeyLookup" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.KeychainLookupHandler" -> "mailpile.plugins.keylookup.LookupHandler" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.KeyserverLookupHandler" -> "mailpile.plugins.keylookup.LookupHandler" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.email_keylookup.EmailKeyLookupHandler" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.nicknym.NicknymGetKey" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.keylookup.nicknym.NicknymRefreshKeys" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.migrate.Migrate" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.plugins.DisablePlugin" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.plugins.LoadPlugin" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.plugins.Plugins" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Extract" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Extract.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Next" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Order" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Previous" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Search" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.Search.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.search.View" -> "mailpile.plugins.search.Search" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.Setup" -> "mailpile.plugins.setup_magic.SetupWelcome" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupConfigureKey" -> "mailpile.plugins.setup_magic.SetupProfiles" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupCrypto" -> "mailpile.plugins.setup_magic.TestableWebbable" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupGetEmailSettings" -> "mailpile.plugins.setup_magic.TestableWebbable" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupMagic" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupPassword" -> "mailpile.plugins.setup_magic.TestableWebbable" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupProfiles" -> "mailpile.plugins.setup_magic.SetupCrypto" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupTestRoute" -> "mailpile.plugins.setup_magic.SetupProfiles" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.SetupWelcome" -> "mailpile.plugins.setup_magic.TestableWebbable" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.setup_magic.TestableWebbable" -> "mailpile.plugins.setup_magic.SetupMagic" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.smtp_server.HashCash" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.AddTag" -> "mailpile.plugins.tags.TagCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.AddTag.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.DeleteFilter" -> "mailpile.plugins.tags.FilterCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.DeleteTag" -> "mailpile.plugins.tags.TagCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.DeleteTag.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.Filter" -> "mailpile.plugins.tags.FilterCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.FilterCommand" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.ListFilters" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.ListFilters.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.ListTags" -> "mailpile.plugins.tags.TagCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.ListTags.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.MoveFilter" -> "mailpile.plugins.tags.ListFilters" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.Tag" -> "mailpile.plugins.tags.TagCommand" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.Tag.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.TagCommand" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.TagLater" -> "mailpile.plugins.tags.Tag" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.tags.TagTemporarily" -> "mailpile.plugins.tags.Tag" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_carddav.CardDAV" -> "mailpile.plugins.vcard_carddav.DAVClient" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_carddav.CardDAVImporter" -> "mailpile.vcard.VCardImporter" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_gnupg.GnuPGImporter" -> "mailpile.vcard.VCardImporter" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_gnupg.PGPKeysAsVCards" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_gnupg.PGPKeysAsVCards.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_gnupg.PGPKeysImportAsVCards" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_gravatar.GravatarImporter" -> "mailpile.vcard.VCardImporter" [arrowhead="empty", arrowtail="none"];
"mailpile.plugins.vcard_mork.MorkImporter" -> "mailpile.vcard.VCardImporter" [arrowhead="empty", arrowtail="none"];
"mailpile.postinglist.GlobalPostingList" -> "mailpile.postinglist.OldPostingList" [arrowhead="empty", arrowtail="none"];
"mailpile.tests.test_crypto_policy.CryptoPolicyForUserTest" -> "mailpile.tests.test_crypto_policy.CryptoPolicyBaseTest" [arrowhead="empty", arrowtail="none"];
"mailpile.tests.test_crypto_policy.UpdateCryptoPolicyForUserTest" -> "mailpile.tests.test_crypto_policy.CryptoPolicyBaseTest" [arrowhead="empty", arrowtail="none"];
"mailpile.urlmap.HelpUrlMap" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.urlmap.HelpUrlMap.CommandResult" -> "mailpile.commands.Command.CommandResult" [arrowhead="empty", arrowtail="none"];
"mailpile.urlmap.UrlRedirect" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.urlmap.UrlRedirectEdit" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.urlmap.UrlRedirectThread" -> "mailpile.commands.Command" [arrowhead="empty", arrowtail="none"];
"mailpile.vcard.MailpileVCard" -> "mailpile.vcard.SimpleVCard" [arrowhead="empty", arrowtail="none"];
"mailpile.vcard.VCardContextProvider" -> "mailpile.vcard.VCardPluginClass" [arrowhead="empty", arrowtail="none"];
"mailpile.vcard.VCardExporter" -> "mailpile.vcard.VCardPluginClass" [arrowhead="empty", arrowtail="none"];
"mailpile.vcard.VCardImporter" -> "mailpile.vcard.VCardPluginClass" [arrowhead="empty", arrowtail="none"];
"mailpile.vfs.MailpileVFS" -> "mailpile.vfs.MailpileVfsBase" [arrowhead="empty", arrowtail="none"];
"mailpile.vfs.MailpileVfsLocal" -> "mailpile.vfs.MailpileVfsBase" [arrowhead="empty", arrowtail="none"];
"mailpile.vfs.MailpileVfsRoot" -> "mailpile.vfs.MailpileVfsBase" [arrowhead="empty", arrowtail="none"];
"mailpile.workers.DumbWorker" -> "mailpile.workers.Worker" [arrowhead="empty", arrowtail="none"];
"mailpile.workers.ImportantWorker" -> "mailpile.workers.Worker" [arrowhead="empty", arrowtail="none"];
"mailpile.Mailpile" -> "mailpile.tests.test_performance.checkSearch.TestSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mp", style="solid"];
"mailpile.Mailpile" -> "mailpile.tests.test_search.checkSearch.TestSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mp", style="solid"];
"mailpile.crypto.gpgi.GnuPGKeyGenerator" -> "mailpile.plugins.contacts.ProfileVCard.ProfileVCardCommand" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_key_generator", style="solid"];
"mailpile.crypto.state.EncryptionInfo" -> "mailpile.crypto.gpgi.GnuPGResultParser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="encryption_info", style="solid"];
"mailpile.crypto.state.SignatureInfo" -> "mailpile.crypto.gpgi.GnuPGResultParser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="signature_info", style="solid"];
"mailpile.crypto.streamer.EncryptingDelimitedStreamer" -> "mailpile.eventlog.EventLog" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_log_fd", style="solid"];
"mailpile.crypto.streamer.EncryptingUndelimitedStreamer" -> "mailpile.eventlog.EventLog" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_log_fd", style="solid"];
"mailpile.crypto.streamer.IOFilter" -> "mailpile.crypto.streamer.ChecksummingStreamer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="md5filter", style="solid"];
"mailpile.crypto.streamer.IOFilter" -> "mailpile.crypto.streamer.DecryptingStreamer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_filter", style="solid"];
"mailpile.eventlog.Event" -> "mailpile.commands.Command" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="event", style="solid"];
"mailpile.httpd.HttpServer" -> "mailpile.httpd.HttpWorker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="httpd", style="solid"];
"mailpile.mail_source.imap.SharedImapConn" -> "mailpile.mail_source.imap.ImapMailSource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn", style="solid"];
"mailpile.mail_source.imap.SharedImapConn" -> "mailpile.mail_source.imap.ImapMailSource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn", style="solid"];
"mailpile.plugins.vcard_carddav.CardDAV" -> "mailpile.plugins.vcard_carddav.CardDAVImporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="carddav", style="solid"];
"mailpile.tests.gui.SeleniumScreenshotOnExceptionAspecter" -> "mailpile.tests.gui.MailpileSeleniumTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"mailpile.urlmap.UrlMap" -> "mailpile.commands.SearchResults" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="urlmap", style="solid"];
"mailpile.vfs.FilePath" -> "mailpile.mail_source.BaseMailSource.MailSourceVfs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="root", style="solid"];
"mailpile.plugins.vcard_mork.MorkImporter.Database" -> "mailpile.plugins.vcard_mork.MorkImporter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
}
