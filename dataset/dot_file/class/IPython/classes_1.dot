digraph "classes_IPython" {
rankdir=BT
charset="utf-8"
"IPython.core.tests.test_completer.test_custom_completion_error.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_completer.test_get__all__entries_ok.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_completer.test_get__all__entries_no__all__ok.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_property_with_error.A" [color="black", fontcolor="black", label=<{A|foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_multiple_attribute_lookups.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_slotted_attributes.A" [color="black", fontcolor="black", label=<{A|foo : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_prefers_property_to_instance_level_attribute.A" [color="black", fontcolor="black", label=<{A|foo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.test_reset_hard.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.test_whos.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.test_getdoc.A" [color="black", fontcolor="black", label=<{A|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.test_property_sources.A" [color="black", fontcolor="black", label=<{A|compress<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.test_property_docstring_is_in_info_for_detail_level_0.A" [color="black", fontcolor="black", label=<{A|foobar<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_get_undefined.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_set.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_validate.A" [color="black", fontcolor="black", label=<{A|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.A" [color="black", fontcolor="black", label=<{A|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_is_valid_for.A" [color="black", fontcolor="black", label=<{A|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_value_for.A" [color="black", fontcolor="black", label=<{A|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_info.A" [color="black", fontcolor="black", label=<{A|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_error.A" [color="black", fontcolor="black", label=<{A|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.A" [color="black", fontcolor="black", label=<{A|x<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_metaclass.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.A" [color="black", fontcolor="black", label=<{A|t<br ALIGN="LEFT"/>tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_all.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_one.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_subclass.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_subclass.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_static_notify.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_args.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_only_once.A" [color="black", fontcolor="black", label=<{A|a<br ALIGN="LEFT"/>b : int<br ALIGN="LEFT"/>listen_to : list<br ALIGN="LEFT"/>|listener1(name, old, new)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_names.A" [color="black", fontcolor="black", label=<{A|f<br ALIGN="LEFT"/>i<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_metadata.A" [color="black", fontcolor="black", label=<{A|i<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_metadata_default.A" [color="black", fontcolor="black", label=<{A|i<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_traits.A" [color="black", fontcolor="black", label=<{A|f<br ALIGN="LEFT"/>i<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_traits_metadata.A" [color="black", fontcolor="black", label=<{A|f<br ALIGN="LEFT"/>i<br ALIGN="LEFT"/>j<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_init.A" [color="black", fontcolor="black", label=<{A|i<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_positional_args.A" [color="black", fontcolor="black", label=<{A|i<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_default.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_value.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_allow_none.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_klass.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_default.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_str_klass.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_set_str_klass.A" [color="black", fontcolor="black", label=<{A|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.A" [color="black", fontcolor="black", label=<{A|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.A" [color="black", fontcolor="black", label=<{A|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_unique_default_value.A" [color="black", fontcolor="black", label=<{A|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.A" [color="black", fontcolor="black", label=<{A|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_bad_default.A" [color="black", fontcolor="black", label=<{A|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_instance.inner.A" [color="black", fontcolor="black", label=<{A|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_connect_same.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_link_different.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_unlink.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_callbacks.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_validate_args.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_connect_same.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_link_different.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_unlink.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_validate_args.A" [color="black", fontcolor="black", label=<{A|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestEventful.test_list.A" [color="black", fontcolor="black", label=<{A|x<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestEventful.test_dict.A" [color="black", fontcolor="black", label=<{A|x<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_wildcard.Tests.test_dict_dir.A" [color="black", fontcolor="black", label=<{A|a : int<br ALIGN="LEFT"/>b : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.contents.tests.test_contents_api.API" [color="black", fontcolor="black", label=<{API|base_url<br ALIGN="LEFT"/>|copy(copy_from, path)<br ALIGN="LEFT"/>copy_put(copy_from, path)<br ALIGN="LEFT"/>create(path)<br ALIGN="LEFT"/>create_untitled(path, ext)<br ALIGN="LEFT"/>delete(path)<br ALIGN="LEFT"/>delete_checkpoint(path, checkpoint_id)<br ALIGN="LEFT"/>get_checkpoints(path)<br ALIGN="LEFT"/>list(path)<br ALIGN="LEFT"/>mkdir(path)<br ALIGN="LEFT"/>mkdir_untitled(path)<br ALIGN="LEFT"/>new_checkpoint(path)<br ALIGN="LEFT"/>read(path, type, format, content)<br ALIGN="LEFT"/>rename(path, new_path)<br ALIGN="LEFT"/>restore_checkpoint(path, checkpoint_id)<br ALIGN="LEFT"/>save(path, body)<br ALIGN="LEFT"/>upload(path, body)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.nbconvert.tests.test_nbconvert_handlers.APITest" [color="black", fontcolor="black", label=<{APITest|nbconvert_api<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_from_file()<br ALIGN="LEFT"/>test_from_file_404()<br ALIGN="LEFT"/>test_from_file_download()<br ALIGN="LEFT"/>test_from_file_zip()<br ALIGN="LEFT"/>test_from_post()<br ALIGN="LEFT"/>test_from_post_zip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.config.tests.test_config_api.APITest" [color="black", fontcolor="black", label=<{APITest|config_api<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_retrieve_config()<br ALIGN="LEFT"/>test_get_unknown()<br ALIGN="LEFT"/>test_modify()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.tests.test_contents_api.APITest" [color="black", fontcolor="black", label=<{APITest|api<br ALIGN="LEFT"/>dirs<br ALIGN="LEFT"/>dirs_nbs : list<br ALIGN="LEFT"/>hidden_dirs : list<br ALIGN="LEFT"/>top_level_dirs<br ALIGN="LEFT"/>|delete_dir(api_path)<br ALIGN="LEFT"/>delete_file(api_path)<br ALIGN="LEFT"/>isdir(api_path)<br ALIGN="LEFT"/>isfile(api_path)<br ALIGN="LEFT"/>make_blob(api_path, blob)<br ALIGN="LEFT"/>make_dir(api_path)<br ALIGN="LEFT"/>make_nb(api_path, nb)<br ALIGN="LEFT"/>make_txt(api_path, txt)<br ALIGN="LEFT"/>patch_cp_root(dirname)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_checkpoints()<br ALIGN="LEFT"/>test_checkpoints_follow_file()<br ALIGN="LEFT"/>test_checkpoints_separate_root()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_copy_copy()<br ALIGN="LEFT"/>test_copy_dir_400()<br ALIGN="LEFT"/>test_copy_path()<br ALIGN="LEFT"/>test_copy_put_400()<br ALIGN="LEFT"/>test_create_untitled()<br ALIGN="LEFT"/>test_create_untitled_txt()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_delete_dirs()<br ALIGN="LEFT"/>test_delete_non_empty_dir()<br ALIGN="LEFT"/>test_file_checkpoints()<br ALIGN="LEFT"/>test_get_bad_type()<br ALIGN="LEFT"/>test_get_binary_file_contents()<br ALIGN="LEFT"/>test_get_contents_no_such_file()<br ALIGN="LEFT"/>test_get_dir_no_content()<br ALIGN="LEFT"/>test_get_nb_contents()<br ALIGN="LEFT"/>test_get_nb_no_content()<br ALIGN="LEFT"/>test_get_text_file_contents()<br ALIGN="LEFT"/>test_list_dirs()<br ALIGN="LEFT"/>test_list_nonexistant_dir()<br ALIGN="LEFT"/>test_list_notebooks()<br ALIGN="LEFT"/>test_mkdir()<br ALIGN="LEFT"/>test_mkdir_hidden_400()<br ALIGN="LEFT"/>test_mkdir_untitled()<br ALIGN="LEFT"/>test_rename()<br ALIGN="LEFT"/>test_rename_existing()<br ALIGN="LEFT"/>test_save()<br ALIGN="LEFT"/>test_upload()<br ALIGN="LEFT"/>test_upload_b64()<br ALIGN="LEFT"/>test_upload_txt()<br ALIGN="LEFT"/>test_upload_v2()<br ALIGN="LEFT"/>to_os_path(api_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernelspecs.tests.test_kernelspecs_api.APITest" [color="black", fontcolor="black", label=<{APITest|ks_api<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_kernel_resource_file()<br ALIGN="LEFT"/>test_get_kernelspec()<br ALIGN="LEFT"/>test_get_nonexistant_kernelspec()<br ALIGN="LEFT"/>test_get_nonexistant_resource()<br ALIGN="LEFT"/>test_list_kernelspecs()<br ALIGN="LEFT"/>test_list_kernelspecs_bad()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.nbconvert.tests.test_nbconvert_api.APITest" [color="black", fontcolor="black", label=<{APITest|nbconvert_api<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_list_formats()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selectioncontainer.Accordion" [color="black", fontcolor="black", label=<{Accordion|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.adapter.Adapter" [color="black", fontcolor="black", label=<{Adapter|msg_type_map : dict<br ALIGN="LEFT"/>|handle_reply_status_error(msg)<br ALIGN="LEFT"/>update_header(msg)<br ALIGN="LEFT"/>update_metadata(msg)<br ALIGN="LEFT"/>update_msg_type(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_adapter.AdapterTest" [color="black", fontcolor="black", label=<{AdapterTest|session<br ALIGN="LEFT"/>|adapt(msg, version)<br ALIGN="LEFT"/><I>check_header</I>(msg)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.alias.Alias" [color="black", fontcolor="black", label=<{Alias|blacklist : set<br ALIGN="LEFT"/>cmd<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>nargs<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.alias.AliasError" [color="black", fontcolor="red", label=<{AliasError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.alias.AliasManager" [color="black", fontcolor="black", label=<{AliasManager|aliases<br ALIGN="LEFT"/>default_aliases<br ALIGN="LEFT"/>linemagics<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>user_aliases<br ALIGN="LEFT"/>|clear_aliases()<br ALIGN="LEFT"/>define_alias(name, cmd)<br ALIGN="LEFT"/>get_alias(name)<br ALIGN="LEFT"/>init_aliases()<br ALIGN="LEFT"/>is_alias(name)<br ALIGN="LEFT"/>retrieve_alias(name)<br ALIGN="LEFT"/>soft_define_alias(name, cmd)<br ALIGN="LEFT"/>undefine_alias(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.allow76.AllowDraftWebSocketHandler" [color="black", fontcolor="black", label=<{AllowDraftWebSocketHandler|open_args : tuple<br ALIGN="LEFT"/>open_kwargs : dict<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>ws_connection : WebSocketProtocol13<br ALIGN="LEFT"/>|allow_draft76()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_websocket_scheme()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.ansi_code_processor.AnsiCodeProcessor" [color="black", fontcolor="black", label=<{AnsiCodeProcessor|actions : list<br ALIGN="LEFT"/>background_color : NoneType<br ALIGN="LEFT"/>bold : bool<br ALIGN="LEFT"/>bold_text_enabled : bool<br ALIGN="LEFT"/>color_map : dict<br ALIGN="LEFT"/>default_color_map : dict<br ALIGN="LEFT"/>foreground_color : NoneType<br ALIGN="LEFT"/>intensity : int<br ALIGN="LEFT"/>italic : bool<br ALIGN="LEFT"/>underline : bool<br ALIGN="LEFT"/>|reset_sgr()<br ALIGN="LEFT"/>set_csi_code(command, params)<br ALIGN="LEFT"/>set_osc_code(params)<br ALIGN="LEFT"/>set_sgr_code(params)<br ALIGN="LEFT"/>split_string(string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Any" [color="black", fontcolor="black", label=<{Any|default_value : NoneType<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.AnyTrait" [color="black", fontcolor="black", label=<{AnyTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.AnyTraitTest" [color="black", fontcolor="black", label=<{AnyTraitTest|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.base.handlers.ApiVersionHandler" [color="black", fontcolor="black", label=<{ApiVersionHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.application.Application" [color="black", fontcolor="black", label=<{Application|aliases<br ALIGN="LEFT"/>argv<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>examples<br ALIGN="LEFT"/>extra_args<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>keyvalue_description<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>log_datefmt<br ALIGN="LEFT"/>log_format<br ALIGN="LEFT"/>log_level<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>option_description<br ALIGN="LEFT"/>subapp<br ALIGN="LEFT"/>subcommand_description<br ALIGN="LEFT"/>subcommands<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|exit(exit_status)<br ALIGN="LEFT"/>flatten_flags()<br ALIGN="LEFT"/>generate_config_file()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>initialize_subcommand(subc, argv)<br ALIGN="LEFT"/>launch_instance(argv)<br ALIGN="LEFT"/>load_config_file(filename, path)<br ALIGN="LEFT"/>parse_command_line(argv)<br ALIGN="LEFT"/>print_alias_help()<br ALIGN="LEFT"/>print_description()<br ALIGN="LEFT"/>print_examples()<br ALIGN="LEFT"/>print_flag_help()<br ALIGN="LEFT"/>print_help(classes)<br ALIGN="LEFT"/>print_options()<br ALIGN="LEFT"/>print_subcommands()<br ALIGN="LEFT"/>print_version()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>update_config(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.application.ApplicationError" [color="black", fontcolor="red", label=<{ApplicationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic_arguments.ArgDecorator" [color="black", fontcolor="black", label=<{ArgDecorator|<br ALIGN="LEFT"/>|<I>add_to_parser</I>(parser, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magic_arguments.ArgMethodWrapper" [color="black", fontcolor="black", label=<{ArgMethodWrapper|args : tuple<br ALIGN="LEFT"/>kwds : dict<br ALIGN="LEFT"/>|add_to_parser(parser, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.ArgParseConfigLoader" [color="black", fontcolor="black", label=<{ArgParseConfigLoader|aliases : dict<br ALIGN="LEFT"/>argv : NoneType<br ALIGN="LEFT"/>extra_args : NoneType, list<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>parsed_data : Namespace, NoneType<br ALIGN="LEFT"/>parser<br ALIGN="LEFT"/>parser_args : tuple<br ALIGN="LEFT"/>parser_kw : dict<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|get_extra_args()<br ALIGN="LEFT"/>load_config(argv, aliases, flags)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.ArgSpec" [color="black", fontcolor="black", label=<{ArgSpec|args<br ALIGN="LEFT"/>defaults<br ALIGN="LEFT"/>varargs<br ALIGN="LEFT"/>varkw<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.nbextensions.ArgumentConflict" [color="black", fontcolor="red", label=<{ArgumentConflict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.loader.ArgumentError" [color="black", fontcolor="red", label=<{ArgumentError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.loader.ArgumentParser" [color="black", fontcolor="black", label=<{ArgumentParser|<br ALIGN="LEFT"/>|print_help(file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.tools.AssertNotPrints" [color="black", fontcolor="black", label=<{AssertNotPrints|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.tools.AssertPrints" [color="black", fontcolor="black", label=<{AssertPrints|buffer : MyStringIO<br ALIGN="LEFT"/>channel : str<br ALIGN="LEFT"/>orig_stream : TextIOWrapper<br ALIGN="LEFT"/>s : list<br ALIGN="LEFT"/>suppress : bool<br ALIGN="LEFT"/>tee<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.prefilter.AssignmentChecker" [color="black", fontcolor="black", label=<{AssignmentChecker|priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.asyncresult.AsyncHubResult" [color="black", fontcolor="black", label=<{AsyncHubResult|<br ALIGN="LEFT"/>|wait(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.asyncresult.AsyncMapResult" [color="black", fontcolor="black", label=<{AsyncMapResult|ordered : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.asyncresult.AsyncResult" [color="black", fontcolor="black", label=<{AsyncResult|elapsed<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>msg_ids : NoneType<br ALIGN="LEFT"/>owner : tuple<br ALIGN="LEFT"/>progress<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>result<br ALIGN="LEFT"/>result_dict<br ALIGN="LEFT"/>sent<br ALIGN="LEFT"/>serial_time<br ALIGN="LEFT"/>wall_time<br ALIGN="LEFT"/>|abort()<br ALIGN="LEFT"/>display_outputs(groupby)<br ALIGN="LEFT"/>get(timeout)<br ALIGN="LEFT"/>get_dict(timeout)<br ALIGN="LEFT"/>ready()<br ALIGN="LEFT"/>successful()<br ALIGN="LEFT"/>timedelta(start, end, start_key, end_key)<br ALIGN="LEFT"/>wait(timeout)<br ALIGN="LEFT"/>wait_for_send(timeout)<br ALIGN="LEFT"/>wait_interactive(interval, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_asyncresult.AsyncResultTest" [color="black", fontcolor="black", label=<{AsyncResultTest|<br ALIGN="LEFT"/>|test_abort()<br ALIGN="LEFT"/>test_await_data()<br ALIGN="LEFT"/>test_display_empty_streams_engine()<br ALIGN="LEFT"/>test_display_empty_streams_single()<br ALIGN="LEFT"/>test_display_empty_streams_type()<br ALIGN="LEFT"/>test_elapsed_multi()<br ALIGN="LEFT"/>test_elapsed_single()<br ALIGN="LEFT"/>test_get_after_done()<br ALIGN="LEFT"/>test_get_after_error()<br ALIGN="LEFT"/>test_get_before_done()<br ALIGN="LEFT"/>test_get_dict()<br ALIGN="LEFT"/>test_get_dict_bad()<br ALIGN="LEFT"/>test_get_dict_single()<br ALIGN="LEFT"/>test_getattr()<br ALIGN="LEFT"/>test_getitem()<br ALIGN="LEFT"/>test_hubresult_timestamps()<br ALIGN="LEFT"/>test_len()<br ALIGN="LEFT"/>test_list_amr()<br ALIGN="LEFT"/>test_non_owner()<br ALIGN="LEFT"/>test_not_single_result()<br ALIGN="LEFT"/>test_owner_pop()<br ALIGN="LEFT"/>test_serial_time_multi()<br ALIGN="LEFT"/>test_serial_time_single()<br ALIGN="LEFT"/>test_single_result()<br ALIGN="LEFT"/>test_single_result_view()<br ALIGN="LEFT"/>test_wall_time_multi()<br ALIGN="LEFT"/>test_wall_time_single()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.display.Audio" [color="black", fontcolor="black", label=<{Audio|autoplay : bool<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>embed : bool<br ALIGN="LEFT"/>mimetype : NoneType, str<br ALIGN="LEFT"/>|autoplay_attr()<br ALIGN="LEFT"/>reload()<br ALIGN="LEFT"/>src_attr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.handlers.AuthenticatedFileHandler" [color="black", fontcolor="black", label=<{AuthenticatedFileHandler|<br ALIGN="LEFT"/>|compute_etag()<br ALIGN="LEFT"/>get(path)<br ALIGN="LEFT"/>set_headers()<br ALIGN="LEFT"/>validate_absolute_path(root, absolute_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.handlers.AuthenticatedHandler" [color="black", fontcolor="black", label=<{AuthenticatedHandler|cookie_name<br ALIGN="LEFT"/>logged_in<br ALIGN="LEFT"/>login_available<br ALIGN="LEFT"/>login_handler<br ALIGN="LEFT"/>|clear_login_cookie()<br ALIGN="LEFT"/>get_current_user()<br ALIGN="LEFT"/>set_default_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.zmqhandlers.AuthenticatedZMQStreamHandler" [color="black", fontcolor="black", label=<{AuthenticatedZMQStreamHandler|last_ping : int<br ALIGN="LEFT"/>last_pong : int<br ALIGN="LEFT"/>ping_callback : NoneType<br ALIGN="LEFT"/>ping_interval<br ALIGN="LEFT"/>ping_timeout<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>on_pong(data)<br ALIGN="LEFT"/>open()<br ALIGN="LEFT"/>pre_get()<br ALIGN="LEFT"/>send_ping()<br ALIGN="LEFT"/><I>set_default_headers</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.ultratb.AutoFormattedTB" [color="black", fontcolor="black", label=<{AutoFormattedTB|tb : NoneType<br ALIGN="LEFT"/>|structured_traceback(etype, value, tb, tb_offset, number_of_lines_of_context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.AutoHandler" [color="black", fontcolor="black", label=<{AutoHandler|esc_strings<br ALIGN="LEFT"/>handler_name<br ALIGN="LEFT"/>|handle(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.AutoMagicChecker" [color="black", fontcolor="black", label=<{AutoMagicChecker|priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.auto.AutoMagics" [color="black", fontcolor="black", label=<{AutoMagics|<br ALIGN="LEFT"/>|autocall(parameter_s)<br ALIGN="LEFT"/>automagic(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.AutocallChecker" [color="black", fontcolor="black", label=<{AutocallChecker|exclude_regexp<br ALIGN="LEFT"/>function_name_regexp<br ALIGN="LEFT"/>priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_handlers.Autocallable" [color="black", fontcolor="black", label=<{Autocallable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.extensions.autoreload.AutoreloadMagics" [color="black", fontcolor="black", label=<{AutoreloadMagics|loaded_modules : set<br ALIGN="LEFT"/>|aimport(parameter_s, stream)<br ALIGN="LEFT"/>autoreload(parameter_s)<br ALIGN="LEFT"/>post_execute_hook()<br ALIGN="LEFT"/>pre_run_cell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils._process_win32.AvoidUNCPath" [color="black", fontcolor="black", label=<{AvoidUNCPath|is_unc_path<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._process_win32_controller.AvoidUNCPath" [color="black", fontcolor="black", label=<{AvoidUNCPath|is_unc_path<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.Awkward" [color="black", fontcolor="black", label=<{Awkward|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.test_getdoc.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|getdoc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.B" [color="black", fontcolor="black", label=<{B|tt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.B" [color="black", fontcolor="black", label=<{B|x<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_metaclass.B" [color="black", fontcolor="black", label=<{B|b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.B" [color="black", fontcolor="black", label=<{B|tt<br ALIGN="LEFT"/>ttt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_subclass.B" [color="black", fontcolor="black", label=<{B|a : int<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_subclass.B" [color="black", fontcolor="black", label=<{B|a : int<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_static_notify.B" [color="black", fontcolor="black", label=<{B|a : int<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_only_once.B" [color="black", fontcolor="black", label=<{B|a<br ALIGN="LEFT"/>c : int<br ALIGN="LEFT"/>d : int<br ALIGN="LEFT"/>|listener2(name, old, new)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_default.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_value.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_allow_none.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_default.B" [color="black", fontcolor="black", label=<{B|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.B" [color="black", fontcolor="black", label=<{B|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_link_different.B" [color="black", fontcolor="black", label=<{B|count<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_callbacks.B" [color="black", fontcolor="black", label=<{B|count<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink.test_validate_args.B" [color="black", fontcolor="black", label=<{B|count<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_link_different.B" [color="black", fontcolor="black", label=<{B|count<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_validate_args.B" [color="black", fontcolor="black", label=<{B|count<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.backgroundjobs.BackgroundJobBase" [color="black", fontcolor="black", label=<{BackgroundJobBase|finished : NoneType, bool<br ALIGN="LEFT"/>num : NoneType<br ALIGN="LEFT"/>result : str<br ALIGN="LEFT"/>stat_code : int<br ALIGN="LEFT"/>stat_completed : str<br ALIGN="LEFT"/>stat_completed_c : int<br ALIGN="LEFT"/>stat_created : str<br ALIGN="LEFT"/>stat_created_c : int<br ALIGN="LEFT"/>stat_dead : str<br ALIGN="LEFT"/>stat_dead_c : int<br ALIGN="LEFT"/>stat_running : str<br ALIGN="LEFT"/>stat_running_c : int<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>traceback()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.backgroundjobs.BackgroundJobExpr" [color="black", fontcolor="black", label=<{BackgroundJobExpr|code<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>expression<br ALIGN="LEFT"/>glob : NoneType, dict<br ALIGN="LEFT"/>loc : NoneType, dict<br ALIGN="LEFT"/>num : int<br ALIGN="LEFT"/>strform<br ALIGN="LEFT"/>|call()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.backgroundjobs.BackgroundJobFunc" [color="black", fontcolor="black", label=<{BackgroundJobFunc|args : tuple<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>num : int<br ALIGN="LEFT"/>strform : str<br ALIGN="LEFT"/>|call()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.backgroundjobs.BackgroundJobManager" [color="black", fontcolor="black", label=<{BackgroundJobManager|all : dict<br ALIGN="LEFT"/>completed<br ALIGN="LEFT"/>dead<br ALIGN="LEFT"/>running<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>new(func_or_exp)<br ALIGN="LEFT"/>remove(num)<br ALIGN="LEFT"/>result(num)<br ALIGN="LEFT"/>status(verbose)<br ALIGN="LEFT"/>traceback(job)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.BadException" [color="black", fontcolor="red", label=<{BadException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_error_method.BadHTML" [color="black", fontcolor="black", label=<{BadHTML|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.BadPretty" [color="black", fontcolor="black", label=<{BadPretty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_error_pretty_method.BadPretty" [color="black", fontcolor="black", label=<{BadPretty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.BadRepr" [color="black", fontcolor="black", label=<{BadRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.BadRepr" [color="black", fontcolor="black", label=<{BadRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_print_method_weird.BadReprArgs" [color="black", fontcolor="black", label=<{BadReprArgs|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.test_misbehaving_object_without_trait_names.BadTraitNames" [color="black", fontcolor="black", label=<{BadTraitNames|trait_names<br ALIGN="LEFT"/>|<I>some_method</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.Bah" [color="black", fontcolor="black", label=<{Bah|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Bah" [color="black", fontcolor="black", label=<{Bah|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.Bah" [color="black", fontcolor="black", label=<{Bah|c<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable.test_inheritance.Bam" [color="black", fontcolor="black", label=<{Bam|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_application.Bar" [color="black", fontcolor="black", label=<{Bar|b : Integer<br ALIGN="LEFT"/>enabled<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.Bar" [color="black", fontcolor="black", label=<{Bar|b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable.test_inheritance.Bar" [color="black", fontcolor="black", label=<{Bar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.Bar" [color="black", fontcolor="black", label=<{Bar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Bar" [color="black", fontcolor="black", label=<{Bar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.Bar" [color="black", fontcolor="black", label=<{Bar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass.Bar" [color="black", fontcolor="black", label=<{Bar|t<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Bar" [color="black", fontcolor="black", label=<{Bar|t<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.Base" [color="black", fontcolor="black", label=<{Base|x : int<br ALIGN="LEFT"/>z : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.dictdb.BaseDB" [color="black", fontcolor="black", label=<{BaseDB|session<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.BaseFormatter" [color="black", fontcolor="black", label=<{BaseFormatter|deferred_printers<br ALIGN="LEFT"/>enabled<br ALIGN="LEFT"/>format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>singleton_printers<br ALIGN="LEFT"/>type_printers<br ALIGN="LEFT"/>|for_type(typ, func)<br ALIGN="LEFT"/>for_type_by_name(type_module, type_name, func)<br ALIGN="LEFT"/>lookup(obj)<br ALIGN="LEFT"/>lookup_by_type(typ)<br ALIGN="LEFT"/>pop(typ, default)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.base_frontend_mixin.BaseFrontendMixin" [color="black", fontcolor="black", label=<{BaseFrontendMixin|kernel_client<br ALIGN="LEFT"/>kernel_manager<br ALIGN="LEFT"/>|from_here(msg)<br ALIGN="LEFT"/>include_output(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.application.BaseIPythonApplication" [color="black", fontcolor="black", label=<{BaseIPythonApplication|aliases<br ALIGN="LEFT"/>auto_create<br ALIGN="LEFT"/>builtin_profile_dir<br ALIGN="LEFT"/>classes<br ALIGN="LEFT"/>config_file_name<br ALIGN="LEFT"/>config_file_paths<br ALIGN="LEFT"/>config_file_specified<br ALIGN="LEFT"/>config_files<br ALIGN="LEFT"/>copy_config_files<br ALIGN="LEFT"/>crash_handler<br ALIGN="LEFT"/>crash_handler_class<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>extra_config_file<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>ipython_dir<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>overwrite<br ALIGN="LEFT"/>profile<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>verbose_crash<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|excepthook(etype, evalue, tb)<br ALIGN="LEFT"/>init_config_files()<br ALIGN="LEFT"/>init_crash_handler()<br ALIGN="LEFT"/>init_profile_dir()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>load_config_file(suppress_errors)<br ALIGN="LEFT"/>stage_default_config_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.manager.BaseJSONConfigManager" [color="black", fontcolor="black", label=<{BaseJSONConfigManager|config_dir<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>|ensure_config_dir_exists()<br ALIGN="LEFT"/>file_name(section_name)<br ALIGN="LEFT"/>get(section_name)<br ALIGN="LEFT"/>set(section_name, data)<br ALIGN="LEFT"/>update(section_name, new_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.BaseLauncher" [color="black", fontcolor="black", label=<{BaseLauncher|arg_str<br ALIGN="LEFT"/>args<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>running<br ALIGN="LEFT"/>start_data<br ALIGN="LEFT"/>state : str<br ALIGN="LEFT"/>stop_callbacks : list<br ALIGN="LEFT"/>stop_data<br ALIGN="LEFT"/>work_dir<br ALIGN="LEFT"/>|<I>find_args</I>()<br ALIGN="LEFT"/>notify_start(data)<br ALIGN="LEFT"/>notify_stop(data)<br ALIGN="LEFT"/>on_stop(f)<br ALIGN="LEFT"/><I>signal</I>(sig)<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.baseapp.BaseParallelApplication" [color="black", fontcolor="black", label=<{BaseParallelApplication|aliases<br ALIGN="LEFT"/>clean_logs<br ALIGN="LEFT"/>cluster_id<br ALIGN="LEFT"/>crash_handler_class<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>log_to_file<br ALIGN="LEFT"/>log_url<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>work_dir<br ALIGN="LEFT"/>|check_pid(pid)<br ALIGN="LEFT"/>get_pid_from_file()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>reinit_logging()<br ALIGN="LEFT"/>remove_pid_file()<br ALIGN="LEFT"/>to_work_dir()<br ALIGN="LEFT"/>write_pid_file(overwrite)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.basic.BasicMagics" [color="black", fontcolor="black", label=<{BasicMagics|<br ALIGN="LEFT"/>|alias_magic(line)<br ALIGN="LEFT"/>colors(parameter_s)<br ALIGN="LEFT"/>doctest_mode(parameter_s)<br ALIGN="LEFT"/>gui(parameter_s)<br ALIGN="LEFT"/>lsmagic(parameter_s)<br ALIGN="LEFT"/>magic(parameter_s)<br ALIGN="LEFT"/>notebook(s)<br ALIGN="LEFT"/>page(parameter_s)<br ALIGN="LEFT"/>pprint(parameter_s)<br ALIGN="LEFT"/>precision(s)<br ALIGN="LEFT"/>profile(parameter_s)<br ALIGN="LEFT"/>quickref(arg)<br ALIGN="LEFT"/>xmode(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.BatchClusterAppMixin" [color="black", fontcolor="black", label=<{BatchClusterAppMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.BatchSystemLauncher" [color="black", fontcolor="black", label=<{BatchSystemLauncher|batch_file<br ALIGN="LEFT"/>batch_file_name<br ALIGN="LEFT"/>batch_template<br ALIGN="LEFT"/>batch_template_file<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>delete_command<br ALIGN="LEFT"/>formatter<br ALIGN="LEFT"/>job_array_regexp<br ALIGN="LEFT"/>job_array_template<br ALIGN="LEFT"/>job_id<br ALIGN="LEFT"/>job_id_regexp<br ALIGN="LEFT"/>job_id_regexp_group : Integer<br ALIGN="LEFT"/>n : Integer<br ALIGN="LEFT"/>queue<br ALIGN="LEFT"/>queue_regexp<br ALIGN="LEFT"/>queue_template<br ALIGN="LEFT"/>submit_command<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>parse_job_id(output)<br ALIGN="LEFT"/>start(n)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>write_batch_script(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.BatchTest" [color="black", fontcolor="black", label=<{BatchTest|<br ALIGN="LEFT"/>|test_batch_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.blocking.BlockingInProcessChannel" [color="black", fontcolor="black", label=<{BlockingInProcessChannel|<br ALIGN="LEFT"/>|call_handlers(msg)<br ALIGN="LEFT"/>get_msg(block, timeout)<br ALIGN="LEFT"/>get_msgs()<br ALIGN="LEFT"/>msg_ready()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.blocking.BlockingInProcessKernelClient" [color="black", fontcolor="black", label=<{BlockingInProcessKernelClient|iopub_channel_class<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|wait_for_ready()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.blocking.BlockingInProcessStdInChannel" [color="black", fontcolor="black", label=<{BlockingInProcessStdInChannel|<br ALIGN="LEFT"/>|call_handlers(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.blocking.client.BlockingKernelClient" [color="black", fontcolor="black", label=<{BlockingKernelClient|hb_channel_class<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|wait_for_ready()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Bool" [color="black", fontcolor="black", label=<{Bool|default_value : bool<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.signatures.BoundArguments" [color="black", fontcolor="black", label=<{BoundArguments|args<br ALIGN="LEFT"/>arguments<br ALIGN="LEFT"/>kwargs<br ALIGN="LEFT"/>signature<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float.BoundedFloatText" [color="black", fontcolor="black", label=<{BoundedFloatText|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int.BoundedIntText" [color="black", fontcolor="black", label=<{BoundedIntText|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_box.Box" [color="black", fontcolor="black", label=<{Box|args : list<br ALIGN="LEFT"/>box_style<br ALIGN="LEFT"/>children<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>overflow_x<br ALIGN="LEFT"/>overflow_y<br ALIGN="LEFT"/>result : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.bracket_matcher.BracketMatcher" [color="black", fontcolor="black", label=<{BracketMatcher|format<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.pretty.Breakable" [color="black", fontcolor="black", label=<{Breakable|group<br ALIGN="LEFT"/>indentation<br ALIGN="LEFT"/>obj<br ALIGN="LEFT"/>pretty<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|output(stream, output_width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.Breaking" [color="black", fontcolor="black", label=<{Breaking|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.BreakingRepr" [color="black", fontcolor="black", label=<{BreakingRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.BreakingReprParent" [color="black", fontcolor="black", label=<{BreakingReprParent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.builtin_trap.BuiltinTrap" [color="black", fontcolor="black", label=<{BuiltinTrap|auto_builtins : dict<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|activate()<br ALIGN="LEFT"/>add_builtin(key, value)<br ALIGN="LEFT"/>deactivate()<br ALIGN="LEFT"/>remove_builtin(key, orig)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.completer.Bunch" [color="black", fontcolor="black", label=<{Bunch|command<br ALIGN="LEFT"/>line : NoneType<br ALIGN="LEFT"/>symbol<br ALIGN="LEFT"/>text_until_cursor<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.interactiveshell.Bunch" [color="black", fontcolor="black", label=<{Bunch|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic.Bunch" [color="black", fontcolor="black", label=<{Bunch|autocall_save : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_button.Button" [color="black", fontcolor="black", label=<{Button|button_style<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>disabled<br ALIGN="LEFT"/>icon<br ALIGN="LEFT"/>tooltip<br ALIGN="LEFT"/>|on_click(callback, remove)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Bytes" [color="black", fontcolor="black", label=<{Bytes|default_value : bytes<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbjson.BytesEncoder" [color="black", fontcolor="black", label=<{BytesEncoder|<br ALIGN="LEFT"/>|default(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbjson.BytesEncoder" [color="black", fontcolor="black", label=<{BytesEncoder|<br ALIGN="LEFT"/>|default(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.nbjson.BytesEncoder" [color="black", fontcolor="black", label=<{BytesEncoder|<br ALIGN="LEFT"/>|default(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.BytesTrait" [color="black", fontcolor="black", label=<{BytesTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.tclass.C" [color="black", fontcolor="black", label=<{C|flush_stdout<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>p<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_completer.test_dict_key_completion_contexts.C" [color="black", fontcolor="black", label=<{C|data : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.test_getdoc.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|getdoc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_serialize.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_serialize.test_class.C" [color="black", fontcolor="black", label=<{C|a : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_serialize.test_class_oldstyle.C" [color="black", fontcolor="black", label=<{C|a : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_serialize.test_class_inheritance.C" [color="black", fontcolor="black", label=<{C|a : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.test_unicode_repr.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.show_refs.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_metaclass.C" [color="black", fontcolor="black", label=<{C|c<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_value.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_allow_none.C" [color="black", fontcolor="black", label=<{C|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_default.C" [color="black", fontcolor="black", label=<{C|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.C" [color="black", fontcolor="black", label=<{C|inst<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.CBool" [color="black", fontcolor="black", label=<{CBool|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CBytes" [color="black", fontcolor="black", label=<{CBytes|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CComplex" [color="black", fontcolor="black", label=<{CComplex|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CFloat" [color="black", fontcolor="black", label=<{CFloat|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CInt" [color="black", fontcolor="black", label=<{CInt|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CRegExp" [color="black", fontcolor="black", label=<{CRegExp|info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.CRegExpTrait" [color="black", fontcolor="black", label=<{CRegExpTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.security.handlers.CSPReportHandler" [color="black", fontcolor="black", label=<{CSPReportHandler|<br ALIGN="LEFT"/>|post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.csshtmlheader.CSSHTMLHeaderPreprocessor" [color="black", fontcolor="black", label=<{CSSHTMLHeaderPreprocessor|enabled : bool<br ALIGN="LEFT"/>highlight_class<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CUnicode" [color="black", fontcolor="black", label=<{CUnicode|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.compilerop.CachingCompiler" [color="black", fontcolor="black", label=<{CachingCompiler|compiler_flags<br ALIGN="LEFT"/>flags : int<br ALIGN="LEFT"/>|ast_parse(source, filename, symbol)<br ALIGN="LEFT"/>cache(code, number)<br ALIGN="LEFT"/>reset_compiler_flags()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.Call" [color="black", fontcolor="black", label=<{Call|<br ALIGN="LEFT"/>|<I>method</I>(x, z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.call_tip_widget.CallTipWidget" [color="black", fontcolor="black", label=<{CallTipWidget|<br ALIGN="LEFT"/>|enterEvent(event)<br ALIGN="LEFT"/>eventFilter(obj, event)<br ALIGN="LEFT"/>hideEvent(event)<br ALIGN="LEFT"/>leaveEvent(event)<br ALIGN="LEFT"/>paintEvent(event)<br ALIGN="LEFT"/>setFont(font)<br ALIGN="LEFT"/>showEvent(event)<br ALIGN="LEFT"/>show_inspect_data(content, maxlines)<br ALIGN="LEFT"/>show_tip(tip)<br ALIGN="LEFT"/>timerEvent(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_handlers.CallableIndexable" [color="black", fontcolor="black", label=<{CallableIndexable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_print_method_weird.CallableMagicHat" [color="black", fontcolor="black", label=<{CallableMagicHat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget.CallbackDispatcher" [color="black", fontcolor="black", label=<{CallbackDispatcher|callbacks<br ALIGN="LEFT"/>|register_callback(callback, remove)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_events.CallbackTests" [color="black", fontcolor="black", label=<{CallbackTests|em<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_cb_error()<br ALIGN="LEFT"/>test_register_unregister()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.CannedArray" [color="black", fontcolor="black", label=<{CannedArray|buffers : list<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>pickled : bool<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.CannedBytes" [color="black", fontcolor="black", label=<{CannedBytes|buffers : list<br ALIGN="LEFT"/>wrap : bytes<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.CannedCell" [color="black", fontcolor="black", label=<{CannedCell|cell_contents<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.CannedClass" [color="black", fontcolor="black", label=<{CannedClass|buffers : list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>old_style<br ALIGN="LEFT"/>parents<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.CannedFunction" [color="black", fontcolor="black", label=<{CannedFunction|buffers : list<br ALIGN="LEFT"/>closure : NoneType, tuple<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>defaults : NoneType<br ALIGN="LEFT"/>module<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.CannedObject" [color="black", fontcolor="black", label=<{CannedObject|buffers : list<br ALIGN="LEFT"/>hook : NoneType<br ALIGN="LEFT"/>keys : list<br ALIGN="LEFT"/>obj<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.capture.CapturedIO" [color="black", fontcolor="black", label=<{CapturedIO|outputs<br ALIGN="LEFT"/>stderr<br ALIGN="LEFT"/>stdout<br ALIGN="LEFT"/>|show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.displaypub.CapturingDisplayPublisher" [color="black", fontcolor="black", label=<{CapturingDisplayPublisher|outputs<br ALIGN="LEFT"/>|clear_output(wait)<br ALIGN="LEFT"/>publish(data, metadata, source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" [color="black", fontcolor="black", label=<{CaselessStrEnum|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.CellMagicTestCase" [color="black", fontcolor="black", label=<{CellMagicTestCase|<br ALIGN="LEFT"/>|check_ident(magic)<br ALIGN="LEFT"/>test_cell_magic_class()<br ALIGN="LEFT"/>test_cell_magic_class2()<br ALIGN="LEFT"/>test_cell_magic_func_deco()<br ALIGN="LEFT"/>test_cell_magic_reg()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.CellMagicsCommon" [color="black", fontcolor="black", label=<{CellMagicsCommon|<br ALIGN="LEFT"/>|tearDown()<br ALIGN="LEFT"/>test_cellmagic_help()<br ALIGN="LEFT"/>test_whole_cell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.CellModeCellMagics" [color="black", fontcolor="black", label=<{CellModeCellMagics|sp<br ALIGN="LEFT"/>|test_incremental()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_ultratb.ChangedPyFileTest" [color="black", fontcolor="black", label=<{ChangedPyFileTest|<br ALIGN="LEFT"/>|test_changing_py_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.channelsabc.ChannelABC" [color="black", fontcolor="black", label=<{ChannelABC|<br ALIGN="LEFT"/>|<I>is_alive</I>()<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_bool.Checkbox" [color="black", fontcolor="black", label=<{Checkbox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.contents.checkpoints.Checkpoints" [color="black", fontcolor="black", label=<{Checkpoints|<br ALIGN="LEFT"/>|<I>create_checkpoint</I>(contents_mgr, path)<br ALIGN="LEFT"/>delete_all_checkpoints(path)<br ALIGN="LEFT"/><I>delete_checkpoint</I>(checkpoint_id, path)<br ALIGN="LEFT"/><I>list_checkpoints</I>(path)<br ALIGN="LEFT"/>rename_all_checkpoints(old_path, new_path)<br ALIGN="LEFT"/><I>rename_checkpoint</I>(checkpoint_id, old_path, new_path)<br ALIGN="LEFT"/><I>restore_checkpoint</I>(contents_mgr, checkpoint_id, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.handlers.CheckpointsHandler" [color="black", fontcolor="black", label=<{CheckpointsHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>post(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.cheese.CheesePreprocessor" [color="black", fontcolor="black", label=<{CheesePreprocessor|<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.citation.CitationParser" [color="black", fontcolor="black", label=<{CitationParser|citelist : NoneType<br ALIGN="LEFT"/>citetag : NoneType<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>opentags : NoneType<br ALIGN="LEFT"/>|feed(data)<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>handle_endtag(tag)<br ALIGN="LEFT"/>handle_starttag(tag, attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.ClassBasedTraitType" [color="black", fontcolor="black", label=<{ClassBasedTraitType|<br ALIGN="LEFT"/>|error(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.path._path.ClassProperty" [color="black", fontcolor="black", label=<{ClassProperty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.demo.ClearDemo" [color="black", fontcolor="black", label=<{ClearDemo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.demo.ClearIPDemo" [color="black", fontcolor="black", label=<{ClearIPDemo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.demo.ClearMixin" [color="black", fontcolor="black", label=<{ClearMixin|<br ALIGN="LEFT"/>|marquee(txt, width, mark)<br ALIGN="LEFT"/>pre_cmd()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.clearoutput.ClearOutputPreprocessor" [color="black", fontcolor="black", label=<{ClearOutputPreprocessor|enabled : bool<br ALIGN="LEFT"/>|preprocess_cell(cell, resources, cell_index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.client.Client" [color="black", fontcolor="black", label=<{Client|block<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>history<br ALIGN="LEFT"/>ids<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>outstanding<br ALIGN="LEFT"/>profile<br ALIGN="LEFT"/>results<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>wait<br ALIGN="LEFT"/>|abort(jobs, targets, block)<br ALIGN="LEFT"/>activate(targets, suffix)<br ALIGN="LEFT"/>clear(targets, block)<br ALIGN="LEFT"/>close(linger)<br ALIGN="LEFT"/>db_query(query, keys)<br ALIGN="LEFT"/>direct_view(targets)<br ALIGN="LEFT"/>get_result(indices_or_msg_ids, block, owner)<br ALIGN="LEFT"/>hub_history()<br ALIGN="LEFT"/>load_balanced_view(targets)<br ALIGN="LEFT"/>purge_everything()<br ALIGN="LEFT"/>purge_hub_results(jobs, targets)<br ALIGN="LEFT"/>purge_local_results(jobs, targets)<br ALIGN="LEFT"/>purge_results(jobs, targets)<br ALIGN="LEFT"/>queue_status(targets, verbose)<br ALIGN="LEFT"/>resubmit(indices_or_msg_ids, metadata, block)<br ALIGN="LEFT"/>result_status(msg_ids, status_only)<br ALIGN="LEFT"/>send_apply_request(socket, f, args, kwargs, metadata, track, ident)<br ALIGN="LEFT"/>send_execute_request(socket, code, silent, metadata, ident)<br ALIGN="LEFT"/>shutdown(targets, restart, hub, block)<br ALIGN="LEFT"/>spin()<br ALIGN="LEFT"/>spin_thread(interval)<br ALIGN="LEFT"/>stop_spin_thread()<br ALIGN="LEFT"/>wait(jobs, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.clipboard.ClipboardEmpty" [color="black", fontcolor="red", label=<{ClipboardEmpty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.clusters.handlers.ClusterActionHandler" [color="black", fontcolor="black", label=<{ClusterActionHandler|<br ALIGN="LEFT"/>|post(profile, action)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.ClusterAppMixin" [color="black", fontcolor="black", label=<{ClusterAppMixin|cluster_args<br ALIGN="LEFT"/>cluster_id<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.clusters.clustermanager.ClusterManager" [color="black", fontcolor="black", label=<{ClusterManager|delay<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>profiles<br ALIGN="LEFT"/>|build_launchers(profile_dir)<br ALIGN="LEFT"/>check_profile(profile)<br ALIGN="LEFT"/>get_profile_dir(name, path)<br ALIGN="LEFT"/>list_profiles()<br ALIGN="LEFT"/>profile_info(profile)<br ALIGN="LEFT"/>start_cluster(profile, n)<br ALIGN="LEFT"/>stop_all_clusters()<br ALIGN="LEFT"/>stop_cluster(profile)<br ALIGN="LEFT"/>update_profiles()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.clusters.handlers.ClusterProfileHandler" [color="black", fontcolor="black", label=<{ClusterProfileHandler|<br ALIGN="LEFT"/>|get(profile)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.clienttest.ClusterTestCase" [color="black", fontcolor="black", label=<{ClusterTestCase|base_engine_count<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>engines : list<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>|add_engines(n, block)<br ALIGN="LEFT"/>assertRaisesRemote(etype, f)<br ALIGN="LEFT"/>client_wait(client, jobs, timeout)<br ALIGN="LEFT"/>connect_client()<br ALIGN="LEFT"/>minimum_engines(n, block)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>wait_on_engines(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.code.CodeMagics" [color="black", fontcolor="black", label=<{CodeMagics|<br ALIGN="LEFT"/>|edit(parameter_s, last_call)<br ALIGN="LEFT"/>load(arg_s)<br ALIGN="LEFT"/>loadpy(arg_s)<br ALIGN="LEFT"/>pastebin(parameter_s)<br ALIGN="LEFT"/>save(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.coloransi.ColorScheme" [color="black", fontcolor="black", label=<{ColorScheme|colors<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|copy(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.coloransi.ColorSchemeTable" [color="black", fontcolor="black", label=<{ColorSchemeTable|active_colors : NoneType<br ALIGN="LEFT"/>active_scheme_name : str<br ALIGN="LEFT"/>|add_scheme(new_scheme)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>set_active_scheme(scheme, case_sensitive)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.ultratb.ColorTB" [color="black", fontcolor="black", label=<{ColorTB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.comm.comm.Comm" [color="black", fontcolor="black", label=<{Comm|comm_id<br ALIGN="LEFT"/>iopub_socket<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>primary<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>target_module<br ALIGN="LEFT"/>target_name<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>|close(data, metadata, buffers)<br ALIGN="LEFT"/>handle_close(msg)<br ALIGN="LEFT"/>handle_msg(msg)<br ALIGN="LEFT"/>on_close(callback)<br ALIGN="LEFT"/>on_msg(callback)<br ALIGN="LEFT"/>open(data, metadata, buffers)<br ALIGN="LEFT"/>send(data, metadata, buffers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.comm.manager.CommManager" [color="black", fontcolor="black", label=<{CommManager|comms<br ALIGN="LEFT"/>iopub_socket<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>targets<br ALIGN="LEFT"/>|comm_close(stream, ident, msg)<br ALIGN="LEFT"/>comm_msg(stream, ident, msg)<br ALIGN="LEFT"/>comm_open(stream, ident, msg)<br ALIGN="LEFT"/>get_comm(comm_id)<br ALIGN="LEFT"/>register_comm(comm)<br ALIGN="LEFT"/>register_target(target_name, f)<br ALIGN="LEFT"/>unregister_comm(comm)<br ALIGN="LEFT"/>unregister_target(target_name, f)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.hooks.CommandChainDispatcher" [color="black", fontcolor="black", label=<{CommandChainDispatcher|chain : list<br ALIGN="LEFT"/>|add(func, priority)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.CommandLineConfigLoader" [color="black", fontcolor="black", label=<{CommandLineConfigLoader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.IPythonInputTestCase.test_multiline_passthrough.CommentTransformer" [color="black", fontcolor="black", label=<{CommentTransformer|<br ALIGN="LEFT"/>|push(line)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.CompleteReply" [color="black", fontcolor="black", label=<{CompleteReply|cursor_end : Integer<br ALIGN="LEFT"/>cursor_start : Integer<br ALIGN="LEFT"/>matches<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.completer.Completer" [color="black", fontcolor="black", label=<{Completer|global_namespace : dict<br ALIGN="LEFT"/>greedy<br ALIGN="LEFT"/>matches : list<br ALIGN="LEFT"/>namespace : dict<br ALIGN="LEFT"/>use_main_ns : int<br ALIGN="LEFT"/>|attr_matches(text)<br ALIGN="LEFT"/>complete(text, state)<br ALIGN="LEFT"/>global_matches(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.completion_html.CompletionHtml" [color="black", fontcolor="black", label=<{CompletionHtml|<br ALIGN="LEFT"/>|cancel_completion()<br ALIGN="LEFT"/>eventFilter(obj, event)<br ALIGN="LEFT"/>select_down()<br ALIGN="LEFT"/>select_left()<br ALIGN="LEFT"/>select_right()<br ALIGN="LEFT"/>select_up()<br ALIGN="LEFT"/>show_items(cursor, items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.completion_plain.CompletionPlain" [color="black", fontcolor="black", label=<{CompletionPlain|<br ALIGN="LEFT"/>|cancel_completion()<br ALIGN="LEFT"/>eventFilter(obj, event)<br ALIGN="LEFT"/>show_items(cursor, items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.completer.CompletionSplitter" [color="black", fontcolor="black", label=<{CompletionSplitter|delims<br ALIGN="LEFT"/>|split_line(line, cursor_pos)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_completer.CompletionSplitterTestCase" [color="black", fontcolor="black", label=<{CompletionSplitterTestCase|sp<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_delim_setting()<br ALIGN="LEFT"/>test_spaces()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.completion_widget.CompletionWidget" [color="black", fontcolor="black", label=<{CompletionWidget|<br ALIGN="LEFT"/>|cancel_completion()<br ALIGN="LEFT"/>eventFilter(obj, event)<br ALIGN="LEFT"/>hideEvent(event)<br ALIGN="LEFT"/>showEvent(event)<br ALIGN="LEFT"/>show_items(cursor, items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Complex" [color="black", fontcolor="black", label=<{Complex|default_value : complex<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ComplexTrait" [color="black", fontcolor="black", label=<{ComplexTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.CompositeError" [color="black", fontcolor="red", label=<{CompositeError|args<br ALIGN="LEFT"/>elist<br ALIGN="LEFT"/>msg<br ALIGN="LEFT"/>tb_limit : int<br ALIGN="LEFT"/>|print_traceback(excid)<br ALIGN="LEFT"/>raise_exception(excid)<br ALIGN="LEFT"/>render_traceback(excid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.dictdb.CompositeFilter" [color="black", fontcolor="black", label=<{CompositeFilter|tests : list<br ALIGN="LEFT"/>values : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.loader.Config" [color="black", fontcolor="black", label=<{Config|InteractiveShellEmbed<br ALIGN="LEFT"/>a : int, str<br ALIGN="LEFT"/>b : range<br ALIGN="LEFT"/>bar : int, str<br ALIGN="LEFT"/>foo : str<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>has_key<br ALIGN="LEFT"/>|collisions(other)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>merge(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.config.tests.test_config_api.ConfigAPI" [color="black", fontcolor="black", label=<{ConfigAPI|base_url<br ALIGN="LEFT"/>|get(section)<br ALIGN="LEFT"/>modify(section, values)<br ALIGN="LEFT"/>set(section, values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.ConfigError" [color="black", fontcolor="red", label=<{ConfigError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.loader.ConfigFileNotFound" [color="black", fontcolor="red", label=<{ConfigFileNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.config.handlers.ConfigHandler" [color="black", fontcolor="black", label=<{ConfigHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|get(section_name)<br ALIGN="LEFT"/>patch(section_name)<br ALIGN="LEFT"/>put(section_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.ConfigLoader" [color="black", fontcolor="black", label=<{ConfigLoader|config<br ALIGN="LEFT"/>log : NoneType, RootLogger<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>load_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.ConfigLoaderError" [color="black", fontcolor="red", label=<{ConfigLoaderError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.config.ConfigMagics" [color="black", fontcolor="black", label=<{ConfigMagics|configurables : list<br ALIGN="LEFT"/>|config(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.config.manager.ConfigManager" [color="black", fontcolor="black", label=<{ConfigManager|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.configurable.Configurable" [color="black", fontcolor="black", label=<{Configurable|config<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|class_config_section()<br ALIGN="LEFT"/>class_get_help(inst)<br ALIGN="LEFT"/>class_get_trait_help(trait, inst)<br ALIGN="LEFT"/>class_print_help(inst)<br ALIGN="LEFT"/>section_names()<br ALIGN="LEFT"/>update_config(config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.configurable.ConfigurableError" [color="black", fontcolor="red", label=<{ConfigurableError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.connect.ConnectionFileMixin" [color="black", fontcolor="black", label=<{ConnectionFileMixin|connection_file<br ALIGN="LEFT"/>control_port : Integer<br ALIGN="LEFT"/>hb_port : Integer<br ALIGN="LEFT"/>iopub_port : Integer<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>ports<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>shell_port : Integer<br ALIGN="LEFT"/>stdin_port : Integer<br ALIGN="LEFT"/>transport<br ALIGN="LEFT"/>|cleanup_connection_file()<br ALIGN="LEFT"/>cleanup_ipc_files()<br ALIGN="LEFT"/>connect_control(identity)<br ALIGN="LEFT"/>connect_hb(identity)<br ALIGN="LEFT"/>connect_iopub(identity)<br ALIGN="LEFT"/>connect_shell(identity)<br ALIGN="LEFT"/>connect_stdin(identity)<br ALIGN="LEFT"/>get_connection_info()<br ALIGN="LEFT"/>load_connection_file()<br ALIGN="LEFT"/>write_connection_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.console_widget.ConsoleWidget" [color="black", fontcolor="black", label=<{ConsoleWidget|ansi_codes<br ALIGN="LEFT"/>buffer_size : Integer<br ALIGN="LEFT"/>copy_action<br ALIGN="LEFT"/>copy_available<br ALIGN="LEFT"/>copy_link_action<br ALIGN="LEFT"/>custom_control : NoneType<br ALIGN="LEFT"/>custom_page_control : NoneType<br ALIGN="LEFT"/>custom_page_requested<br ALIGN="LEFT"/>cut_action<br ALIGN="LEFT"/>decrease_font_size<br ALIGN="LEFT"/>execute_on_complete_input<br ALIGN="LEFT"/>export_action<br ALIGN="LEFT"/>font<br ALIGN="LEFT"/>font_changed<br ALIGN="LEFT"/>font_family<br ALIGN="LEFT"/>font_size : Integer<br ALIGN="LEFT"/>gui_completion<br ALIGN="LEFT"/>height : Integer<br ALIGN="LEFT"/>include_other_output<br ALIGN="LEFT"/>increase_font_size<br ALIGN="LEFT"/>input_buffer<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>open_link_action<br ALIGN="LEFT"/>override_shortcuts<br ALIGN="LEFT"/>paging<br ALIGN="LEFT"/>paste_action<br ALIGN="LEFT"/>print_action<br ALIGN="LEFT"/>redo_available<br ALIGN="LEFT"/>reset_font_size<br ALIGN="LEFT"/>select_all_action<br ALIGN="LEFT"/>tab_width<br ALIGN="LEFT"/>undo_available<br ALIGN="LEFT"/>width : Integer<br ALIGN="LEFT"/>|can_copy()<br ALIGN="LEFT"/>can_cut()<br ALIGN="LEFT"/>can_paste()<br ALIGN="LEFT"/>change_font_size(delta)<br ALIGN="LEFT"/>clear(keep_input)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>copy_anchor(anchor)<br ALIGN="LEFT"/>cut()<br ALIGN="LEFT"/>dragEnterEvent(e)<br ALIGN="LEFT"/>dragMoveEvent(e)<br ALIGN="LEFT"/>dropEvent(e)<br ALIGN="LEFT"/>eventFilter(obj, event)<br ALIGN="LEFT"/>execute(source, hidden, interactive)<br ALIGN="LEFT"/>export_html()<br ALIGN="LEFT"/>open_anchor(anchor)<br ALIGN="LEFT"/>paste(mode)<br ALIGN="LEFT"/>print_(printer)<br ALIGN="LEFT"/>prompt_to_top()<br ALIGN="LEFT"/>redo()<br ALIGN="LEFT"/>reset_font()<br ALIGN="LEFT"/>select_all()<br ALIGN="LEFT"/>sizeHint()<br ALIGN="LEFT"/>undo()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Container" [color="black", fontcolor="black", label=<{Container|klass : NoneType<br ALIGN="LEFT"/>|element_error(obj, element, validator)<br ALIGN="LEFT"/>instance_init(obj)<br ALIGN="LEFT"/>validate(obj, value)<br ALIGN="LEFT"/>validate_elements(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.Containers" [color="black", fontcolor="black", label=<{Containers|d<br ALIGN="LEFT"/>lis<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.contents.handlers.ContentsHandler" [color="black", fontcolor="black", label=<{ContentsHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|delete(path)<br ALIGN="LEFT"/>get(path)<br ALIGN="LEFT"/>location_url(path)<br ALIGN="LEFT"/>patch(path)<br ALIGN="LEFT"/>post(path)<br ALIGN="LEFT"/>put(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.manager.ContentsManager" [color="black", fontcolor="black", label=<{ContentsManager|checkpoints<br ALIGN="LEFT"/>checkpoints_class<br ALIGN="LEFT"/>checkpoints_kwargs<br ALIGN="LEFT"/>hide_globs<br ALIGN="LEFT"/>notary<br ALIGN="LEFT"/>pre_save_hook<br ALIGN="LEFT"/>untitled_directory<br ALIGN="LEFT"/>untitled_file<br ALIGN="LEFT"/>untitled_notebook<br ALIGN="LEFT"/>|check_and_sign(nb, path)<br ALIGN="LEFT"/>copy(from_path, to_path)<br ALIGN="LEFT"/>create_checkpoint(path)<br ALIGN="LEFT"/>delete(path)<br ALIGN="LEFT"/>delete_checkpoint(checkpoint_id, path)<br ALIGN="LEFT"/><I>delete_file</I>(path)<br ALIGN="LEFT"/><I>dir_exists</I>(path)<br ALIGN="LEFT"/>exists(path)<br ALIGN="LEFT"/><I>file_exists</I>(path)<br ALIGN="LEFT"/><I>get</I>(path, content, type, format)<br ALIGN="LEFT"/>get_kernel_path(path, model)<br ALIGN="LEFT"/>increment_filename(filename, path, insert)<br ALIGN="LEFT"/>info_string()<br ALIGN="LEFT"/><I>is_hidden</I>(path)<br ALIGN="LEFT"/>list_checkpoints(path)<br ALIGN="LEFT"/>log_info()<br ALIGN="LEFT"/>mark_trusted_cells(nb, path)<br ALIGN="LEFT"/>new(model, path)<br ALIGN="LEFT"/>new_untitled(path, type, ext)<br ALIGN="LEFT"/>rename(old_path, new_path)<br ALIGN="LEFT"/><I>rename_file</I>(old_path, new_path)<br ALIGN="LEFT"/>restore_checkpoint(checkpoint_id, path)<br ALIGN="LEFT"/>run_pre_save_hook(model, path)<br ALIGN="LEFT"/><I>save</I>(model, path)<br ALIGN="LEFT"/>should_list(name)<br ALIGN="LEFT"/>trust_notebook(path)<br ALIGN="LEFT"/>update(model, path)<br ALIGN="LEFT"/>validate_notebook_model(model)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.ControllerLauncherTest" [color="black", fontcolor="black", label=<{ControllerLauncherTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.ControllerMixin" [color="black", fontcolor="black", label=<{ControllerMixin|controller_args<br ALIGN="LEFT"/>controller_cmd<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.utils.exceptions.ConversionException" [color="black", fontcolor="red", label=<{ConversionException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.convertfigures.ConvertFiguresPreprocessor" [color="black", fontcolor="black", label=<{ConvertFiguresPreprocessor|from_format<br ALIGN="LEFT"/>to_format<br ALIGN="LEFT"/>|<I>convert_figure</I>(data_format, data)<br ALIGN="LEFT"/>preprocess_cell(cell, resources, cell_index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.inputtransformer.CoroutineInputTransformer" [color="black", fontcolor="black", label=<{CoroutineInputTransformer|coro<br ALIGN="LEFT"/>|push(line)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.crashhandler.CrashHandler" [color="black", fontcolor="black", label=<{CrashHandler|app<br ALIGN="LEFT"/>call_pdb : bool<br ALIGN="LEFT"/>crash_report_fname<br ALIGN="LEFT"/>info : dict<br ALIGN="LEFT"/>message_template : str<br ALIGN="LEFT"/>section_sep : str<br ALIGN="LEFT"/>show_crash_traceback : bool<br ALIGN="LEFT"/>|make_report(traceback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_io.test_atomic_writing.CustomExc" [color="black", fontcolor="red", label=<{CustomExc|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.iptestcontroller.run_iptestall.CustomHtmlReporter" [color="black", fontcolor="black", label=<{CustomHtmlReporter|<br ALIGN="LEFT"/>|find_code_units(morfs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_serialize.test_class_inheritance.D" [color="black", fontcolor="black", label=<{D|b : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget.DOMWidget" [color="black", fontcolor="black", label=<{DOMWidget|background_color<br ALIGN="LEFT"/>border_color<br ALIGN="LEFT"/>border_radius<br ALIGN="LEFT"/>border_style<br ALIGN="LEFT"/>border_width<br ALIGN="LEFT"/>color<br ALIGN="LEFT"/>font_family<br ALIGN="LEFT"/>font_size<br ALIGN="LEFT"/>font_style<br ALIGN="LEFT"/>font_weight<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>margin<br ALIGN="LEFT"/>padding<br ALIGN="LEFT"/>visible<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.code.CodeMagics._find_edit_target.DataIsObject" [color="black", fontcolor="red", label=<{DataIsObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.datatypefilter.DataTypeFilter" [color="black", fontcolor="black", label=<{DataTypeFilter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.writers.debug.DebugWriter" [color="black", fontcolor="black", label=<{DebugWriter|<br ALIGN="LEFT"/>|write(output, resources, notebook_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestConfigContainers.test_config_default.DefaultConfigurable" [color="black", fontcolor="black", label=<{DefaultConfigurable|a : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.DefaultValueGenerator" [color="black", fontcolor="black", label=<{DefaultValueGenerator|args : tuple<br ALIGN="LEFT"/>kw : dict<br ALIGN="LEFT"/>|generate(klass)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.demo.Demo" [color="black", fontcolor="black", label=<{Demo|auto_all : NoneType<br ALIGN="LEFT"/>block_index : NoneType, int<br ALIGN="LEFT"/>finished : bool<br ALIGN="LEFT"/>fname : str<br ALIGN="LEFT"/>fobj : TextIOWrapper, str<br ALIGN="LEFT"/>ip_colorize<br ALIGN="LEFT"/>ip_ns<br ALIGN="LEFT"/>ip_run_cell<br ALIGN="LEFT"/>ip_showtb<br ALIGN="LEFT"/>nblocks : int<br ALIGN="LEFT"/>re_auto<br ALIGN="LEFT"/>re_auto_all<br ALIGN="LEFT"/>re_silent<br ALIGN="LEFT"/>re_stop<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>src : str<br ALIGN="LEFT"/>src_blocks : list<br ALIGN="LEFT"/>src_blocks_colored : list<br ALIGN="LEFT"/>sys_argv<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>user_ns : dict<br ALIGN="LEFT"/>|again()<br ALIGN="LEFT"/>back(num)<br ALIGN="LEFT"/>edit(index)<br ALIGN="LEFT"/>fload()<br ALIGN="LEFT"/>jump(num)<br ALIGN="LEFT"/>marquee(txt, width, mark)<br ALIGN="LEFT"/><I>post_cmd</I>()<br ALIGN="LEFT"/><I>pre_cmd</I>()<br ALIGN="LEFT"/>reload()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>run_cell(source)<br ALIGN="LEFT"/>seek(index)<br ALIGN="LEFT"/>show(index)<br ALIGN="LEFT"/>show_all()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.demo.DemoError" [color="black", fontcolor="red", label=<{DemoError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.dependency.Dependency" [color="black", fontcolor="black", label=<{Dependency|all : bool<br ALIGN="LEFT"/>failure : bool<br ALIGN="LEFT"/>success : bool<br ALIGN="LEFT"/>|as_dict()<br ALIGN="LEFT"/>check(completed, failed)<br ALIGN="LEFT"/>unreachable(completed, failed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_dependency.DependencyTest" [color="black", fontcolor="black", label=<{DependencyTest|dview<br ALIGN="LEFT"/>failed : set<br ALIGN="LEFT"/>succeeded : set<br ALIGN="LEFT"/>user_ns : dict<br ALIGN="LEFT"/>view<br ALIGN="LEFT"/>|assertMet(dep)<br ALIGN="LEFT"/>assertReachable(dep)<br ALIGN="LEFT"/>assertUnmet(dep)<br ALIGN="LEFT"/>assertUnreachable(dep)<br ALIGN="LEFT"/>cancan(f)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_failure_only()<br ALIGN="LEFT"/>test_require_function()<br ALIGN="LEFT"/>test_require_imports()<br ALIGN="LEFT"/>test_require_object()<br ALIGN="LEFT"/>test_success_only()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.error.DependencyTimeout" [color="black", fontcolor="red", label=<{DependencyTimeout|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.DeprecatedMPILauncher" [color="black", fontcolor="black", label=<{DeprecatedMPILauncher|<br ALIGN="LEFT"/>|warn()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.deprecated.DeprecatedMagics" [color="black", fontcolor="black", label=<{DeprecatedMagics|<br ALIGN="LEFT"/>|install_default_config(parameter_s)<br ALIGN="LEFT"/>install_profiles(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_get_exception_only.DerivedInterrupt" [color="black", fontcolor="red", label=<{DerivedInterrupt|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Dict" [color="black", fontcolor="black", label=<{Dict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.dictdb.DictDB" [color="black", fontcolor="black", label=<{DictDB|cull_fraction<br ALIGN="LEFT"/>record_limit : Integer<br ALIGN="LEFT"/>size_limit : Integer<br ALIGN="LEFT"/>|add_record(msg_id, rec)<br ALIGN="LEFT"/>drop_matching_records(check)<br ALIGN="LEFT"/>drop_record(msg_id)<br ALIGN="LEFT"/>find_records(check, keys)<br ALIGN="LEFT"/>get_history()<br ALIGN="LEFT"/>get_record(msg_id)<br ALIGN="LEFT"/>update_record(msg_id, rec)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.DictTrait" [color="black", fontcolor="black", label=<{DictTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.view.DirectView" [color="black", fontcolor="black", label=<{DirectView|block : bool<br ALIGN="LEFT"/>importer<br ALIGN="LEFT"/>|activate(suffix)<br ALIGN="LEFT"/>clear(targets, block)<br ALIGN="LEFT"/>execute(code, silent, targets, block)<br ALIGN="LEFT"/>gather(key, dist, targets, block)<br ALIGN="LEFT"/>get(key_s)<br ALIGN="LEFT"/>map(f)<br ALIGN="LEFT"/>pull(names, targets, block)<br ALIGN="LEFT"/>push(ns, targets, block, track)<br ALIGN="LEFT"/>run(filename, targets, block)<br ALIGN="LEFT"/>scatter(key, seq, dist, flatten, targets, block, track)<br ALIGN="LEFT"/>sync_imports(local, quiet)<br ALIGN="LEFT"/>update(ns)<br ALIGN="LEFT"/>use_cloudpickle()<br ALIGN="LEFT"/>use_dill()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_link.DirectionalLink" [color="black", fontcolor="black", label=<{DirectionalLink|source<br ALIGN="LEFT"/>targets<br ALIGN="LEFT"/>|unlink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.DisplayData" [color="black", fontcolor="black", label=<{DisplayData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.DisplayFormatter" [color="black", fontcolor="black", label=<{DisplayFormatter|active_types<br ALIGN="LEFT"/>format_types<br ALIGN="LEFT"/>formatters<br ALIGN="LEFT"/>ipython_display_formatter<br ALIGN="LEFT"/>plain_text_only<br ALIGN="LEFT"/>|format(obj, include, exclude)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.displayhook.DisplayHook" [color="black", fontcolor="black", label=<{DisplayHook|cache_size : int<br ALIGN="LEFT"/>cull_fraction<br ALIGN="LEFT"/>do_full_cache : int<br ALIGN="LEFT"/>exec_result<br ALIGN="LEFT"/>prompt_count<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|check_for_underscore()<br ALIGN="LEFT"/>compute_format_data(result)<br ALIGN="LEFT"/>cull_cache()<br ALIGN="LEFT"/>fill_exec_result(result)<br ALIGN="LEFT"/>finish_displayhook()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>log_output(format_dict)<br ALIGN="LEFT"/>quiet()<br ALIGN="LEFT"/><I>start_displayhook</I>()<br ALIGN="LEFT"/>update_user_ns(result)<br ALIGN="LEFT"/>write_format_data(format_dict, md_dict)<br ALIGN="LEFT"/>write_output_prompt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.display.DisplayMagics" [color="black", fontcolor="black", label=<{DisplayMagics|<br ALIGN="LEFT"/>|html(line, cell)<br ALIGN="LEFT"/>javascript(line, cell)<br ALIGN="LEFT"/>latex(line, cell)<br ALIGN="LEFT"/>svg(line, cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.DisplayObject" [color="black", fontcolor="black", label=<{DisplayObject|data : NoneType<br ALIGN="LEFT"/>filename : NoneType, str<br ALIGN="LEFT"/>url : NoneType<br ALIGN="LEFT"/>|reload()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.displaypub.DisplayPublisher" [color="black", fontcolor="black", label=<{DisplayPublisher|<br ALIGN="LEFT"/>|clear_output(wait)<br ALIGN="LEFT"/>publish(data, metadata, source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display_trap.DisplayTrap" [color="black", fontcolor="black", label=<{DisplayTrap|hook<br ALIGN="LEFT"/>old_hook : NoneType<br ALIGN="LEFT"/>|set()<br ALIGN="LEFT"/>unset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.ipunittest.Doc2UnitTester" [color="black", fontcolor="black", label=<{Doc2UnitTester|finder : DocTestFinder<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.DocFileCase" [color="black", fontcolor="black", label=<{DocFileCase|<br ALIGN="LEFT"/>|address()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.DocTestCase" [color="black", fontcolor="black", label=<{DocTestCase|user_ns_orig : dict<br ALIGN="LEFT"/>|runTest()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.DocTestFinder" [color="black", fontcolor="black", label=<{DocTestFinder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.DocTestSkip" [color="black", fontcolor="black", label=<{DocTestSkip|ds_skip : str<br ALIGN="LEFT"/>obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.text.DollarFormatter" [color="black", fontcolor="black", label=<{DollarFormatter|<br ALIGN="LEFT"/>|parse(fmt_string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.DottedObjectName" [color="black", fontcolor="black", label=<{DottedObjectName|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.DottedObjectNameTrait" [color="black", fontcolor="black", label=<{DottedObjectNameTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.nbconvertapp.DottedOrNone" [color="black", fontcolor="black", label=<{DottedOrNone|default_value : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection.Dropdown" [color="black", fontcolor="black", label=<{Dropdown|button_style<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>value : _empty<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.Dummy1" [color="black", fontcolor="black", label=<{Dummy1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.Dummy2" [color="black", fontcolor="black", label=<{Dummy2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.tests.test_interaction.DummyComm" [color="black", fontcolor="black", label=<{DummyComm|comm_id : str<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/><I>open</I>()<br ALIGN="LEFT"/><I>send</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_connect.DummyConsoleApp" [color="black", fontcolor="black", label=<{DummyConsoleApp|connection_file : str<br ALIGN="LEFT"/>|initialize(argv)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.history.DummyDB" [color="black", fontcolor="black", label=<{DummyDB|<br ALIGN="LEFT"/>|<I>commit</I>()<br ALIGN="LEFT"/>execute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.clusters.clustermanager.ClusterManager.build_launchers.DummyIPClusterStart" [color="black", fontcolor="black", label=<{DummyIPClusterStart|<br ALIGN="LEFT"/>|<I>init_signal</I>()<br ALIGN="LEFT"/><I>reinit_logging</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.sessions.tests.test_sessionmanager.DummyKernel" [color="black", fontcolor="black", label=<{DummyKernel|kernel_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.sessions.tests.test_sessionmanager.DummyMKM" [color="black", fontcolor="black", label=<{DummyMKM|id_letters<br ALIGN="LEFT"/>|shutdown_kernel(kernel_id, now)<br ALIGN="LEFT"/>start_kernel(kernel_id, path, kernel_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.DummyMagics" [color="black", fontcolor="black", label=<{DummyMagics|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.interactiveshell.DummyMod" [color="black", fontcolor="black", label=<{DummyMod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.tests.test_nbconvertapp.DummyPost" [color="black", fontcolor="black", label=<{DummyPost|<br ALIGN="LEFT"/>|postprocess(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.DummyRepr" [color="black", fontcolor="black", label=<{DummyRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.inprocess.socket.DummySocket" [color="black", fontcolor="black", label=<{DummySocket|message_sent<br ALIGN="LEFT"/>queue<br ALIGN="LEFT"/>|recv_multipart(flags, copy, track)<br ALIGN="LEFT"/>send_multipart(msg_parts, flags, copy, track)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.multikernelmanager.DuplicateKernelError" [color="black", fontcolor="red", label=<{DuplicateKernelError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.EOF" [color="black", fontcolor="red", label=<{EOF|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.edit.handlers.EditorHandler" [color="black", fontcolor="black", label=<{EditorHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.EmacsChecker" [color="black", fontcolor="black", label=<{EmacsChecker|enabled<br ALIGN="LEFT"/>priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.EmacsHandler" [color="black", fontcolor="black", label=<{EmacsHandler|esc_strings<br ALIGN="LEFT"/>handler_name<br ALIGN="LEFT"/>|handle(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.embed.EmbeddedMagics" [color="black", fontcolor="black", label=<{EmbeddedMagics|<br ALIGN="LEFT"/>|kill_embedded(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.sphinxext.ipython_directive.EmbeddedSphinxShell" [color="black", fontcolor="black", label=<{EmbeddedSphinxShell|IP : NoneType<br ALIGN="LEFT"/>cout : StringIO<br ALIGN="LEFT"/>directive : NoneType<br ALIGN="LEFT"/>hold_count<br ALIGN="LEFT"/>input : str<br ALIGN="LEFT"/>is_doctest : bool<br ALIGN="LEFT"/>is_okexcept<br ALIGN="LEFT"/>is_okwarning<br ALIGN="LEFT"/>is_suppress : bool<br ALIGN="LEFT"/>is_verbatim : bool<br ALIGN="LEFT"/>output : str<br ALIGN="LEFT"/>promptin<br ALIGN="LEFT"/>promptout<br ALIGN="LEFT"/>rgxin<br ALIGN="LEFT"/>rgxout<br ALIGN="LEFT"/>savefig_dir<br ALIGN="LEFT"/>source_dir<br ALIGN="LEFT"/>tmp_profile_dir<br ALIGN="LEFT"/>user_global_ns<br ALIGN="LEFT"/>user_ns<br ALIGN="LEFT"/>|cleanup()<br ALIGN="LEFT"/>clear_cout()<br ALIGN="LEFT"/>custom_doctest(decorator, input_lines, found, submitted)<br ALIGN="LEFT"/>ensure_pyplot()<br ALIGN="LEFT"/>process_block(block)<br ALIGN="LEFT"/>process_comment(data)<br ALIGN="LEFT"/>process_image(decorator)<br ALIGN="LEFT"/>process_input(data, input_prompt, lineno)<br ALIGN="LEFT"/>process_input_line(line, store_history)<br ALIGN="LEFT"/>process_output(data, output_prompt, input_lines, output, is_doctest, decorator, image_file)<br ALIGN="LEFT"/>process_pure_python(content)<br ALIGN="LEFT"/>save_image(image_file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.hub.EngineConnector" [color="black", fontcolor="black", label=<{EngineConnector|id : Integer<br ALIGN="LEFT"/>pending<br ALIGN="LEFT"/>stallback<br ALIGN="LEFT"/>uuid<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.EngineError" [color="black", fontcolor="red", label=<{EngineError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.engine.engine.EngineFactory" [color="black", fontcolor="black", label=<{EngineFactory|bident<br ALIGN="LEFT"/>connection_info<br ALIGN="LEFT"/>display_hook_factory<br ALIGN="LEFT"/>hb_check_period : Integer<br ALIGN="LEFT"/>id : Integer<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>max_heartbeat_misses : Integer<br ALIGN="LEFT"/>out_stream_factory<br ALIGN="LEFT"/>paramiko<br ALIGN="LEFT"/>registrar<br ALIGN="LEFT"/>sshkey<br ALIGN="LEFT"/>sshserver<br ALIGN="LEFT"/>timeout<br ALIGN="LEFT"/>tunnel_mod<br ALIGN="LEFT"/>user_ns<br ALIGN="LEFT"/>using_ssh<br ALIGN="LEFT"/>|abort()<br ALIGN="LEFT"/>complete_registration(msg, connect, maybe_tunnel)<br ALIGN="LEFT"/>init_connector()<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.EngineMixin" [color="black", fontcolor="black", label=<{EngineMixin|engine_args<br ALIGN="LEFT"/>engine_cmd<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.log.EnginePUBHandler" [color="black", fontcolor="black", label=<{EnginePUBHandler|engine : NoneType<br ALIGN="LEFT"/>root_topic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [color="black", fontcolor="black", label=<{EngineSetLauncherTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Enum" [color="black", fontcolor="black", label=<{Enum|values<br ALIGN="LEFT"/>|info()<br ALIGN="LEFT"/>validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.ErrorTransformer" [color="black", fontcolor="black", label=<{ErrorTransformer|<br ALIGN="LEFT"/>|visit_Num(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.text.EvalFormatter" [color="black", fontcolor="black", label=<{EvalFormatter|<br ALIGN="LEFT"/>|get_field(name, args, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhookwx.EventLoopRunner" [color="black", fontcolor="black", label=<{EventLoopRunner|evtloop<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|Run(time)<br ALIGN="LEFT"/>check_stdin()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhookwx.EventLoopTimer" [color="black", fontcolor="black", label=<{EventLoopTimer|func<br ALIGN="LEFT"/>|Notify()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.events.EventManager" [color="black", fontcolor="black", label=<{EventManager|callbacks<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|register(event, function)<br ALIGN="LEFT"/>trigger(event)<br ALIGN="LEFT"/>unregister(event, function)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.eventful.EventfulDict" [color="black", fontcolor="black", label=<{EventfulDict|<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>on_add(callback)<br ALIGN="LEFT"/>on_del(callback)<br ALIGN="LEFT"/>on_events(add_callback, set_callback, del_callback)<br ALIGN="LEFT"/>on_set(callback)<br ALIGN="LEFT"/>pop(key)<br ALIGN="LEFT"/>popitem()<br ALIGN="LEFT"/>update(other_dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.EventfulDict" [color="black", fontcolor="black", label=<{EventfulDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.eventful.EventfulList" [color="black", fontcolor="black", label=<{EventfulList|<br ALIGN="LEFT"/>|append(x)<br ALIGN="LEFT"/>extend(L)<br ALIGN="LEFT"/>insert(index, value)<br ALIGN="LEFT"/>on_del(callback)<br ALIGN="LEFT"/>on_events(insert_callback, set_callback, del_callback, reverse_callback, sort_callback)<br ALIGN="LEFT"/>on_insert(callback)<br ALIGN="LEFT"/>on_reverse(callback)<br ALIGN="LEFT"/>on_set(callback)<br ALIGN="LEFT"/>on_sort(callback)<br ALIGN="LEFT"/>pop(i)<br ALIGN="LEFT"/>remove(x)<br ALIGN="LEFT"/>reverse()<br ALIGN="LEFT"/>sort()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.EventfulList" [color="black", fontcolor="black", label=<{EventfulList|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.ExceptionPexpect" [color="black", fontcolor="red", label=<{ExceptionPexpect|value<br ALIGN="LEFT"/>|get_trace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.iptest.ExclusionPlugin" [color="black", fontcolor="black", label=<{ExclusionPlugin|enabled : bool<br ALIGN="LEFT"/>exclude_patterns : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>score : int<br ALIGN="LEFT"/>|configure(options, config)<br ALIGN="LEFT"/>options(parser, env)<br ALIGN="LEFT"/>wantDirectory(directory)<br ALIGN="LEFT"/>wantFile(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.ExecuteInput" [color="black", fontcolor="black", label=<{ExecuteInput|code<br ALIGN="LEFT"/>execution_count : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.execute.ExecutePreprocessor" [color="black", fontcolor="black", label=<{ExecutePreprocessor|enabled : bool<br ALIGN="LEFT"/>extra_arguments<br ALIGN="LEFT"/>interrupt_on_timeout<br ALIGN="LEFT"/>kc<br ALIGN="LEFT"/>km<br ALIGN="LEFT"/>timeout : Integer<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/>preprocess_cell(cell, resources, cell_index)<br ALIGN="LEFT"/>run_cell(cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.ExecuteReply" [color="black", fontcolor="black", label=<{ExecuteReply|execution_count : Integer<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|check(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.client.ExecuteReply" [color="black", fontcolor="black", label=<{ExecuteReply|data<br ALIGN="LEFT"/>execution_count<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>msg_id<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>|display()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.ExecuteReplyError" [color="black", fontcolor="black", label=<{ExecuteReplyError|ename<br ALIGN="LEFT"/>evalue<br ALIGN="LEFT"/>traceback<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.ExecuteReplyOkay" [color="black", fontcolor="black", label=<{ExecuteReplyOkay|payload<br ALIGN="LEFT"/>user_expressions<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.ExecuteResult" [color="black", fontcolor="black", label=<{ExecuteResult|execution_count : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.execution.ExecutionMagics" [color="black", fontcolor="black", label=<{ExecutionMagics|default_runner : NoneType<br ALIGN="LEFT"/>prun<br ALIGN="LEFT"/>|capture(line, cell)<br ALIGN="LEFT"/>debug(line, cell)<br ALIGN="LEFT"/>macro(parameter_s)<br ALIGN="LEFT"/>pdb(parameter_s)<br ALIGN="LEFT"/>profile_missing_notice()<br ALIGN="LEFT"/>prun(parameter_s, cell)<br ALIGN="LEFT"/>run(parameter_s, runner, file_finder)<br ALIGN="LEFT"/>tb(s)<br ALIGN="LEFT"/>time(line, cell, local_ns)<br ALIGN="LEFT"/>timeit(line, cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.interactiveshell.ExecutionResult" [color="black", fontcolor="black", label=<{ExecutionResult|error_before_exec : NoneType<br ALIGN="LEFT"/>error_in_exec : NoneType<br ALIGN="LEFT"/>execution_count : NoneType<br ALIGN="LEFT"/>result : NoneType<br ALIGN="LEFT"/>success<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.autocall.ExitAutocall" [color="black", fontcolor="black", label=<{ExitAutocall|rewrite : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.ExitCodeChecks" [color="black", fontcolor="black", label=<{ExitCodeChecks|<br ALIGN="LEFT"/>|test_exit_code_error()<br ALIGN="LEFT"/>test_exit_code_ok()<br ALIGN="LEFT"/>test_exit_code_signal()<br ALIGN="LEFT"/>test_exit_code_signal_csh()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.exporter.Exporter" [color="black", fontcolor="black", label=<{Exporter|default_config<br ALIGN="LEFT"/>default_preprocessors<br ALIGN="LEFT"/>file_extension<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>preprocessors<br ALIGN="LEFT"/>|from_file(file_stream, resources)<br ALIGN="LEFT"/>from_filename(filename, resources)<br ALIGN="LEFT"/>from_notebook_node(nb, resources)<br ALIGN="LEFT"/>register_preprocessor(preprocessor, enabled)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.export.ExporterNameError" [color="black", fontcolor="red", label=<{ExporterNameError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [color="black", fontcolor="black", label=<{ExportersTestsBase|exporter_class : NoneType<br ALIGN="LEFT"/>should_include_raw : NoneType<br ALIGN="LEFT"/>|test_raw_cell_inclusion()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.ExtensionDoctest" [color="black", fontcolor="black", label=<{ExtensionDoctest|checker<br ALIGN="LEFT"/>doctest_tests<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>extension<br ALIGN="LEFT"/>extraglobs : NoneType<br ALIGN="LEFT"/>finder<br ALIGN="LEFT"/>globs : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parser : DocTestParser<br ALIGN="LEFT"/>|configure(options, config)<br ALIGN="LEFT"/>loadTestsFromExtensionModule(filename)<br ALIGN="LEFT"/>loadTestsFromFile(filename)<br ALIGN="LEFT"/>loadTestsFromModule(module)<br ALIGN="LEFT"/>options(parser, env)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.extension.ExtensionMagics" [color="black", fontcolor="black", label=<{ExtensionMagics|<br ALIGN="LEFT"/>|install_ext(parameter_s)<br ALIGN="LEFT"/>load_ext(module_str)<br ALIGN="LEFT"/>reload_ext(module_str)<br ALIGN="LEFT"/>unload_ext(module_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.extensions.ExtensionManager" [color="black", fontcolor="black", label=<{ExtensionManager|ipython_extension_dir<br ALIGN="LEFT"/>loaded : set<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|install_extension(url, filename)<br ALIGN="LEFT"/>load_extension(module_str)<br ALIGN="LEFT"/>reload_extension(module_str)<br ALIGN="LEFT"/>unload_extension(module_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.extractoutput.ExtractOutputPreprocessor" [color="black", fontcolor="black", label=<{ExtractOutputPreprocessor|enabled : bool<br ALIGN="LEFT"/>extract_output_types<br ALIGN="LEFT"/>output_filename_template<br ALIGN="LEFT"/>|preprocess_cell(cell, resources, cell_index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_hooks.Fail" [color="black", fontcolor="black", label=<{Fail|called : bool<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.extensions.tests.test_autoreload.FakeShell" [color="black", fontcolor="black", label=<{FakeShell|auto_magics<br ALIGN="LEFT"/>events<br ALIGN="LEFT"/>ns : dict<br ALIGN="LEFT"/>register_magics<br ALIGN="LEFT"/>set_hook<br ALIGN="LEFT"/>|magic_aimport(parameter, stream)<br ALIGN="LEFT"/>magic_autoreload(parameter)<br ALIGN="LEFT"/>push(items)<br ALIGN="LEFT"/>run_code(code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.filecheckpoints.FileCheckpoints" [color="black", fontcolor="black", label=<{FileCheckpoints|checkpoint_dir<br ALIGN="LEFT"/>root_dir<br ALIGN="LEFT"/>|checkpoint_model(checkpoint_id, os_path)<br ALIGN="LEFT"/>checkpoint_path(checkpoint_id, path)<br ALIGN="LEFT"/>create_checkpoint(contents_mgr, path)<br ALIGN="LEFT"/>delete_checkpoint(checkpoint_id, path)<br ALIGN="LEFT"/>list_checkpoints(path)<br ALIGN="LEFT"/>no_such_checkpoint(path, checkpoint_id)<br ALIGN="LEFT"/>rename_checkpoint(checkpoint_id, old_path, new_path)<br ALIGN="LEFT"/>restore_checkpoint(contents_mgr, checkpoint_id, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.FileConfigLoader" [color="black", fontcolor="black", label=<{FileConfigLoader|filename<br ALIGN="LEFT"/>full_filename : bytes, str<br ALIGN="LEFT"/>path : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.contents.filemanager.FileContentsManager" [color="black", fontcolor="black", label=<{FileContentsManager|post_save_hook<br ALIGN="LEFT"/>root_dir<br ALIGN="LEFT"/>save_script<br ALIGN="LEFT"/>|delete_file(path)<br ALIGN="LEFT"/>dir_exists(path)<br ALIGN="LEFT"/>exists(path)<br ALIGN="LEFT"/>file_exists(path)<br ALIGN="LEFT"/>get(path, content, type, format)<br ALIGN="LEFT"/>get_kernel_path(path, model)<br ALIGN="LEFT"/>info_string()<br ALIGN="LEFT"/>is_hidden(path)<br ALIGN="LEFT"/>rename_file(old_path, new_path)<br ALIGN="LEFT"/>run_post_save_hook(model, os_path)<br ALIGN="LEFT"/>save(model, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.handlers.FileFindHandler" [color="black", fontcolor="black", label=<{FileFindHandler|default_filename : NoneType<br ALIGN="LEFT"/>no_cache_paths : list<br ALIGN="LEFT"/>root : tuple<br ALIGN="LEFT"/>|compute_etag()<br ALIGN="LEFT"/>get_absolute_path(roots, path)<br ALIGN="LEFT"/>initialize(path, default_filename, no_cache_paths)<br ALIGN="LEFT"/>set_headers()<br ALIGN="LEFT"/>validate_absolute_path(root, absolute_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.display.FileLink" [color="black", fontcolor="black", label=<{FileLink|html_link_str : str<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>result_html_prefix : str<br ALIGN="LEFT"/>result_html_suffix : str<br ALIGN="LEFT"/>url_prefix : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.display.FileLinks" [color="black", fontcolor="black", label=<{FileLinks|included_suffixes : NoneType<br ALIGN="LEFT"/>notebook_display_formatter<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>recursive : bool<br ALIGN="LEFT"/>result_html_prefix : str<br ALIGN="LEFT"/>result_html_suffix : str<br ALIGN="LEFT"/>terminal_display_formatter<br ALIGN="LEFT"/>url_prefix : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.contents.fileio.FileManagerMixin" [color="black", fontcolor="black", label=<{FileManagerMixin|<br ALIGN="LEFT"/>|atomic_writing(os_path)<br ALIGN="LEFT"/>open(os_path)<br ALIGN="LEFT"/>perm_to_403(os_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.exporter.FilenameExtension" [color="black", fontcolor="black", label=<{FilenameExtension|default_value : str<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.files.handlers.FilesHandler" [color="black", fontcolor="black", label=<{FilesHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.handlers.FilesRedirectHandler" [color="black", fontcolor="black", label=<{FilesRedirectHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>redirect_to_files(self, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.tests.test_files.FilesTest" [color="black", fontcolor="black", label=<{FilesTest|<br ALIGN="LEFT"/>|test_contents_manager()<br ALIGN="LEFT"/>test_download()<br ALIGN="LEFT"/>test_hidden_files()<br ALIGN="LEFT"/>test_old_files_redirect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.writers.files.FilesWriter" [color="black", fontcolor="black", label=<{FilesWriter|build_directory<br ALIGN="LEFT"/>files : list<br ALIGN="LEFT"/>relpath<br ALIGN="LEFT"/>|write(output, resources, notebook_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.process.FindCmdError" [color="black", fontcolor="red", label=<{FindCmdError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.extensions.tests.test_autoreload.Fixture" [color="black", fontcolor="black", label=<{Fixture|filename_chars : str<br ALIGN="LEFT"/>old_sys_path : NoneType<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>test_dir : NoneType<br ALIGN="LEFT"/>|get_module()<br ALIGN="LEFT"/>new_module(code)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>write_file(filename, content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_box.FlexBox" [color="black", fontcolor="black", label=<{FlexBox|align<br ALIGN="LEFT"/>flex<br ALIGN="LEFT"/>orientation<br ALIGN="LEFT"/>pack<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Float" [color="black", fontcolor="black", label=<{Float|default_value : float<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float.FloatProgress" [color="black", fontcolor="black", label=<{FloatProgress|bar_style<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float.FloatRangeSlider" [color="black", fontcolor="black", label=<{FloatRangeSlider|lower : float<br ALIGN="LEFT"/>max : float<br ALIGN="LEFT"/>min : float<br ALIGN="LEFT"/>orientation<br ALIGN="LEFT"/>readout<br ALIGN="LEFT"/>slider_color<br ALIGN="LEFT"/>upper : float<br ALIGN="LEFT"/>value : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float.FloatSlider" [color="black", fontcolor="black", label=<{FloatSlider|orientation<br ALIGN="LEFT"/>readout<br ALIGN="LEFT"/>slider_color<br ALIGN="LEFT"/>value : _empty<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float.FloatText" [color="black", fontcolor="black", label=<{FloatText|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.FloatTrait" [color="black", fontcolor="black", label=<{FloatTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_application.Foo" [color="black", fontcolor="black", label=<{Foo|i : Integer<br ALIGN="LEFT"/>j : Integer<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.Foo" [color="black", fontcolor="black", label=<{Foo|a : Integer<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable.test_instance.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.tests.test_interaction.test_interact_instancemethod.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|show(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.pretty.Foo" [color="black", fontcolor="black", label=<{Foo|bar<br ALIGN="LEFT"/>blub : dict<br ALIGN="LEFT"/>foo : int<br ALIGN="LEFT"/>hehe : float<br ALIGN="LEFT"/>list : list<br ALIGN="LEFT"/>|get_foo()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.tests.test_ipunittest.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|<I>ipdt_method</I>()<br ALIGN="LEFT"/><I>normaldt_method</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_unique_default_value.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.Foo" [color="black", fontcolor="black", label=<{Foo|c<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_bad_default.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_instance.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_class.Foo" [color="black", fontcolor="black", label=<{Foo|this<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_inst.Foo" [color="black", fontcolor="black", label=<{Foo|this<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass.Foo" [color="black", fontcolor="black", label=<{Foo|t<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Foo" [color="black", fontcolor="black", label=<{Foo|t<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.Foo" [color="black", fontcolor="black", label=<{Foo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.tests.test_decorators.FooClass" [color="black", fontcolor="black", label=<{FooClass|x<br ALIGN="LEFT"/>|bar(y)<br ALIGN="LEFT"/>baz(y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.FooFoo" [color="black", fontcolor="black", label=<{FooFoo|<br ALIGN="LEFT"/>|<I>cell_foo</I>(line, cell)<br ALIGN="LEFT"/><I>line_foo</I>(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.FooInstance" [color="black", fontcolor="black", label=<{FooInstance|klass<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.ultratb.FormattedTB" [color="black", fontcolor="black", label=<{FormattedTB|include_vars<br ALIGN="LEFT"/>mode : NoneType<br ALIGN="LEFT"/>tb_join_char<br ALIGN="LEFT"/>valid_modes : list<br ALIGN="LEFT"/>verbose_modes : list<br ALIGN="LEFT"/>|context()<br ALIGN="LEFT"/>plain()<br ALIGN="LEFT"/>set_mode(mode)<br ALIGN="LEFT"/>stb2text(stb)<br ALIGN="LEFT"/>structured_traceback(etype, value, tb, tb_offset, number_of_lines_of_context)<br ALIGN="LEFT"/>verbose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.FormatterABC" [color="black", fontcolor="black", label=<{FormatterABC|enabled : bool<br ALIGN="LEFT"/>format_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.FormatterWarning" [color="black", fontcolor="red", label=<{FormatterWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredBar" [color="black", fontcolor="black", label=<{ForwardDeclaredBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredBarSub" [color="black", fontcolor="black", label=<{ForwardDeclaredBarSub|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.ForwardDeclaredInstance" [color="black", fontcolor="black", label=<{ForwardDeclaredInstance|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceListTrait" [color="black", fontcolor="black", label=<{ForwardDeclaredInstanceListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceTrait" [color="black", fontcolor="black", label=<{ForwardDeclaredInstanceTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.ForwardDeclaredMixin" [color="black", fontcolor="black", label=<{ForwardDeclaredMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.ForwardDeclaredType" [color="black", fontcolor="black", label=<{ForwardDeclaredType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredTypeListTrait" [color="black", fontcolor="black", label=<{ForwardDeclaredTypeListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredTypeTrait" [color="black", fontcolor="black", label=<{ForwardDeclaredTypeTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.win32support.ForwarderThread" [color="black", fontcolor="black", label=<{ForwarderThread|daemon : bool<br ALIGN="LEFT"/>fd<br ALIGN="LEFT"/>sock<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.frontend_widget.FrontendHighlighter" [color="black", fontcolor="black", label=<{FrontendHighlighter|highlighting_on : bool<br ALIGN="LEFT"/>|highlightBlock(string)<br ALIGN="LEFT"/>rehighlightBlock(block)<br ALIGN="LEFT"/>setFormat(start, count, format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.frontend_widget.FrontendWidget" [color="black", fontcolor="black", label=<{FrontendWidget|banner<br ALIGN="LEFT"/>clear_on_kernel_restart<br ALIGN="LEFT"/>confirm_restart<br ALIGN="LEFT"/>custom_interrupt<br ALIGN="LEFT"/>custom_interrupt_requested<br ALIGN="LEFT"/>custom_restart<br ALIGN="LEFT"/>custom_restart_kernel_died<br ALIGN="LEFT"/>custom_restart_requested<br ALIGN="LEFT"/>enable_calltips<br ALIGN="LEFT"/>executed<br ALIGN="LEFT"/>executing<br ALIGN="LEFT"/>exit_requested<br ALIGN="LEFT"/>kernel_banner<br ALIGN="LEFT"/>lexer<br ALIGN="LEFT"/>lexer_class<br ALIGN="LEFT"/>tab_width : int<br ALIGN="LEFT"/>|append_stream(text)<br ALIGN="LEFT"/>clear_output()<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>copy_raw()<br ALIGN="LEFT"/>execute_file(path, hidden)<br ALIGN="LEFT"/>flush_clearoutput()<br ALIGN="LEFT"/>interrupt_kernel()<br ALIGN="LEFT"/>request_interrupt_kernel()<br ALIGN="LEFT"/>request_restart_kernel()<br ALIGN="LEFT"/>reset(clear)<br ALIGN="LEFT"/>restart_kernel(message, now)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.text.FullEvalFormatter" [color="black", fontcolor="black", label=<{FullEvalFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.decorator._decorator.FunctionMaker" [color="black", fontcolor="black", label=<{FunctionMaker|annotations : dict<br ALIGN="LEFT"/>defaults : NoneType<br ALIGN="LEFT"/>dict : NoneType<br ALIGN="LEFT"/>doc : NoneType<br ALIGN="LEFT"/>module : NoneType, str<br ALIGN="LEFT"/>name : NoneType, str<br ALIGN="LEFT"/>shortsignature : NoneType, str<br ALIGN="LEFT"/>signature : str<br ALIGN="LEFT"/>|create(obj, body, evaldict, defaults, doc, module, addsource)<br ALIGN="LEFT"/>make(src_templ, evaldict, addsource)<br ALIGN="LEFT"/>update(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.gui.gtk3embed.GTKEmbed" [color="black", fontcolor="black", label=<{GTKEmbed|gtk_main : NoneType<br ALIGN="LEFT"/>gtk_main_quit : NoneType<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>|iterate_kernel()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.gui.gtkembed.GTKEmbed" [color="black", fontcolor="black", label=<{GTKEmbed|gtk_main : NoneType<br ALIGN="LEFT"/>gtk_main_quit : NoneType<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>|iterate_kernel()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.checkpoints.GenericCheckpointsMixin" [color="black", fontcolor="black", label=<{GenericCheckpointsMixin|<br ALIGN="LEFT"/>|create_checkpoint(contents_mgr, path)<br ALIGN="LEFT"/><I>create_file_checkpoint</I>(content, format, path)<br ALIGN="LEFT"/><I>create_notebook_checkpoint</I>(nb, path)<br ALIGN="LEFT"/><I>get_checkpoint</I>(checkpoint_id, path, type)<br ALIGN="LEFT"/>restore_checkpoint(contents_mgr, checkpoint_id, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.filecheckpoints.GenericFileCheckpoints" [color="black", fontcolor="black", label=<{GenericFileCheckpoints|<br ALIGN="LEFT"/>|create_file_checkpoint(content, format, path)<br ALIGN="LEFT"/>create_notebook_checkpoint(nb, path)<br ALIGN="LEFT"/>get_file_checkpoint(checkpoint_id, path)<br ALIGN="LEFT"/>get_notebook_checkpoint(checkpoint_id, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.tests.test_contents_api.GenericFileCheckpointsAPITest" [color="black", fontcolor="black", label=<{GenericFileCheckpointsAPITest|config<br ALIGN="LEFT"/>|test_config_did_something()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.GlutInputHook" [color="black", fontcolor="black", label=<{GlutInputHook|<br ALIGN="LEFT"/>|disable()<br ALIGN="LEFT"/>enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.GoodPretty" [color="black", fontcolor="black", label=<{GoodPretty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.pretty.Group" [color="black", fontcolor="black", label=<{Group|breakables : deque<br ALIGN="LEFT"/>depth<br ALIGN="LEFT"/>want_break : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.pretty.GroupQueue" [color="black", fontcolor="black", label=<{GroupQueue|queue : list<br ALIGN="LEFT"/>|deq()<br ALIGN="LEFT"/>enq(group)<br ALIGN="LEFT"/>remove(group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.Gtk3InputHook" [color="black", fontcolor="black", label=<{Gtk3InputHook|<br ALIGN="LEFT"/>|enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.GtkInputHook" [color="black", fontcolor="black", label=<{GtkInputHook|<br ALIGN="LEFT"/>|enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.channels.HBChannel" [color="black", fontcolor="black", label=<{HBChannel|address : NoneType<br ALIGN="LEFT"/>context : NoneType<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>poller : NoneType<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>socket : NoneType<br ALIGN="LEFT"/>time_to_dead : float<br ALIGN="LEFT"/>|<I>call_handlers</I>(since_last_heartbeat)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>is_beating()<br ALIGN="LEFT"/>pause()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>unpause()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.channelsabc.HBChannelABC" [color="black", fontcolor="black", label=<{HBChannelABC|time_to_dead<br ALIGN="LEFT"/>|<I>is_beating</I>()<br ALIGN="LEFT"/><I>pause</I>()<br ALIGN="LEFT"/><I>unpause</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.HTCondorControllerLauncher" [color="black", fontcolor="black", label=<{HTCondorControllerLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.HTCondorEngineSetLauncher" [color="black", fontcolor="black", label=<{HTCondorEngineSetLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.HTCondorLauncher" [color="black", fontcolor="black", label=<{HTCondorLauncher|batch_template : str<br ALIGN="LEFT"/>delete_command<br ALIGN="LEFT"/>job_array_regexp<br ALIGN="LEFT"/>job_array_template<br ALIGN="LEFT"/>job_id_regexp<br ALIGN="LEFT"/>job_id_regexp_group : Integer<br ALIGN="LEFT"/>submit_command<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.display.HTML" [color="black", fontcolor="black", label=<{HTML|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_string.HTML" [color="black", fontcolor="black", label=<{HTML|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.html.HTMLExporter" [color="black", fontcolor="black", label=<{HTMLExporter|default_config<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>|from_notebook_node(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.HTMLFormatter" [color="black", fontcolor="black", label=<{HTMLFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_nowarn_notimplemented.HTMLNotImplemented" [color="black", fontcolor="black", label=<{HTMLNotImplemented|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.HasTraits" [color="black", fontcolor="black", label=<{HasTraits|<br ALIGN="LEFT"/>|class_trait_names()<br ALIGN="LEFT"/>class_traits()<br ALIGN="LEFT"/>on_trait_change(handler, name, remove)<br ALIGN="LEFT"/>trait_metadata(traitname, key, default)<br ALIGN="LEFT"/>trait_names()<br ALIGN="LEFT"/>traits()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.HasTraitsStub" [color="black", fontcolor="black", label=<{HasTraitsStub|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.heartmonitor.Heart" [color="black", fontcolor="black", label=<{Heart|device : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.heartmonitor.HeartMonitor" [color="black", fontcolor="black", label=<{HeartMonitor|caller<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>hearts<br ALIGN="LEFT"/>last_ping<br ALIGN="LEFT"/>lifetime<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>max_heartmonitor_misses : Integer<br ALIGN="LEFT"/>on_probation<br ALIGN="LEFT"/>period : Integer<br ALIGN="LEFT"/>pingstream<br ALIGN="LEFT"/>pongstream<br ALIGN="LEFT"/>responses<br ALIGN="LEFT"/>tic<br ALIGN="LEFT"/>|add_heart_failure_handler(handler)<br ALIGN="LEFT"/>add_new_heart_handler(handler)<br ALIGN="LEFT"/>beat()<br ALIGN="LEFT"/>handle_heart_failure(heart)<br ALIGN="LEFT"/>handle_new_heart(heart)<br ALIGN="LEFT"/>handle_pong(msg)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.heartbeat.Heartbeat" [color="black", fontcolor="black", label=<{Heartbeat|addr : tuple<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>socket<br ALIGN="LEFT"/>transport<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.highlight.Highlight2HTML" [color="black", fontcolor="black", label=<{Highlight2HTML|pygments_lexer : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.highlight.Highlight2Latex" [color="black", fontcolor="black", label=<{Highlight2Latex|pygments_lexer : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.highlightmagics.HighlightMagicsPreprocessor" [color="black", fontcolor="black", label=<{HighlightMagicsPreprocessor|default_languages<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>languages<br ALIGN="LEFT"/>re_magic_language<br ALIGN="LEFT"/>|preprocess_cell(cell, resources, cell_index)<br ALIGN="LEFT"/>which_magic_language(source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.history.HistoryAccessor" [color="black", fontcolor="black", label=<{HistoryAccessor|connection_options<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>enabled<br ALIGN="LEFT"/>hist_file<br ALIGN="LEFT"/>|get_last_session_id()<br ALIGN="LEFT"/>get_range(session, start, stop, raw, output)<br ALIGN="LEFT"/>get_range_by_str(rangestr, raw, output)<br ALIGN="LEFT"/>get_session_info(session)<br ALIGN="LEFT"/>get_tail(n, raw, output, include_latest)<br ALIGN="LEFT"/>init_db()<br ALIGN="LEFT"/>search(pattern, raw, search_raw, output, n, unique)<br ALIGN="LEFT"/><I>writeout_cache</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.history.HistoryAccessorBase" [color="black", fontcolor="black", label=<{HistoryAccessorBase|<br ALIGN="LEFT"/>|<I>get_range</I>(session, start, stop, raw, output)<br ALIGN="LEFT"/><I>get_range_by_str</I>(rangestr, raw, output)<br ALIGN="LEFT"/><I>get_tail</I>(n, raw, output, include_latest)<br ALIGN="LEFT"/><I>search</I>(pattern, raw, search_raw, output, n, unique)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.historyapp.HistoryApp" [color="black", fontcolor="black", label=<{HistoryApp|description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subcommands<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.historyapp.HistoryClear" [color="black", fontcolor="black", label=<{HistoryClear|aliases<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>force<br ALIGN="LEFT"/>keep<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.history_console_widget.HistoryConsoleWidget" [color="black", fontcolor="black", label=<{HistoryConsoleWidget|history_lock<br ALIGN="LEFT"/>input_buffer<br ALIGN="LEFT"/>|execute(source, hidden, interactive)<br ALIGN="LEFT"/>history_next(substring, as_prefix)<br ALIGN="LEFT"/>history_previous(substring, as_prefix)<br ALIGN="LEFT"/>history_tail(n)<br ALIGN="LEFT"/>save_magic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.history.HistoryMagics" [color="black", fontcolor="black", label=<{HistoryMagics|<br ALIGN="LEFT"/>|history(parameter_s)<br ALIGN="LEFT"/>recall(arg)<br ALIGN="LEFT"/>rerun(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.history.HistoryManager" [color="black", fontcolor="black", label=<{HistoryManager|db_cache_size : Integer<br ALIGN="LEFT"/>db_input_cache<br ALIGN="LEFT"/>db_input_cache_lock : lock<br ALIGN="LEFT"/>db_log_output<br ALIGN="LEFT"/>db_output_cache<br ALIGN="LEFT"/>db_output_cache_lock : lock<br ALIGN="LEFT"/>dir_hist<br ALIGN="LEFT"/>input_hist_parsed<br ALIGN="LEFT"/>input_hist_raw<br ALIGN="LEFT"/>output_hist<br ALIGN="LEFT"/>output_hist_reprs<br ALIGN="LEFT"/>save_flag<br ALIGN="LEFT"/>save_thread<br ALIGN="LEFT"/>session_number : Integer<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|end_session()<br ALIGN="LEFT"/>get_range(session, start, stop, raw, output)<br ALIGN="LEFT"/>get_session_info(session)<br ALIGN="LEFT"/>name_session(name)<br ALIGN="LEFT"/>new_session(conn)<br ALIGN="LEFT"/>reset(new_session)<br ALIGN="LEFT"/>store_inputs(line_num, source, source_raw)<br ALIGN="LEFT"/>store_output(line_num)<br ALIGN="LEFT"/>writeout_cache(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.HistoryReply" [color="black", fontcolor="black", label=<{HistoryReply|history<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.history.HistorySavingThread" [color="black", fontcolor="black", label=<{HistorySavingThread|daemon : bool<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>history_manager<br ALIGN="LEFT"/>stop_now : bool<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.historyapp.HistoryTrim" [color="black", fontcolor="black", label=<{HistoryTrim|aliases<br ALIGN="LEFT"/>backup<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>keep<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.path.HomeDirError" [color="black", fontcolor="red", label=<{HomeDirError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.rich_text.HtmlExporter" [color="black", fontcolor="black", label=<{HtmlExporter|control<br ALIGN="LEFT"/>filename : str<br ALIGN="LEFT"/>image_tag : NoneType<br ALIGN="LEFT"/>inline_png : NoneType<br ALIGN="LEFT"/>|export()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.hub.Hub" [color="black", fontcolor="black", label=<{Hub|all_completed<br ALIGN="LEFT"/>by_ident<br ALIGN="LEFT"/>client_info<br ALIGN="LEFT"/>clients<br ALIGN="LEFT"/>completed<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>dead_engines<br ALIGN="LEFT"/>engine_info<br ALIGN="LEFT"/>engine_state_file<br ALIGN="LEFT"/>engines<br ALIGN="LEFT"/>heartmonitor<br ALIGN="LEFT"/>hearts<br ALIGN="LEFT"/>ids<br ALIGN="LEFT"/>incoming_registrations<br ALIGN="LEFT"/>keytable<br ALIGN="LEFT"/>monitor<br ALIGN="LEFT"/>monitor_handlers : dict<br ALIGN="LEFT"/>notifier<br ALIGN="LEFT"/>pending<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>query_handlers : dict<br ALIGN="LEFT"/>queues<br ALIGN="LEFT"/>registration_timeout : Integer<br ALIGN="LEFT"/>resubmit<br ALIGN="LEFT"/>tasks<br ALIGN="LEFT"/>unassigned<br ALIGN="LEFT"/>|check_load(client_id, msg)<br ALIGN="LEFT"/>connection_request(client_id, msg)<br ALIGN="LEFT"/>db_query(client_id, msg)<br ALIGN="LEFT"/><I>dispatch_db</I>(msg)<br ALIGN="LEFT"/>dispatch_monitor_traffic(msg)<br ALIGN="LEFT"/>dispatch_query(msg)<br ALIGN="LEFT"/>finish_registration(heart)<br ALIGN="LEFT"/>get_history(client_id, msg)<br ALIGN="LEFT"/>get_results(client_id, msg)<br ALIGN="LEFT"/>handle_heart_failure(heart)<br ALIGN="LEFT"/>handle_new_heart(heart)<br ALIGN="LEFT"/><I>mia_task_request</I>(idents, msg)<br ALIGN="LEFT"/>purge_results(client_id, msg)<br ALIGN="LEFT"/>queue_status(client_id, msg)<br ALIGN="LEFT"/>register_engine(reg, msg)<br ALIGN="LEFT"/>resubmit_task(client_id, msg)<br ALIGN="LEFT"/>save_iopub_message(topics, msg)<br ALIGN="LEFT"/>save_queue_request(idents, msg)<br ALIGN="LEFT"/>save_queue_result(idents, msg)<br ALIGN="LEFT"/>save_task_destination(idents, msg)<br ALIGN="LEFT"/>save_task_request(idents, msg)<br ALIGN="LEFT"/>save_task_result(idents, msg)<br ALIGN="LEFT"/>shutdown_request(client_id, msg)<br ALIGN="LEFT"/>unregister_engine(ident, msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.hub.HubFactory" [color="black", fontcolor="black", label=<{HubFactory|client_info : dict<br ALIGN="LEFT"/>client_ip<br ALIGN="LEFT"/>client_transport<br ALIGN="LEFT"/>control<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>db_class<br ALIGN="LEFT"/>engine_info : dict<br ALIGN="LEFT"/>engine_ip<br ALIGN="LEFT"/>engine_transport<br ALIGN="LEFT"/>hb<br ALIGN="LEFT"/>heartmonitor<br ALIGN="LEFT"/>hub<br ALIGN="LEFT"/>iopub<br ALIGN="LEFT"/>mon_port : Integer<br ALIGN="LEFT"/>monitor_ip<br ALIGN="LEFT"/>monitor_transport<br ALIGN="LEFT"/>monitor_url<br ALIGN="LEFT"/>mux<br ALIGN="LEFT"/>notifier_port : Integer<br ALIGN="LEFT"/>registration_timeout : Integer<br ALIGN="LEFT"/>task<br ALIGN="LEFT"/>|client_url(channel)<br ALIGN="LEFT"/>construct()<br ALIGN="LEFT"/>engine_url(channel)<br ALIGN="LEFT"/>init_hub()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.display.IFrame" [color="black", fontcolor="black", label=<{IFrame|height<br ALIGN="LEFT"/>iframe : str<br ALIGN="LEFT"/>params : dict<br ALIGN="LEFT"/>src<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.ioloop.manager.IOLoopKernelManager" [color="black", fontcolor="black", label=<{IOLoopKernelManager|connect_hb<br ALIGN="LEFT"/>connect_iopub<br ALIGN="LEFT"/>connect_shell<br ALIGN="LEFT"/>connect_stdin<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>|start_restarter()<br ALIGN="LEFT"/>stop_restarter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.ioloop.restarter.IOLoopKernelRestarter" [color="black", fontcolor="black", label=<{IOLoopKernelRestarter|loop<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.threaded.IOLoopThread" [color="black", fontcolor="black", label=<{IOLoopThread|daemon : bool<br ALIGN="LEFT"/>ioloop<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.io.IOStream" [color="black", fontcolor="black", label=<{IOStream|closed<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>writelines(lines)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.io.IOTerm" [color="black", fontcolor="black", label=<{IOTerm|stderr<br ALIGN="LEFT"/>stdin<br ALIGN="LEFT"/>stdout<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.terminal.ipapp.IPAppCrashHandler" [color="black", fontcolor="black", label=<{IPAppCrashHandler|<br ALIGN="LEFT"/>|make_report(traceback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.ipclusterapp.IPClusterApp" [color="black", fontcolor="black", label=<{IPClusterApp|aliases<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subcommands : dict<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.ipclusterapp.IPClusterEngines" [color="black", fontcolor="black", label=<{IPClusterEngines|aliases<br ALIGN="LEFT"/>classes<br ALIGN="LEFT"/>daemonize<br ALIGN="LEFT"/>default_log_level : int<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>early_shutdown : Integer<br ALIGN="LEFT"/>engine_launcher<br ALIGN="LEFT"/>engine_launcher_class<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>log_to_file : bool<br ALIGN="LEFT"/>n : Integer<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>usage : NoneType<br ALIGN="LEFT"/>|build_launcher(clsname, kind)<br ALIGN="LEFT"/>engines_started_ok()<br ALIGN="LEFT"/>engines_stopped(r)<br ALIGN="LEFT"/>engines_stopped_early(r)<br ALIGN="LEFT"/>init_launchers()<br ALIGN="LEFT"/>init_signal()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>sigint_handler(signum, frame)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>start_engines()<br ALIGN="LEFT"/>start_logging()<br ALIGN="LEFT"/>stop_engines()<br ALIGN="LEFT"/>stop_launchers(r)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.IPClusterLauncher" [color="black", fontcolor="black", label=<{IPClusterLauncher|ipcluster_args<br ALIGN="LEFT"/>ipcluster_cmd<br ALIGN="LEFT"/>ipcluster_subcommand<br ALIGN="LEFT"/>n : Integer<br ALIGN="LEFT"/>profile<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.ipclusterapp.IPClusterStart" [color="black", fontcolor="black", label=<{IPClusterStart|aliases<br ALIGN="LEFT"/>auto_create<br ALIGN="LEFT"/>classes<br ALIGN="LEFT"/>clean_logs<br ALIGN="LEFT"/>controller_launcher<br ALIGN="LEFT"/>controller_launcher_class<br ALIGN="LEFT"/>default_log_level : int<br ALIGN="LEFT"/>delay<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>engine_launcher<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>reset<br ALIGN="LEFT"/>|<I>engines_stopped</I>(r)<br ALIGN="LEFT"/>init_launchers()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>start_controller()<br ALIGN="LEFT"/>stop_controller()<br ALIGN="LEFT"/>stop_launchers(r)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.ipclusterapp.IPClusterStop" [color="black", fontcolor="black", label=<{IPClusterStop|aliases<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>signal : Integer<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.completer.IPCompleter" [color="black", fontcolor="black", label=<{IPCompleter|clean_glob<br ALIGN="LEFT"/>custom_completers<br ALIGN="LEFT"/>docstring_kwd_re<br ALIGN="LEFT"/>docstring_sig_re<br ALIGN="LEFT"/>dumb_terminal<br ALIGN="LEFT"/>glob<br ALIGN="LEFT"/>global_namespace : NoneType, dict<br ALIGN="LEFT"/>limit_to__all__<br ALIGN="LEFT"/>line_buffer : NoneType<br ALIGN="LEFT"/>magic_escape : str<br ALIGN="LEFT"/>matchers : list<br ALIGN="LEFT"/>matches : filter, list<br ALIGN="LEFT"/>merge_completions<br ALIGN="LEFT"/>namespace : NoneType, dict<br ALIGN="LEFT"/>omit__names<br ALIGN="LEFT"/>readline : NoneType<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>space_name_re<br ALIGN="LEFT"/>splitter<br ALIGN="LEFT"/>text_until_cursor<br ALIGN="LEFT"/>|all_completions(text)<br ALIGN="LEFT"/>complete(text, line_buffer, cursor_pos)<br ALIGN="LEFT"/>dict_key_matches(text)<br ALIGN="LEFT"/>dispatch_custom_completer(text)<br ALIGN="LEFT"/>file_matches(text)<br ALIGN="LEFT"/>latex_matches(text)<br ALIGN="LEFT"/>magic_matches(text)<br ALIGN="LEFT"/>python_func_kw_matches(text)<br ALIGN="LEFT"/>python_matches(text)<br ALIGN="LEFT"/>rlcomplete(text, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [color="black", fontcolor="black", label=<{IPControllerApp|aliases<br ALIGN="LEFT"/>auto_create<br ALIGN="LEFT"/>children<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>client_json_file<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>engine_json_file<br ALIGN="LEFT"/>engine_ssh_server<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>factory<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>import_statements<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>mq_class<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>restore_engines<br ALIGN="LEFT"/>reuse_files<br ALIGN="LEFT"/>ssh_server<br ALIGN="LEFT"/>use_threads<br ALIGN="LEFT"/>write_connection_files<br ALIGN="LEFT"/>|cleanup_connection_files()<br ALIGN="LEFT"/>do_import_statements()<br ALIGN="LEFT"/>forward_logging()<br ALIGN="LEFT"/>handle_signal(sig, frame)<br ALIGN="LEFT"/>init_hub()<br ALIGN="LEFT"/>init_schedulers()<br ALIGN="LEFT"/>init_signal()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>load_config_from_json()<br ALIGN="LEFT"/>load_secondary_config()<br ALIGN="LEFT"/>save_connection_dict(fname, cdict)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>terminate_children()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.winhpcjob.IPControllerJob" [color="black", fontcolor="black", label=<{IPControllerJob|is_exclusive<br ALIGN="LEFT"/>job_name<br ALIGN="LEFT"/>priority<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>requested_nodes<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.winhpcjob.IPControllerTask" [color="black", fontcolor="black", label=<{IPControllerTask|command_line<br ALIGN="LEFT"/>controller_args<br ALIGN="LEFT"/>controller_cmd<br ALIGN="LEFT"/>max_cores : Integer<br ALIGN="LEFT"/>max_nodes : Integer<br ALIGN="LEFT"/>max_sockets : Integer<br ALIGN="LEFT"/>min_cores : Integer<br ALIGN="LEFT"/>min_nodes : Integer<br ALIGN="LEFT"/>min_sockets : Integer<br ALIGN="LEFT"/>std_err_file_path<br ALIGN="LEFT"/>std_out_file_path<br ALIGN="LEFT"/>task_name<br ALIGN="LEFT"/>unit_type<br ALIGN="LEFT"/>work_directory<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDocTestParser" [color="black", fontcolor="black", label=<{IPDocTestParser|<br ALIGN="LEFT"/>|ip2py(source)<br ALIGN="LEFT"/>parse(string, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDocTestRunner" [color="black", fontcolor="black", label=<{IPDocTestRunner|DIVIDER : str<br ALIGN="LEFT"/>|run(test, compileflags, out, clear_globs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDoctestOutputChecker" [color="black", fontcolor="black", label=<{IPDoctestOutputChecker|random_re<br ALIGN="LEFT"/>|check_output(want, got, optionflags)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.ipengineapp.IPEngineApp" [color="black", fontcolor="black", label=<{IPEngineApp|aliases<br ALIGN="LEFT"/>classes<br ALIGN="LEFT"/>connection_info : str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>engine<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>kernel_app<br ALIGN="LEFT"/>log_url<br ALIGN="LEFT"/>mpi<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>startup_command<br ALIGN="LEFT"/>startup_script<br ALIGN="LEFT"/>url_file<br ALIGN="LEFT"/>url_file_name<br ALIGN="LEFT"/>wait_for_url_file<br ALIGN="LEFT"/>|bind_kernel()<br ALIGN="LEFT"/>find_url_file()<br ALIGN="LEFT"/>forward_logging()<br ALIGN="LEFT"/>init_engine()<br ALIGN="LEFT"/>init_mpi()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>load_connector_file()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.winhpcjob.IPEngineSetJob" [color="black", fontcolor="black", label=<{IPEngineSetJob|is_exclusive<br ALIGN="LEFT"/>job_name<br ALIGN="LEFT"/>priority<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>requested_nodes<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.winhpcjob.IPEngineTask" [color="black", fontcolor="black", label=<{IPEngineTask|command_line<br ALIGN="LEFT"/>engine_args<br ALIGN="LEFT"/>engine_cmd<br ALIGN="LEFT"/>max_cores : Integer<br ALIGN="LEFT"/>max_nodes : Integer<br ALIGN="LEFT"/>max_sockets : Integer<br ALIGN="LEFT"/>min_cores : Integer<br ALIGN="LEFT"/>min_nodes : Integer<br ALIGN="LEFT"/>min_sockets : Integer<br ALIGN="LEFT"/>std_err_file_path<br ALIGN="LEFT"/>std_out_file_path<br ALIGN="LEFT"/>task_name<br ALIGN="LEFT"/>unit_type<br ALIGN="LEFT"/>work_directory<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.IPExample" [color="black", fontcolor="black", label=<{IPExample|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.IPExternalExample" [color="black", fontcolor="black", label=<{IPExternalExample|source<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.kernelapp.IPKernelApp" [color="black", fontcolor="black", label=<{IPKernelApp|abs_connection_file<br ALIGN="LEFT"/>aliases<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>connection_file<br ALIGN="LEFT"/>control_port<br ALIGN="LEFT"/>control_socket<br ALIGN="LEFT"/>displayhook_class<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>hb_port : int<br ALIGN="LEFT"/>heartbeat<br ALIGN="LEFT"/>interrupt : Integer<br ALIGN="LEFT"/>iopub_port<br ALIGN="LEFT"/>iopub_socket<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>kernel_class<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>no_stderr<br ALIGN="LEFT"/>no_stdout<br ALIGN="LEFT"/>outstream_class<br ALIGN="LEFT"/>parent_handle : Integer<br ALIGN="LEFT"/>poller<br ALIGN="LEFT"/>ports<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>shell_port<br ALIGN="LEFT"/>shell_socket<br ALIGN="LEFT"/>stdin_port<br ALIGN="LEFT"/>stdin_socket<br ALIGN="LEFT"/>|cleanup_connection_file()<br ALIGN="LEFT"/>init_blackhole()<br ALIGN="LEFT"/>init_connection_file()<br ALIGN="LEFT"/>init_crash_handler()<br ALIGN="LEFT"/>init_gui_pylab()<br ALIGN="LEFT"/>init_heartbeat()<br ALIGN="LEFT"/>init_io()<br ALIGN="LEFT"/>init_kernel()<br ALIGN="LEFT"/>init_poller()<br ALIGN="LEFT"/>init_shell()<br ALIGN="LEFT"/>init_signal()<br ALIGN="LEFT"/>init_sockets()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>log_connection_info()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>write_connection_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.iploggerapp.IPLoggerApp" [color="black", fontcolor="black", label=<{IPLoggerApp|aliases<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>watcher<br ALIGN="LEFT"/>|init_watcher()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.eventloops.loop_wx.IPWxApp" [color="black", fontcolor="black", label=<{IPWxApp|frame<br ALIGN="LEFT"/>|OnInit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.autocall.IPyAutocall" [color="black", fontcolor="black", label=<{IPyAutocall|rewrite : bool<br ALIGN="LEFT"/>|set_ip(ip)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.IPyAutocallChecker" [color="black", fontcolor="black", label=<{IPyAutocallChecker|priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.lexers.IPyLexer" [color="black", fontcolor="black", label=<{IPyLexer|IPythonConsoleLexer<br ALIGN="LEFT"/>IPythonLexer : IPython3<br ALIGN="LEFT"/>aliases : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>python3 : bool<br ALIGN="LEFT"/>|get_tokens_unprocessed(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.ipunittest.IPython2PythonConverter" [color="black", fontcolor="black", label=<{IPython2PythonConverter|pyps1 : str<br ALIGN="LEFT"/>pyps2 : str<br ALIGN="LEFT"/>rout<br ALIGN="LEFT"/>rps1<br ALIGN="LEFT"/>rps2<br ALIGN="LEFT"/>rpyps1<br ALIGN="LEFT"/>rpyps2<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.consoleapp.IPythonConsoleApp" [color="black", fontcolor="black", label=<{IPythonConsoleApp|aliases<br ALIGN="LEFT"/>auto_create<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>confirm_exit<br ALIGN="LEFT"/>connection_file : NoneType, bytes, str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>existing<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>frontend_aliases<br ALIGN="LEFT"/>frontend_flags<br ALIGN="LEFT"/>hb_port<br ALIGN="LEFT"/>help_classes<br ALIGN="LEFT"/>iopub_port<br ALIGN="LEFT"/>ip : str<br ALIGN="LEFT"/>kernel_argv<br ALIGN="LEFT"/>kernel_client<br ALIGN="LEFT"/>kernel_client_class<br ALIGN="LEFT"/>kernel_manager : NoneType<br ALIGN="LEFT"/>kernel_manager_class<br ALIGN="LEFT"/>kernel_name<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>shell_port<br ALIGN="LEFT"/>sshkey<br ALIGN="LEFT"/>sshserver<br ALIGN="LEFT"/>stdin_port<br ALIGN="LEFT"/>|build_kernel_argv(argv)<br ALIGN="LEFT"/>init_connection_file()<br ALIGN="LEFT"/>init_kernel_client()<br ALIGN="LEFT"/>init_kernel_manager()<br ALIGN="LEFT"/>init_ssh()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.lexers.IPythonConsoleLexer" [color="black", fontcolor="black", label=<{IPythonConsoleLexer|aliases : list<br ALIGN="LEFT"/>buffer : str<br ALIGN="LEFT"/>in1_regex : str<br ALIGN="LEFT"/>in2_regex : str<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>insertions : list<br ALIGN="LEFT"/>ipytb_start<br ALIGN="LEFT"/>mimetypes : list<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>out_regex : str<br ALIGN="LEFT"/>pylexer : IPython3<br ALIGN="LEFT"/>python3 : bool<br ALIGN="LEFT"/>tblexer<br ALIGN="LEFT"/>|buffered_tokens()<br ALIGN="LEFT"/>get_mci(line)<br ALIGN="LEFT"/>get_tokens_unprocessed(text)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.error.IPythonCoreError" [color="black", fontcolor="red", label=<{IPythonCoreError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.demo.IPythonDemo" [color="black", fontcolor="black", label=<{IPythonDemo|<br ALIGN="LEFT"/>|run_cell(source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.sphinxext.ipython_directive.IPythonDirective" [color="black", fontcolor="black", label=<{IPythonDirective|content : list<br ALIGN="LEFT"/>final_argumuent_whitespace : bool<br ALIGN="LEFT"/>has_content : bool<br ALIGN="LEFT"/>option_spec : dict<br ALIGN="LEFT"/>optional_arguments : int<br ALIGN="LEFT"/>required_arguments : int<br ALIGN="LEFT"/>seen_docs : set<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>|get_config_options()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.IPythonDisplayFormatter" [color="black", fontcolor="black", label=<{IPythonDisplayFormatter|print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.plugin.ipdoctest.IPythonDoctest" [color="black", fontcolor="black", label=<{IPythonDoctest|checker<br ALIGN="LEFT"/>doctest_tests<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>extension<br ALIGN="LEFT"/>extraglobs : NoneType<br ALIGN="LEFT"/>finder<br ALIGN="LEFT"/>globs : NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parser<br ALIGN="LEFT"/>|configure(options, config)<br ALIGN="LEFT"/>makeTest(obj, parent)<br ALIGN="LEFT"/>options(parser, env)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.error.IPythonError" [color="black", fontcolor="red", label=<{IPythonError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.base.handlers.IPythonHandler" [color="black", fontcolor="black", label=<{IPythonHandler|allow_credentials<br ALIGN="LEFT"/>allow_origin<br ALIGN="LEFT"/>allow_origin_pat<br ALIGN="LEFT"/>base_url<br ALIGN="LEFT"/>cluster_manager<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>config_manager<br ALIGN="LEFT"/>contents_js_source<br ALIGN="LEFT"/>contents_manager<br ALIGN="LEFT"/>default_url<br ALIGN="LEFT"/>kernel_manager<br ALIGN="LEFT"/>kernel_spec_manager<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>mathjax_url<br ALIGN="LEFT"/>session_manager<br ALIGN="LEFT"/>template_namespace<br ALIGN="LEFT"/>terminal_manager<br ALIGN="LEFT"/>version_hash<br ALIGN="LEFT"/>ws_url<br ALIGN="LEFT"/>|get_json_body()<br ALIGN="LEFT"/>get_origin()<br ALIGN="LEFT"/>get_template(name)<br ALIGN="LEFT"/>render_template(name)<br ALIGN="LEFT"/>set_default_headers()<br ALIGN="LEFT"/>write_error(status_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" [color="black", fontcolor="black", label=<{IPythonInputSplitter|assemble_logical_lines<br ALIGN="LEFT"/>assemble_python_lines<br ALIGN="LEFT"/>logical_line_transforms : list<br ALIGN="LEFT"/>physical_line_transforms : list<br ALIGN="LEFT"/>python_line_transforms : list<br ALIGN="LEFT"/>source_raw : str<br ALIGN="LEFT"/>transformer_accumulating : bool<br ALIGN="LEFT"/>transforms<br ALIGN="LEFT"/>transforms_in_use<br ALIGN="LEFT"/>within_python_line : bool<br ALIGN="LEFT"/>|flush_transformers()<br ALIGN="LEFT"/>push(lines)<br ALIGN="LEFT"/>push_accepts_more()<br ALIGN="LEFT"/>push_line(line)<br ALIGN="LEFT"/>raw_reset()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>source_reset()<br ALIGN="LEFT"/>transform_cell(cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.IPythonInputTestCase" [color="black", fontcolor="black", label=<{IPythonInputTestCase|isp<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_cellmagic_preempt()<br ALIGN="LEFT"/>test_multiline_passthrough()<br ALIGN="LEFT"/>test_syntax()<br ALIGN="LEFT"/>test_syntax_multiline()<br ALIGN="LEFT"/>test_syntax_multiline_cell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.ipkernel.IPythonKernel" [color="black", fontcolor="black", label=<{IPythonKernel|banner<br ALIGN="LEFT"/>comm_manager<br ALIGN="LEFT"/>execution_count<br ALIGN="LEFT"/>help_links<br ALIGN="LEFT"/>implementation : str<br ALIGN="LEFT"/>implementation_version : str<br ALIGN="LEFT"/>language_info : dict<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>shell_class<br ALIGN="LEFT"/>user_module<br ALIGN="LEFT"/>user_ns<br ALIGN="LEFT"/>|do_apply(content, bufs, msg_id, reply_metadata)<br ALIGN="LEFT"/>do_clear()<br ALIGN="LEFT"/>do_complete(code, cursor_pos)<br ALIGN="LEFT"/>do_execute(code, silent, store_history, user_expressions, allow_stdin)<br ALIGN="LEFT"/>do_history(hist_access_type, output, raw, session, start, stop, n, pattern, unique)<br ALIGN="LEFT"/>do_inspect(code, cursor_pos, detail_level)<br ALIGN="LEFT"/>do_is_complete(code)<br ALIGN="LEFT"/>do_shutdown(restart)<br ALIGN="LEFT"/>set_parent(ident, parent)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.demo.IPythonLineDemo" [color="black", fontcolor="black", label=<{IPythonLineDemo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.lexers.IPythonPartialTracebackLexer" [color="black", fontcolor="black", label=<{IPythonPartialTracebackLexer|name : str<br ALIGN="LEFT"/>tokens : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [color="black", fontcolor="black", label=<{IPythonQtConsoleApp|aliases<br ALIGN="LEFT"/>app<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>display_banner<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>frontend_aliases<br ALIGN="LEFT"/>frontend_flags<br ALIGN="LEFT"/>hide_menubar<br ALIGN="LEFT"/>kernel_client_class<br ALIGN="LEFT"/>kernel_manager_class<br ALIGN="LEFT"/>maximize<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>plain<br ALIGN="LEFT"/>stylesheet<br ALIGN="LEFT"/>widget<br ALIGN="LEFT"/>widget_factory<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|init_colors(widget)<br ALIGN="LEFT"/>init_qt_app()<br ALIGN="LEFT"/>init_qt_elements()<br ALIGN="LEFT"/>init_signal()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>new_frontend_master()<br ALIGN="LEFT"/>new_frontend_slave(current_widget)<br ALIGN="LEFT"/>parse_command_line(argv)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown_mistune.IPythonRenderer" [color="black", fontcolor="black", label=<{IPythonRenderer|<br ALIGN="LEFT"/>|block_code(code, lang)<br ALIGN="LEFT"/>block_math(text)<br ALIGN="LEFT"/>header(text, level, raw)<br ALIGN="LEFT"/>inline_math(text)<br ALIGN="LEFT"/>latex_environment(name, text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.lexers.IPythonTracebackLexer" [color="black", fontcolor="black", label=<{IPythonTracebackLexer|aliases : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>python3 : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.ipython_widget.IPythonWidget" [color="black", fontcolor="black", label=<{IPythonWidget|custom_edit<br ALIGN="LEFT"/>custom_edit_requested<br ALIGN="LEFT"/>editor<br ALIGN="LEFT"/>editor_line<br ALIGN="LEFT"/>in_prompt<br ALIGN="LEFT"/>input_buffer<br ALIGN="LEFT"/>input_sep<br ALIGN="LEFT"/>kernel_banner<br ALIGN="LEFT"/>out_prompt<br ALIGN="LEFT"/>output_sep<br ALIGN="LEFT"/>output_sep2<br ALIGN="LEFT"/>style_sheet<br ALIGN="LEFT"/>syntax_style<br ALIGN="LEFT"/>|execute_file(path, hidden)<br ALIGN="LEFT"/>set_default_style(colors)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.Image" [color="black", fontcolor="black", label=<{Image|embed : NoneType<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>height : NoneType<br ALIGN="LEFT"/>metadata : NoneType<br ALIGN="LEFT"/>retina : bool<br ALIGN="LEFT"/>unconfined : bool<br ALIGN="LEFT"/>width : NoneType<br ALIGN="LEFT"/>|reload()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_image.Image" [color="black", fontcolor="black", label=<{Image|format<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.qt_loaders.ImportDenier" [color="black", fontcolor="black", label=<{ImportDenier|<br ALIGN="LEFT"/>|find_module(fullname, path)<br ALIGN="LEFT"/>forbid(module_name)<br ALIGN="LEFT"/>load_module(fullname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.error.ImpossibleDependency" [color="black", fontcolor="red", label=<{ImpossibleDependency|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.inprocess.channels.InProcessChannel" [color="black", fontcolor="black", label=<{InProcessChannel|client : NoneType<br ALIGN="LEFT"/>proxy_methods : list<br ALIGN="LEFT"/>|<I>call_handlers</I>(msg)<br ALIGN="LEFT"/>call_handlers_later()<br ALIGN="LEFT"/><I>flush</I>(timeout)<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/><I>process_events</I>()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.channels.InProcessHBChannel" [color="black", fontcolor="black", label=<{InProcessHBChannel|client : NoneType<br ALIGN="LEFT"/>time_to_dead : float<br ALIGN="LEFT"/>|is_alive()<br ALIGN="LEFT"/>is_beating()<br ALIGN="LEFT"/>pause()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>unpause()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.ipkernel.InProcessInteractiveShell" [color="black", fontcolor="black", label=<{InProcessInteractiveShell|kernel<br ALIGN="LEFT"/>|enable_gui(gui)<br ALIGN="LEFT"/>enable_matplotlib(gui)<br ALIGN="LEFT"/>enable_pylab(gui, import_all, welcome_message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.ipkernel.InProcessKernel" [color="black", fontcolor="black", label=<{InProcessKernel|control_stream<br ALIGN="LEFT"/>frontends<br ALIGN="LEFT"/>gui<br ALIGN="LEFT"/>iopub_socket<br ALIGN="LEFT"/>raw_input_str<br ALIGN="LEFT"/>shell_class<br ALIGN="LEFT"/>shell_streams<br ALIGN="LEFT"/>stderr<br ALIGN="LEFT"/>stdin_socket<br ALIGN="LEFT"/>stdout<br ALIGN="LEFT"/>|execute_request(stream, ident, parent)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.client.InProcessKernelClient" [color="black", fontcolor="black", label=<{InProcessKernelClient|hb_channel<br ALIGN="LEFT"/>hb_channel_class<br ALIGN="LEFT"/>iopub_channel<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>shell_channel<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|complete(code, cursor_pos)<br ALIGN="LEFT"/>execute(code, silent, store_history, user_expressions, allow_stdin)<br ALIGN="LEFT"/>history(raw, output, hist_access_type)<br ALIGN="LEFT"/>input(string)<br ALIGN="LEFT"/>inspect(code, cursor_pos, detail_level)<br ALIGN="LEFT"/>kernel_info()<br ALIGN="LEFT"/><I>shutdown</I>(restart)<br ALIGN="LEFT"/>start_channels()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.manager.InProcessKernelManager" [color="black", fontcolor="black", label=<{InProcessKernelManager|client_class<br ALIGN="LEFT"/>has_kernel<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>|client()<br ALIGN="LEFT"/><I>interrupt_kernel</I>()<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/>restart_kernel(now)<br ALIGN="LEFT"/>shutdown_kernel()<br ALIGN="LEFT"/><I>signal_kernel</I>(signum)<br ALIGN="LEFT"/>start_kernel()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.tests.test_kernelmanager.InProcessKernelManagerTestCase" [color="black", fontcolor="black", label=<{InProcessKernelManagerTestCase|<br ALIGN="LEFT"/>|test_complete()<br ALIGN="LEFT"/>test_execute()<br ALIGN="LEFT"/>test_history()<br ALIGN="LEFT"/>test_inspect()<br ALIGN="LEFT"/>test_interface()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.inprocess.tests.test_kernel.InProcessKernelTestCase" [color="black", fontcolor="black", label=<{InProcessKernelTestCase|kc<br ALIGN="LEFT"/>km<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_pylab()<br ALIGN="LEFT"/>test_raw_input()<br ALIGN="LEFT"/>test_stdout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_ultratb.IndentationErrorTest" [color="black", fontcolor="black", label=<{IndentationErrorTest|<br ALIGN="LEFT"/>|test_indentationerror_shows_line()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.pylab.config.InlineBackend" [color="black", fontcolor="black", label=<{InlineBackend|close_figures<br ALIGN="LEFT"/>figure_format<br ALIGN="LEFT"/>figure_formats<br ALIGN="LEFT"/>print_figure_kwargs<br ALIGN="LEFT"/>rc<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.pylab.config.InlineBackendConfig" [color="black", fontcolor="black", label=<{InlineBackendConfig|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.inputhook.InputHookBase" [color="black", fontcolor="black", label=<{InputHookBase|manager<br ALIGN="LEFT"/>|<I>disable</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.InputHookManager" [color="black", fontcolor="black", label=<{InputHookManager|PYFUNC : CFunctionType<br ALIGN="LEFT"/>aliases : dict<br ALIGN="LEFT"/>apps : dict<br ALIGN="LEFT"/>guihooks : dict<br ALIGN="LEFT"/>|clear_app_refs(gui)<br ALIGN="LEFT"/>clear_inputhook(app)<br ALIGN="LEFT"/>current_gui()<br ALIGN="LEFT"/>disable_gui()<br ALIGN="LEFT"/>enable_gui(gui, app)<br ALIGN="LEFT"/>get_pyos_inputhook()<br ALIGN="LEFT"/>get_pyos_inputhook_as_func()<br ALIGN="LEFT"/>register(toolkitname)<br ALIGN="LEFT"/>set_inputhook(callback)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.error.InputRejected" [color="black", fontcolor="red", label=<{InputRejected|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.inputsplitter.InputSplitter" [color="black", fontcolor="black", label=<{InputSplitter|code : NoneType<br ALIGN="LEFT"/>encoding : str<br ALIGN="LEFT"/>indent_spaces : int<br ALIGN="LEFT"/>source : str<br ALIGN="LEFT"/>|check_complete(source)<br ALIGN="LEFT"/>push(lines)<br ALIGN="LEFT"/>push_accepts_more()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>source_reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.InputSplitterTestCase" [color="black", fontcolor="black", label=<{InputSplitterTestCase|isp<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_check_complete()<br ALIGN="LEFT"/>test_continuation()<br ALIGN="LEFT"/>test_dedent_break()<br ALIGN="LEFT"/>test_dedent_continue()<br ALIGN="LEFT"/>test_dedent_pass()<br ALIGN="LEFT"/>test_dedent_raise()<br ALIGN="LEFT"/>test_dedent_return()<br ALIGN="LEFT"/>test_indent()<br ALIGN="LEFT"/>test_indent2()<br ALIGN="LEFT"/>test_indent3()<br ALIGN="LEFT"/>test_indent4()<br ALIGN="LEFT"/>test_line_continuation()<br ALIGN="LEFT"/>test_push()<br ALIGN="LEFT"/>test_push2()<br ALIGN="LEFT"/>test_push3()<br ALIGN="LEFT"/>test_push_accepts_more()<br ALIGN="LEFT"/>test_push_accepts_more2()<br ALIGN="LEFT"/>test_push_accepts_more3()<br ALIGN="LEFT"/>test_push_accepts_more4()<br ALIGN="LEFT"/>test_push_accepts_more5()<br ALIGN="LEFT"/>test_reset()<br ALIGN="LEFT"/>test_source()<br ALIGN="LEFT"/>test_syntax_error()<br ALIGN="LEFT"/>test_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.coloransi.InputTermColors" [color="black", fontcolor="black", label=<{InputTermColors|NoColor : str<br ALIGN="LEFT"/>Normal : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.inputtransformer.InputTransformer" [color="black", fontcolor="black", label=<{InputTransformer|<br ALIGN="LEFT"/>|<I>push</I>(line)<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/>wrap(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.InspectReply" [color="black", fontcolor="black", label=<{InspectReply|found<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.oinspect.Inspector" [color="black", fontcolor="black", label=<{Inspector|color_table<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>parser<br ALIGN="LEFT"/>str_detail_level : int<br ALIGN="LEFT"/>|info(obj, oname, formatter, info, detail_level)<br ALIGN="LEFT"/>noinfo(msg, oname)<br ALIGN="LEFT"/>pdef(obj, oname)<br ALIGN="LEFT"/>pdoc(obj, oname, formatter)<br ALIGN="LEFT"/>pfile(obj, oname)<br ALIGN="LEFT"/>pinfo(obj, oname, formatter, info, detail_level)<br ALIGN="LEFT"/>psearch(pattern, ns_table, ns_search, ignore_case, show_all)<br ALIGN="LEFT"/>psource(obj, oname)<br ALIGN="LEFT"/>set_active_scheme(scheme)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.kernelspecapp.InstallKernelSpec" [color="black", fontcolor="black", label=<{InstallKernelSpec|aliases : dict<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>k : str<br ALIGN="LEFT"/>kernel_name<br ALIGN="LEFT"/>kernel_spec_manager<br ALIGN="LEFT"/>replace<br ALIGN="LEFT"/>sourcedir<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|parse_command_line(argv)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.kernelspecapp.InstallNativeKernelSpec" [color="black", fontcolor="black", label=<{InstallNativeKernelSpec|aliases<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>kernel_spec_manager<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Instance" [color="black", fontcolor="black", label=<{Instance|klass : NoneType<br ALIGN="LEFT"/>|get_default_value()<br ALIGN="LEFT"/>info()<br ALIGN="LEFT"/>instance_init(obj)<br ALIGN="LEFT"/>validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.InstanceListTrait" [color="black", fontcolor="black", label=<{InstanceListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Int" [color="black", fontcolor="black", label=<{Int|default_value : int<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_jsonutil.Int" [color="black", fontcolor="black", label=<{Int|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int.IntProgress" [color="black", fontcolor="black", label=<{IntProgress|bar_style<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int.IntRangeSlider" [color="black", fontcolor="black", label=<{IntRangeSlider|lower : int<br ALIGN="LEFT"/>max : int<br ALIGN="LEFT"/>min : int<br ALIGN="LEFT"/>orientation<br ALIGN="LEFT"/>readout<br ALIGN="LEFT"/>slider_color<br ALIGN="LEFT"/>upper : int<br ALIGN="LEFT"/>value : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int.IntSlider" [color="black", fontcolor="black", label=<{IntSlider|description<br ALIGN="LEFT"/>orientation<br ALIGN="LEFT"/>readout<br ALIGN="LEFT"/>slider_color<br ALIGN="LEFT"/>value : _empty<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int.IntText" [color="black", fontcolor="black", label=<{IntText|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.IntTrait" [color="black", fontcolor="black", label=<{IntTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.IntegerTrait" [color="black", fontcolor="black", label=<{IntegerTrait|value : Integer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.IntegerWrapper" [color="black", fontcolor="black", label=<{IntegerWrapper|<br ALIGN="LEFT"/>|visit_Num(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.InteractiveLoopTestCase" [color="black", fontcolor="black", label=<{InteractiveLoopTestCase|<br ALIGN="LEFT"/>|check_ns(lines, ns)<br ALIGN="LEFT"/>test_abc()<br ALIGN="LEFT"/>test_multi()<br ALIGN="LEFT"/>test_simple()<br ALIGN="LEFT"/>test_simple2()<br ALIGN="LEFT"/>test_xy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.interactiveshell.InteractiveShell" [color="black", fontcolor="black", label=<{InteractiveShell|Completer<br ALIGN="LEFT"/>CustomTB : method<br ALIGN="LEFT"/>InteractiveTB<br ALIGN="LEFT"/>SyntaxTB<br ALIGN="LEFT"/>alias_manager<br ALIGN="LEFT"/>all_ns_refs<br ALIGN="LEFT"/>ast_node_interactivity<br ALIGN="LEFT"/>ast_transformers<br ALIGN="LEFT"/>autocall<br ALIGN="LEFT"/>autoindent<br ALIGN="LEFT"/>automagic<br ALIGN="LEFT"/>banner<br ALIGN="LEFT"/>banner1<br ALIGN="LEFT"/>banner2<br ALIGN="LEFT"/>builtin_trap<br ALIGN="LEFT"/>cache_size : Integer<br ALIGN="LEFT"/>call_pdb<br ALIGN="LEFT"/>color_info<br ALIGN="LEFT"/>colors<br ALIGN="LEFT"/>colors_force<br ALIGN="LEFT"/>compile<br ALIGN="LEFT"/>configurables : list<br ALIGN="LEFT"/>custom_exceptions<br ALIGN="LEFT"/>data_pub : NoneType<br ALIGN="LEFT"/>data_pub_class : NoneType<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>deep_reload<br ALIGN="LEFT"/>default_user_namespaces : bool<br ALIGN="LEFT"/>define_magic<br ALIGN="LEFT"/>dir_stack : list<br ALIGN="LEFT"/>disable_failing_post_execute<br ALIGN="LEFT"/>display_formatter<br ALIGN="LEFT"/>display_page<br ALIGN="LEFT"/>display_pub<br ALIGN="LEFT"/>display_pub_class<br ALIGN="LEFT"/>display_trap<br ALIGN="LEFT"/>displayhook<br ALIGN="LEFT"/>displayhook_class<br ALIGN="LEFT"/>events<br ALIGN="LEFT"/>execution_count : Integer<br ALIGN="LEFT"/>exit_now<br ALIGN="LEFT"/>exiter<br ALIGN="LEFT"/>extension_manager<br ALIGN="LEFT"/>filename<br ALIGN="LEFT"/>has_readline : bool<br ALIGN="LEFT"/>history_length : Integer<br ALIGN="LEFT"/>history_manager<br ALIGN="LEFT"/>home_dir<br ALIGN="LEFT"/>hooks<br ALIGN="LEFT"/>indent_current_nsp : int<br ALIGN="LEFT"/>input_splitter<br ALIGN="LEFT"/>input_transformer_manager<br ALIGN="LEFT"/>inspector<br ALIGN="LEFT"/>ipython_dir<br ALIGN="LEFT"/>logappend<br ALIGN="LEFT"/>logfile<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>logstart<br ALIGN="LEFT"/>magics_manager<br ALIGN="LEFT"/>meta<br ALIGN="LEFT"/>more : bool<br ALIGN="LEFT"/>multiline_history<br ALIGN="LEFT"/>ns_table : dict<br ALIGN="LEFT"/>object_info_string_level<br ALIGN="LEFT"/>payload_manager<br ALIGN="LEFT"/>pdb<br ALIGN="LEFT"/>prefilter<br ALIGN="LEFT"/>prefilter_manager<br ALIGN="LEFT"/>profile<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>prompt_in1<br ALIGN="LEFT"/>prompt_in2<br ALIGN="LEFT"/>prompt_manager<br ALIGN="LEFT"/>prompt_out<br ALIGN="LEFT"/>prompts_pad_left<br ALIGN="LEFT"/>pycolorize<br ALIGN="LEFT"/>pylab_gui_select : NoneType<br ALIGN="LEFT"/>quiet<br ALIGN="LEFT"/>raw_input_original<br ALIGN="LEFT"/>readline : NoneType<br ALIGN="LEFT"/>readline_delims<br ALIGN="LEFT"/>readline_no_record<br ALIGN="LEFT"/>readline_parse_and_bind<br ALIGN="LEFT"/>readline_remove_delims<br ALIGN="LEFT"/>readline_startup_hook<br ALIGN="LEFT"/>readline_use<br ALIGN="LEFT"/>register_magics<br ALIGN="LEFT"/>rl_do_indent : bool<br ALIGN="LEFT"/>rl_next_input : NoneType<br ALIGN="LEFT"/>runcode<br ALIGN="LEFT"/>separate_in<br ALIGN="LEFT"/>separate_out<br ALIGN="LEFT"/>separate_out2<br ALIGN="LEFT"/>set_custom_completer<br ALIGN="LEFT"/>set_readline_completer<br ALIGN="LEFT"/>show_rewritten_input<br ALIGN="LEFT"/>starting_dir<br ALIGN="LEFT"/>stdin_encoding : str<br ALIGN="LEFT"/>strdispatchers : dict<br ALIGN="LEFT"/>sys_excepthook<br ALIGN="LEFT"/>system<br ALIGN="LEFT"/>tempdirs : list<br ALIGN="LEFT"/>tempfiles : list<br ALIGN="LEFT"/>user_global_ns<br ALIGN="LEFT"/>user_module : NoneType, module<br ALIGN="LEFT"/>user_ns : NoneType, dict<br ALIGN="LEFT"/>user_ns_hidden : dict<br ALIGN="LEFT"/>wildcards_case_sensitive<br ALIGN="LEFT"/>xmode<br ALIGN="LEFT"/>|ask_yes_no(prompt, default)<br ALIGN="LEFT"/>atexit_operations()<br ALIGN="LEFT"/>auto_rewrite_input(cmd)<br ALIGN="LEFT"/>cleanup()<br ALIGN="LEFT"/>clear_main_mod_cache()<br ALIGN="LEFT"/>complete(text, line, cursor_pos)<br ALIGN="LEFT"/>debugger(force)<br ALIGN="LEFT"/>define_macro(name, themacro)<br ALIGN="LEFT"/>del_var(varname, by_name)<br ALIGN="LEFT"/>drop_by_id(variables)<br ALIGN="LEFT"/><I>enable_gui</I>(gui)<br ALIGN="LEFT"/>enable_matplotlib(gui)<br ALIGN="LEFT"/>enable_pylab(gui, import_all, welcome_message)<br ALIGN="LEFT"/>ev(expr)<br ALIGN="LEFT"/>ex(cmd)<br ALIGN="LEFT"/>excepthook(etype, value, tb)<br ALIGN="LEFT"/>extract_input_lines(range_str, raw)<br ALIGN="LEFT"/>find_cell_magic(magic_name)<br ALIGN="LEFT"/>find_line_magic(magic_name)<br ALIGN="LEFT"/>find_magic(magic_name, magic_kind)<br ALIGN="LEFT"/>find_user_code(target, raw, py_only, skip_encoding_cookie, search_ns)<br ALIGN="LEFT"/>get_exception_only(exc_tuple)<br ALIGN="LEFT"/>get_ipython()<br ALIGN="LEFT"/>getoutput(cmd, split, depth)<br ALIGN="LEFT"/>init_alias()<br ALIGN="LEFT"/>init_builtins()<br ALIGN="LEFT"/>init_completer()<br ALIGN="LEFT"/>init_create_namespaces(user_module, user_ns)<br ALIGN="LEFT"/>init_data_pub()<br ALIGN="LEFT"/>init_display_formatter()<br ALIGN="LEFT"/>init_display_pub()<br ALIGN="LEFT"/>init_displayhook()<br ALIGN="LEFT"/>init_encoding()<br ALIGN="LEFT"/><I>init_environment</I>()<br ALIGN="LEFT"/>init_events()<br ALIGN="LEFT"/>init_extension_manager()<br ALIGN="LEFT"/>init_history()<br ALIGN="LEFT"/>init_hooks()<br ALIGN="LEFT"/>init_inspector()<br ALIGN="LEFT"/>init_instance_attrs()<br ALIGN="LEFT"/>init_io()<br ALIGN="LEFT"/>init_ipython_dir(ipython_dir)<br ALIGN="LEFT"/>init_logger()<br ALIGN="LEFT"/>init_logstart()<br ALIGN="LEFT"/>init_magics()<br ALIGN="LEFT"/>init_payload()<br ALIGN="LEFT"/>init_pdb()<br ALIGN="LEFT"/>init_prefilter()<br ALIGN="LEFT"/>init_profile_dir(profile_dir)<br ALIGN="LEFT"/>init_prompts()<br ALIGN="LEFT"/>init_pushd_popd_magic()<br ALIGN="LEFT"/>init_readline()<br ALIGN="LEFT"/>init_syntax_highlighting()<br ALIGN="LEFT"/>init_sys_modules()<br ALIGN="LEFT"/>init_traceback_handlers(custom_exceptions)<br ALIGN="LEFT"/>init_user_ns()<br ALIGN="LEFT"/>init_virtualenv()<br ALIGN="LEFT"/>magic(arg_s)<br ALIGN="LEFT"/>mktempfile(data, prefix)<br ALIGN="LEFT"/>new_main_mod(filename, modname)<br ALIGN="LEFT"/>object_inspect(oname, detail_level)<br ALIGN="LEFT"/>object_inspect_text(oname, detail_level)<br ALIGN="LEFT"/>pre_readline()<br ALIGN="LEFT"/>prepare_user_module(user_module, user_ns)<br ALIGN="LEFT"/>push(variables, interactive)<br ALIGN="LEFT"/>refill_readline_hist()<br ALIGN="LEFT"/>register_magic_function(func, magic_kind, magic_name)<br ALIGN="LEFT"/>register_post_execute(func)<br ALIGN="LEFT"/>reset(new_session)<br ALIGN="LEFT"/>reset_selective(regex)<br ALIGN="LEFT"/>restore_sys_module_state()<br ALIGN="LEFT"/>run_ast_nodes(nodelist, cell_name, interactivity, compiler, result)<br ALIGN="LEFT"/>run_cell(raw_cell, store_history, silent, shell_futures)<br ALIGN="LEFT"/>run_cell_magic(magic_name, line, cell)<br ALIGN="LEFT"/>run_code(code_obj, result)<br ALIGN="LEFT"/>run_line_magic(magic_name, line)<br ALIGN="LEFT"/>safe_execfile(fname)<br ALIGN="LEFT"/>safe_execfile_ipy(fname, shell_futures)<br ALIGN="LEFT"/>safe_run_module(mod_name, where)<br ALIGN="LEFT"/>save_sys_module_state()<br ALIGN="LEFT"/>set_autoindent(value)<br ALIGN="LEFT"/>set_completer_frame(frame)<br ALIGN="LEFT"/>set_custom_completer(completer, pos)<br ALIGN="LEFT"/>set_custom_exc(exc_tuple, handler)<br ALIGN="LEFT"/>set_hook(name, hook, priority, str_key, re_key, _warn_deprecated)<br ALIGN="LEFT"/>set_next_input(s, replace)<br ALIGN="LEFT"/>set_readline_completer()<br ALIGN="LEFT"/>show_banner(banner)<br ALIGN="LEFT"/>show_usage()<br ALIGN="LEFT"/>show_usage_error(exc)<br ALIGN="LEFT"/>showindentationerror()<br ALIGN="LEFT"/>showsyntaxerror(filename)<br ALIGN="LEFT"/>showtraceback(exc_tuple, filename, tb_offset, exception_only)<br ALIGN="LEFT"/>system_piped(cmd)<br ALIGN="LEFT"/>system_raw(cmd)<br ALIGN="LEFT"/>transform_ast(node)<br ALIGN="LEFT"/>user_expressions(expressions)<br ALIGN="LEFT"/>var_expand(cmd, depth, formatter)<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>write_err(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.interactiveshell.InteractiveShellABC" [color="black", fontcolor="black", label=<{InteractiveShellABC|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.shellapp.InteractiveShellApp" [color="black", fontcolor="black", label=<{InteractiveShellApp|code_to_run<br ALIGN="LEFT"/>default_extensions<br ALIGN="LEFT"/>exec_PYTHONSTARTUP<br ALIGN="LEFT"/>exec_files<br ALIGN="LEFT"/>exec_lines<br ALIGN="LEFT"/>extensions<br ALIGN="LEFT"/>extra_extension<br ALIGN="LEFT"/>file_to_run<br ALIGN="LEFT"/>gui<br ALIGN="LEFT"/>hide_initial_ns<br ALIGN="LEFT"/>matplotlib<br ALIGN="LEFT"/>module_to_run<br ALIGN="LEFT"/>pylab<br ALIGN="LEFT"/>pylab_import_all<br ALIGN="LEFT"/>reraise_ipython_extension_failures<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>user_ns<br ALIGN="LEFT"/>|init_code()<br ALIGN="LEFT"/>init_extensions()<br ALIGN="LEFT"/>init_gui_pylab()<br ALIGN="LEFT"/>init_path()<br ALIGN="LEFT"/><I>init_shell</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.embed.InteractiveShellEmbed" [color="black", fontcolor="black", label=<{InteractiveShellEmbed|banner2 : str<br ALIGN="LEFT"/>display_banner<br ALIGN="LEFT"/>dummy_mode<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>embedded_active<br ALIGN="LEFT"/>exit_msg<br ALIGN="LEFT"/>exit_now : bool<br ALIGN="LEFT"/>old_banner2 : str<br ALIGN="LEFT"/>user_module : NoneType, module<br ALIGN="LEFT"/>user_ns : NoneType, dict<br ALIGN="LEFT"/>|init_magics()<br ALIGN="LEFT"/><I>init_sys_modules</I>()<br ALIGN="LEFT"/>mainloop(local_ns, module, stack_depth, display_banner, global_ns, compile_flags)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase" [color="black", fontcolor="black", label=<{InteractiveShellTestCase|<br ALIGN="LEFT"/>|test_In_variable()<br ALIGN="LEFT"/>test_bad_custom_tb()<br ALIGN="LEFT"/>test_bad_custom_tb_return()<br ALIGN="LEFT"/>test_bad_var_expand()<br ALIGN="LEFT"/>test_can_pickle()<br ALIGN="LEFT"/>test_custom_exception()<br ALIGN="LEFT"/>test_dont_cache_with_semicolon()<br ALIGN="LEFT"/>test_drop_by_id()<br ALIGN="LEFT"/>test_future_environment()<br ALIGN="LEFT"/>test_future_flags()<br ALIGN="LEFT"/>test_future_unicode()<br ALIGN="LEFT"/>test_get_exception_only()<br ALIGN="LEFT"/>test_gh_597()<br ALIGN="LEFT"/>test_global_ns()<br ALIGN="LEFT"/>test_magic_names_in_string()<br ALIGN="LEFT"/>test_mktempfile()<br ALIGN="LEFT"/>test_multiline_string_cells()<br ALIGN="LEFT"/>test_naked_string_cells()<br ALIGN="LEFT"/>test_new_main_mod()<br ALIGN="LEFT"/>test_ofind_cell_magic()<br ALIGN="LEFT"/>test_ofind_line_magic()<br ALIGN="LEFT"/>test_ofind_multiple_attribute_lookups()<br ALIGN="LEFT"/>test_ofind_prefers_property_to_instance_level_attribute()<br ALIGN="LEFT"/>test_ofind_property_with_error()<br ALIGN="LEFT"/>test_ofind_slotted_attributes()<br ALIGN="LEFT"/><I>test_print_softspace</I>()<br ALIGN="LEFT"/>test_run_cell_multiline()<br ALIGN="LEFT"/>test_run_empty_cell()<br ALIGN="LEFT"/>test_silent_noadvance()<br ALIGN="LEFT"/>test_silent_nodisplayhook()<br ALIGN="LEFT"/>test_silent_postexec()<br ALIGN="LEFT"/>test_syntax_error()<br ALIGN="LEFT"/>test_trailing_newline()<br ALIGN="LEFT"/>test_var_expand()<br ALIGN="LEFT"/>test_var_expand_local()<br ALIGN="LEFT"/>test_var_expand_self()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.tests.test_interactivshell.InteractiveShellTestCase" [color="black", fontcolor="black", label=<{InteractiveShellTestCase|<br ALIGN="LEFT"/>|rl_hist_entries(rl, n)<br ALIGN="LEFT"/>test_inputtransformer_syntaxerror()<br ALIGN="LEFT"/>test_replace_multiline_hist_adds()<br ALIGN="LEFT"/>test_replace_multiline_hist_disabled()<br ALIGN="LEFT"/>test_replace_multiline_hist_keeps_history()<br ALIGN="LEFT"/>test_replace_multiline_hist_replaces_empty_line()<br ALIGN="LEFT"/>test_replace_multiline_hist_replaces_twice()<br ALIGN="LEFT"/>test_runs_without_remove_history_item()<br ALIGN="LEFT"/>test_runs_without_rl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.code.InteractivelyDefined" [color="black", fontcolor="red", label=<{InteractivelyDefined|index<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.alias.InvalidAliasError" [color="black", fontcolor="red", label=<{InvalidAliasError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.InvalidDependency" [color="black", fontcolor="red", label=<{InvalidDependency|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.channels.InvalidPortNumber" [color="black", fontcolor="red", label=<{InvalidPortNumber|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.IsCompleteReply" [color="black", fontcolor="black", label=<{IsCompleteReply|status<br ALIGN="LEFT"/>|check(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.IsCompleteReplyIncomplete" [color="black", fontcolor="black", label=<{IsCompleteReplyIncomplete|indent<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.JPEGFormatter" [color="black", fontcolor="black", label=<{JPEGFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.iptestcontroller.JSController" [color="black", fontcolor="black", label=<{JSController|cmd : list<br ALIGN="LEFT"/>engine : str<br ALIGN="LEFT"/>ipydir : TemporaryDirectory<br ALIGN="LEFT"/>nbdir : TemporaryDirectory<br ALIGN="LEFT"/>requirements : list<br ALIGN="LEFT"/>section<br ALIGN="LEFT"/>server : Popen<br ALIGN="LEFT"/>server_command : list<br ALIGN="LEFT"/>server_info_file<br ALIGN="LEFT"/>server_port : int<br ALIGN="LEFT"/>slimer_failure<br ALIGN="LEFT"/>stream_capturer<br ALIGN="LEFT"/>url : NoneType<br ALIGN="LEFT"/>will_run<br ALIGN="LEFT"/>xunit : bool<br ALIGN="LEFT"/>|add_xunit()<br ALIGN="LEFT"/>cleanup()<br ALIGN="LEFT"/>launch(buffer_output)<br ALIGN="LEFT"/>print_extra_info()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.JSON" [color="black", fontcolor="black", label=<{JSON|data<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.loader.JSONFileConfigLoader" [color="black", fontcolor="black", label=<{JSONFileConfigLoader|config<br ALIGN="LEFT"/>|load_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.JSONFormatter" [color="black", fontcolor="black", label=<{JSONFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v1.nbjson.JSONReader" [color="black", fontcolor="black", label=<{JSONReader|<br ALIGN="LEFT"/>|reads(s)<br ALIGN="LEFT"/>to_notebook(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbjson.JSONReader" [color="black", fontcolor="black", label=<{JSONReader|<br ALIGN="LEFT"/>|reads(s)<br ALIGN="LEFT"/>to_notebook(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbjson.JSONReader" [color="black", fontcolor="black", label=<{JSONReader|<br ALIGN="LEFT"/>|reads(s)<br ALIGN="LEFT"/>to_notebook(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.nbjson.JSONReader" [color="black", fontcolor="black", label=<{JSONReader|<br ALIGN="LEFT"/>|reads(s)<br ALIGN="LEFT"/>to_notebook(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_json_as_string_deprecated.JSONString" [color="black", fontcolor="black", label=<{JSONString|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v1.nbjson.JSONWriter" [color="black", fontcolor="black", label=<{JSONWriter|<br ALIGN="LEFT"/>|writes(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbjson.JSONWriter" [color="black", fontcolor="black", label=<{JSONWriter|<br ALIGN="LEFT"/>|writes(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbjson.JSONWriter" [color="black", fontcolor="black", label=<{JSONWriter|<br ALIGN="LEFT"/>|writes(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.nbjson.JSONWriter" [color="black", fontcolor="black", label=<{JSONWriter|<br ALIGN="LEFT"/>|writes(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.Javascript" [color="black", fontcolor="black", label=<{Javascript|css : NoneType, list<br ALIGN="LEFT"/>lib : NoneType, list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.JavascriptFormatter" [color="black", fontcolor="black", label=<{JavascriptFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.scheduler.Job" [color="black", fontcolor="black", label=<{Job|after<br ALIGN="LEFT"/>blacklist : set<br ALIGN="LEFT"/>dependents<br ALIGN="LEFT"/>follow<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>idents<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>msg<br ALIGN="LEFT"/>msg_id<br ALIGN="LEFT"/>raw_msg<br ALIGN="LEFT"/>removed : bool<br ALIGN="LEFT"/>targets<br ALIGN="LEFT"/>timeout<br ALIGN="LEFT"/>timeout_id : int<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.loader.KVArgParseConfigLoader" [color="black", fontcolor="black", label=<{KVArgParseConfigLoader|alias_flags : dict<br ALIGN="LEFT"/>extra_args : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.ipkernel.Kernel" [color="black", fontcolor="black", label=<{Kernel|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.kernelbase.Kernel" [color="black", fontcolor="black", label=<{Kernel|aborted<br ALIGN="LEFT"/>control_handlers : dict<br ALIGN="LEFT"/>control_stream<br ALIGN="LEFT"/>eventloop<br ALIGN="LEFT"/>execution_count : int<br ALIGN="LEFT"/>help_links<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>int_id : Integer<br ALIGN="LEFT"/>iopub_socket<br ALIGN="LEFT"/>kernel_info<br ALIGN="LEFT"/>language_info : dict<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>shell_handlers : dict<br ALIGN="LEFT"/>shell_streams<br ALIGN="LEFT"/>stdin_socket<br ALIGN="LEFT"/>|abort_request(stream, ident, parent)<br ALIGN="LEFT"/>apply_request(stream, ident, parent)<br ALIGN="LEFT"/>clear_request(stream, idents, parent)<br ALIGN="LEFT"/>complete_request(stream, ident, parent)<br ALIGN="LEFT"/>connect_request(stream, ident, parent)<br ALIGN="LEFT"/>dispatch_control(msg)<br ALIGN="LEFT"/>dispatch_shell(stream, msg)<br ALIGN="LEFT"/><I>do_apply</I>(content, bufs, msg_id, reply_metadata)<br ALIGN="LEFT"/><I>do_clear</I>()<br ALIGN="LEFT"/>do_complete(code, cursor_pos)<br ALIGN="LEFT"/><I>do_execute</I>(code, silent, store_history, user_expressions, allow_stdin)<br ALIGN="LEFT"/>do_history(hist_access_type, output, raw, session, start, stop, n, pattern, unique)<br ALIGN="LEFT"/>do_inspect(code, cursor_pos, detail_level)<br ALIGN="LEFT"/>do_is_complete(code)<br ALIGN="LEFT"/>do_one_iteration()<br ALIGN="LEFT"/>do_shutdown(restart)<br ALIGN="LEFT"/>enter_eventloop()<br ALIGN="LEFT"/>execute_request(stream, ident, parent)<br ALIGN="LEFT"/>getpass(prompt)<br ALIGN="LEFT"/>history_request(stream, ident, parent)<br ALIGN="LEFT"/>inspect_request(stream, ident, parent)<br ALIGN="LEFT"/>is_complete_request(stream, ident, parent)<br ALIGN="LEFT"/>kernel_info_request(stream, ident, parent)<br ALIGN="LEFT"/>raw_input(prompt)<br ALIGN="LEFT"/>record_ports(ports)<br ALIGN="LEFT"/>send_response(stream, msg_or_type, content, ident, buffers, track, header, metadata)<br ALIGN="LEFT"/>set_parent(ident, parent)<br ALIGN="LEFT"/>shutdown_request(stream, ident, parent)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernels.tests.test_kernels_api.KernelAPI" [color="black", fontcolor="black", label=<{KernelAPI|base_url<br ALIGN="LEFT"/>|get(id)<br ALIGN="LEFT"/>interrupt(id)<br ALIGN="LEFT"/>list()<br ALIGN="LEFT"/>restart(id)<br ALIGN="LEFT"/>shutdown(id)<br ALIGN="LEFT"/>start(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernels.tests.test_kernels_api.KernelAPITest" [color="black", fontcolor="black", label=<{KernelAPITest|kern_api<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test__no_kernels()<br ALIGN="LEFT"/>test_default_kernel()<br ALIGN="LEFT"/>test_kernel_handler()<br ALIGN="LEFT"/>test_main_kernel_handler()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernels.handlers.KernelActionHandler" [color="black", fontcolor="black", label=<{KernelActionHandler|<br ALIGN="LEFT"/>|post(kernel_id, action)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.client.KernelClient" [color="black", fontcolor="black", label=<{KernelClient|allow_stdin : bool<br ALIGN="LEFT"/>channels_running<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>hb_channel<br ALIGN="LEFT"/>hb_channel_class<br ALIGN="LEFT"/>ioloop : NoneType<br ALIGN="LEFT"/>iopub_channel<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>shell_channel<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|complete(code, cursor_pos)<br ALIGN="LEFT"/>execute(code, silent, store_history, user_expressions, allow_stdin, stop_on_error)<br ALIGN="LEFT"/>get_iopub_msg()<br ALIGN="LEFT"/>get_shell_msg()<br ALIGN="LEFT"/>get_stdin_msg()<br ALIGN="LEFT"/>history(raw, output, hist_access_type)<br ALIGN="LEFT"/>input(string)<br ALIGN="LEFT"/>inspect(code, cursor_pos, detail_level)<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/>is_complete(code)<br ALIGN="LEFT"/>kernel_info()<br ALIGN="LEFT"/>shutdown(restart)<br ALIGN="LEFT"/>start_channels(shell, iopub, stdin, hb)<br ALIGN="LEFT"/>stop_channels()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.clientabc.KernelClientABC" [color="black", fontcolor="black", label=<{KernelClientABC|channels_running<br ALIGN="LEFT"/>hb_channel<br ALIGN="LEFT"/>hb_channel_class<br ALIGN="LEFT"/>iopub_channel<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>shell_channel<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|<I>start_channels</I>(shell, iopub, stdin, hb)<br ALIGN="LEFT"/><I>stop_channels</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.error.KernelError" [color="black", fontcolor="red", label=<{KernelError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.kernels.handlers.KernelHandler" [color="black", fontcolor="black", label=<{KernelHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|delete(kernel_id)<br ALIGN="LEFT"/>get(kernel_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.KernelInfoReply" [color="black", fontcolor="black", label=<{KernelInfoReply|banner<br ALIGN="LEFT"/>implementation<br ALIGN="LEFT"/>implementation_version<br ALIGN="LEFT"/>language_info<br ALIGN="LEFT"/>protocol_version<br ALIGN="LEFT"/>|check(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.zmqshell.KernelMagics" [color="black", fontcolor="black", label=<{KernelMagics|cls<br ALIGN="LEFT"/>more<br ALIGN="LEFT"/>|autosave(arg_s)<br ALIGN="LEFT"/>clear(arg_s)<br ALIGN="LEFT"/>connect_info(arg_s)<br ALIGN="LEFT"/>edit(parameter_s, last_call)<br ALIGN="LEFT"/>less(arg_s)<br ALIGN="LEFT"/>man(arg_s)<br ALIGN="LEFT"/>qtconsole(arg_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.manager.KernelManager" [color="black", fontcolor="black", label=<{KernelManager|autorestart<br ALIGN="LEFT"/>client_class<br ALIGN="LEFT"/>client_factory<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>has_kernel<br ALIGN="LEFT"/>ipython_dir<br ALIGN="LEFT"/>ipython_kernel<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>kernel_cmd<br ALIGN="LEFT"/>kernel_name<br ALIGN="LEFT"/>kernel_spec<br ALIGN="LEFT"/>kernel_spec_manager<br ALIGN="LEFT"/>|add_restart_callback(callback, event)<br ALIGN="LEFT"/>cleanup(connection_file)<br ALIGN="LEFT"/>client()<br ALIGN="LEFT"/>finish_shutdown(waittime, pollinterval)<br ALIGN="LEFT"/>format_kernel_cmd(extra_arguments)<br ALIGN="LEFT"/>interrupt_kernel()<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/>remove_restart_callback(callback, event)<br ALIGN="LEFT"/>request_shutdown(restart)<br ALIGN="LEFT"/>restart_kernel(now)<br ALIGN="LEFT"/>shutdown_kernel(now, restart)<br ALIGN="LEFT"/>signal_kernel(signum)<br ALIGN="LEFT"/>start_kernel()<br ALIGN="LEFT"/><I>start_restarter</I>()<br ALIGN="LEFT"/><I>stop_restarter</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.managerabc.KernelManagerABC" [color="black", fontcolor="black", label=<{KernelManagerABC|has_kernel<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>|<I>interrupt_kernel</I>()<br ALIGN="LEFT"/><I>is_alive</I>()<br ALIGN="LEFT"/><I>restart_kernel</I>(now)<br ALIGN="LEFT"/><I>shutdown_kernel</I>(now, restart)<br ALIGN="LEFT"/><I>signal_kernel</I>(signum)<br ALIGN="LEFT"/><I>start_kernel</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.restarter.KernelRestarter" [color="black", fontcolor="black", label=<{KernelRestarter|callbacks<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>kernel_manager<br ALIGN="LEFT"/>restart_limit : Integer<br ALIGN="LEFT"/>time_to_dead<br ALIGN="LEFT"/>|add_callback(f, event)<br ALIGN="LEFT"/>poll()<br ALIGN="LEFT"/>remove_callback(f, event)<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.kernelspec.KernelSpec" [color="black", fontcolor="black", label=<{KernelSpec|argv<br ALIGN="LEFT"/>display_name<br ALIGN="LEFT"/>env<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>resource_dir<br ALIGN="LEFT"/>|from_resource_dir(resource_dir)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernelspecs.tests.test_kernelspecs_api.KernelSpecAPI" [color="black", fontcolor="black", label=<{KernelSpecAPI|base_url<br ALIGN="LEFT"/>|kernel_resource(name, path)<br ALIGN="LEFT"/>kernel_spec_info(name)<br ALIGN="LEFT"/>list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.kernelspecapp.KernelSpecApp" [color="black", fontcolor="black", label=<{KernelSpecApp|aliases : dict<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subcommands<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernelspecs.handlers.KernelSpecHandler" [color="black", fontcolor="black", label=<{KernelSpecHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|get(kernel_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.kernelspec.KernelSpecManager" [color="black", fontcolor="black", label=<{KernelSpecManager|env_kernel_dir<br ALIGN="LEFT"/>ipython_dir<br ALIGN="LEFT"/>kernel_dirs<br ALIGN="LEFT"/>user_kernel_dir<br ALIGN="LEFT"/>whitelist<br ALIGN="LEFT"/>|find_kernel_specs()<br ALIGN="LEFT"/>get_kernel_spec(kernel_name)<br ALIGN="LEFT"/>install_kernel_spec(source_dir, kernel_name, user, replace)<br ALIGN="LEFT"/>install_native_kernel_spec(user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.kernelspecs.handlers.KernelSpecResourceHandler" [color="black", fontcolor="black", label=<{KernelSpecResourceHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|get(kernel_name, path, include_body)<br ALIGN="LEFT"/>head(kernel_name, path)<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_kernelspec.KernelSpecTests" [color="black", fontcolor="black", label=<{KernelSpecTests|installable_kernel<br ALIGN="LEFT"/>ksm<br ALIGN="LEFT"/>sample_kernel_dir<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_cant_install_kernel_spec()<br ALIGN="LEFT"/>test_find_kernel_specs()<br ALIGN="LEFT"/>test_get_kernel_spec()<br ALIGN="LEFT"/>test_install_kernel_spec()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.KeyValueConfigLoader" [color="black", fontcolor="black", label=<{KeyValueConfigLoader|aliases : dict<br ALIGN="LEFT"/>argv : NoneType<br ALIGN="LEFT"/>extra_args : list<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>load_config(argv, aliases, flags)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.kill_ring.KillRing" [color="black", fontcolor="black", label=<{KillRing|<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>kill(text)<br ALIGN="LEFT"/>rotate()<br ALIGN="LEFT"/>yank()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.decorators._numpy_testing_noseclasses.KnownFailure" [color="black", fontcolor="black", label=<{KnownFailure|conf<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>knownfail<br ALIGN="LEFT"/>|configure(options, conf)<br ALIGN="LEFT"/>options(parser, env)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.decorators._numpy_testing_noseclasses.KnownFailureTest" [color="black", fontcolor="red", label=<{KnownFailureTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LSFControllerLauncher" [color="black", fontcolor="black", label=<{LSFControllerLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LSFEngineSetLauncher" [color="black", fontcolor="black", label=<{LSFEngineSetLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LSFLauncher" [color="black", fontcolor="black", label=<{LSFLauncher|batch_file<br ALIGN="LEFT"/>delete_command<br ALIGN="LEFT"/>job_array_regexp<br ALIGN="LEFT"/>job_array_template<br ALIGN="LEFT"/>job_id_regexp<br ALIGN="LEFT"/>queue_regexp<br ALIGN="LEFT"/>queue_template<br ALIGN="LEFT"/>submit_command<br ALIGN="LEFT"/>|start(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.text.LSString" [color="black", fontcolor="black", label=<{LSString|l<br ALIGN="LEFT"/>list<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>nlstr<br ALIGN="LEFT"/>p<br ALIGN="LEFT"/>paths<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>spstr<br ALIGN="LEFT"/>|get_list()<br ALIGN="LEFT"/>get_nlstr()<br ALIGN="LEFT"/>get_paths()<br ALIGN="LEFT"/>get_spstr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.latextools.LaTeXTool" [color="black", fontcolor="black", label=<{LaTeXTool|backends<br ALIGN="LEFT"/>packages<br ALIGN="LEFT"/>preamble<br ALIGN="LEFT"/>use_breqn<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.LanguageInfo" [color="black", fontcolor="black", label=<{LanguageInfo|name<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.display.Latex" [color="black", fontcolor="black", label=<{Latex|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_string.Latex" [color="black", fontcolor="black", label=<{Latex|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.latex.LatexExporter" [color="black", fontcolor="black", label=<{LatexExporter|default_config<br ALIGN="LEFT"/>jinja_comment_block_end<br ALIGN="LEFT"/>jinja_comment_block_start<br ALIGN="LEFT"/>jinja_logic_block_end<br ALIGN="LEFT"/>jinja_logic_block_start<br ALIGN="LEFT"/>jinja_variable_block_end<br ALIGN="LEFT"/>jinja_variable_block_start<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>template_extension<br ALIGN="LEFT"/>|from_notebook_node(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.LatexFormatter" [color="black", fontcolor="black", label=<{LatexFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.latex.LatexPreprocessor" [color="black", fontcolor="black", label=<{LatexPreprocessor|enabled : bool<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LauncherError" [color="black", fontcolor="red", label=<{LauncherError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.LauncherTest" [color="black", fontcolor="black", label=<{LauncherTest|config<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>|build_launcher()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_args()<br ALIGN="LEFT"/>test_cluster_id_arg()<br ALIGN="LEFT"/>test_profile_dir_arg()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.LazyConfigValue" [color="black", fontcolor="black", label=<{LazyConfigValue|<br ALIGN="LEFT"/>|add(obj)<br ALIGN="LEFT"/>append(obj)<br ALIGN="LEFT"/>extend(other)<br ALIGN="LEFT"/>get_value(initial)<br ALIGN="LEFT"/>insert(index, other)<br ALIGN="LEFT"/>prepend(other)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>update(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prompts.LazyEvaluate" [color="black", fontcolor="black", label=<{LazyEvaluate|args : tuple<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.LenListTrait" [color="black", fontcolor="black", label=<{LenListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.application.LevelFormatter" [color="black", fontcolor="black", label=<{LevelFormatter|highlevel_format : str<br ALIGN="LEFT"/>highlevel_limit : int<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.demo.LineDemo" [color="black", fontcolor="black", label=<{LineDemo|auto_all : bool<br ALIGN="LEFT"/>nblocks<br ALIGN="LEFT"/>src : str<br ALIGN="LEFT"/>src_blocks<br ALIGN="LEFT"/>src_blocks_colored : map<br ALIGN="LEFT"/>|reload()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.splitinput.LineInfo" [color="black", fontcolor="black", label=<{LineInfo|continue_prompt : bool<br ALIGN="LEFT"/>esc : str<br ALIGN="LEFT"/>ifun<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>pre<br ALIGN="LEFT"/>pre_char<br ALIGN="LEFT"/>pre_whitespace : str<br ALIGN="LEFT"/>the_rest : str<br ALIGN="LEFT"/>|ofind(ip)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.LineModeCellMagics" [color="black", fontcolor="black", label=<{LineModeCellMagics|sp<br ALIGN="LEFT"/>|test_incremental()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_link.Link" [color="black", fontcolor="black", label=<{Link|widgets<br ALIGN="LEFT"/>|unlink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.List" [color="black", fontcolor="black", label=<{List|klass : list<br ALIGN="LEFT"/>|length_error(obj, value)<br ALIGN="LEFT"/>validate(obj, value)<br ALIGN="LEFT"/>validate_elements(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.kernelspecapp.ListKernelSpecs" [color="black", fontcolor="black", label=<{ListKernelSpecs|aliases<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>kernel_spec_manager<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.ultratb.ListTB" [color="black", fontcolor="black", label=<{ListTB|<br ALIGN="LEFT"/>|get_exception_only(etype, value)<br ALIGN="LEFT"/>show_exception_only(etype, evalue)<br ALIGN="LEFT"/>structured_traceback(etype, value, elist, tb_offset, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ListTrait" [color="black", fontcolor="black", label=<{ListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.view.LoadBalancedView" [color="black", fontcolor="black", label=<{LoadBalancedView|after<br ALIGN="LEFT"/>follow<br ALIGN="LEFT"/>retries : Integer<br ALIGN="LEFT"/>targets : list<br ALIGN="LEFT"/>timeout<br ALIGN="LEFT"/>|map(f)<br ALIGN="LEFT"/>set_flags()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LocalControllerLauncher" [color="black", fontcolor="black", label=<{LocalControllerLauncher|<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LocalEngineLauncher" [color="black", fontcolor="black", label=<{LocalEngineLauncher|engine_args<br ALIGN="LEFT"/>engine_cmd<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LocalEngineSetLauncher" [color="black", fontcolor="black", label=<{LocalEngineSetLauncher|delay<br ALIGN="LEFT"/>launcher_class<br ALIGN="LEFT"/>launchers<br ALIGN="LEFT"/>stop_data<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>interrupt_then_kill(delay)<br ALIGN="LEFT"/>signal(sig)<br ALIGN="LEFT"/>start(n)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.LocalProcessLauncher" [color="black", fontcolor="black", label=<{LocalProcessLauncher|cmd_and_args<br ALIGN="LEFT"/>killer<br ALIGN="LEFT"/>poll_frequency : Integer<br ALIGN="LEFT"/>poller : NoneType<br ALIGN="LEFT"/>process : NoneType, Popen<br ALIGN="LEFT"/>stderr<br ALIGN="LEFT"/>stdout<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>handle_stderr(fd, events)<br ALIGN="LEFT"/>handle_stdout(fd, events)<br ALIGN="LEFT"/>interrupt_then_kill(delay)<br ALIGN="LEFT"/>poll()<br ALIGN="LEFT"/>signal(sig)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.ipapp.LocateIPythonApp" [color="black", fontcolor="black", label=<{LocateIPythonApp|description : str<br ALIGN="LEFT"/>subcommands<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.logwatcher.LogWatcher" [color="black", fontcolor="black", label=<{LogWatcher|context<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>topics<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|log_message(raw)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>subscribe()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.logger.Logger" [color="black", fontcolor="black", label=<{Logger|close_log<br ALIGN="LEFT"/>home_dir<br ALIGN="LEFT"/>log_active : bool<br ALIGN="LEFT"/>log_active_out : bool<br ALIGN="LEFT"/>log_output : bool<br ALIGN="LEFT"/>log_raw_input : bool<br ALIGN="LEFT"/>logfile : NoneType<br ALIGN="LEFT"/>logfname : str<br ALIGN="LEFT"/>loghead : str<br ALIGN="LEFT"/>logmode<br ALIGN="LEFT"/>timestamp : bool<br ALIGN="LEFT"/>|log(line_mod, line_ori)<br ALIGN="LEFT"/>log_write(data, kind)<br ALIGN="LEFT"/>logstart(logfname, loghead, logmode, log_output, timestamp, log_raw_input)<br ALIGN="LEFT"/>logstate()<br ALIGN="LEFT"/>logstop()<br ALIGN="LEFT"/>switch_log(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.configurable.LoggingConfigurable" [color="black", fontcolor="black", label=<{LoggingConfigurable|log<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.logging.LoggingMagics" [color="black", fontcolor="black", label=<{LoggingMagics|<br ALIGN="LEFT"/>|logoff(parameter_s)<br ALIGN="LEFT"/>logon(parameter_s)<br ALIGN="LEFT"/>logstart(parameter_s)<br ALIGN="LEFT"/>logstate(parameter_s)<br ALIGN="LEFT"/>logstop(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.auth.login.LoginHandler" [color="black", fontcolor="black", label=<{LoginHandler|hashed_password<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>get_user(handler)<br ALIGN="LEFT"/>login_available(settings)<br ALIGN="LEFT"/>password_from_settings(settings)<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>validate_security(app, ssl_options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.auth.logout.LogoutHandler" [color="black", fontcolor="black", label=<{LogoutHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.LongTrait" [color="black", fontcolor="black", label=<{LongTrait|value : Long<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.LooseTupleTrait" [color="black", fontcolor="black", label=<{LooseTupleTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.ipengineapp.MPI" [color="black", fontcolor="black", label=<{MPI|default_inits<br ALIGN="LEFT"/>init_script<br ALIGN="LEFT"/>use<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.MPIControllerLauncher" [color="black", fontcolor="black", label=<{MPIControllerLauncher|program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.MPIEngineSetLauncher" [color="black", fontcolor="black", label=<{MPIEngineSetLauncher|n<br ALIGN="LEFT"/>program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>|start(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.MPIExecControllerLauncher" [color="black", fontcolor="black", label=<{MPIExecControllerLauncher|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.MPIExecEngineSetLauncher" [color="black", fontcolor="black", label=<{MPIExecEngineSetLauncher|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.MPIExecLauncher" [color="black", fontcolor="black", label=<{MPIExecLauncher|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.MPILauncher" [color="black", fontcolor="black", label=<{MPILauncher|mpi_args<br ALIGN="LEFT"/>mpi_cmd<br ALIGN="LEFT"/>n : Integer<br ALIGN="LEFT"/>program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>start(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.macro.Macro" [color="black", fontcolor="black", label=<{Macro|value : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.prefilter.MacroChecker" [color="black", fontcolor="black", label=<{MacroChecker|priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.MacroHandler" [color="black", fontcolor="black", label=<{MacroHandler|handler_name<br ALIGN="LEFT"/>|handle(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.code.MacroToEdit" [color="black", fontcolor="red", label=<{MacroToEdit|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic.MagicAlias" [color="black", fontcolor="black", label=<{MagicAlias|magic_kind<br ALIGN="LEFT"/>magic_name<br ALIGN="LEFT"/>pretty_target<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic_arguments.MagicArgumentParser" [color="black", fontcolor="black", label=<{MagicArgumentParser|<br ALIGN="LEFT"/>|error(message)<br ALIGN="LEFT"/>parse_argstring(argstring)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.MagicHandler" [color="black", fontcolor="black", label=<{MagicHandler|esc_strings<br ALIGN="LEFT"/>handler_name<br ALIGN="LEFT"/>|handle(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magic_arguments.MagicHelpFormatter" [color="black", fontcolor="black", label=<{MagicHelpFormatter|<br ALIGN="LEFT"/>|add_usage(usage, actions, groups, prefix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.magic_helper.MagicHelper" [color="black", fontcolor="black", label=<{MagicHelper|data : NoneType, dict<br ALIGN="LEFT"/>frame<br ALIGN="LEFT"/>pasteRequested<br ALIGN="LEFT"/>paste_button<br ALIGN="LEFT"/>readyForUpdate<br ALIGN="LEFT"/>runRequested<br ALIGN="LEFT"/>run_button<br ALIGN="LEFT"/>search_class<br ALIGN="LEFT"/>search_label<br ALIGN="LEFT"/>search_line<br ALIGN="LEFT"/>search_list<br ALIGN="LEFT"/>|class_selected(index)<br ALIGN="LEFT"/>filter_magic_helper(regex, cls)<br ALIGN="LEFT"/>paste_requested(item)<br ALIGN="LEFT"/>populate_magic_helper(data)<br ALIGN="LEFT"/>run_requested(item)<br ALIGN="LEFT"/>search_changed(search_string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magic.Magics" [color="black", fontcolor="black", label=<{Magics|magics : NoneType<br ALIGN="LEFT"/>options_table : NoneType<br ALIGN="LEFT"/>registered : bool<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>|arg_err(func)<br ALIGN="LEFT"/>default_option(fn, optstr)<br ALIGN="LEFT"/>format_latex(strng)<br ALIGN="LEFT"/>parse_options(arg_str, opt_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.basic.MagicsDisplay" [color="black", fontcolor="black", label=<{MagicsDisplay|magics_manager<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic.MagicsManager" [color="black", fontcolor="black", label=<{MagicsManager|auto_magic<br ALIGN="LEFT"/>magics<br ALIGN="LEFT"/>registry<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>user_magics<br ALIGN="LEFT"/>|auto_status()<br ALIGN="LEFT"/>define_magic(name, func)<br ALIGN="LEFT"/>lsmagic()<br ALIGN="LEFT"/>lsmagic_docs(brief, missing)<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>register_alias(alias_name, magic_name, magic_kind)<br ALIGN="LEFT"/>register_function(func, magic_kind, magic_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.clusters.handlers.MainClusterHandler" [color="black", fontcolor="black", label=<{MainClusterHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernels.handlers.MainKernelHandler" [color="black", fontcolor="black", label=<{MainKernelHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernelspecs.handlers.MainKernelSpecHandler" [color="black", fontcolor="black", label=<{MainKernelSpecHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.mainwindow.MainWindow" [color="black", fontcolor="black", label=<{MainWindow|active_frontend<br ALIGN="LEFT"/>clear_action<br ALIGN="LEFT"/>close_action<br ALIGN="LEFT"/>confirm_exit : bool<br ALIGN="LEFT"/>confirm_restart_kernel_action<br ALIGN="LEFT"/>copy_action<br ALIGN="LEFT"/>copy_raw_action<br ALIGN="LEFT"/>cut_action<br ALIGN="LEFT"/>decrease_font_size<br ALIGN="LEFT"/>edit_menu<br ALIGN="LEFT"/>export_action<br ALIGN="LEFT"/>file_menu<br ALIGN="LEFT"/>full_screen_act<br ALIGN="LEFT"/>guiref_active_frontend_action<br ALIGN="LEFT"/>help_menu<br ALIGN="LEFT"/>history_action<br ALIGN="LEFT"/>increase_font_size<br ALIGN="LEFT"/>interrupt_kernel_action<br ALIGN="LEFT"/>intro_active_frontend_action<br ALIGN="LEFT"/>kernel_menu<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>magic_helper<br ALIGN="LEFT"/>magic_menu<br ALIGN="LEFT"/>magic_menu_separator<br ALIGN="LEFT"/>maximizeAct<br ALIGN="LEFT"/>minimizeAct<br ALIGN="LEFT"/>new_frontend_factory : NoneType<br ALIGN="LEFT"/>new_kernel_tab_act<br ALIGN="LEFT"/>next_kernel_id<br ALIGN="LEFT"/>next_tab_act<br ALIGN="LEFT"/>onlineHelpAct<br ALIGN="LEFT"/>pager_menu<br ALIGN="LEFT"/>paste_action<br ALIGN="LEFT"/>prev_tab_act<br ALIGN="LEFT"/>print_action<br ALIGN="LEFT"/>quickref_active_frontend_action<br ALIGN="LEFT"/>quit_action<br ALIGN="LEFT"/>redo_action<br ALIGN="LEFT"/>reset_action<br ALIGN="LEFT"/>reset_font_size<br ALIGN="LEFT"/>restart_kernel_action<br ALIGN="LEFT"/>save_action<br ALIGN="LEFT"/>select_all_action<br ALIGN="LEFT"/>slave_frontend_factory : NoneType<br ALIGN="LEFT"/>slave_kernel_tab_act<br ALIGN="LEFT"/>tab_widget<br ALIGN="LEFT"/>toggle_menu_bar_act<br ALIGN="LEFT"/>undo_action<br ALIGN="LEFT"/>view_menu<br ALIGN="LEFT"/>who_action<br ALIGN="LEFT"/>who_ls_action<br ALIGN="LEFT"/>whos_action<br ALIGN="LEFT"/>window_menu<br ALIGN="LEFT"/>|add_menu_action(menu, action, defer_shortcut)<br ALIGN="LEFT"/>add_tab_with_frontend(frontend, name)<br ALIGN="LEFT"/>clear_magic_active_frontend()<br ALIGN="LEFT"/>closeEvent(event)<br ALIGN="LEFT"/>close_active_frontend()<br ALIGN="LEFT"/>close_tab(current_tab)<br ALIGN="LEFT"/>copy_active_frontend()<br ALIGN="LEFT"/>copy_raw_active_frontend()<br ALIGN="LEFT"/>create_tab_with_current_kernel()<br ALIGN="LEFT"/>create_tab_with_new_frontend()<br ALIGN="LEFT"/>cut_active_frontend()<br ALIGN="LEFT"/>decrease_font_size_active_frontend()<br ALIGN="LEFT"/>export_action_active_frontend()<br ALIGN="LEFT"/>find_master_tab(tab, as_list)<br ALIGN="LEFT"/>find_slave_widgets(tab)<br ALIGN="LEFT"/>guiref_active_frontend()<br ALIGN="LEFT"/>history_magic_active_frontend()<br ALIGN="LEFT"/>increase_font_size_active_frontend()<br ALIGN="LEFT"/>init_edit_menu()<br ALIGN="LEFT"/>init_file_menu()<br ALIGN="LEFT"/>init_help_menu()<br ALIGN="LEFT"/>init_kernel_menu()<br ALIGN="LEFT"/>init_magic_helper()<br ALIGN="LEFT"/>init_magic_menu()<br ALIGN="LEFT"/>init_menu_bar()<br ALIGN="LEFT"/>init_view_menu()<br ALIGN="LEFT"/>init_window_menu()<br ALIGN="LEFT"/>interrupt_kernel_active_frontend()<br ALIGN="LEFT"/>intro_active_frontend()<br ALIGN="LEFT"/>magic_helper_paste_requested(text)<br ALIGN="LEFT"/>magic_helper_run_requested(text)<br ALIGN="LEFT"/>magic_helper_update_requested()<br ALIGN="LEFT"/>make_frontend_visible(frontend)<br ALIGN="LEFT"/>next_tab()<br ALIGN="LEFT"/>paste_active_frontend()<br ALIGN="LEFT"/>prev_tab()<br ALIGN="LEFT"/>print_action_active_frontend()<br ALIGN="LEFT"/>quickref_active_frontend()<br ALIGN="LEFT"/>redo_active_frontend()<br ALIGN="LEFT"/>reset_font_size_active_frontend()<br ALIGN="LEFT"/>reset_magic_active_frontend()<br ALIGN="LEFT"/>restart_kernel_active_frontend()<br ALIGN="LEFT"/>save_magic_active_frontend()<br ALIGN="LEFT"/>select_all_active_frontend()<br ALIGN="LEFT"/>set_paging_active_frontend(paging)<br ALIGN="LEFT"/>toggleFullScreen()<br ALIGN="LEFT"/>toggleMaximized()<br ALIGN="LEFT"/>toggleMinimized()<br ALIGN="LEFT"/>toggle_confirm_restart_active_frontend()<br ALIGN="LEFT"/>toggle_menu_bar()<br ALIGN="LEFT"/>undo_active_frontend()<br ALIGN="LEFT"/>update_restart_checkbox()<br ALIGN="LEFT"/>update_tab_bar_visibility()<br ALIGN="LEFT"/>who_ls_magic_active_frontend()<br ALIGN="LEFT"/>who_magic_active_frontend()<br ALIGN="LEFT"/>whos_magic_active_frontend()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.MakePDF" [color="black", fontcolor="black", label=<{MakePDF|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.map.Map" [color="black", fontcolor="black", label=<{Map|<br ALIGN="LEFT"/>|concatenate(listOfPartitions)<br ALIGN="LEFT"/>getPartition(seq, p, q, n)<br ALIGN="LEFT"/>joinPartitions(listOfPartitions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.kernels.kernelmanager.MappingKernelManager" [color="black", fontcolor="black", label=<{MappingKernelManager|kernel_argv<br ALIGN="LEFT"/>root_dir<br ALIGN="LEFT"/>|cwd_for_path(path)<br ALIGN="LEFT"/>kernel_model(kernel_id)<br ALIGN="LEFT"/>list_kernels()<br ALIGN="LEFT"/>shutdown_kernel(kernel_id, now)<br ALIGN="LEFT"/>start_kernel(kernel_id, path, kernel_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.Markdown" [color="black", fontcolor="black", label=<{Markdown|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.markdown.MarkdownExporter" [color="black", fontcolor="black", label=<{MarkdownExporter|default_config<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.MarkdownFormatter" [color="black", fontcolor="black", label=<{MarkdownFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown_mistune.MarkdownWithMath" [color="black", fontcolor="black", label=<{MarkdownWithMath|<br ALIGN="LEFT"/>|output_block_math()<br ALIGN="LEFT"/>output_latex_environment()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.Math" [color="black", fontcolor="black", label=<{Math|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown_mistune.MathBlockGrammar" [color="black", fontcolor="black", label=<{MathBlockGrammar|block_math<br ALIGN="LEFT"/>latex_environment<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown_mistune.MathBlockLexer" [color="black", fontcolor="black", label=<{MathBlockLexer|default_rules<br ALIGN="LEFT"/>|parse_block_math(m)<br ALIGN="LEFT"/>parse_latex_environment(m)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown_mistune.MathInlineGrammar" [color="black", fontcolor="black", label=<{MathInlineGrammar|block_math<br ALIGN="LEFT"/>math<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown_mistune.MathInlineLexer" [color="black", fontcolor="black", label=<{MathInlineLexer|default_rules<br ALIGN="LEFT"/>|output_block_math(m)<br ALIGN="LEFT"/>output_math(m)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.session.Message" [color="black", fontcolor="black", label=<{Message|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.MetaClass" [color="black", fontcolor="black", label=<{MetaClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.MetaHasTraits" [color="black", fontcolor="black", label=<{MetaHasTraits|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.util.MetaQObjectHasTraits" [color="black", fontcolor="black", label=<{MetaQObjectHasTraits|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.client.Metadata" [color="black", fontcolor="black", label=<{Metadata|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.MimeBundle" [color="black", fontcolor="black", label=<{MimeBundle|data<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.magic_helper.MagicHelper.__init__.MinListWidget" [color="black", fontcolor="black", label=<{MinListWidget|<br ALIGN="LEFT"/>|sizeHint()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.test_misbehaving_object_without_trait_names.MisbehavingGetattr" [color="black", fontcolor="black", label=<{MisbehavingGetattr|<br ALIGN="LEFT"/>|<I>some_method</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_misc.MiscTests" [color="black", fontcolor="black", label=<{MiscTests|<br ALIGN="LEFT"/>|check_filename(path, exp_fname, exp_bname, exp_format)<br ALIGN="LEFT"/>test_parse_filename()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_completerlib.MockEvent" [color="black", fontcolor="black", label=<{MockEvent|line<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.contents.handlers.ModifyCheckpointsHandler" [color="black", fontcolor="black", label=<{ModifyCheckpointsHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|delete(path, checkpoint_id)<br ALIGN="LEFT"/>post(path, checkpoint_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.extensions.autoreload.ModuleReloader" [color="black", fontcolor="black", label=<{ModuleReloader|check_all : bool<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>failed : dict<br ALIGN="LEFT"/>modules : dict<br ALIGN="LEFT"/>modules_mtimes : dict<br ALIGN="LEFT"/>old_objects : dict<br ALIGN="LEFT"/>skip_modules : dict<br ALIGN="LEFT"/>|aimport_module(module_name)<br ALIGN="LEFT"/>check(check_all, do_reload)<br ALIGN="LEFT"/>filename_and_mtime(module)<br ALIGN="LEFT"/>mark_module_reloadable(module_name)<br ALIGN="LEFT"/>mark_module_skipped(module_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.mongodb.MongoDB" [color="black", fontcolor="black", label=<{MongoDB|connection_args<br ALIGN="LEFT"/>connection_kwargs<br ALIGN="LEFT"/>database<br ALIGN="LEFT"/>|add_record(msg_id, rec)<br ALIGN="LEFT"/>drop_matching_records(check)<br ALIGN="LEFT"/>drop_record(msg_id)<br ALIGN="LEFT"/>find_records(check, keys)<br ALIGN="LEFT"/>get_history()<br ALIGN="LEFT"/>get_record(msg_id)<br ALIGN="LEFT"/>update_record(msg_id, rec)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.multikernelmanager.MultiKernelManager" [color="black", fontcolor="black", label=<{MultiKernelManager|connection_dir<br ALIGN="LEFT"/>context<br ALIGN="LEFT"/>default_kernel_name<br ALIGN="LEFT"/>ipython_kernel_argv<br ALIGN="LEFT"/>kernel_manager_class<br ALIGN="LEFT"/>kernel_manager_factory<br ALIGN="LEFT"/>|<I>add_restart_callback</I>(kernel_id, callback, event)<br ALIGN="LEFT"/><I>cleanup</I>(kernel_id, connection_file)<br ALIGN="LEFT"/><I>connect_hb</I>(kernel_id, identity)<br ALIGN="LEFT"/><I>connect_iopub</I>(kernel_id, identity)<br ALIGN="LEFT"/><I>connect_shell</I>(kernel_id, identity)<br ALIGN="LEFT"/><I>connect_stdin</I>(kernel_id, identity)<br ALIGN="LEFT"/>finish_shutdown(kernel_id, waittime, pollinterval)<br ALIGN="LEFT"/><I>get_connection_info</I>(kernel_id)<br ALIGN="LEFT"/>get_kernel(kernel_id)<br ALIGN="LEFT"/>interrupt_kernel(kernel_id)<br ALIGN="LEFT"/><I>is_alive</I>(kernel_id)<br ALIGN="LEFT"/>list_kernel_ids()<br ALIGN="LEFT"/>remove_kernel(kernel_id)<br ALIGN="LEFT"/><I>remove_restart_callback</I>(kernel_id, callback, event)<br ALIGN="LEFT"/><I>request_shutdown</I>(kernel_id, restart)<br ALIGN="LEFT"/>restart_kernel(kernel_id, now)<br ALIGN="LEFT"/>shutdown_all(now)<br ALIGN="LEFT"/>shutdown_kernel(kernel_id, now, restart)<br ALIGN="LEFT"/>signal_kernel(kernel_id, signum)<br ALIGN="LEFT"/>start_kernel(kernel_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.MultiTupleTrait" [color="black", fontcolor="black", label=<{MultiTupleTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.configurable.MultipleInstanceError" [color="black", fontcolor="red", label=<{MultipleInstanceError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_application.MyApp" [color="black", fontcolor="black", label=<{MyApp|aliases<br ALIGN="LEFT"/>bar<br ALIGN="LEFT"/>classes<br ALIGN="LEFT"/>config_file<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>log : NoneType, RootLogger<br ALIGN="LEFT"/>log_datefmt : str<br ALIGN="LEFT"/>log_format : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>running<br ALIGN="LEFT"/>|init_bar()<br ALIGN="LEFT"/>init_foo()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.MyConfigurable" [color="black", fontcolor="black", label=<{MyConfigurable|a : Integer<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.MyDict" [color="black", fontcolor="black", label=<{MyDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_print_method_bound.MyHTML" [color="black", fontcolor="black", label=<{MyHTML|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.MyIntTT" [color="black", fontcolor="black", label=<{MyIntTT|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.MyList" [color="black", fontcolor="black", label=<{MyList|content<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.MyLoader1" [color="black", fontcolor="black", label=<{MyLoader1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.MyLoader2" [color="black", fontcolor="black", label=<{MyLoader2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.CellMagicTestCase.test_cell_magic_class.MyMagics" [color="black", fontcolor="black", label=<{MyMagics|<br ALIGN="LEFT"/>|cellm3(line, cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.CellMagicTestCase.test_cell_magic_class2.MyMagics2" [color="black", fontcolor="black", label=<{MyMagics2|<br ALIGN="LEFT"/>|cellm33(line, cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.MyObj" [color="black", fontcolor="black", label=<{MyObj|<br ALIGN="LEFT"/>|<I>somemethod</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.MyParent" [color="black", fontcolor="black", label=<{MyParent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.MyParent2" [color="black", fontcolor="black", label=<{MyParent2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_validate.MyTT" [color="black", fontcolor="black", label=<{MyTT|<br ALIGN="LEFT"/>|validate(inst, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_is_valid_for.MyTT" [color="black", fontcolor="black", label=<{MyTT|<br ALIGN="LEFT"/>|is_valid_for(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_value_for.MyTT" [color="black", fontcolor="black", label=<{MyTT|<br ALIGN="LEFT"/>|value_for(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.nbextensions.NBExtensionApp" [color="black", fontcolor="black", label=<{NBExtensionApp|aliases : dict<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>destination<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>nbextensions_dir<br ALIGN="LEFT"/>overwrite<br ALIGN="LEFT"/>prefix<br ALIGN="LEFT"/>symlink<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>verbose<br ALIGN="LEFT"/>|install_extensions()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.current.NBFormatError" [color="black", fontcolor="red", label=<{NBFormatError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.NBFormatError" [color="black", fontcolor="red", label=<{NBFormatError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.formattest.NBFormatTest" [color="black", fontcolor="black", label=<{NBFormatTest|ext : NoneType<br ALIGN="LEFT"/>mod : NoneType<br ALIGN="LEFT"/>nb0_ref : NoneType<br ALIGN="LEFT"/>wd<br ALIGN="LEFT"/>|assertNBEquals(nba, nbb)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_read_file()<br ALIGN="LEFT"/>test_reads()<br ALIGN="LEFT"/>test_roundtrip()<br ALIGN="LEFT"/>test_write_file()<br ALIGN="LEFT"/>test_writes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.tests.formattest.NBFormatTest" [color="black", fontcolor="black", label=<{NBFormatTest|ext : NoneType<br ALIGN="LEFT"/>mod : NoneType<br ALIGN="LEFT"/>nb0_ref : NoneType<br ALIGN="LEFT"/>wd<br ALIGN="LEFT"/>|assertNBEquals(nba, nbb)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_read_file()<br ALIGN="LEFT"/>test_reads()<br ALIGN="LEFT"/>test_roundtrip()<br ALIGN="LEFT"/>test_write_file()<br ALIGN="LEFT"/>test_writes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tempdir.NamedFileInTemporaryDirectory" [color="black", fontcolor="black", label=<{NamedFileInTemporaryDirectory|file<br ALIGN="LEFT"/>|cleanup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.util.Namespace" [color="black", fontcolor="black", label=<{Namespace|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.namespace.NamespaceMagics" [color="black", fontcolor="black", label=<{NamespaceMagics|<br ALIGN="LEFT"/>|pdef(parameter_s, namespaces)<br ALIGN="LEFT"/>pdoc(parameter_s, namespaces)<br ALIGN="LEFT"/>pfile(parameter_s, namespaces)<br ALIGN="LEFT"/>pinfo(parameter_s, namespaces)<br ALIGN="LEFT"/>pinfo2(parameter_s, namespaces)<br ALIGN="LEFT"/>psearch(parameter_s)<br ALIGN="LEFT"/>psource(parameter_s, namespaces)<br ALIGN="LEFT"/>reset(parameter_s)<br ALIGN="LEFT"/>reset_selective(parameter_s)<br ALIGN="LEFT"/>who(parameter_s)<br ALIGN="LEFT"/>who_ls(parameter_s)<br ALIGN="LEFT"/>whos(parameter_s)<br ALIGN="LEFT"/>xdel(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.nbconvertapp.NbConvertApp" [color="black", fontcolor="black", label=<{NbConvertApp|aliases : dict<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>examples<br ALIGN="LEFT"/>export_format<br ALIGN="LEFT"/>exporter<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>notebooks<br ALIGN="LEFT"/>output_base<br ALIGN="LEFT"/>postprocessor<br ALIGN="LEFT"/>postprocessor_aliases : dict<br ALIGN="LEFT"/>postprocessor_class<br ALIGN="LEFT"/>postprocessor_factory<br ALIGN="LEFT"/>use_output_suffix<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>writer_aliases : dict<br ALIGN="LEFT"/>writer_class<br ALIGN="LEFT"/>writer_factory<br ALIGN="LEFT"/>|convert_notebooks()<br ALIGN="LEFT"/>convert_single_notebook(notebook_filename)<br ALIGN="LEFT"/>export_single_notebook(notebook_filename, resources)<br ALIGN="LEFT"/>init_notebooks()<br ALIGN="LEFT"/>init_postprocessor()<br ALIGN="LEFT"/>init_single_notebook_resources(notebook_filename)<br ALIGN="LEFT"/>init_syspath()<br ALIGN="LEFT"/>init_writer()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>postprocess_single_notebook(write_results)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>write_single_notebook(output, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.utils.base.NbConvertBase" [color="black", fontcolor="black", label=<{NbConvertBase|default_language<br ALIGN="LEFT"/>display_data_priority<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.nbconvert.tests.test_nbconvert_handlers.NbconvertAPI" [color="black", fontcolor="black", label=<{NbconvertAPI|base_url<br ALIGN="LEFT"/>|from_file(format, path, name, download)<br ALIGN="LEFT"/>from_post(format, nbmodel)<br ALIGN="LEFT"/>list_formats()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.nbconvert.tests.test_nbconvert_api.NbconvertAPI" [color="black", fontcolor="black", label=<{NbconvertAPI|base_url<br ALIGN="LEFT"/>|list_formats()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.nbconvert.handlers.NbconvertFileHandler" [color="black", fontcolor="black", label=<{NbconvertFileHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|get(format, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.nbconvert.handlers.NbconvertPostHandler" [color="black", fontcolor="black", label=<{NbconvertPostHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|post(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.nbconvert.handlers.NbconvertRootHandler" [color="black", fontcolor="black", label=<{NbconvertRootHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.notebookapp.NbserverListApp" [color="black", fontcolor="black", label=<{NbserverListApp|description : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>json<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.Negator" [color="black", fontcolor="black", label=<{Negator|<br ALIGN="LEFT"/>|visit_Num(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.coloransi.NoColors" [color="black", fontcolor="black", label=<{NoColors|NoColor : str<br ALIGN="LEFT"/>Normal : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.dictdb.NoDB" [color="black", fontcolor="black", label=<{NoDB|<br ALIGN="LEFT"/>|<I>add_record</I>(msg_id, record)<br ALIGN="LEFT"/><I>drop_matching_records</I>(check)<br ALIGN="LEFT"/><I>drop_record</I>(msg_id)<br ALIGN="LEFT"/>find_records(check, keys)<br ALIGN="LEFT"/>get_history()<br ALIGN="LEFT"/>get_record(msg_id)<br ALIGN="LEFT"/><I>update_record</I>(msg_id, record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.dictdb.NoData" [color="black", fontcolor="red", label=<{NoData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.NoDefaultSpecified" [color="black", fontcolor="black", label=<{NoDefaultSpecified|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.NoEnginesRegistered" [color="black", fontcolor="red", label=<{NoEnginesRegistered|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.localinterfaces.NoIPAddresses" [color="black", fontcolor="red", label=<{NoIPAddresses|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase" [color="black", fontcolor="black", label=<{NoInputEncodingTestCase|old_stdin : StringIO, TextIOWrapper<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.NoModule" [color="black", fontcolor="black", label=<{NoModule|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.interactiveshell.NoOpContext" [color="black", fontcolor="black", label=<{NoOpContext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.kernelspec.NoSuchKernel" [color="black", fontcolor="red", label=<{NoSuchKernel|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.markdown.NodeJSMissing" [color="black", fontcolor="red", label=<{NodeJSMissing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_ultratb.NonAsciiTest" [color="black", fontcolor="black", label=<{NonAsciiTest|<br ALIGN="LEFT"/>|test_iso8859_5()<br ALIGN="LEFT"/>test_nonascii_path()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.NoneInstanceListTrait" [color="black", fontcolor="black", label=<{NoneInstanceListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.reader.NotJSONError" [color="black", fontcolor="red", label=<{NotJSONError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_ipython_display_formatter.NotSelfDisplaying" [color="black", fontcolor="black", label=<{NotSelfDisplaying|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.notebookapp.NotebookApp" [color="black", fontcolor="black", label=<{NotebookApp|aliases : dict<br ALIGN="LEFT"/>allow_credentials<br ALIGN="LEFT"/>allow_origin<br ALIGN="LEFT"/>allow_origin_pat<br ALIGN="LEFT"/>auto_create<br ALIGN="LEFT"/>base_project_url<br ALIGN="LEFT"/>base_url<br ALIGN="LEFT"/>browser<br ALIGN="LEFT"/>certfile<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>cluster_manager<br ALIGN="LEFT"/>cluster_manager_class<br ALIGN="LEFT"/>config_manager<br ALIGN="LEFT"/>config_manager_class<br ALIGN="LEFT"/>connection_url<br ALIGN="LEFT"/>contents_manager<br ALIGN="LEFT"/>contents_manager_class<br ALIGN="LEFT"/>cookie_secret<br ALIGN="LEFT"/>cookie_secret_file<br ALIGN="LEFT"/>default_url<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>display_url<br ALIGN="LEFT"/>enable_mathjax<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>extra_nbextensions_path<br ALIGN="LEFT"/>extra_static_paths<br ALIGN="LEFT"/>extra_template_paths<br ALIGN="LEFT"/>file_to_run<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>http_server : HTTPServer<br ALIGN="LEFT"/>info_file<br ALIGN="LEFT"/>io_loop<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>ipython_kernel_argv<br ALIGN="LEFT"/>jinja_environment_options<br ALIGN="LEFT"/>kernel_manager<br ALIGN="LEFT"/>kernel_manager_class<br ALIGN="LEFT"/>kernel_spec_manager<br ALIGN="LEFT"/>kernel_spec_manager_class<br ALIGN="LEFT"/>keyfile<br ALIGN="LEFT"/>login_handler_class<br ALIGN="LEFT"/>logout_handler_class<br ALIGN="LEFT"/>mathjax_url<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>nbextensions_path<br ALIGN="LEFT"/>notebook_dir<br ALIGN="LEFT"/>open_browser<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>port : Integer<br ALIGN="LEFT"/>port_retries : Integer<br ALIGN="LEFT"/>pylab<br ALIGN="LEFT"/>reraise_server_extension_failures<br ALIGN="LEFT"/>server_extensions<br ALIGN="LEFT"/>session_manager<br ALIGN="LEFT"/>session_manager_class<br ALIGN="LEFT"/>ssl_options<br ALIGN="LEFT"/>static_file_path<br ALIGN="LEFT"/>subcommands : dict<br ALIGN="LEFT"/>template_file_path<br ALIGN="LEFT"/>tornado_settings<br ALIGN="LEFT"/>trust_xheaders<br ALIGN="LEFT"/>web_app<br ALIGN="LEFT"/>webapp_settings<br ALIGN="LEFT"/>websocket_url<br ALIGN="LEFT"/>|cleanup_kernels()<br ALIGN="LEFT"/>init_components()<br ALIGN="LEFT"/>init_configurables()<br ALIGN="LEFT"/>init_kernel_argv()<br ALIGN="LEFT"/>init_logging()<br ALIGN="LEFT"/>init_server_extensions()<br ALIGN="LEFT"/>init_signal()<br ALIGN="LEFT"/>init_terminals()<br ALIGN="LEFT"/>init_webapp()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>notebook_info()<br ALIGN="LEFT"/>parse_command_line(argv)<br ALIGN="LEFT"/>remove_server_info_file()<br ALIGN="LEFT"/>server_info()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>write_server_info_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.NotebookExportMagicTests" [color="black", fontcolor="black", label=<{NotebookExportMagicTests|<br ALIGN="LEFT"/>|test_notebook_export_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.notebook.NotebookExporter" [color="black", fontcolor="black", label=<{NotebookExporter|nbformat_version<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>|from_notebook_node(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.notebook.handlers.NotebookHandler" [color="black", fontcolor="black", label=<{NotebookHandler|<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.notebooknode.NotebookNode" [color="black", fontcolor="black", label=<{NotebookNode|data<br ALIGN="LEFT"/>language_info : dict<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>text : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v1.nbbase.NotebookNode" [color="black", fontcolor="black", label=<{NotebookNode|cell_type : str<br ALIGN="LEFT"/>cells : list<br ALIGN="LEFT"/>code : str<br ALIGN="LEFT"/>prompt_number : int<br ALIGN="LEFT"/>text : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbbase.NotebookNode" [color="black", fontcolor="black", label=<{NotebookNode|affiliation : str<br ALIGN="LEFT"/>authors : list<br ALIGN="LEFT"/>cell_type : str<br ALIGN="LEFT"/>cells : list<br ALIGN="LEFT"/>collapsed : bool<br ALIGN="LEFT"/>created : str<br ALIGN="LEFT"/>email : str<br ALIGN="LEFT"/>etype : str<br ALIGN="LEFT"/>evalue : str<br ALIGN="LEFT"/>gistid : str<br ALIGN="LEFT"/>html : str<br ALIGN="LEFT"/>input : str<br ALIGN="LEFT"/>javascript : str<br ALIGN="LEFT"/>jpeg : bytes<br ALIGN="LEFT"/>json : str<br ALIGN="LEFT"/>language : str<br ALIGN="LEFT"/>latex : str<br ALIGN="LEFT"/>license : str<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>modified : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>nbformat : int<br ALIGN="LEFT"/>output_type : str<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>png : bytes<br ALIGN="LEFT"/>prompt_number : int<br ALIGN="LEFT"/>rendered : str<br ALIGN="LEFT"/>source : str<br ALIGN="LEFT"/>svg : str<br ALIGN="LEFT"/>text : str<br ALIGN="LEFT"/>traceback<br ALIGN="LEFT"/>url : str<br ALIGN="LEFT"/>worksheets : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" [color="black", fontcolor="black", label=<{NotebookNode|affiliation<br ALIGN="LEFT"/>authors : list<br ALIGN="LEFT"/>cell_type : str<br ALIGN="LEFT"/>cells : list<br ALIGN="LEFT"/>collapsed : bool<br ALIGN="LEFT"/>created<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>ename<br ALIGN="LEFT"/>evalue<br ALIGN="LEFT"/>gistid<br ALIGN="LEFT"/>html<br ALIGN="LEFT"/>input<br ALIGN="LEFT"/>javascript<br ALIGN="LEFT"/>jpeg<br ALIGN="LEFT"/>json<br ALIGN="LEFT"/>language : str<br ALIGN="LEFT"/>latex<br ALIGN="LEFT"/>level : int<br ALIGN="LEFT"/>license<br ALIGN="LEFT"/>metadata : NoneType, dict<br ALIGN="LEFT"/>modified<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>nbformat : int<br ALIGN="LEFT"/>nbformat_minor : int<br ALIGN="LEFT"/>orig_nbformat : int<br ALIGN="LEFT"/>orig_nbformat_minor : int<br ALIGN="LEFT"/>output_type : str<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>png<br ALIGN="LEFT"/>prompt_number : int<br ALIGN="LEFT"/>source<br ALIGN="LEFT"/>stream : NoneType, str<br ALIGN="LEFT"/>svg<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>traceback<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>worksheets : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.sign.NotebookNotary" [color="black", fontcolor="black", label=<{NotebookNotary|algorithm<br ALIGN="LEFT"/>cache_size : Integer<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>db_file<br ALIGN="LEFT"/>digestmod<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>secret<br ALIGN="LEFT"/>secret_file<br ALIGN="LEFT"/>|check_cells(nb)<br ALIGN="LEFT"/>check_signature(nb)<br ALIGN="LEFT"/>compute_signature(nb)<br ALIGN="LEFT"/>cull_db()<br ALIGN="LEFT"/>init_db(db)<br ALIGN="LEFT"/>mark_cells(nb, trusted)<br ALIGN="LEFT"/>sign(nb)<br ALIGN="LEFT"/>store_signature(signature, nb)<br ALIGN="LEFT"/>unsign(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v1.rwbase.NotebookReader" [color="black", fontcolor="black", label=<{NotebookReader|<br ALIGN="LEFT"/>|read(fp)<br ALIGN="LEFT"/><I>reads</I>(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.rwbase.NotebookReader" [color="black", fontcolor="black", label=<{NotebookReader|<br ALIGN="LEFT"/>|read(fp)<br ALIGN="LEFT"/><I>reads</I>(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.rwbase.NotebookReader" [color="black", fontcolor="black", label=<{NotebookReader|<br ALIGN="LEFT"/>|read(fp)<br ALIGN="LEFT"/><I>reads</I>(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.rwbase.NotebookReader" [color="black", fontcolor="black", label=<{NotebookReader|<br ALIGN="LEFT"/>|read(fp)<br ALIGN="LEFT"/><I>reads</I>(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.tests.launchnotebook.NotebookTestBase" [color="black", fontcolor="black", label=<{NotebookTestBase|config : NoneType<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>|base_url()<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>wait_until_alive()<br ALIGN="LEFT"/>wait_until_dead()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.notebookapp.NotebookWebApplication" [color="black", fontcolor="black", label=<{NotebookWebApplication|<br ALIGN="LEFT"/>|init_handlers(settings)<br ALIGN="LEFT"/>init_settings(ipython_app, kernel_manager, contents_manager, cluster_manager, session_manager, kernel_spec_manager, config_manager, log, base_url, default_url, settings_overrides, jinja_env_options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v1.rwbase.NotebookWriter" [color="black", fontcolor="black", label=<{NotebookWriter|<br ALIGN="LEFT"/>|write(nb, fp)<br ALIGN="LEFT"/><I>writes</I>(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.rwbase.NotebookWriter" [color="black", fontcolor="black", label=<{NotebookWriter|<br ALIGN="LEFT"/>|write(nb, fp)<br ALIGN="LEFT"/><I>writes</I>(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.rwbase.NotebookWriter" [color="black", fontcolor="black", label=<{NotebookWriter|<br ALIGN="LEFT"/>|write(nb, fp)<br ALIGN="LEFT"/><I>writes</I>(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.rwbase.NotebookWriter" [color="black", fontcolor="black", label=<{NotebookWriter|<br ALIGN="LEFT"/>|write(nb, fp)<br ALIGN="LEFT"/><I>writes</I>(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.handlers.NotebooksRedirectHandler" [color="black", fontcolor="black", label=<{NotebooksRedirectHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>delete<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>post<br ALIGN="LEFT"/>put<br ALIGN="LEFT"/>|get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.NullInputHook" [color="black", fontcolor="black", label=<{NullInputHook|<br ALIGN="LEFT"/>|<I>enable</I>(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.osm.OSMagics" [color="black", fontcolor="black", label=<{OSMagics|bang<br ALIGN="LEFT"/>system<br ALIGN="LEFT"/>|alias(parameter_s)<br ALIGN="LEFT"/>bookmark(parameter_s)<br ALIGN="LEFT"/>cd(parameter_s)<br ALIGN="LEFT"/>dhist(parameter_s)<br ALIGN="LEFT"/>dirs(parameter_s)<br ALIGN="LEFT"/>env(parameter_s)<br ALIGN="LEFT"/>popd(parameter_s)<br ALIGN="LEFT"/>pushd(parameter_s)<br ALIGN="LEFT"/>pwd(parameter_s)<br ALIGN="LEFT"/>pycat(parameter_s)<br ALIGN="LEFT"/>rehashx(parameter_s)<br ALIGN="LEFT"/>sc(parameter_s)<br ALIGN="LEFT"/>set_env(parameter_s)<br ALIGN="LEFT"/>sx(line, cell)<br ALIGN="LEFT"/>unalias(parameter_s)<br ALIGN="LEFT"/>writefile(line, cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.ObjectName" [color="black", fontcolor="black", label=<{ObjectName|coerce_str : staticmethod<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.ObjectNameTrait" [color="black", fontcolor="black", label=<{ObjectNameTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_hooks.Okay" [color="black", fontcolor="black", label=<{Okay|called : bool<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.OldStyle" [color="black", fontcolor="black", label=<{OldStyle|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.OrTrait" [color="black", fontcolor="black", label=<{OrTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.OrTraitTest" [color="black", fontcolor="black", label=<{OrTraitTest|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.iostream.OutStream" [color="black", fontcolor="black", label=<{OutStream|closed<br ALIGN="LEFT"/>encoding : str<br ALIGN="LEFT"/>flush_interval : float<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>next<br ALIGN="LEFT"/>parent_header : dict<br ALIGN="LEFT"/>pub_socket : NoneType<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>topic : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>isatty()<br ALIGN="LEFT"/>read(size)<br ALIGN="LEFT"/>readline(size)<br ALIGN="LEFT"/>set_parent(parent)<br ALIGN="LEFT"/>write(string)<br ALIGN="LEFT"/>writelines(sequence)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_output.Output" [color="black", fontcolor="black", label=<{Output|<br ALIGN="LEFT"/>|clear_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.PBSControllerLauncher" [color="black", fontcolor="black", label=<{PBSControllerLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.PBSEngineSetLauncher" [color="black", fontcolor="black", label=<{PBSEngineSetLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.PBSLauncher" [color="black", fontcolor="black", label=<{PBSLauncher|batch_file<br ALIGN="LEFT"/>delete_command<br ALIGN="LEFT"/>job_array_regexp<br ALIGN="LEFT"/>job_array_template<br ALIGN="LEFT"/>job_id_regexp<br ALIGN="LEFT"/>queue_regexp<br ALIGN="LEFT"/>queue_template<br ALIGN="LEFT"/>submit_command<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.pdf.PDFExporter" [color="black", fontcolor="black", label=<{PDFExporter|bib_command<br ALIGN="LEFT"/>latex_command<br ALIGN="LEFT"/>latex_count : Integer<br ALIGN="LEFT"/>temp_file_exts<br ALIGN="LEFT"/>verbose<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>|clean_temp_files(filename)<br ALIGN="LEFT"/>from_notebook_node(nb, resources)<br ALIGN="LEFT"/>run_bib(filename)<br ALIGN="LEFT"/>run_command(command_list, filename, count, log_function)<br ALIGN="LEFT"/>run_latex(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.PDFFormatter" [color="black", fontcolor="black", label=<{PDFFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.baseapp.PIDFileError" [color="black", fontcolor="red", label=<{PIDFileError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.formatters.PNGFormatter" [color="black", fontcolor="black", label=<{PNGFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._process_win32_controller.PROCESS_INFORMATION" [color="black", fontcolor="black", label=<{PROCESS_INFORMATION|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.utils.pandoc.PandocMissing" [color="black", fontcolor="red", label=<{PandocMissing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.baseapp.ParallelCrashHandler" [color="black", fontcolor="black", label=<{ParallelCrashHandler|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.remotefunction.ParallelFunction" [color="black", fontcolor="black", label=<{ParallelFunction|chunksize : NoneType<br ALIGN="LEFT"/>mapObject : NoneType<br ALIGN="LEFT"/>ordered : NoneType<br ALIGN="LEFT"/>|map()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.magics.ParallelMagics" [color="black", fontcolor="black", label=<{ParallelMagics|last_result : NoneType<br ALIGN="LEFT"/>magics : NoneType<br ALIGN="LEFT"/>registered : bool<br ALIGN="LEFT"/>suffix : str<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>view : NoneType<br ALIGN="LEFT"/>|autopx(line)<br ALIGN="LEFT"/>cell_px(line, cell)<br ALIGN="LEFT"/>parallel_execute(cell, block, groupby, save_name)<br ALIGN="LEFT"/>px(line)<br ALIGN="LEFT"/>pxconfig(line)<br ALIGN="LEFT"/>pxrun_cell(raw_cell, store_history, silent)<br ALIGN="LEFT"/>result(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.signatures.Parameter" [color="black", fontcolor="black", label=<{Parameter|KEYWORD_ONLY<br ALIGN="LEFT"/>POSITIONAL_ONLY<br ALIGN="LEFT"/>POSITIONAL_OR_KEYWORD<br ALIGN="LEFT"/>VAR_KEYWORD<br ALIGN="LEFT"/>VAR_POSITIONAL<br ALIGN="LEFT"/>annotation<br ALIGN="LEFT"/>default<br ALIGN="LEFT"/>empty<br ALIGN="LEFT"/>kind<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|replace(name, kind, annotation, default, _partial_kwarg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.parentpoller.ParentPollerUnix" [color="black", fontcolor="black", label=<{ParentPollerUnix|daemon : bool<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.parentpoller.ParentPollerWindows" [color="black", fontcolor="black", label=<{ParentPollerWindows|daemon : bool<br ALIGN="LEFT"/>interrupt_handle : NoneType<br ALIGN="LEFT"/>parent_handle : NoneType<br ALIGN="LEFT"/>|create_interrupt_event()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>send_interrupt(interrupt_handle)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.PyColorize.Parser" [color="black", fontcolor="black", label=<{Parser|color_table<br ALIGN="LEFT"/>colors<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>out : StringIO, TextIOWrapper<br ALIGN="LEFT"/>pos : int<br ALIGN="LEFT"/>raw<br ALIGN="LEFT"/>|format(raw, out, scheme)<br ALIGN="LEFT"/>format2(raw, out, scheme)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic_terminal.PasteTestCase" [color="black", fontcolor="black", label=<{PasteTestCase|original_clip<br ALIGN="LEFT"/>|paste(txt, flags)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_paste()<br ALIGN="LEFT"/>test_paste_echo()<br ALIGN="LEFT"/>test_paste_email()<br ALIGN="LEFT"/>test_paste_email2()<br ALIGN="LEFT"/>test_paste_email_py()<br ALIGN="LEFT"/>test_paste_leading_commas()<br ALIGN="LEFT"/>test_paste_py_multi()<br ALIGN="LEFT"/>test_paste_py_multi_r()<br ALIGN="LEFT"/>test_paste_pyprompt()<br ALIGN="LEFT"/>test_paste_trailing_question()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.payload.PayloadManager" [color="black", fontcolor="black", label=<{PayloadManager|<br ALIGN="LEFT"/>|clear_payload()<br ALIGN="LEFT"/>read_payload()<br ALIGN="LEFT"/>write_payload(data, single)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.debugger.Pdb" [color="black", fontcolor="black", label=<{Pdb|aliases : dict<br ALIGN="LEFT"/>botframe<br ALIGN="LEFT"/>checkline<br ALIGN="LEFT"/>color_scheme_table<br ALIGN="LEFT"/>curframe : NoneType<br ALIGN="LEFT"/>do_d<br ALIGN="LEFT"/>do_down<br ALIGN="LEFT"/>do_frame<br ALIGN="LEFT"/>do_l<br ALIGN="LEFT"/>do_list<br ALIGN="LEFT"/>do_q<br ALIGN="LEFT"/>do_quit<br ALIGN="LEFT"/>do_restart<br ALIGN="LEFT"/>do_u<br ALIGN="LEFT"/>do_up<br ALIGN="LEFT"/>is_pydb : bool<br ALIGN="LEFT"/>lastcmd : str<br ALIGN="LEFT"/>lineno<br ALIGN="LEFT"/>mainpyfile : NoneType<br ALIGN="LEFT"/>old_all_completions<br ALIGN="LEFT"/>parser<br ALIGN="LEFT"/>prompt : str<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>|checkline(filename, lineno)<br ALIGN="LEFT"/>do_list(arg)<br ALIGN="LEFT"/>do_pdef(arg)<br ALIGN="LEFT"/>do_pdoc(arg)<br ALIGN="LEFT"/>do_pfile(arg)<br ALIGN="LEFT"/>do_pinfo(arg)<br ALIGN="LEFT"/>do_pinfo2(arg)<br ALIGN="LEFT"/>do_psource(arg)<br ALIGN="LEFT"/>format_stack_entry(frame_lineno, lprefix, context)<br ALIGN="LEFT"/>interaction(frame, traceback)<br ALIGN="LEFT"/>list_command_pydb(arg)<br ALIGN="LEFT"/>new_do_down(arg)<br ALIGN="LEFT"/>new_do_frame(arg)<br ALIGN="LEFT"/>new_do_quit(arg)<br ALIGN="LEFT"/>new_do_restart(arg)<br ALIGN="LEFT"/>new_do_up(arg)<br ALIGN="LEFT"/>postloop()<br ALIGN="LEFT"/>print_list_lines(filename, first, last)<br ALIGN="LEFT"/>print_stack_entry(frame_lineno, prompt_prefix, context)<br ALIGN="LEFT"/>print_stack_trace()<br ALIGN="LEFT"/>set_colors(scheme)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_debugger.PdbTestInput" [color="black", fontcolor="black", label=<{PdbTestInput|input<br ALIGN="LEFT"/>real_stdin : StringIO, TextIOWrapper<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.pickleshare.PickleShareDB" [color="black", fontcolor="black", label=<{PickleShareDB|cache : dict<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|getlink(folder)<br ALIGN="LEFT"/>hcompress(hashroot)<br ALIGN="LEFT"/>hdict(hashroot)<br ALIGN="LEFT"/>hget(hashroot, key, default, fast_only)<br ALIGN="LEFT"/>hset(hashroot, key, value)<br ALIGN="LEFT"/>keys(globpat)<br ALIGN="LEFT"/>uncache()<br ALIGN="LEFT"/>waitget(key, maxwaittime)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_pickleshare.PickleShareDBTestCase" [color="black", fontcolor="black", label=<{PickleShareDBTestCase|tempdir : TemporaryDirectory<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_picklesharedb()<br ALIGN="LEFT"/>test_stress()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleshare.PickleShareLink" [color="black", fontcolor="black", label=<{PickleShareLink|bar : int<br ALIGN="LEFT"/>foo : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.Pickleable" [color="black", fontcolor="black", label=<{Pickleable|i<br ALIGN="LEFT"/>j<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_exporter.PizzaPreprocessor" [color="black", fontcolor="black", label=<{PizzaPreprocessor|<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.PlainTextFormatter" [color="black", fontcolor="black", label=<{PlainTextFormatter|enabled<br ALIGN="LEFT"/>float_format<br ALIGN="LEFT"/>float_precision<br ALIGN="LEFT"/>format_type<br ALIGN="LEFT"/>max_seq_length : Integer<br ALIGN="LEFT"/>max_width : Integer<br ALIGN="LEFT"/>newline<br ALIGN="LEFT"/>pprint<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>verbose<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.postprocessors.base.PostProcessorBase" [color="black", fontcolor="black", label=<{PostProcessorBase|<br ALIGN="LEFT"/>|<I>postprocess</I>(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.PrefilterChecker" [color="black", fontcolor="black", label=<{PrefilterChecker|enabled<br ALIGN="LEFT"/>prefilter_manager<br ALIGN="LEFT"/>priority : Integer<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.PrefilterError" [color="black", fontcolor="red", label=<{PrefilterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.prefilter.PrefilterHandler" [color="black", fontcolor="black", label=<{PrefilterHandler|esc_strings<br ALIGN="LEFT"/>handler_name<br ALIGN="LEFT"/>prefilter_manager<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|handle(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.PrefilterManager" [color="black", fontcolor="black", label=<{PrefilterManager|checkers<br ALIGN="LEFT"/>handlers<br ALIGN="LEFT"/>multi_line_specials<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>transformers<br ALIGN="LEFT"/>|find_handler(line_info)<br ALIGN="LEFT"/>get_handler_by_esc(esc_str)<br ALIGN="LEFT"/>get_handler_by_name(name)<br ALIGN="LEFT"/>init_checkers()<br ALIGN="LEFT"/>init_handlers()<br ALIGN="LEFT"/>init_transformers()<br ALIGN="LEFT"/>prefilter_line(line, continue_prompt)<br ALIGN="LEFT"/>prefilter_line_info(line_info)<br ALIGN="LEFT"/>prefilter_lines(lines, continue_prompt)<br ALIGN="LEFT"/>register_checker(checker)<br ALIGN="LEFT"/>register_handler(name, handler, esc_strings)<br ALIGN="LEFT"/>register_transformer(transformer)<br ALIGN="LEFT"/>sort_checkers()<br ALIGN="LEFT"/>sort_transformers()<br ALIGN="LEFT"/>transform_line(line, continue_prompt)<br ALIGN="LEFT"/>unregister_checker(checker)<br ALIGN="LEFT"/>unregister_handler(name, handler, esc_strings)<br ALIGN="LEFT"/>unregister_transformer(transformer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prefilter.PrefilterTransformer" [color="black", fontcolor="black", label=<{PrefilterTransformer|enabled<br ALIGN="LEFT"/>prefilter_manager<br ALIGN="LEFT"/>priority : Integer<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|transform(line, continue_prompt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.base.Preprocessor" [color="black", fontcolor="black", label=<{Preprocessor|enabled<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/><I>preprocess_cell</I>(cell, resources, index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [color="black", fontcolor="black", label=<{PreprocessorTestsBase|<br ALIGN="LEFT"/>|build_notebook()<br ALIGN="LEFT"/>build_resources()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.Pretty" [color="black", fontcolor="black", label=<{Pretty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.pretty.PrettyPrinter" [color="black", fontcolor="black", label=<{PrettyPrinter|buffer : deque<br ALIGN="LEFT"/>buffer_width : int<br ALIGN="LEFT"/>group_queue<br ALIGN="LEFT"/>group_stack : list<br ALIGN="LEFT"/>indentation : int<br ALIGN="LEFT"/>max_seq_length : int<br ALIGN="LEFT"/>max_width : int<br ALIGN="LEFT"/>newline : str<br ALIGN="LEFT"/>output<br ALIGN="LEFT"/>output_width : int<br ALIGN="LEFT"/>|begin_group(indent, open)<br ALIGN="LEFT"/>break_()<br ALIGN="LEFT"/>breakable(sep)<br ALIGN="LEFT"/>end_group(dedent, close)<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>text(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.pretty.Printable" [color="black", fontcolor="black", label=<{Printable|<br ALIGN="LEFT"/>|output(stream, output_width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils._process_posix.ProcessHandler" [color="black", fontcolor="black", label=<{ProcessHandler|logfile : NoneType<br ALIGN="LEFT"/>read_timeout : float<br ALIGN="LEFT"/>sh<br ALIGN="LEFT"/>terminate_timeout : float<br ALIGN="LEFT"/>|getoutput(cmd)<br ALIGN="LEFT"/>getoutput_pexpect(cmd)<br ALIGN="LEFT"/>system(cmd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.ProcessStateError" [color="black", fontcolor="red", label=<{ProcessStateError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.profileapp.ProfileApp" [color="black", fontcolor="black", label=<{ProfileApp|description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subcommands<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.profileapp.ProfileCreate" [color="black", fontcolor="black", label=<{ProfileCreate|auto_create<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parallel<br ALIGN="LEFT"/>profile<br ALIGN="LEFT"/>|init_config_files()<br ALIGN="LEFT"/>parse_command_line(argv)<br ALIGN="LEFT"/><I>stage_default_config_file</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.profiledir.ProfileDir" [color="black", fontcolor="black", label=<{ProfileDir|location<br ALIGN="LEFT"/>log_dir<br ALIGN="LEFT"/>log_dir_name<br ALIGN="LEFT"/>pid_dir<br ALIGN="LEFT"/>pid_dir_name<br ALIGN="LEFT"/>security_dir<br ALIGN="LEFT"/>security_dir_name<br ALIGN="LEFT"/>startup_dir<br ALIGN="LEFT"/>startup_dir_name<br ALIGN="LEFT"/>static_dir<br ALIGN="LEFT"/>static_dir_name<br ALIGN="LEFT"/>|check_dirs()<br ALIGN="LEFT"/>check_log_dir()<br ALIGN="LEFT"/>check_pid_dir()<br ALIGN="LEFT"/>check_security_dir()<br ALIGN="LEFT"/>check_startup_dir()<br ALIGN="LEFT"/>check_static_dir()<br ALIGN="LEFT"/>copy_config_file(config_file, path, overwrite)<br ALIGN="LEFT"/>create_profile_dir(profile_dir, config)<br ALIGN="LEFT"/>create_profile_dir_by_name(path, name, config)<br ALIGN="LEFT"/>find_profile_dir(profile_dir, config)<br ALIGN="LEFT"/>find_profile_dir_by_name(ipython_dir, name, config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.profiledir.ProfileDirError" [color="black", fontcolor="red", label=<{ProfileDirError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.profileapp.ProfileList" [color="black", fontcolor="black", label=<{ProfileList|aliases<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>ipython_dir<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|list_profile_dirs()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.profileapp.ProfileLocate" [color="black", fontcolor="black", label=<{ProfileLocate|description : str<br ALIGN="LEFT"/>profile<br ALIGN="LEFT"/>|parse_command_line(argv)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_profile.ProfileStartupTest" [color="black", fontcolor="black", label=<{ProfileStartupTest|fname<br ALIGN="LEFT"/>options : list<br ALIGN="LEFT"/>pd<br ALIGN="LEFT"/>|init(startup_file, startup, test)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_startup_ipy()<br ALIGN="LEFT"/>test_startup_py()<br ALIGN="LEFT"/>validate(output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.prompts.PromptManager" [color="black", fontcolor="black", label=<{PromptManager|color_scheme<br ALIGN="LEFT"/>color_scheme_table<br ALIGN="LEFT"/>in2_template<br ALIGN="LEFT"/>in_template<br ALIGN="LEFT"/>invisible_chars<br ALIGN="LEFT"/>justify<br ALIGN="LEFT"/>lazy_evaluate_fields<br ALIGN="LEFT"/>out_template<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>templates<br ALIGN="LEFT"/>txtwidth<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|render(name, color, just)<br ALIGN="LEFT"/>update_prompt(name, new_template)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_prompts.PromptTests" [color="black", fontcolor="black", label=<{PromptTests|pm<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_builtins()<br ALIGN="LEFT"/>test_cwd_x()<br ALIGN="LEFT"/>test_lazy_eval_float()<br ALIGN="LEFT"/>test_lazy_eval_nonascii_bytes()<br ALIGN="LEFT"/>test_lazy_eval_unicode()<br ALIGN="LEFT"/>test_multiline_prompt()<br ALIGN="LEFT"/>test_render()<br ALIGN="LEFT"/>test_render_unicode_cwd()<br ALIGN="LEFT"/>test_translate_abbreviations()<br ALIGN="LEFT"/>test_undefined()<br ALIGN="LEFT"/>test_user_ns()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.postprocessors.serve.ProxyHandler" [color="black", fontcolor="black", label=<{ProxyHandler|<br ALIGN="LEFT"/>|finish_get(response)<br ALIGN="LEFT"/>get(prefix, url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.loader.PyFileConfigLoader" [color="black", fontcolor="black", label=<{PyFileConfigLoader|<br ALIGN="LEFT"/>|load_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbpy.PyReader" [color="black", fontcolor="black", label=<{PyReader|<br ALIGN="LEFT"/>|new_cell(state, lines)<br ALIGN="LEFT"/>reads(s)<br ALIGN="LEFT"/>split_lines_into_blocks(lines)<br ALIGN="LEFT"/>to_notebook(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbpy.PyReader" [color="black", fontcolor="black", label=<{PyReader|<br ALIGN="LEFT"/>|new_cell(state, lines)<br ALIGN="LEFT"/>reads(s)<br ALIGN="LEFT"/>split_lines_into_blocks(lines)<br ALIGN="LEFT"/>to_notebook(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbpy.PyReaderError" [color="black", fontcolor="red", label=<{PyReaderError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbpy.PyReaderError" [color="black", fontcolor="red", label=<{PyReaderError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.iptestcontroller.PyTestController" [color="black", fontcolor="black", label=<{PyTestController|cmd : list<br ALIGN="LEFT"/>noaccess<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>pycmd : NoneType<br ALIGN="LEFT"/>section<br ALIGN="LEFT"/>will_run<br ALIGN="LEFT"/>workingdir : TemporaryDirectory<br ALIGN="LEFT"/>|add_coverage()<br ALIGN="LEFT"/>add_xunit()<br ALIGN="LEFT"/>cleanup()<br ALIGN="LEFT"/>launch(buffer_output)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbpy.PyWriter" [color="black", fontcolor="black", label=<{PyWriter|<br ALIGN="LEFT"/>|writes(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.nbpy.PyWriter" [color="black", fontcolor="black", label=<{PyWriter|<br ALIGN="LEFT"/>|writes(nb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.PygletInputHook" [color="black", fontcolor="black", label=<{PygletInputHook|<br ALIGN="LEFT"/>|enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.pygments_highlighter.PygmentsBlockUserData" [color="black", fontcolor="black", label=<{PygmentsBlockUserData|syntax_stack : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.pygments_highlighter.PygmentsHighlighter" [color="black", fontcolor="black", label=<{PygmentsHighlighter|<br ALIGN="LEFT"/>|highlightBlock(string)<br ALIGN="LEFT"/>set_style(style)<br ALIGN="LEFT"/>set_style_sheet(stylesheet)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.pylab.PylabMagics" [color="black", fontcolor="black", label=<{PylabMagics|<br ALIGN="LEFT"/>|matplotlib(line)<br ALIGN="LEFT"/>pylab(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_ultratb.Python3ChainedExceptionsTest" [color="black", fontcolor="black", label=<{Python3ChainedExceptionsTest|DIRECT_CAUSE_ERROR_CODE : str<br ALIGN="LEFT"/>EXCEPTION_DURING_HANDLING_CODE : str<br ALIGN="LEFT"/>|test_direct_cause_error()<br ALIGN="LEFT"/>test_exception_during_handling_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.python.PythonExporter" [color="black", fontcolor="black", label=<{PythonExporter|output_mimetype : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.prefilter.PythonOpsChecker" [color="black", fontcolor="black", label=<{PythonOpsChecker|priority : Integer<br ALIGN="LEFT"/>|check(line_info)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.Qt4InputHook" [color="black", fontcolor="black", label=<{Qt4InputHook|<br ALIGN="LEFT"/>|disable_qt4()<br ALIGN="LEFT"/>enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.Qt5InputHook" [color="black", fontcolor="black", label=<{Qt5InputHook|<br ALIGN="LEFT"/>|enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.ansi_code_processor.QtAnsiCodeProcessor" [color="black", fontcolor="black", label=<{QtAnsiCodeProcessor|darkbg_color_map : dict<br ALIGN="LEFT"/>default_color_map : dict<br ALIGN="LEFT"/>|get_color(color, intensity)<br ALIGN="LEFT"/>get_format()<br ALIGN="LEFT"/>set_background_color(color)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.client.QtHBChannel" [color="black", fontcolor="black", label=<{QtHBChannel|kernel_died<br ALIGN="LEFT"/>time_to_dead : float<br ALIGN="LEFT"/>|call_handlers(since_last_heartbeat)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.inprocess.QtInProcessChannel" [color="black", fontcolor="black", label=<{QtInProcessChannel|message_received<br ALIGN="LEFT"/>started<br ALIGN="LEFT"/>stopped<br ALIGN="LEFT"/>|call_handlers(msg)<br ALIGN="LEFT"/>call_handlers_later()<br ALIGN="LEFT"/>flush(timeout)<br ALIGN="LEFT"/>process_events()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.inprocess.QtInProcessHBChannel" [color="black", fontcolor="black", label=<{QtInProcessHBChannel|kernel_died<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.inprocess.QtInProcessKernelClient" [color="black", fontcolor="black", label=<{QtInProcessKernelClient|hb_channel_class<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.inprocess.QtInProcessKernelManager" [color="black", fontcolor="black", label=<{QtInProcessKernelManager|client_class : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.client.QtKernelClient" [color="black", fontcolor="black", label=<{QtKernelClient|hb_channel_class<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.kernel_mixins.QtKernelClientMixin" [color="black", fontcolor="black", label=<{QtKernelClientMixin|started_channels<br ALIGN="LEFT"/>stopped_channels<br ALIGN="LEFT"/>|start_channels()<br ALIGN="LEFT"/>stop_channels()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.manager.QtKernelManager" [color="black", fontcolor="black", label=<{QtKernelManager|autorestart<br ALIGN="LEFT"/>client_class<br ALIGN="LEFT"/>|start_restarter()<br ALIGN="LEFT"/>stop_restarter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.kernel_mixins.QtKernelManagerMixin" [color="black", fontcolor="black", label=<{QtKernelManagerMixin|kernel_restarted<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.manager.QtKernelRestarter" [color="black", fontcolor="black", label=<{QtKernelRestarter|<br ALIGN="LEFT"/>|poll()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.kernel_mixins.QtKernelRestarterMixin" [color="black", fontcolor="black", label=<{QtKernelRestarterMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.kill_ring.QtKillRing" [color="black", fontcolor="black", label=<{QtKillRing|<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>kill(text)<br ALIGN="LEFT"/>kill_cursor(cursor)<br ALIGN="LEFT"/>rotate()<br ALIGN="LEFT"/>yank()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.client.QtZMQSocketChannel" [color="black", fontcolor="black", label=<{QtZMQSocketChannel|message_received<br ALIGN="LEFT"/>|call_handlers(msg)<br ALIGN="LEFT"/>process_events()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.RHeader" [color="black", fontcolor="black", label=<{RHeader|msg_id<br ALIGN="LEFT"/>msg_type<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.extensions.rmagic.RInterpreterError" [color="black", fontcolor="black", label=<{RInterpreterError|err<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>stdout<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.extensions.rmagic.RMagics" [color="black", fontcolor="black", label=<{RMagics|Rconverter<br ALIGN="LEFT"/>Rstdout_cache : list<br ALIGN="LEFT"/>cache_display_data : bool<br ALIGN="LEFT"/>display_cache : list<br ALIGN="LEFT"/>pyconverter<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>|R(line, cell, local_ns)<br ALIGN="LEFT"/>Rget(line)<br ALIGN="LEFT"/>Rpull(line)<br ALIGN="LEFT"/>Rpush(line, local_ns)<br ALIGN="LEFT"/>eval(line)<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>write_console(output)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.RMessage" [color="black", fontcolor="black", label=<{RMessage|content<br ALIGN="LEFT"/>header<br ALIGN="LEFT"/>msg_id<br ALIGN="LEFT"/>msg_type<br ALIGN="LEFT"/>parent_header<br ALIGN="LEFT"/>|check(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.rst.RSTExporter" [color="black", fontcolor="black", label=<{RSTExporter|default_config<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection.RadioButtons" [color="black", fontcolor="black", label=<{RadioButtons|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.interactiveshell.ReadlineNoRecord" [color="black", fontcolor="black", label=<{ReadlineNoRecord|orig_length : int<br ALIGN="LEFT"/>readline_tail : list<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|current_length()<br ALIGN="LEFT"/>get_readline_tail(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.ReallyBadRepr" [color="black", fontcolor="black", label=<{ReallyBadRepr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.Reference" [color="black", fontcolor="black", label=<{Reference|<br ALIGN="LEFT"/>|check(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.pickleutil.Reference" [color="black", fontcolor="black", label=<{Reference|buffers : list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|get_object(g)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.factory.RegistrationFactory" [color="black", fontcolor="black", label=<{RegistrationFactory|ip<br ALIGN="LEFT"/>regport : Integer<br ALIGN="LEFT"/>transport<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.RemoteError" [color="black", fontcolor="red", label=<{RemoteError|args : tuple<br ALIGN="LEFT"/>ename : NoneType<br ALIGN="LEFT"/>engine_info : NoneType<br ALIGN="LEFT"/>evalue : NoneType<br ALIGN="LEFT"/>traceback : NoneType<br ALIGN="LEFT"/>|print_traceback(excid)<br ALIGN="LEFT"/>render_traceback()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.setup.RemoteErrorWithTB" [color="black", fontcolor="black", label=<{RemoteErrorWithTB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.client.remotefunction.RemoteFunction" [color="black", fontcolor="black", label=<{RemoteFunction|block : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>func : NoneType<br ALIGN="LEFT"/>view : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.pretty.RepresentationPrinter" [color="black", fontcolor="black", label=<{RepresentationPrinter|deferred_pprinters : NoneType, dict<br ALIGN="LEFT"/>singleton_pprinters : NoneType, dict<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>type_pprinters : NoneType, dict<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|pretty(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.exporter.ResourcesDict" [color="black", fontcolor="black", label=<{ResourcesDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.revealhelp.RevealHelpPreprocessor" [color="black", fontcolor="black", label=<{RevealHelpPreprocessor|enabled : bool<br ALIGN="LEFT"/>url_prefix<br ALIGN="LEFT"/>|preprocess(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.util.ReverseDict" [color="black", fontcolor="black", label=<{ReverseDict|<br ALIGN="LEFT"/>|get(key, default)<br ALIGN="LEFT"/>pop(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.rich_ipython_widget.RichIPythonWidget" [color="black", fontcolor="black", label=<{RichIPythonWidget|<br ALIGN="LEFT"/>|export_html()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.capture.RichOutput" [color="black", fontcolor="black", label=<{RichOutput|data : dict<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>|display()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.map.RoundRobinMap" [color="black", fontcolor="black", label=<{RoundRobinMap|<br ALIGN="LEFT"/>|flatten_array(listOfPartitions)<br ALIGN="LEFT"/>flatten_list(listOfPartitions)<br ALIGN="LEFT"/>getPartition(seq, p, q, n)<br ALIGN="LEFT"/>joinPartitions(listOfPartitions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.SA" [color="black", fontcolor="black", label=<{SA|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.tests.test_pretty.SB" [color="black", fontcolor="black", label=<{SB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.zmq.parentpoller.ParentPollerWindows.create_interrupt_event.SECURITY_ATTRIBUTES" [color="black", fontcolor="black", label=<{SECURITY_ATTRIBUTES|bInheritHandle : int<br ALIGN="LEFT"/>lpSecurityDescriptor : int<br ALIGN="LEFT"/>nLength<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._process_win32_controller.SECURITY_ATTRIBUTES" [color="black", fontcolor="black", label=<{SECURITY_ATTRIBUTES|bInheritHandle : bool<br ALIGN="LEFT"/>lpSecurityDescriptor : NoneType<br ALIGN="LEFT"/>nLength<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SGEControllerLauncher" [color="black", fontcolor="black", label=<{SGEControllerLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SGEEngineSetLauncher" [color="black", fontcolor="black", label=<{SGEEngineSetLauncher|batch_file_name<br ALIGN="LEFT"/>default_template<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SGELauncher" [color="black", fontcolor="black", label=<{SGELauncher|job_array_regexp<br ALIGN="LEFT"/>job_array_template<br ALIGN="LEFT"/>queue_regexp<br ALIGN="LEFT"/>queue_template<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.text.SList" [color="black", fontcolor="black", label=<{SList|l<br ALIGN="LEFT"/>list<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>nlstr<br ALIGN="LEFT"/>p<br ALIGN="LEFT"/>paths<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>spstr<br ALIGN="LEFT"/>|fields()<br ALIGN="LEFT"/>get_list()<br ALIGN="LEFT"/>get_nlstr()<br ALIGN="LEFT"/>get_paths()<br ALIGN="LEFT"/>get_spstr()<br ALIGN="LEFT"/>grep(pattern, prune, field)<br ALIGN="LEFT"/>sort(field, nums)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.controller.sqlitedb.SQLiteDB" [color="black", fontcolor="black", label=<{SQLiteDB|filename<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|add_record(msg_id, rec)<br ALIGN="LEFT"/>drop_matching_records(check)<br ALIGN="LEFT"/>drop_record(msg_id)<br ALIGN="LEFT"/>find_records(check, keys)<br ALIGN="LEFT"/>get_history()<br ALIGN="LEFT"/>get_record(msg_id)<br ALIGN="LEFT"/>update_record(msg_id, rec)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SSHClusterLauncher" [color="black", fontcolor="black", label=<{SSHClusterLauncher|cluster_args<br ALIGN="LEFT"/>remote_profile_dir<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SSHControllerLauncher" [color="black", fontcolor="black", label=<{SSHControllerLauncher|program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SSHEngineLauncher" [color="black", fontcolor="black", label=<{SSHEngineLauncher|engine_args<br ALIGN="LEFT"/>engine_cmd<br ALIGN="LEFT"/>program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>to_send : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SSHEngineSetLauncher" [color="black", fontcolor="black", label=<{SSHEngineSetLauncher|engine_count<br ALIGN="LEFT"/>engines<br ALIGN="LEFT"/>launcher_class<br ALIGN="LEFT"/>|start(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SSHLauncher" [color="black", fontcolor="black", label=<{SSHLauncher|hostname<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>scp_cmd<br ALIGN="LEFT"/>ssh_args<br ALIGN="LEFT"/>ssh_cmd<br ALIGN="LEFT"/>to_fetch<br ALIGN="LEFT"/>to_send<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|fetch_files()<br ALIGN="LEFT"/>find_args()<br ALIGN="LEFT"/>send_files()<br ALIGN="LEFT"/>signal(sig)<br ALIGN="LEFT"/>start(hostname, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.SSHProxyEngineSetLauncher" [color="black", fontcolor="black", label=<{SSHProxyEngineSetLauncher|ipcluster_cmd<br ALIGN="LEFT"/>n : Integer<br ALIGN="LEFT"/>program<br ALIGN="LEFT"/>program_args<br ALIGN="LEFT"/>|start(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.SSHTest" [color="black", fontcolor="black", label=<{SSHTest|<br ALIGN="LEFT"/>|test_cluster_id_arg()<br ALIGN="LEFT"/>test_remote_profile_dir()<br ALIGN="LEFT"/>test_remote_profile_dir_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils._process_win32_controller.STARTUPINFO" [color="black", fontcolor="black", label=<{STARTUPINFO|cb<br ALIGN="LEFT"/>dwFlags : int<br ALIGN="LEFT"/>hStdError : NoneType, c_void_p, value<br ALIGN="LEFT"/>hStdInput : value<br ALIGN="LEFT"/>hStdOutput : value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.display.SVG" [color="black", fontcolor="black", label=<{SVG|data<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.svg2pdf.SVG2PDFPreprocessor" [color="black", fontcolor="black", label=<{SVG2PDFPreprocessor|command<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>inkscape<br ALIGN="LEFT"/>|convert_figure(data_format, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.formatters.SVGFormatter" [color="black", fontcolor="black", label=<{SVGFormatter|format_type<br ALIGN="LEFT"/>print_method<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.display.ScribdDocument" [color="black", fontcolor="black", label=<{ScribdDocument|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.script.ScriptExporter" [color="black", fontcolor="black", label=<{ScriptExporter|file_extension<br ALIGN="LEFT"/>output_mimetype<br ALIGN="LEFT"/>|from_notebook_node(nb, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.script.ScriptMagics" [color="black", fontcolor="black", label=<{ScriptMagics|bg_processes : list<br ALIGN="LEFT"/>job_manager<br ALIGN="LEFT"/>script_magics<br ALIGN="LEFT"/>script_paths<br ALIGN="LEFT"/>|kill_bg_processes()<br ALIGN="LEFT"/>killbgscripts(_nouse_)<br ALIGN="LEFT"/>shebang(line, cell)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection.Select" [color="black", fontcolor="black", label=<{Select|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection.SelectMultiple" [color="black", fontcolor="black", label=<{SelectMultiple|options : dict<br ALIGN="LEFT"/>selected_label : int<br ALIGN="LEFT"/>selected_labels : tuple<br ALIGN="LEFT"/>value : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_ipython_display_formatter.SelfDisplaying" [color="black", fontcolor="black", label=<{SelfDisplaying|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.interactiveshell.SeparateUnicode" [color="black", fontcolor="black", label=<{SeparateUnicode|<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.postprocessors.serve.ServePostProcessor" [color="black", fontcolor="black", label=<{ServePostProcessor|ip<br ALIGN="LEFT"/>open_in_browser<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>reveal_cdn<br ALIGN="LEFT"/>reveal_prefix<br ALIGN="LEFT"/>|postprocess(input)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.session.Session" [color="black", fontcolor="black", label=<{Session|adapt_version : Integer<br ALIGN="LEFT"/>auth<br ALIGN="LEFT"/>bsession<br ALIGN="LEFT"/>buffer_threshold : Integer<br ALIGN="LEFT"/>copy_threshold : Integer<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>digest_history<br ALIGN="LEFT"/>digest_history_size : Integer<br ALIGN="LEFT"/>digest_mod<br ALIGN="LEFT"/>item_threshold : Integer<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>keyfile<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>msg_id<br ALIGN="LEFT"/>none<br ALIGN="LEFT"/>pack<br ALIGN="LEFT"/>packer<br ALIGN="LEFT"/>pid : Integer<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>signature_scheme<br ALIGN="LEFT"/>unpack<br ALIGN="LEFT"/>unpacker<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|deserialize(msg_list, content, copy)<br ALIGN="LEFT"/>feed_identities(msg_list, copy)<br ALIGN="LEFT"/>msg(msg_type, content, parent, header, metadata)<br ALIGN="LEFT"/>msg_header(msg_type)<br ALIGN="LEFT"/>recv(socket, mode, content, copy)<br ALIGN="LEFT"/>send(stream, msg_or_type, content, parent, ident, buffers, track, header, metadata)<br ALIGN="LEFT"/>send_raw(stream, msg_list, flags, copy, ident)<br ALIGN="LEFT"/>serialize(msg, ident)<br ALIGN="LEFT"/>sign(msg_list)<br ALIGN="LEFT"/>unserialize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.sessions.tests.test_sessions_api.SessionAPI" [color="black", fontcolor="black", label=<{SessionAPI|base_url<br ALIGN="LEFT"/>|create(path, kernel_name)<br ALIGN="LEFT"/>delete(id)<br ALIGN="LEFT"/>get(id)<br ALIGN="LEFT"/>list()<br ALIGN="LEFT"/>modify(id, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.sessions.tests.test_sessions_api.SessionAPITest" [color="black", fontcolor="black", label=<{SessionAPITest|sess_api<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_modify()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.session.SessionFactory" [color="black", fontcolor="black", label=<{SessionFactory|context<br ALIGN="LEFT"/>log : NoneType, RootLogger<br ALIGN="LEFT"/>logname<br ALIGN="LEFT"/>loop<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.sessions.handlers.SessionHandler" [color="black", fontcolor="black", label=<{SessionHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|delete(session_id)<br ALIGN="LEFT"/>get(session_id)<br ALIGN="LEFT"/>patch(session_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.sessions.sessionmanager.SessionManager" [color="black", fontcolor="black", label=<{SessionManager|connection<br ALIGN="LEFT"/>contents_manager<br ALIGN="LEFT"/>cursor<br ALIGN="LEFT"/>kernel_manager<br ALIGN="LEFT"/>|create_session(path, kernel_name)<br ALIGN="LEFT"/>delete_session(session_id)<br ALIGN="LEFT"/>get_session()<br ALIGN="LEFT"/>list_sessions()<br ALIGN="LEFT"/>new_session_id()<br ALIGN="LEFT"/>row_to_model(row)<br ALIGN="LEFT"/>save_session(session_id, path, kernel_id)<br ALIGN="LEFT"/>session_exists(path)<br ALIGN="LEFT"/>update_session(session_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.sessions.handlers.SessionRootHandler" [color="black", fontcolor="black", label=<{SessionRootHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_session.SessionTestCase" [color="black", fontcolor="black", label=<{SessionTestCase|session<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Set" [color="black", fontcolor="black", label=<{Set|klass : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_pylabtools.TestPylabSwitch.Shell" [color="black", fontcolor="black", label=<{Shell|<br ALIGN="LEFT"/>|<I>enable_gui</I>(gui)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.frontend.ShimModule" [color="black", fontcolor="black", label=<{ShimModule|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.signatures.Signature" [color="black", fontcolor="black", label=<{Signature|empty<br ALIGN="LEFT"/>parameters<br ALIGN="LEFT"/>return_annotation<br ALIGN="LEFT"/>|bind()<br ALIGN="LEFT"/>bind_partial()<br ALIGN="LEFT"/>from_function(func)<br ALIGN="LEFT"/>replace(parameters, return_annotation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.test_misbehaving_object_without_trait_names.SillierWithDir" [color="black", fontcolor="black", label=<{SillierWithDir|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.SimpleClass" [color="black", fontcolor="black", label=<{SimpleClass|<br ALIGN="LEFT"/>|<I>method</I>(x, z)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_oinspect.SimpleMagics" [color="black", fontcolor="black", label=<{SimpleMagics|<br ALIGN="LEFT"/>|<I>Ccmagic</I>(cline, ccell)<br ALIGN="LEFT"/><I>Clcmagic</I>(cline, ccell)<br ALIGN="LEFT"/><I>Clmagic</I>(cline)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.configurable.SingletonConfigurable" [color="black", fontcolor="black", label=<{SingletonConfigurable|<br ALIGN="LEFT"/>|clear_instance()<br ALIGN="LEFT"/>initialized()<br ALIGN="LEFT"/>instance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.slides.SlidesExporter" [color="black", fontcolor="black", label=<{SlidesExporter|default_config<br ALIGN="LEFT"/>output_mimetype : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.qt.console.completion_html.SlidingInterval" [color="black", fontcolor="black", label=<{SlidingInterval|current<br ALIGN="LEFT"/>nth<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>stop<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.kernel.inprocess.socket.SocketABC" [color="black", fontcolor="black", label=<{SocketABC|<br ALIGN="LEFT"/>|<I>recv_multipart</I>(flags, copy, track)<br ALIGN="LEFT"/><I>send_multipart</I>(msg_parts, flags, copy, track)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestConfigContainers.test_config_default.SomeSingleton" [color="black", fontcolor="black", label=<{SomeSingleton|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.interactiveshell.SpaceInInput" [color="black", fontcolor="red", label=<{SpaceInInput|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_gh_597.Spam" [color="black", fontcolor="black", label=<{Spam|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.inputtransformer.StatelessInputTransformer" [color="black", fontcolor="black", label=<{StatelessInputTransformer|func<br ALIGN="LEFT"/>|push(line)<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.Status" [color="black", fontcolor="black", label=<{Status|execution_state<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.error.StdinNotImplementedError" [color="black", fontcolor="red", label=<{StdinNotImplementedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.writers.stdout.StdoutWriter" [color="black", fontcolor="black", label=<{StdoutWriter|<br ALIGN="LEFT"/>|write(output, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils._tokenize_py2.StopTokenizing" [color="black", fontcolor="red", label=<{StopTokenizing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._tokenize_py3.StopTokenizing" [color="black", fontcolor="red", label=<{StopTokenizing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.extensions.storemagic.StoreMagics" [color="black", fontcolor="black", label=<{StoreMagics|autorestore<br ALIGN="LEFT"/>|store(parameter_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.strdispatch.StrDispatch" [color="black", fontcolor="black", label=<{StrDispatch|regexs : dict<br ALIGN="LEFT"/>strs : dict<br ALIGN="LEFT"/>|add_re(regex, obj, priority)<br ALIGN="LEFT"/>add_s(s, obj, priority)<br ALIGN="LEFT"/>dispatch(key)<br ALIGN="LEFT"/>flat_matches(key)<br ALIGN="LEFT"/>s_matches(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.Stream" [color="black", fontcolor="black", label=<{Stream|name<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.iptest.StreamCapturer" [color="black", fontcolor="black", label=<{StreamCapturer|buffer : BytesIO<br ALIGN="LEFT"/>buffer_lock : lock<br ALIGN="LEFT"/>daemon : bool<br ALIGN="LEFT"/>echo : bool<br ALIGN="LEFT"/>readfd<br ALIGN="LEFT"/>started : bool<br ALIGN="LEFT"/>stop : Event<br ALIGN="LEFT"/>streams : list<br ALIGN="LEFT"/>writefd<br ALIGN="LEFT"/>|ensure_started()<br ALIGN="LEFT"/>get_buffer()<br ALIGN="LEFT"/>halt()<br ALIGN="LEFT"/>reset_buffer()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.globalipapp.StreamProxy" [color="black", fontcolor="black", label=<{StreamProxy|name<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.StringRejector" [color="black", fontcolor="black", label=<{StringRejector|<br ALIGN="LEFT"/>|visit_Str(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.extensions.autoreload.StrongRef" [color="black", fontcolor="black", label=<{StrongRef|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.ipstruct.Struct" [color="black", fontcolor="black", label=<{Struct|<br ALIGN="LEFT"/>|allow_new_attr(allow)<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>dict()<br ALIGN="LEFT"/>hasattr(key)<br ALIGN="LEFT"/>merge(__loc_data__, __conflict_solve)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.test_SubClass.SubClass" [color="black", fontcolor="black", label=<{SubClass|y : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.test_SubClass_with_trait_names_method.SubClass" [color="black", fontcolor="black", label=<{SubClass|y : int<br ALIGN="LEFT"/>|trait_names()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_dir2.test_SubClass_with_trait_names_attr.SubClass" [color="black", fontcolor="black", label=<{SubClass|trait_names : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_process.SubProcessTestCase" [color="black", fontcolor="black", label=<{SubProcessTestCase|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_output_error_code()<br ALIGN="LEFT"/>test_getoutput()<br ALIGN="LEFT"/>test_getoutput_error()<br ALIGN="LEFT"/>test_getoutput_quoted()<br ALIGN="LEFT"/>test_getoutput_quoted2()<br ALIGN="LEFT"/>test_system()<br ALIGN="LEFT"/>test_system_quotes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.iptest.SubprocessStreamCapturePlugin" [color="black", fontcolor="black", label=<{SubprocessStreamCapturePlugin|destination : str<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>formatError<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>stream_capturer<br ALIGN="LEFT"/>|configure(options, config)<br ALIGN="LEFT"/>finalize(result)<br ALIGN="LEFT"/>formatFailure(test, err)<br ALIGN="LEFT"/>get_write_fileno()<br ALIGN="LEFT"/>startTest(test)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.util.SuperQObject" [color="black", fontcolor="black", label=<{SuperQObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_ultratb.SyntaxErrorTest" [color="black", fontcolor="black", label=<{SyntaxErrorTest|<br ALIGN="LEFT"/>|test_changing_py_file()<br ALIGN="LEFT"/>test_non_syntaxerror()<br ALIGN="LEFT"/>test_syntaxerror_without_lineno()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestSyntaxErrorTransformer.SyntaxErrorTransformer" [color="black", fontcolor="black", label=<{SyntaxErrorTransformer|<br ALIGN="LEFT"/>|push(line)<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.tests.test_interactivshell.SyntaxErrorTransformer" [color="black", fontcolor="black", label=<{SyntaxErrorTransformer|<br ALIGN="LEFT"/>|push(line)<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.ultratb.SyntaxTB" [color="black", fontcolor="black", label=<{SyntaxTB|last_syntax_error : NoneType<br ALIGN="LEFT"/>|clear_err_state()<br ALIGN="LEFT"/>stb2text(stb)<br ALIGN="LEFT"/>structured_traceback(etype, value, elist, tb_offset, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.ultratb.TBTools" [color="black", fontcolor="black", label=<{TBTools|Colors : NoneType<br ALIGN="LEFT"/>call_pdb : bool<br ALIGN="LEFT"/>color_scheme_table<br ALIGN="LEFT"/>old_scheme : str<br ALIGN="LEFT"/>ostream<br ALIGN="LEFT"/>pdb : NoneType<br ALIGN="LEFT"/>tb_offset : int<br ALIGN="LEFT"/>|color_toggle()<br ALIGN="LEFT"/>set_colors()<br ALIGN="LEFT"/>stb2text(stb)<br ALIGN="LEFT"/><I>structured_traceback</I>(etype, evalue, tb, tb_offset, context, mode)<br ALIGN="LEFT"/>text(etype, value, tb, tb_offset, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.TCPAddress" [color="black", fontcolor="black", label=<{TCPAddress|default_value : tuple<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TCPAddressTrait" [color="black", fontcolor="black", label=<{TCPAddressTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.TIMEOUT" [color="black", fontcolor="red", label=<{TIMEOUT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selectioncontainer.Tab" [color="black", fontcolor="black", label=<{Tab|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.TaskAborted" [color="black", fontcolor="red", label=<{TaskAborted|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_db.TaskDBTest" [color="black", fontcolor="black", label=<{TaskDBTest|db<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>|<I>create_db</I>()<br ALIGN="LEFT"/>load_records(n, buffer_size)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_add_record()<br ALIGN="LEFT"/>test_datetime()<br ALIGN="LEFT"/>test_drop_matching()<br ALIGN="LEFT"/>test_drop_record()<br ALIGN="LEFT"/>test_find_records_dt()<br ALIGN="LEFT"/>test_find_records_in()<br ALIGN="LEFT"/>test_find_records_keys()<br ALIGN="LEFT"/>test_find_records_msg_id()<br ALIGN="LEFT"/>test_get_history()<br ALIGN="LEFT"/>test_null()<br ALIGN="LEFT"/>test_pop_safe_find()<br ALIGN="LEFT"/>test_pop_safe_find_keys()<br ALIGN="LEFT"/>test_pop_safe_get()<br ALIGN="LEFT"/>test_update_record()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.error.TaskRejectError" [color="black", fontcolor="red", label=<{TaskRejectError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.scheduler.TaskScheduler" [color="black", fontcolor="black", label=<{TaskScheduler|all_completed<br ALIGN="LEFT"/>all_done<br ALIGN="LEFT"/>all_failed<br ALIGN="LEFT"/>all_ids<br ALIGN="LEFT"/>client_stream<br ALIGN="LEFT"/>clients<br ALIGN="LEFT"/>completed<br ALIGN="LEFT"/>destinations<br ALIGN="LEFT"/>engine_stream<br ALIGN="LEFT"/>failed<br ALIGN="LEFT"/>graph<br ALIGN="LEFT"/>hwm : Integer<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>loads<br ALIGN="LEFT"/>mon_stream<br ALIGN="LEFT"/>notifier_stream<br ALIGN="LEFT"/>pending<br ALIGN="LEFT"/>query_stream<br ALIGN="LEFT"/>queue<br ALIGN="LEFT"/>queue_map<br ALIGN="LEFT"/>retries<br ALIGN="LEFT"/>scheme<br ALIGN="LEFT"/>scheme_name<br ALIGN="LEFT"/>targets<br ALIGN="LEFT"/>|add_job(idx)<br ALIGN="LEFT"/>available_engines()<br ALIGN="LEFT"/>dispatch_notification(msg)<br ALIGN="LEFT"/>dispatch_query_reply(msg)<br ALIGN="LEFT"/>dispatch_result(raw_msg)<br ALIGN="LEFT"/>dispatch_submission(raw_msg)<br ALIGN="LEFT"/>fail_unreachable(msg_id, why)<br ALIGN="LEFT"/>finish_job(idx)<br ALIGN="LEFT"/>handle_result(idents, parent, raw_msg, success)<br ALIGN="LEFT"/>handle_stranded_tasks(engine)<br ALIGN="LEFT"/>handle_unmet_dependency(idents, parent)<br ALIGN="LEFT"/>job_timeout(job, timeout_id)<br ALIGN="LEFT"/>maybe_run(job)<br ALIGN="LEFT"/>resume_receiving()<br ALIGN="LEFT"/>save_unmet(job)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop_receiving()<br ALIGN="LEFT"/>submit_task(job, indices)<br ALIGN="LEFT"/>update_graph(dep_id, success)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.error.TaskTimeout" [color="black", fontcolor="red", label=<{TaskTimeout|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.io.Tee" [color="black", fontcolor="black", label=<{Tee|channel : str<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>ostream : TextIOWrapper<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_io.TeeTestCase" [color="black", fontcolor="black", label=<{TeeTestCase|<br ALIGN="LEFT"/>|tchan(channel, check)<br ALIGN="LEFT"/>test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.tools.TempFileMixin" [color="black", fontcolor="black", label=<{TempFileMixin|fname<br ALIGN="LEFT"/>tmpfile<br ALIGN="LEFT"/>|mktmp(src, ext)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.handlers.Template404" [color="black", fontcolor="black", label=<{Template404|<br ALIGN="LEFT"/>|prepare()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.templateexporter.TemplateExporter" [color="black", fontcolor="black", label=<{TemplateExporter|default_template<br ALIGN="LEFT"/>default_template_path<br ALIGN="LEFT"/>environment<br ALIGN="LEFT"/>filters<br ALIGN="LEFT"/>jinja_comment_block_end<br ALIGN="LEFT"/>jinja_comment_block_start<br ALIGN="LEFT"/>jinja_logic_block_end<br ALIGN="LEFT"/>jinja_logic_block_start<br ALIGN="LEFT"/>jinja_variable_block_end<br ALIGN="LEFT"/>jinja_variable_block_start<br ALIGN="LEFT"/>raw_mimetypes<br ALIGN="LEFT"/>template<br ALIGN="LEFT"/>template_extension<br ALIGN="LEFT"/>template_file<br ALIGN="LEFT"/>template_path<br ALIGN="LEFT"/>template_skeleton_path<br ALIGN="LEFT"/>|from_notebook_node(nb, resources)<br ALIGN="LEFT"/>register_filter(name, jinja_filter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tempdir.TemporaryWorkingDirectory" [color="black", fontcolor="black", label=<{TemporaryWorkingDirectory|old_wd<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.coloransi.TermColors" [color="black", fontcolor="black", label=<{TermColors|NoColor : str<br ALIGN="LEFT"/>Normal : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.terminal.handlers.TermSocket" [color="black", fontcolor="black", label=<{TermSocket|<br ALIGN="LEFT"/>|<I>clear_cookie</I>()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.terminal.api_handlers.TerminalHandler" [color="black", fontcolor="black", label=<{TerminalHandler|SUPPORTED_METHODS : tuple<br ALIGN="LEFT"/>|delete(name)<br ALIGN="LEFT"/>get(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.terminal.handlers.TerminalHandler" [color="black", fontcolor="black", label=<{TerminalHandler|<br ALIGN="LEFT"/>|get(term_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.ipapp.TerminalIPythonApp" [color="black", fontcolor="black", label=<{TerminalIPythonApp|aliases<br ALIGN="LEFT"/>auto_create<br ALIGN="LEFT"/>classes<br ALIGN="LEFT"/>copy_config_files : bool<br ALIGN="LEFT"/>crash_handler_class<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>display_banner<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>file_to_run<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>force_interact<br ALIGN="LEFT"/>ignore_old_config<br ALIGN="LEFT"/>interact<br ALIGN="LEFT"/>ipython_dir<br ALIGN="LEFT"/>load_config_file<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>overwrite<br ALIGN="LEFT"/>profile_dir<br ALIGN="LEFT"/>pylab : str<br ALIGN="LEFT"/>quick<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>something_to_run<br ALIGN="LEFT"/>subcommands : dict<br ALIGN="LEFT"/>|init_banner()<br ALIGN="LEFT"/>init_shell()<br ALIGN="LEFT"/>initialize(argv)<br ALIGN="LEFT"/>parse_command_line(argv)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.interactiveshell.TerminalInteractiveShell" [color="black", fontcolor="black", label=<{TerminalInteractiveShell|autoedit_syntax<br ALIGN="LEFT"/>confirm_exit<br ALIGN="LEFT"/>display_banner<br ALIGN="LEFT"/>editor<br ALIGN="LEFT"/>embedded<br ALIGN="LEFT"/>embedded_active<br ALIGN="LEFT"/>exit_now : bool<br ALIGN="LEFT"/>indent_current_nsp : int<br ALIGN="LEFT"/>pager<br ALIGN="LEFT"/>rl_do_indent : bool<br ALIGN="LEFT"/>screen_length : Integer<br ALIGN="LEFT"/>system<br ALIGN="LEFT"/>term_title<br ALIGN="LEFT"/>usable_screen_length<br ALIGN="LEFT"/>usage<br ALIGN="LEFT"/>using_paste_magics<br ALIGN="LEFT"/>|ask_exit()<br ALIGN="LEFT"/>edit_syntax_error()<br ALIGN="LEFT"/>enable_gui(gui, app)<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/>init_alias()<br ALIGN="LEFT"/>init_display_formatter()<br ALIGN="LEFT"/>init_magics()<br ALIGN="LEFT"/>init_term_title()<br ALIGN="LEFT"/>interact(display_banner)<br ALIGN="LEFT"/>mainloop(display_banner)<br ALIGN="LEFT"/>raw_input(prompt)<br ALIGN="LEFT"/>showindentationerror()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.interactiveshell.TerminalMagics" [color="black", fontcolor="black", label=<{TerminalMagics|input_splitter<br ALIGN="LEFT"/>|autoindent(parameter_s)<br ALIGN="LEFT"/>cls(s)<br ALIGN="LEFT"/>cpaste(parameter_s)<br ALIGN="LEFT"/>paste(parameter_s)<br ALIGN="LEFT"/>preclean_input(block)<br ALIGN="LEFT"/>rerun_pasted(name)<br ALIGN="LEFT"/>store_or_execute(block, name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.tests.test_interactivshell.TerminalMagicsTestCase" [color="black", fontcolor="black", label=<{TerminalMagicsTestCase|<br ALIGN="LEFT"/>|test_paste_magics_blankline()<br ALIGN="LEFT"/>test_paste_magics_message()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.terminal.api_handlers.TerminalRootHandler" [color="black", fontcolor="black", label=<{TerminalRootHandler|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.tests.test_api.TestAPI" [color="black", fontcolor="black", label=<{TestAPI|<br ALIGN="LEFT"/>|test_read()<br ALIGN="LEFT"/>test_read_write_path()<br ALIGN="LEFT"/>test_write_downgrade_2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.tests.test_ansi.TestAnsi" [color="black", fontcolor="black", label=<{TestAnsi|<br ALIGN="LEFT"/>|test_ansi2html()<br ALIGN="LEFT"/>test_ansi2latex()<br ALIGN="LEFT"/>test_strip_ansi()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.tests.test_ansi_code_processor.TestAnsiCodeProcessor" [color="black", fontcolor="black", label=<{TestAnsiCodeProcessor|processor<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_backspace()<br ALIGN="LEFT"/>test_beep()<br ALIGN="LEFT"/>test_carriage_return()<br ALIGN="LEFT"/>test_carriage_return_newline()<br ALIGN="LEFT"/>test_clear()<br ALIGN="LEFT"/>test_colors()<br ALIGN="LEFT"/>test_colors_xterm()<br ALIGN="LEFT"/>test_combined()<br ALIGN="LEFT"/>test_formfeed()<br ALIGN="LEFT"/>test_scroll()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_application.TestApplication" [color="black", fontcolor="black", label=<{TestApplication|<br ALIGN="LEFT"/>|test_aliases()<br ALIGN="LEFT"/>test_basic()<br ALIGN="LEFT"/>test_config()<br ALIGN="LEFT"/>test_config_propagation()<br ALIGN="LEFT"/>test_extra_args()<br ALIGN="LEFT"/>test_flag_clobber()<br ALIGN="LEFT"/>test_flags()<br ALIGN="LEFT"/>test_flatten_aliases()<br ALIGN="LEFT"/>test_flatten_flags()<br ALIGN="LEFT"/>test_log()<br ALIGN="LEFT"/>test_multi_file()<br ALIGN="LEFT"/>test_unicode_argv()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.TestArgParseCL" [color="black", fontcolor="black", label=<{TestArgParseCL|<br ALIGN="LEFT"/>|test_add_arguments()<br ALIGN="LEFT"/>test_argv()<br ALIGN="LEFT"/>test_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.TestArgParseKVCL" [color="black", fontcolor="black", label=<{TestArgParseKVCL|klass<br ALIGN="LEFT"/>|test_eval()<br ALIGN="LEFT"/>test_expanduser2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.tests.test_tools.TestAssertPrints" [color="black", fontcolor="black", label=<{TestAssertPrints|<br ALIGN="LEFT"/>|test_failing()<br ALIGN="LEFT"/>test_passing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestAstTransform" [color="black", fontcolor="black", label=<{TestAstTransform|negator<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_macro()<br ALIGN="LEFT"/>test_run_cell()<br ALIGN="LEFT"/>test_time()<br ALIGN="LEFT"/>test_timeit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestAstTransform2" [color="black", fontcolor="black", label=<{TestAstTransform2|calls : list<br ALIGN="LEFT"/>intwrapper<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_run_cell()<br ALIGN="LEFT"/>test_timeit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestAstTransformError" [color="black", fontcolor="black", label=<{TestAstTransformError|<br ALIGN="LEFT"/>|test_unregistering()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestAstTransformInputRejection" [color="black", fontcolor="black", label=<{TestAstTransformInputRejection|transformer<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_input_rejection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.extensions.tests.test_autoreload.TestAutoreload" [color="black", fontcolor="black", label=<{TestAutoreload|<br ALIGN="LEFT"/>|test_smoketest_aimport()<br ALIGN="LEFT"/>test_smoketest_autoreload()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestBytes" [color="black", fontcolor="black", label=<{TestBytes|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestCRegExp" [color="black", fontcolor="black", label=<{TestCRegExp|obj<br ALIGN="LEFT"/>|coerce(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_csshtmlheader.TestCSSHTMLHeader" [color="black", fontcolor="black", label=<{TestCSSHTMLHeader|<br ALIGN="LEFT"/>|build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v1.tests.test_nbbase.TestCell" [color="black", fontcolor="black", label=<{TestCell|<br ALIGN="LEFT"/>|test_code_cell()<br ALIGN="LEFT"/>test_empty_code_cell()<br ALIGN="LEFT"/>test_empty_text_cell()<br ALIGN="LEFT"/>test_text_cell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.tests.test_nbbase.TestCell" [color="black", fontcolor="black", label=<{TestCell|<br ALIGN="LEFT"/>|test_code_cell()<br ALIGN="LEFT"/>test_empty_code_cell()<br ALIGN="LEFT"/>test_empty_html_cell()<br ALIGN="LEFT"/>test_empty_markdown_cell()<br ALIGN="LEFT"/>test_html_cell()<br ALIGN="LEFT"/>test_markdown_cell()<br ALIGN="LEFT"/>test_pyerr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_nbbase.TestCell" [color="black", fontcolor="black", label=<{TestCell|<br ALIGN="LEFT"/>|test_code_cell()<br ALIGN="LEFT"/>test_empty_code_cell()<br ALIGN="LEFT"/>test_empty_heading_cell()<br ALIGN="LEFT"/>test_empty_html_cell()<br ALIGN="LEFT"/>test_empty_markdown_cell()<br ALIGN="LEFT"/>test_empty_raw_cell()<br ALIGN="LEFT"/>test_heading_cell()<br ALIGN="LEFT"/>test_html_cell()<br ALIGN="LEFT"/>test_markdown_cell()<br ALIGN="LEFT"/>test_pyerr()<br ALIGN="LEFT"/>test_raw_cell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_clearoutput.TestClearOutput" [color="black", fontcolor="black", label=<{TestClearOutput|<br ALIGN="LEFT"/>|build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_client.TestClient" [color="black", fontcolor="black", label=<{TestClient|<br ALIGN="LEFT"/>|test_activate()<br ALIGN="LEFT"/>test_clear()<br ALIGN="LEFT"/>test_db_query_default_keys()<br ALIGN="LEFT"/>test_db_query_dt()<br ALIGN="LEFT"/>test_db_query_get_result()<br ALIGN="LEFT"/>test_db_query_in()<br ALIGN="LEFT"/>test_db_query_keys()<br ALIGN="LEFT"/>test_db_query_msg_id()<br ALIGN="LEFT"/>test_dview_targets()<br ALIGN="LEFT"/>test_get_execute_result()<br ALIGN="LEFT"/>test_get_result()<br ALIGN="LEFT"/>test_hub_history()<br ALIGN="LEFT"/>test_ids()<br ALIGN="LEFT"/>test_ids_list()<br ALIGN="LEFT"/>test_iter()<br ALIGN="LEFT"/>test_lazy_all_targets()<br ALIGN="LEFT"/>test_lbview_targets()<br ALIGN="LEFT"/>test_purge_all_hub_results()<br ALIGN="LEFT"/>test_purge_all_local_results()<br ALIGN="LEFT"/>test_purge_all_local_results_outstanding()<br ALIGN="LEFT"/>test_purge_all_results()<br ALIGN="LEFT"/>test_purge_everything()<br ALIGN="LEFT"/>test_purge_hub_results()<br ALIGN="LEFT"/>test_purge_local_results()<br ALIGN="LEFT"/>test_purge_local_results_outstanding()<br ALIGN="LEFT"/>test_queue_status()<br ALIGN="LEFT"/>test_resubmit()<br ALIGN="LEFT"/>test_resubmit_aborted()<br ALIGN="LEFT"/>test_resubmit_badkey()<br ALIGN="LEFT"/>test_resubmit_chain()<br ALIGN="LEFT"/>test_resubmit_header()<br ALIGN="LEFT"/>test_resubmit_inflight()<br ALIGN="LEFT"/><I>test_result_status</I>()<br ALIGN="LEFT"/>test_shutdown()<br ALIGN="LEFT"/>test_spin_thread()<br ALIGN="LEFT"/>test_stop_spin_thread()<br ALIGN="LEFT"/>test_targets()<br ALIGN="LEFT"/>test_view_indexing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_coalescestreams.TestCoalesceStreams" [color="black", fontcolor="black", label=<{TestCoalesceStreams|<br ALIGN="LEFT"/>|test_coalesce_replace_streams()<br ALIGN="LEFT"/>test_coalesce_sequenced_streams()<br ALIGN="LEFT"/>test_coalesce_streams()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestComplex" [color="black", fontcolor="black", label=<{TestComplex|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.TestConfig" [color="black", fontcolor="black", label=<{TestConfig|<br ALIGN="LEFT"/>|test_auto_section()<br ALIGN="LEFT"/>test_builtin()<br ALIGN="LEFT"/>test_contains()<br ALIGN="LEFT"/>test_deepcopy()<br ALIGN="LEFT"/>test_fromdict()<br ALIGN="LEFT"/>test_fromdictmerge()<br ALIGN="LEFT"/>test_fromdictmerge2()<br ALIGN="LEFT"/>test_getattr_not_section()<br ALIGN="LEFT"/>test_getattr_private_missing()<br ALIGN="LEFT"/>test_getattr_section()<br ALIGN="LEFT"/>test_getitem_not_section()<br ALIGN="LEFT"/>test_getitem_section()<br ALIGN="LEFT"/>test_merge_copies()<br ALIGN="LEFT"/>test_merge_doesnt_exist()<br ALIGN="LEFT"/>test_merge_exists()<br ALIGN="LEFT"/>test_pickle_config()<br ALIGN="LEFT"/>test_setget()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestConfigContainers" [color="black", fontcolor="black", label=<{TestConfigContainers|<br ALIGN="LEFT"/>|test_append_extend()<br ALIGN="LEFT"/>test_config_default()<br ALIGN="LEFT"/>test_dict_update()<br ALIGN="LEFT"/>test_extend()<br ALIGN="LEFT"/>test_extend_append()<br ALIGN="LEFT"/>test_insert()<br ALIGN="LEFT"/>test_insert_extend()<br ALIGN="LEFT"/>test_prepend()<br ALIGN="LEFT"/>test_prepend_extend()<br ALIGN="LEFT"/>test_set_update()<br ALIGN="LEFT"/>test_update_twice()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestConfigurable" [color="black", fontcolor="black", label=<{TestConfigurable|<br ALIGN="LEFT"/>|test_custom()<br ALIGN="LEFT"/>test_default()<br ALIGN="LEFT"/>test_help()<br ALIGN="LEFT"/>test_help_inst()<br ALIGN="LEFT"/>test_inheritance()<br ALIGN="LEFT"/>test_override1()<br ALIGN="LEFT"/>test_override2()<br ALIGN="LEFT"/>test_parent()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.tests.test_console_widget.TestConsoleWidget" [color="black", fontcolor="black", label=<{TestConsoleWidget|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_link_handling()<br ALIGN="LEFT"/>test_special_characters()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.tests.test_manager.TestContentsManager" [color="black", fontcolor="black", label=<{TestContentsManager|contents_manager<br ALIGN="LEFT"/>td<br ALIGN="LEFT"/>|add_code_cell(nb)<br ALIGN="LEFT"/>make_dir(api_path)<br ALIGN="LEFT"/>new_notebook()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_check_and_sign()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_delete_root()<br ALIGN="LEFT"/>test_get()<br ALIGN="LEFT"/>test_mark_trusted_cells()<br ALIGN="LEFT"/>test_modified_date()<br ALIGN="LEFT"/>test_new_untitled()<br ALIGN="LEFT"/>test_save()<br ALIGN="LEFT"/>test_trust_notebook()<br ALIGN="LEFT"/>test_update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.iptestcontroller.TestController" [color="black", fontcolor="black", label=<{TestController|cmd : NoneType<br ALIGN="LEFT"/>dirs : NoneType<br ALIGN="LEFT"/>env : NoneType<br ALIGN="LEFT"/>process : NoneType<br ALIGN="LEFT"/>section : NoneType<br ALIGN="LEFT"/>stdout : NoneType<br ALIGN="LEFT"/>stdout_capturer<br ALIGN="LEFT"/>|cleanup()<br ALIGN="LEFT"/>cleanup_process()<br ALIGN="LEFT"/>launch(buffer_output, capture_output)<br ALIGN="LEFT"/>print_extra_info()<br ALIGN="LEFT"/><I>setup</I>()<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.tests.test_convert.TestConvert" [color="black", fontcolor="black", label=<{TestConvert|<br ALIGN="LEFT"/>|test_downgrade_3_2()<br ALIGN="LEFT"/>test_open_current()<br ALIGN="LEFT"/>test_upgrade_2_3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.tests.test_datatypefilter.TestDataTypeFilter" [color="black", fontcolor="black", label=<{TestDataTypeFilter|<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_junk_types()<br ALIGN="LEFT"/>test_null()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.writers.tests.test_debug.TestDebug" [color="black", fontcolor="black", label=<{TestDebug|<br ALIGN="LEFT"/>|test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_db.TestDictBackend" [color="black", fontcolor="black", label=<{TestDictBackend|db<br ALIGN="LEFT"/>|create_db()<br ALIGN="LEFT"/>test_cull_count()<br ALIGN="LEFT"/>test_cull_size()<br ALIGN="LEFT"/>test_cull_size_drop()<br ALIGN="LEFT"/>test_cull_size_update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink" [color="black", fontcolor="black", label=<{TestDirectionalLink|<br ALIGN="LEFT"/>|test_connect_same()<br ALIGN="LEFT"/>test_link_different()<br ALIGN="LEFT"/>test_unlink()<br ALIGN="LEFT"/>test_validate_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestDottedObjectName" [color="black", fontcolor="black", label=<{TestDottedObjectName|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.TestEnv" [color="black", fontcolor="black", label=<{TestEnv|<br ALIGN="LEFT"/>|test_env()<br ALIGN="LEFT"/>test_env_get_set_complex()<br ALIGN="LEFT"/>test_env_get_set_simple()<br ALIGN="LEFT"/>test_env_set_bad_input()<br ALIGN="LEFT"/>test_env_set_whitespace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestEventful" [color="black", fontcolor="black", label=<{TestEventful|<br ALIGN="LEFT"/>|test_dict()<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_execute.TestExecute" [color="black", fontcolor="black", label=<{TestExecute|<br ALIGN="LEFT"/>|assert_notebooks_equal(expected, actual)<br ALIGN="LEFT"/>build_preprocessor(opts)<br ALIGN="LEFT"/>normalize_output(output)<br ALIGN="LEFT"/>run_notebook(filename, opts, resources)<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_disable_stdin()<br ALIGN="LEFT"/>test_empty_path()<br ALIGN="LEFT"/>test_run_notebooks()<br ALIGN="LEFT"/>test_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_export.TestExport" [color="black", fontcolor="black", label=<{TestExport|<br ALIGN="LEFT"/>|test_export_filename()<br ALIGN="LEFT"/>test_export_filestream()<br ALIGN="LEFT"/>test_export_nbnode()<br ALIGN="LEFT"/>test_export_resources()<br ALIGN="LEFT"/>test_export_using_exporter()<br ALIGN="LEFT"/>test_export_using_exporter_class()<br ALIGN="LEFT"/>test_export_wrong_name()<br ALIGN="LEFT"/>test_no_exporter()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_exporter.TestExporter" [color="black", fontcolor="black", label=<{TestExporter|<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_preprocessor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_templateexporter.TestExporter" [color="black", fontcolor="black", label=<{TestExporter|<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_extract_outputs()<br ALIGN="LEFT"/>test_preprocessor_class()<br ALIGN="LEFT"/>test_preprocessor_dottedobjectname()<br ALIGN="LEFT"/>test_preprocessor_instance()<br ALIGN="LEFT"/>test_preprocessor_via_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_extractoutput.TestExtractOutput" [color="black", fontcolor="black", label=<{TestExtractOutput|<br ALIGN="LEFT"/>|build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.TestFileCL" [color="black", fontcolor="black", label=<{TestFileCL|<br ALIGN="LEFT"/>|test_collision()<br ALIGN="LEFT"/>test_json()<br ALIGN="LEFT"/>test_python()<br ALIGN="LEFT"/>test_v2raise()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.contents.tests.test_manager.TestFileContentsManager" [color="black", fontcolor="black", label=<{TestFileContentsManager|<br ALIGN="LEFT"/>|assertRaisesHTTPError(status, msg)<br ALIGN="LEFT"/>symlink(contents_manager, src, dst)<br ALIGN="LEFT"/>test_403()<br ALIGN="LEFT"/>test_bad_symlink()<br ALIGN="LEFT"/>test_checkpoint_subdir()<br ALIGN="LEFT"/>test_escape_root()<br ALIGN="LEFT"/>test_get_os_path()<br ALIGN="LEFT"/>test_good_symlink()<br ALIGN="LEFT"/>test_invalid_root_dir()<br ALIGN="LEFT"/>test_missing_root_dir()<br ALIGN="LEFT"/>test_root_dir()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_shellapp.TestFileToRun" [color="black", fontcolor="black", label=<{TestFileToRun|<br ALIGN="LEFT"/>|test_ipy_script_file_attribute()<br ALIGN="LEFT"/>test_py_script_file_attribute()<br ALIGN="LEFT"/>test_py_script_file_attribute_interactively()<br ALIGN="LEFT"/>test_py_script_file_compiler_directive()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestFloat" [color="black", fontcolor="black", label=<{TestFloat|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredInstanceList" [color="black", fontcolor="black", label=<{TestForwardDeclaredInstanceList|obj<br ALIGN="LEFT"/>|test_klass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredInstanceTrait" [color="black", fontcolor="black", label=<{TestForwardDeclaredInstanceTrait|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredTypeList" [color="black", fontcolor="black", label=<{TestForwardDeclaredTypeList|obj<br ALIGN="LEFT"/>|test_klass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredTypeTrait" [color="black", fontcolor="black", label=<{TestForwardDeclaredTypeTrait|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestHTCondorControllerLauncher" [color="black", fontcolor="black", label=<{TestHTCondorControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestHTCondorEngineSetLauncher" [color="black", fontcolor="black", label=<{TestHTCondorEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_html.TestHTMLExporter" [color="black", fontcolor="black", label=<{TestHTMLExporter|exporter_class<br ALIGN="LEFT"/>should_include_raw : list<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_export_basic()<br ALIGN="LEFT"/>test_export_full()<br ALIGN="LEFT"/>test_javascript_output()<br ALIGN="LEFT"/>test_png_metadata()<br ALIGN="LEFT"/>test_prompt_number()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraits" [color="black", fontcolor="black", label=<{TestHasTraits|<br ALIGN="LEFT"/>|test_init()<br ALIGN="LEFT"/>test_positional_args()<br ALIGN="LEFT"/>test_trait_metadata()<br ALIGN="LEFT"/>test_trait_metadata_default()<br ALIGN="LEFT"/>test_trait_names()<br ALIGN="LEFT"/>test_traits()<br ALIGN="LEFT"/>test_traits_metadata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta" [color="black", fontcolor="black", label=<{TestHasTraitsMeta|<br ALIGN="LEFT"/>|test_metaclass()<br ALIGN="LEFT"/>test_this_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify" [color="black", fontcolor="black", label=<{TestHasTraitsNotify|cb : tuple<br ALIGN="LEFT"/>|notify1(name, old, new)<br ALIGN="LEFT"/>notify2(name, old, new)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_notify_all()<br ALIGN="LEFT"/>test_notify_args()<br ALIGN="LEFT"/>test_notify_one()<br ALIGN="LEFT"/>test_notify_only_once()<br ALIGN="LEFT"/>test_notify_subclass()<br ALIGN="LEFT"/>test_static_notify()<br ALIGN="LEFT"/>test_subclass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.tests.test_highlight.TestHighlight" [color="black", fontcolor="black", label=<{TestHighlight|tests : list<br ALIGN="LEFT"/>tokens : list<br ALIGN="LEFT"/>|test_highlight2html()<br ALIGN="LEFT"/>test_highlight2latex()<br ALIGN="LEFT"/>test_parse_html_many_lang()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_highlightmagics.TestHighlightMagics" [color="black", fontcolor="black", label=<{TestHighlightMagics|<br ALIGN="LEFT"/>|build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_no_false_positive()<br ALIGN="LEFT"/>test_tagging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.tests.test_nbextensions.TestInstallNBExtension" [color="black", fontcolor="black", label=<{TestInstallNBExtension|files : list<br ALIGN="LEFT"/>ipdir<br ALIGN="LEFT"/>save_get_ipython_dir<br ALIGN="LEFT"/>save_system_dir<br ALIGN="LEFT"/>src<br ALIGN="LEFT"/>system_nbext<br ALIGN="LEFT"/>tempdirs : list<br ALIGN="LEFT"/>|assert_dir_exists(path)<br ALIGN="LEFT"/>assert_installed(relative_path, user)<br ALIGN="LEFT"/>assert_not_dir_exists(path)<br ALIGN="LEFT"/>assert_not_installed(relative_path, user)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>tempdir()<br ALIGN="LEFT"/>test_check_nbextension()<br ALIGN="LEFT"/>test_create_ipython_dir()<br ALIGN="LEFT"/>test_create_nbextensions_system()<br ALIGN="LEFT"/>test_create_nbextensions_user()<br ALIGN="LEFT"/>test_destination_dir()<br ALIGN="LEFT"/>test_destination_file()<br ALIGN="LEFT"/>test_install_destination_bad()<br ALIGN="LEFT"/>test_install_nbextension()<br ALIGN="LEFT"/>test_install_symlink()<br ALIGN="LEFT"/>test_install_symlink_bad()<br ALIGN="LEFT"/>test_install_symlink_destination()<br ALIGN="LEFT"/>test_install_tar()<br ALIGN="LEFT"/>test_install_url()<br ALIGN="LEFT"/>test_install_zip()<br ALIGN="LEFT"/>test_overwrite_broken_symlink()<br ALIGN="LEFT"/>test_overwrite_dir()<br ALIGN="LEFT"/>test_overwrite_file()<br ALIGN="LEFT"/>test_quiet()<br ALIGN="LEFT"/>test_single_dir()<br ALIGN="LEFT"/>test_single_file()<br ALIGN="LEFT"/>test_skip_old_file()<br ALIGN="LEFT"/>test_update_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance" [color="black", fontcolor="black", label=<{TestInstance|<br ALIGN="LEFT"/>|test_args_kw()<br ALIGN="LEFT"/>test_bad_default()<br ALIGN="LEFT"/>test_basic()<br ALIGN="LEFT"/>test_default_klass()<br ALIGN="LEFT"/>test_instance()<br ALIGN="LEFT"/>test_unique_default_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstanceList" [color="black", fontcolor="black", label=<{TestInstanceList|obj<br ALIGN="LEFT"/>|test_klass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInt" [color="black", fontcolor="black", label=<{TestInt|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestInteger" [color="black", fontcolor="black", label=<{TestInteger|obj<br ALIGN="LEFT"/>|coerce(n)<br ALIGN="LEFT"/>test_cast_small()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v1.tests.test_json.TestJSON" [color="black", fontcolor="black", label=<{TestJSON|<br ALIGN="LEFT"/>|test_roundtrip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.tests.test_json.TestJSON" [color="black", fontcolor="black", label=<{TestJSON|<br ALIGN="LEFT"/>|test_roundtrip()<br ALIGN="LEFT"/>test_roundtrip_nosplit()<br ALIGN="LEFT"/>test_roundtrip_split()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_json.TestJSON" [color="black", fontcolor="black", label=<{TestJSON|ext : str<br ALIGN="LEFT"/>mod<br ALIGN="LEFT"/>nb0_ref : NoneType<br ALIGN="LEFT"/>|test_read_jpeg()<br ALIGN="LEFT"/>test_read_png()<br ALIGN="LEFT"/>test_roundtrip_nosplit()<br ALIGN="LEFT"/>test_roundtrip_split()<br ALIGN="LEFT"/>test_strip_transient()<br ALIGN="LEFT"/>test_to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v4.tests.test_json.TestJSON" [color="black", fontcolor="black", label=<{TestJSON|ext : str<br ALIGN="LEFT"/>mod<br ALIGN="LEFT"/>nb0_ref : NoneType<br ALIGN="LEFT"/>|test_read_jpeg()<br ALIGN="LEFT"/>test_read_png()<br ALIGN="LEFT"/>test_roundtrip_nosplit()<br ALIGN="LEFT"/>test_roundtrip_split()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_kernelmanager.TestKernelManager" [color="black", fontcolor="black", label=<{TestKernelManager|<br ALIGN="LEFT"/>|test_get_connect_info()<br ALIGN="LEFT"/>test_ipc_lifecycle()<br ALIGN="LEFT"/>test_tcp_lifecycle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_multikernelmanager.TestKernelManager" [color="black", fontcolor="black", label=<{TestKernelManager|<br ALIGN="LEFT"/>|test_ipc_cinfo()<br ALIGN="LEFT"/>test_ipc_lifecycle()<br ALIGN="LEFT"/>test_shutdown_all()<br ALIGN="LEFT"/>test_tcp_cinfo()<br ALIGN="LEFT"/>test_tcp_lifecycle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_loader.TestKeyValueCL" [color="black", fontcolor="black", label=<{TestKeyValueCL|klass<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_eval()<br ALIGN="LEFT"/>test_expanduser()<br ALIGN="LEFT"/>test_extra_args()<br ALIGN="LEFT"/>test_unicode_alias()<br ALIGN="LEFT"/>test_unicode_args()<br ALIGN="LEFT"/>test_unicode_bytes_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.qt.console.tests.test_kill_ring.TestKillRing" [color="black", fontcolor="black", label=<{TestKillRing|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_generic()<br ALIGN="LEFT"/>test_qt_basic()<br ALIGN="LEFT"/>test_qt_cursor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestLSFControllerLauncher" [color="black", fontcolor="black", label=<{TestLSFControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestLSFEngineSetLauncher" [color="black", fontcolor="black", label=<{TestLSFEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.filters.tests.test_latex.TestLatex" [color="black", fontcolor="black", label=<{TestLatex|<br ALIGN="LEFT"/>|test_escape_latex()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_latex.TestLatex" [color="black", fontcolor="black", label=<{TestLatex|<br ALIGN="LEFT"/>|build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_latex.TestLatexExporter" [color="black", fontcolor="black", label=<{TestLatexExporter|exporter_class<br ALIGN="LEFT"/>should_include_raw : list<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_export_article()<br ALIGN="LEFT"/>test_export_basic()<br ALIGN="LEFT"/>test_export_book()<br ALIGN="LEFT"/>test_prompt_number_color()<br ALIGN="LEFT"/>test_very_long_cells()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLenList" [color="black", fontcolor="black", label=<{TestLenList|obj<br ALIGN="LEFT"/>|coerce(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.utils.tests.test_lexers.TestLexers" [color="black", fontcolor="black", label=<{TestLexers|lexer : IPython3<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>testIPythonLexer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLink" [color="black", fontcolor="black", label=<{TestLink|<br ALIGN="LEFT"/>|test_callbacks()<br ALIGN="LEFT"/>test_connect_same()<br ALIGN="LEFT"/>test_link_different()<br ALIGN="LEFT"/>test_unlink()<br ALIGN="LEFT"/>test_validate_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_path.TestLinkOrCopy" [color="black", fontcolor="black", label=<{TestLinkOrCopy|src<br ALIGN="LEFT"/>tempdir : TemporaryDirectory<br ALIGN="LEFT"/>|assert_content_equal(a, b)<br ALIGN="LEFT"/>assert_inode_equal(a, b)<br ALIGN="LEFT"/>assert_inode_not_equal(a, b)<br ALIGN="LEFT"/>dst()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_link_into_dir()<br ALIGN="LEFT"/>test_link_successful()<br ALIGN="LEFT"/>test_link_twice()<br ALIGN="LEFT"/>test_no_link()<br ALIGN="LEFT"/>test_target_exists()<br ALIGN="LEFT"/>test_windows()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestList" [color="black", fontcolor="black", label=<{TestList|obj<br ALIGN="LEFT"/>|coerce(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_lbview.TestLoadBalancedView" [color="black", fontcolor="black", label=<{TestLoadBalancedView|view<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_abort()<br ALIGN="LEFT"/>test_after()<br ALIGN="LEFT"/>test_follow()<br ALIGN="LEFT"/>test_impossible_dependency()<br ALIGN="LEFT"/>test_invalid_dependency()<br ALIGN="LEFT"/>test_map()<br ALIGN="LEFT"/>test_map_generator()<br ALIGN="LEFT"/>test_map_iterable()<br ALIGN="LEFT"/>test_map_ordered()<br ALIGN="LEFT"/>test_map_short_first()<br ALIGN="LEFT"/>test_map_short_last()<br ALIGN="LEFT"/>test_map_unordered()<br ALIGN="LEFT"/>test_retries()<br ALIGN="LEFT"/>test_short_timeout()<br ALIGN="LEFT"/>test_z_crash_task()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestLocalControllerLauncher" [color="black", fontcolor="black", label=<{TestLocalControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestLocalEngineSetLauncher" [color="black", fontcolor="black", label=<{TestLocalEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLong" [color="black", fontcolor="black", label=<{TestLong|obj<br ALIGN="LEFT"/>|test_cast_small()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestLooseTupleTrait" [color="black", fontcolor="black", label=<{TestLooseTupleTrait|obj<br ALIGN="LEFT"/>|coerce(value)<br ALIGN="LEFT"/>test_invalid_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestMPIControllerLauncher" [color="black", fontcolor="black", label=<{TestMPIControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestMPIEngineSetLauncher" [color="black", fontcolor="black", label=<{TestMPIEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_run.TestMagicRunPass" [color="black", fontcolor="black", label=<{TestMagicRunPass|<br ALIGN="LEFT"/>|run_tmpfile()<br ALIGN="LEFT"/>run_tmpfile_p()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>test_builtins_id()<br ALIGN="LEFT"/>test_builtins_type()<br ALIGN="LEFT"/>test_prompts()<br ALIGN="LEFT"/>test_run_profile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_run.TestMagicRunSimple" [color="black", fontcolor="black", label=<{TestMagicRunSimple|<br ALIGN="LEFT"/>|test_aggressive_namespace_cleanup()<br ALIGN="LEFT"/>test_ignore_sys_exit()<br ALIGN="LEFT"/>test_obj_del()<br ALIGN="LEFT"/>test_run_formatting()<br ALIGN="LEFT"/>test_run_i_after_reset()<br ALIGN="LEFT"/>test_run_ipy_file_attribute()<br ALIGN="LEFT"/>test_run_nb()<br ALIGN="LEFT"/>test_run_py_file_attribute()<br ALIGN="LEFT"/>test_run_second()<br ALIGN="LEFT"/>test_simpledef()<br ALIGN="LEFT"/>test_tclass()<br ALIGN="LEFT"/>test_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_run.TestMagicRunWithPackage" [color="black", fontcolor="black", label=<{TestMagicRunWithPackage|package<br ALIGN="LEFT"/>tempdir : TemporaryDirectory<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|check_run_submodule(submodule, opts)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_debug_run_submodule_with_absolute_import()<br ALIGN="LEFT"/>test_debug_run_submodule_with_relative_import()<br ALIGN="LEFT"/>test_prun_submodule_with_absolute_import()<br ALIGN="LEFT"/>test_prun_submodule_with_relative_import()<br ALIGN="LEFT"/>test_run_submodule_with_absolute_import()<br ALIGN="LEFT"/>test_run_submodule_with_relative_import()<br ALIGN="LEFT"/>with_fake_debugger()<br ALIGN="LEFT"/>writefile(name, content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.tests.test_markdown.TestMarkdown" [color="black", fontcolor="black", label=<{TestMarkdown|tests : list<br ALIGN="LEFT"/>tokens : list<br ALIGN="LEFT"/>|test_markdown2html()<br ALIGN="LEFT"/>test_markdown2html_heading_anchors()<br ALIGN="LEFT"/>test_markdown2html_math()<br ALIGN="LEFT"/>test_markdown2html_math_mixed()<br ALIGN="LEFT"/>test_markdown2html_math_paragraph()<br ALIGN="LEFT"/>test_markdown2latex()<br ALIGN="LEFT"/>test_markdown2latex_markup()<br ALIGN="LEFT"/>test_markdown2rst()<br ALIGN="LEFT"/>test_pandoc_extra_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_markdown.TestMarkdownExporter" [color="black", fontcolor="black", label=<{TestMarkdownExporter|exporter_class<br ALIGN="LEFT"/>should_include_raw : list<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.tests.test_nbbase.TestMetadata" [color="black", fontcolor="black", label=<{TestMetadata|<br ALIGN="LEFT"/>|test_empty_metadata()<br ALIGN="LEFT"/>test_metadata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_nbbase.TestMetadata" [color="black", fontcolor="black", label=<{TestMetadata|<br ALIGN="LEFT"/>|test_empty_metadata()<br ALIGN="LEFT"/>test_metadata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestModules" [color="black", fontcolor="black", label=<{TestModules|<br ALIGN="LEFT"/>|test_extraneous_loads()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_mongodb.TestMongoBackend" [color="black", fontcolor="black", label=<{TestMongoBackend|<br ALIGN="LEFT"/>|create_db()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestMultiTuple" [color="black", fontcolor="black", label=<{TestMultiTuple|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.tests.test_nbconvertapp.TestNbConvertApp" [color="black", fontcolor="black", label=<{TestNbConvertApp|<br ALIGN="LEFT"/>|test_accents_in_filename()<br ALIGN="LEFT"/>test_cwd_plugin()<br ALIGN="LEFT"/>test_default_config()<br ALIGN="LEFT"/>test_different_build_dir()<br ALIGN="LEFT"/>test_explicit()<br ALIGN="LEFT"/>test_explicit_glob()<br ALIGN="LEFT"/>test_filename_accent_pdf()<br ALIGN="LEFT"/>test_filename_spaces()<br ALIGN="LEFT"/>test_glob()<br ALIGN="LEFT"/>test_glob_explicit()<br ALIGN="LEFT"/>test_glob_subdir()<br ALIGN="LEFT"/>test_help_output()<br ALIGN="LEFT"/>test_inplace()<br ALIGN="LEFT"/>test_notebook_help()<br ALIGN="LEFT"/>test_output_ext()<br ALIGN="LEFT"/>test_output_suffix()<br ALIGN="LEFT"/>test_override_config()<br ALIGN="LEFT"/>test_png_base64_html_ok()<br ALIGN="LEFT"/>test_post_processor()<br ALIGN="LEFT"/>test_spurious_cr()<br ALIGN="LEFT"/>test_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestNoneInstanceList" [color="black", fontcolor="black", label=<{TestNoneInstanceList|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.tests.test_sign.TestNotary" [color="black", fontcolor="black", label=<{TestNotary|nb<br ALIGN="LEFT"/>nb3<br ALIGN="LEFT"/>notary<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_algorithms()<br ALIGN="LEFT"/>test_change_secret()<br ALIGN="LEFT"/>test_check_cells()<br ALIGN="LEFT"/>test_check_cells_v3()<br ALIGN="LEFT"/>test_check_signature()<br ALIGN="LEFT"/>test_cull_db()<br ALIGN="LEFT"/>test_mark_cells_trusted()<br ALIGN="LEFT"/>test_mark_cells_trusted_v3()<br ALIGN="LEFT"/>test_mark_cells_untrusted()<br ALIGN="LEFT"/>test_mark_cells_untrusted_v3()<br ALIGN="LEFT"/>test_sign()<br ALIGN="LEFT"/>test_sign_same()<br ALIGN="LEFT"/>test_trust_no_output()<br ALIGN="LEFT"/>test_unsign()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v1.tests.test_nbbase.TestNotebook" [color="black", fontcolor="black", label=<{TestNotebook|<br ALIGN="LEFT"/>|test_empty_notebook()<br ALIGN="LEFT"/>test_notebooke()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.tests.test_nbbase.TestNotebook" [color="black", fontcolor="black", label=<{TestNotebook|<br ALIGN="LEFT"/>|test_empty_notebook()<br ALIGN="LEFT"/>test_notebook()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_nbbase.TestNotebook" [color="black", fontcolor="black", label=<{TestNotebook|<br ALIGN="LEFT"/>|test_empty_notebook()<br ALIGN="LEFT"/>test_notebook()<br ALIGN="LEFT"/>test_notebook_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_notebook.TestNotebookExporter" [color="black", fontcolor="black", label=<{TestNotebookExporter|exporter_class<br ALIGN="LEFT"/>|test_downgrade_2()<br ALIGN="LEFT"/>test_downgrade_3()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestObjectName" [color="black", fontcolor="black", label=<{TestObjectName|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_nbbase.TestOutputs" [color="black", fontcolor="black", label=<{TestOutputs|<br ALIGN="LEFT"/>|test_b64b6tes_jpeg()<br ALIGN="LEFT"/>test_b64b6tes_png()<br ALIGN="LEFT"/>test_binary_jpeg()<br ALIGN="LEFT"/>test_binary_png()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestPBSControllerLauncher" [color="black", fontcolor="black", label=<{TestPBSControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestPBSEngineSetLauncher" [color="black", fontcolor="black", label=<{TestPBSEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_pdf.TestPDF" [color="black", fontcolor="black", label=<{TestPDF|exporter_class<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.utils.tests.test_pandoc.TestPandoc" [color="black", fontcolor="black", label=<{TestPandoc|original_env<br ALIGN="LEFT"/>|test_minimal_version()<br ALIGN="LEFT"/>test_pandoc_available()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_magics.TestParallelMagics" [color="black", fontcolor="black", label=<{TestParallelMagics|<br ALIGN="LEFT"/>|test_autopx_blocking()<br ALIGN="LEFT"/>test_autopx_nonblocking()<br ALIGN="LEFT"/>test_cellpx_block()<br ALIGN="LEFT"/>test_cellpx_block_args()<br ALIGN="LEFT"/>test_cellpx_groupby_engine()<br ALIGN="LEFT"/>test_cellpx_groupby_order()<br ALIGN="LEFT"/>test_cellpx_groupby_type()<br ALIGN="LEFT"/>test_cellpx_targets()<br ALIGN="LEFT"/>test_px_blocking()<br ALIGN="LEFT"/>test_px_nonblocking()<br ALIGN="LEFT"/>test_px_pylab()<br ALIGN="LEFT"/>test_pxconfig()<br ALIGN="LEFT"/>test_result()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestParentConfigurable" [color="black", fontcolor="black", label=<{TestParentConfigurable|<br ALIGN="LEFT"/>|test_multi_parent()<br ALIGN="LEFT"/>test_multi_parent_priority()<br ALIGN="LEFT"/>test_parent_config()<br ALIGN="LEFT"/>test_parent_inheritance()<br ALIGN="LEFT"/>test_parent_priority()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.TestProcessLauncher" [color="black", fontcolor="black", label=<{TestProcessLauncher|cmd_and_args : list<br ALIGN="LEFT"/>poll<br ALIGN="LEFT"/>process : Popen<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v2.tests.test_nbpy.TestPy" [color="black", fontcolor="black", label=<{TestPy|<br ALIGN="LEFT"/>|test_write()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_nbpy.TestPy" [color="black", fontcolor="black", label=<{TestPy|ext : str<br ALIGN="LEFT"/>ignored_keys : list<br ALIGN="LEFT"/>mod<br ALIGN="LEFT"/>nb0_ref : str<br ALIGN="LEFT"/>|assertNBEquals(nba, nbb)<br ALIGN="LEFT"/>assertSubset(da, db)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_pylabtools.TestPylabSwitch" [color="black", fontcolor="black", label=<{TestPylabSwitch|<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/>test_inline()<br ALIGN="LEFT"/>test_qt()<br ALIGN="LEFT"/>test_qt_gtk()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_python.TestPythonExporter" [color="black", fontcolor="black", label=<{TestPythonExporter|exporter_class<br ALIGN="LEFT"/>should_include_raw : list<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_rst.TestRSTExporter" [color="black", fontcolor="black", label=<{TestRSTExporter|exporter_class<br ALIGN="LEFT"/>should_include_raw : list<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_empty_code_cell()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.tests.test_reader.TestReader" [color="black", fontcolor="black", label=<{TestReader|<br ALIGN="LEFT"/>|test_read()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestSGEControllerLauncher" [color="black", fontcolor="black", label=<{TestSGEControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestSGEEngineSetLauncher" [color="black", fontcolor="black", label=<{TestSGEEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_db.TestSQLiteBackend" [color="black", fontcolor="black", label=<{TestSQLiteBackend|<br ALIGN="LEFT"/>|create_db()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestSSHControllerLauncher" [color="black", fontcolor="black", label=<{TestSSHControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestSSHEngineLauncher" [color="black", fontcolor="black", label=<{TestSSHEngineLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestSSHEngineSetLauncher" [color="black", fontcolor="black", label=<{TestSSHEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|test_cluster_id_arg()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestSSHProxyEngineSetLauncher" [color="black", fontcolor="black", label=<{TestSSHProxyEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestSafeExecfileNonAsciiPath" [color="black", fontcolor="black", label=<{TestSafeExecfileNonAsciiPath|BASETESTDIR<br ALIGN="LEFT"/>TESTDIR<br ALIGN="LEFT"/>fname : str<br ALIGN="LEFT"/>oldpath<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_1()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_script.TestScriptExporter" [color="black", fontcolor="black", label=<{TestScriptExporter|exporter_class<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_export_python()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.iptest.TestSection" [color="black", fontcolor="black", label=<{TestSection|dependencies : list<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>excludes : list<br ALIGN="LEFT"/>includes<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>will_run<br ALIGN="LEFT"/>|exclude(module)<br ALIGN="LEFT"/>requires()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.postprocessors.tests.test_serve.TestServe" [color="black", fontcolor="black", label=<{TestServe|<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.tests.test_session.TestSession" [color="black", fontcolor="black", label=<{TestSession|<br ALIGN="LEFT"/>|test_args()<br ALIGN="LEFT"/>test_bad_pack()<br ALIGN="LEFT"/>test_bad_packer()<br ALIGN="LEFT"/>test_bad_roundtrip()<br ALIGN="LEFT"/>test_bad_unpack()<br ALIGN="LEFT"/>test_bad_unpacker()<br ALIGN="LEFT"/>test_cull_digest_history()<br ALIGN="LEFT"/>test_datetimes()<br ALIGN="LEFT"/>test_datetimes_msgpack()<br ALIGN="LEFT"/>test_datetimes_pickle()<br ALIGN="LEFT"/>test_default_secure()<br ALIGN="LEFT"/>test_feed_identities()<br ALIGN="LEFT"/>test_msg()<br ALIGN="LEFT"/>test_send()<br ALIGN="LEFT"/>test_send_raw()<br ALIGN="LEFT"/>test_serialize()<br ALIGN="LEFT"/>test_session_id()<br ALIGN="LEFT"/>test_tracking()<br ALIGN="LEFT"/>test_unique_msg_ids()<br ALIGN="LEFT"/>test_zero_digest_history()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.services.sessions.tests.test_sessionmanager.TestSessionManager" [color="black", fontcolor="black", label=<{TestSessionManager|sm<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_bad_delete_session()<br ALIGN="LEFT"/>test_bad_get_session()<br ALIGN="LEFT"/>test_bad_update_session()<br ALIGN="LEFT"/>test_delete_session()<br ALIGN="LEFT"/>test_get_session()<br ALIGN="LEFT"/>test_get_session_dead_kernel()<br ALIGN="LEFT"/>test_list_sessions()<br ALIGN="LEFT"/>test_list_sessions_dead_kernel()<br ALIGN="LEFT"/>test_update_session()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_path.TestShellGlob" [color="black", fontcolor="black", label=<{TestShellGlob|<br ALIGN="LEFT"/>|check_match(patterns, matches)<br ALIGN="LEFT"/>common_cases()<br ALIGN="LEFT"/>in_tempdir()<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_match_posix()<br ALIGN="LEFT"/>test_match_windows()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable" [color="black", fontcolor="black", label=<{TestSingletonConfigurable|<br ALIGN="LEFT"/>|test_inheritance()<br ALIGN="LEFT"/>test_instance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.exporters.tests.test_slides.TestSlidesExporter" [color="black", fontcolor="black", label=<{TestSlidesExporter|exporter_class<br ALIGN="LEFT"/>should_include_raw : list<br ALIGN="LEFT"/>|test_constructor()<br ALIGN="LEFT"/>test_export()<br ALIGN="LEFT"/>test_export_reveal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.writers.tests.test_stdout.TestStdout" [color="black", fontcolor="black", label=<{TestStdout|<br ALIGN="LEFT"/>|test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.filters.tests.test_strings.TestStrings" [color="black", fontcolor="black", label=<{TestStrings|<br ALIGN="LEFT"/>|test_add_anchor()<br ALIGN="LEFT"/>test_add_anchor_fail()<br ALIGN="LEFT"/>test_add_prompts()<br ALIGN="LEFT"/>test_comment_lines()<br ALIGN="LEFT"/>test_get_lines()<br ALIGN="LEFT"/>test_html2text()<br ALIGN="LEFT"/>test_ipython2python()<br ALIGN="LEFT"/>test_posix_path()<br ALIGN="LEFT"/>test_prevent_list_blocks()<br ALIGN="LEFT"/>test_strip_dollars()<br ALIGN="LEFT"/>test_strip_files_prefix()<br ALIGN="LEFT"/>test_wrap_text()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestSyntaxErrorTransformer" [color="black", fontcolor="black", label=<{TestSyntaxErrorTransformer|transformer<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_syntaxerror_input_transformer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestSystemPipedExitCode" [color="black", fontcolor="black", label=<{TestSystemPipedExitCode|system<br ALIGN="LEFT"/>|test_exit_code_error()<br ALIGN="LEFT"/>test_exit_code_ok()<br ALIGN="LEFT"/>test_exit_code_signal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_interactiveshell.TestSystemRaw" [color="black", fontcolor="black", label=<{TestSystemRaw|system<br ALIGN="LEFT"/>|test_1()<br ALIGN="LEFT"/>test_control_c()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTCPAddress" [color="black", fontcolor="black", label=<{TestTCPAddress|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis" [color="black", fontcolor="black", label=<{TestThis|<br ALIGN="LEFT"/>|test_subclass()<br ALIGN="LEFT"/>test_subclass_override()<br ALIGN="LEFT"/>test_this_class()<br ALIGN="LEFT"/>test_this_in_container()<br ALIGN="LEFT"/>test_this_inst()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType" [color="black", fontcolor="black", label=<{TestTraitType|<br ALIGN="LEFT"/>|test_default_validate()<br ALIGN="LEFT"/>test_dynamic_initializer()<br ALIGN="LEFT"/>test_error()<br ALIGN="LEFT"/>test_get_undefined()<br ALIGN="LEFT"/>test_info()<br ALIGN="LEFT"/>test_is_valid_for()<br ALIGN="LEFT"/>test_set()<br ALIGN="LEFT"/>test_validate()<br ALIGN="LEFT"/>test_value_for()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestTupleTrait" [color="black", fontcolor="black", label=<{TestTupleTrait|obj<br ALIGN="LEFT"/>|coerce(value)<br ALIGN="LEFT"/>test_invalid_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestType" [color="black", fontcolor="black", label=<{TestType|<br ALIGN="LEFT"/>|test_allow_none()<br ALIGN="LEFT"/>test_default()<br ALIGN="LEFT"/>test_set_str_klass()<br ALIGN="LEFT"/>test_str_klass()<br ALIGN="LEFT"/>test_validate_default()<br ALIGN="LEFT"/>test_validate_klass()<br ALIGN="LEFT"/>test_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestUnicode" [color="black", fontcolor="black", label=<{TestUnicode|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestUnionListTrait" [color="black", fontcolor="black", label=<{TestUnionListTrait|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.tests.test_validator.TestValidator" [color="black", fontcolor="black", label=<{TestValidator|<br ALIGN="LEFT"/>|test_future()<br ALIGN="LEFT"/>test_invalid()<br ALIGN="LEFT"/>test_nb2()<br ALIGN="LEFT"/>test_nb3()<br ALIGN="LEFT"/>test_nb4()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_view.TestView" [color="black", fontcolor="black", label=<{TestView|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_abort()<br ALIGN="LEFT"/>test_abort_all()<br ALIGN="LEFT"/>test_apply_displaypub()<br ALIGN="LEFT"/>test_apply_namedtuple()<br ALIGN="LEFT"/>test_apply_numpy()<br ALIGN="LEFT"/>test_apply_numpy_object_dtype()<br ALIGN="LEFT"/>test_apply_reference()<br ALIGN="LEFT"/>test_apply_tracked()<br ALIGN="LEFT"/>test_can_dict_arg()<br ALIGN="LEFT"/>test_can_dict_kwarg()<br ALIGN="LEFT"/>test_can_list_arg()<br ALIGN="LEFT"/>test_can_list_kwarg()<br ALIGN="LEFT"/>test_compositeerror_render_exception()<br ALIGN="LEFT"/>test_compositeerror_truncate()<br ALIGN="LEFT"/>test_data_pub()<br ALIGN="LEFT"/>test_data_pub_single()<br ALIGN="LEFT"/>test_eval_reference()<br ALIGN="LEFT"/>test_execute()<br ALIGN="LEFT"/>test_execute_displaypub()<br ALIGN="LEFT"/>test_execute_magic()<br ALIGN="LEFT"/>test_execute_raises()<br ALIGN="LEFT"/>test_execute_reply()<br ALIGN="LEFT"/>test_execute_reply_rich()<br ALIGN="LEFT"/>test_execute_reply_stdout()<br ALIGN="LEFT"/>test_execute_result()<br ALIGN="LEFT"/>test_execute_silent()<br ALIGN="LEFT"/>test_func_default_func()<br ALIGN="LEFT"/>test_get_result()<br ALIGN="LEFT"/>test_importer()<br ALIGN="LEFT"/>test_len()<br ALIGN="LEFT"/>test_magic_pylab()<br ALIGN="LEFT"/>test_map()<br ALIGN="LEFT"/>test_map_empty_sequence()<br ALIGN="LEFT"/>test_map_iterable()<br ALIGN="LEFT"/>test_map_numpy()<br ALIGN="LEFT"/>test_map_ref()<br ALIGN="LEFT"/>test_map_reference()<br ALIGN="LEFT"/>test_nested_getitem_setitem()<br ALIGN="LEFT"/>test_push_function_defaults()<br ALIGN="LEFT"/>test_push_function_globals()<br ALIGN="LEFT"/>test_push_numpy_nocopy()<br ALIGN="LEFT"/>test_push_pull()<br ALIGN="LEFT"/>test_push_pull_function()<br ALIGN="LEFT"/>test_push_pull_recarray()<br ALIGN="LEFT"/>test_push_pull_timeseries()<br ALIGN="LEFT"/>test_push_tracked()<br ALIGN="LEFT"/>test_reference_nameerror()<br ALIGN="LEFT"/>test_remote_reference()<br ALIGN="LEFT"/>test_remoteerror_render_exception()<br ALIGN="LEFT"/>test_return_namedtuple()<br ALIGN="LEFT"/>test_run_newline()<br ALIGN="LEFT"/>test_scatter_gather()<br ALIGN="LEFT"/>test_scatter_gather_lazy()<br ALIGN="LEFT"/>test_scatter_gather_nonblocking()<br ALIGN="LEFT"/>test_scatter_gather_numpy()<br ALIGN="LEFT"/>test_scatter_gather_numpy_nonblocking()<br ALIGN="LEFT"/>test_scatter_tracked()<br ALIGN="LEFT"/>test_single_engine_map()<br ALIGN="LEFT"/>test_sync_imports()<br ALIGN="LEFT"/>test_sync_imports_quiet()<br ALIGN="LEFT"/>test_temp_flags()<br ALIGN="LEFT"/>test_unicode_apply_arg()<br ALIGN="LEFT"/>test_unicode_apply_result()<br ALIGN="LEFT"/>test_unicode_execute()<br ALIGN="LEFT"/>test_z_crash_mux()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestWinHPCControllerLauncher" [color="black", fontcolor="black", label=<{TestWinHPCControllerLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.TestWinHPCEngineSetLauncher" [color="black", fontcolor="black", label=<{TestWinHPCEngineSetLauncher|launcher_class<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v2.tests.test_nbbase.TestWorksheet" [color="black", fontcolor="black", label=<{TestWorksheet|<br ALIGN="LEFT"/>|test_empty_worksheet()<br ALIGN="LEFT"/>test_worksheet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.v3.tests.test_nbbase.TestWorksheet" [color="black", fontcolor="black", label=<{TestWorksheet|<br ALIGN="LEFT"/>|test_empty_worksheet()<br ALIGN="LEFT"/>test_worksheet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_magic.TestXdel" [color="black", fontcolor="black", label=<{TestXdel|<br ALIGN="LEFT"/>|test_xdel()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.tests.test_tools.Test_ipexec_validate" [color="black", fontcolor="black", label=<{Test_ipexec_validate|<br ALIGN="LEFT"/>|test_exception_path()<br ALIGN="LEFT"/>test_exception_path2()<br ALIGN="LEFT"/>test_main_path()<br ALIGN="LEFT"/>test_main_path2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_completerlib.Test_magic_run_completer" [color="black", fontcolor="black", label=<{Test_magic_run_completer|BASETESTDIR<br ALIGN="LEFT"/>dirs : list<br ALIGN="LEFT"/>files : list<br ALIGN="LEFT"/>oldpath<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_1()<br ALIGN="LEFT"/>test_2()<br ALIGN="LEFT"/>test_3()<br ALIGN="LEFT"/>test_completion_in_dir()<br ALIGN="LEFT"/>test_completion_more_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_completerlib.Test_magic_run_completer_nonascii" [color="black", fontcolor="black", label=<{Test_magic_run_completer_nonascii|BASETESTDIR<br ALIGN="LEFT"/>oldpath<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_1()<br ALIGN="LEFT"/>test_2()<br ALIGN="LEFT"/>test_3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.decorators.as_unittest.Tester" [color="black", fontcolor="black", label=<{Tester|<br ALIGN="LEFT"/>|test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.testing.ipunittest.Doc2UnitTester.__call__.Tester" [color="black", fontcolor="black", label=<{Tester|<br ALIGN="LEFT"/>|test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.writers.tests.test_files.Testfiles" [color="black", fontcolor="black", label=<{Testfiles|<br ALIGN="LEFT"/>|test_basic_output()<br ALIGN="LEFT"/>test_builddir()<br ALIGN="LEFT"/>test_ext()<br ALIGN="LEFT"/>test_extract()<br ALIGN="LEFT"/>test_glob()<br ALIGN="LEFT"/>test_links()<br ALIGN="LEFT"/>test_relpath()<br ALIGN="LEFT"/>test_relpath_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_revealhelp.Testrevealhelp" [color="black", fontcolor="black", label=<{Testrevealhelp|<br ALIGN="LEFT"/>|build_notebook()<br ALIGN="LEFT"/>build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_reveal_attribute()<br ALIGN="LEFT"/>test_reveal_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_wildcard.Tests" [color="black", fontcolor="black", label=<{Tests|<br ALIGN="LEFT"/>|test_case()<br ALIGN="LEFT"/>test_case_showall()<br ALIGN="LEFT"/>test_dict_attributes()<br ALIGN="LEFT"/>test_dict_dir()<br ALIGN="LEFT"/>test_nocase()<br ALIGN="LEFT"/>test_nocase_showall()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.tests.base.TestsBase" [color="black", fontcolor="black", label=<{TestsBase|<br ALIGN="LEFT"/>|call(parameters, ignore_return_code)<br ALIGN="LEFT"/>copy_files_to(copy_filenames, dest)<br ALIGN="LEFT"/>create_empty_notebook(path)<br ALIGN="LEFT"/>create_temp_cwd(copy_filenames)<br ALIGN="LEFT"/>fuzzy_compare(a, b, newlines_are_spaces, tabs_are_spaces, fuzzy_spacing, ignore_spaces, ignore_newlines, case_sensitive, leave_padding)<br ALIGN="LEFT"/>recursive_replace(text, search, replacement)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbformat.tests.base.TestsBase" [color="black", fontcolor="black", label=<{TestsBase|<br ALIGN="LEFT"/>|fopen(f, mode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.preprocessors.tests.test_svg2pdf.Testsvg2pdf" [color="black", fontcolor="black", label=<{Testsvg2pdf|simple_svg : str<br ALIGN="LEFT"/>|build_notebook()<br ALIGN="LEFT"/>build_preprocessor()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_string.Text" [color="black", fontcolor="black", label=<{Text|<br ALIGN="LEFT"/>|on_submit(callback, remove)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.pretty.Text" [color="black", fontcolor="black", label=<{Text|objs : list<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>|add(obj, width)<br ALIGN="LEFT"/>output(stream, output_width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.TextDisplayObject" [color="black", fontcolor="black", label=<{TextDisplayObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_formatters.test_print_method_weird.TextMagicHat" [color="black", fontcolor="black", label=<{TextMagicHat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_string.Textarea" [color="black", fontcolor="black", label=<{Textarea|<br ALIGN="LEFT"/>|scroll_to_bottom()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.This" [color="black", fontcolor="black", label=<{This|info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.threaded.ThreadedKernelClient" [color="black", fontcolor="black", label=<{ThreadedKernelClient|hb_channel_class<br ALIGN="LEFT"/>ioloop<br ALIGN="LEFT"/>ioloop_thread<br ALIGN="LEFT"/>iopub_channel_class<br ALIGN="LEFT"/>shell_channel_class<br ALIGN="LEFT"/>stdin_channel_class<br ALIGN="LEFT"/>|start_channels(shell, iopub, stdin, hb)<br ALIGN="LEFT"/>stop_channels()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.threaded.ThreadedZMQSocketChannel" [color="black", fontcolor="black", label=<{ThreadedZMQSocketChannel|ioloop : NoneType<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>socket : NoneType<br ALIGN="LEFT"/>stream : NoneType<br ALIGN="LEFT"/>|<I>call_handlers</I>(msg)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>flush(timeout)<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/><I>process_events</I>()<br ALIGN="LEFT"/>send(msg)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magics.execution.TimeitResult" [color="black", fontcolor="black", label=<{TimeitResult|all_runs<br ALIGN="LEFT"/>best<br ALIGN="LEFT"/>compile_time<br ALIGN="LEFT"/>loops<br ALIGN="LEFT"/>repeat<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.execution.TimeitTemplateFiller" [color="black", fontcolor="black", label=<{TimeitTemplateFiller|ast_setup<br ALIGN="LEFT"/>ast_stmt<br ALIGN="LEFT"/>|visit_For(node)<br ALIGN="LEFT"/>visit_FunctionDef(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.tests.launchnotebook.TimeoutError" [color="black", fontcolor="red", label=<{TimeoutError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.TimeoutError" [color="black", fontcolor="red", label=<{TimeoutError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.execution.Timer" [color="black", fontcolor="black", label=<{Timer|inner<br ALIGN="LEFT"/>|timeit(number)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.eventloops.loop_tk.Timer" [color="black", fontcolor="black", label=<{Timer|app : Tk<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>|on_timer()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.eventloops.loop_wx.TimerFrame" [color="black", fontcolor="black", label=<{TimerFrame|func<br ALIGN="LEFT"/>timer<br ALIGN="LEFT"/>|on_timer(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.TkInputHook" [color="black", fontcolor="black", label=<{TkInputHook|<br ALIGN="LEFT"/>|enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_bool.ToggleButton" [color="black", fontcolor="black", label=<{ToggleButton|button_style<br ALIGN="LEFT"/>icon<br ALIGN="LEFT"/>tooltip<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection.ToggleButtons" [color="black", fontcolor="black", label=<{ToggleButtons|button_style<br ALIGN="LEFT"/>icons<br ALIGN="LEFT"/>tooltips<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._tokenize_py2.TokenError" [color="black", fontcolor="red", label=<{TokenError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._tokenize_py3.TokenError" [color="black", fontcolor="red", label=<{TokenError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._tokenize_py3.TokenInfo" [color="black", fontcolor="black", label=<{TokenInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.inputtransformer.TokenInputTransformer" [color="black", fontcolor="black", label=<{TokenInputTransformer|current_line : str<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>line_used : bool<br ALIGN="LEFT"/>tokenizer<br ALIGN="LEFT"/>|get_line()<br ALIGN="LEFT"/>output(tokens)<br ALIGN="LEFT"/>push(line)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>reset_tokenizer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.debugger.Tracer" [color="black", fontcolor="black", label=<{Tracer|debugger<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.base.handlers.TrailingSlashHandler" [color="black", fontcolor="black", label=<{TrailingSlashHandler|post<br ALIGN="LEFT"/>put<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.TraitError" [color="black", fontcolor="red", label=<{TraitError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TraitTestBase" [color="black", fontcolor="black", label=<{TraitTestBase|<br ALIGN="LEFT"/>|assign(value)<br ALIGN="LEFT"/>coerce(value)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_allow_none()<br ALIGN="LEFT"/>test_bad_values()<br ALIGN="LEFT"/>test_default_value()<br ALIGN="LEFT"/>test_good_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.TraitType" [color="black", fontcolor="black", label=<{TraitType|allow_none : bool<br ALIGN="LEFT"/>default_value<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>|error(obj, value)<br ALIGN="LEFT"/>get_default_value()<br ALIGN="LEFT"/>get_metadata(key, default)<br ALIGN="LEFT"/>info()<br ALIGN="LEFT"/><I>init</I>()<br ALIGN="LEFT"/>instance_init(obj)<br ALIGN="LEFT"/>set_default_value(obj)<br ALIGN="LEFT"/>set_metadata(key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_in_container.Tree" [color="black", fontcolor="black", label=<{Tree|leaves<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.tree.handlers.TreeHandler" [color="black", fontcolor="black", label=<{TreeHandler|<br ALIGN="LEFT"/>|generate_breadcrumbs(path)<br ALIGN="LEFT"/>generate_page_title(path)<br ALIGN="LEFT"/>get(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.tree.tests.test_tree_handler.TreeTest" [color="black", fontcolor="black", label=<{TreeTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_redirect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.path._path.TreeWalkWarning" [color="black", fontcolor="red", label=<{TreeWalkWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.sign.TrustNotebookApp" [color="black", fontcolor="black", label=<{TrustNotebookApp|description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags : dict<br ALIGN="LEFT"/>notary<br ALIGN="LEFT"/>reset<br ALIGN="LEFT"/>|generate_new_key()<br ALIGN="LEFT"/>sign_notebook(notebook_path)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.error.TryNext" [color="black", fontcolor="red", label=<{TryNext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Tuple" [color="black", fontcolor="black", label=<{Tuple|klass : tuple<br ALIGN="LEFT"/>|instance_init(obj)<br ALIGN="LEFT"/>validate_elements(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.TupleTrait" [color="black", fontcolor="black", label=<{TupleTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Type" [color="black", fontcolor="black", label=<{Type|default_value<br ALIGN="LEFT"/>klass : NoneType, object<br ALIGN="LEFT"/>|get_default_value()<br ALIGN="LEFT"/>info()<br ALIGN="LEFT"/>instance_init(obj)<br ALIGN="LEFT"/>validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.Undefined" [color="black", fontcolor="black", label=<{Undefined|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Unicode" [color="black", fontcolor="black", label=<{Unicode|default_value : str<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.UnicodeTrait" [color="black", fontcolor="black", label=<{UnicodeTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.Union" [color="black", fontcolor="black", label=<{Union|default_value<br ALIGN="LEFT"/>info_text : str<br ALIGN="LEFT"/>trait_types<br ALIGN="LEFT"/>|instance_init(obj)<br ALIGN="LEFT"/>validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.UnionListTrait" [color="black", fontcolor="black", label=<{UnionListTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.UnionTrait" [color="black", fontcolor="black", label=<{UnionTrait|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_traitlets.UnionTraitTest" [color="black", fontcolor="black", label=<{UnionTraitTest|obj<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.UnknownStatus" [color="black", fontcolor="red", label=<{UnknownStatus|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.error.UnmetDependency" [color="black", fontcolor="red", label=<{UnmetDependency|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils._tokenize_py2.Untokenizer" [color="black", fontcolor="black", label=<{Untokenizer|prev_col : int<br ALIGN="LEFT"/>prev_row : int<br ALIGN="LEFT"/>tokens : list<br ALIGN="LEFT"/>|add_whitespace(start)<br ALIGN="LEFT"/>compat(token, iterable)<br ALIGN="LEFT"/>untokenize(tokens)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils._tokenize_py3.Untokenizer" [color="black", fontcolor="black", label=<{Untokenizer|encoding : str<br ALIGN="LEFT"/>prev_col : int<br ALIGN="LEFT"/>prev_row : int<br ALIGN="LEFT"/>tokens : list<br ALIGN="LEFT"/>|add_whitespace(tok_type, start)<br ALIGN="LEFT"/>compat(token, iterable)<br ALIGN="LEFT"/>untokenize(tokens)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.error.UsageError" [color="black", fontcolor="red", label=<{UsageError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magics.UserMagics" [color="black", fontcolor="black", label=<{UserMagics|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.prompts.UserNSFormatter" [color="black", fontcolor="black", label=<{UserNSFormatter|shell<br ALIGN="LEFT"/>|get_value(key, args, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.adapter.V4toV5" [color="black", fontcolor="black", label=<{V4toV5|msg_type_map<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|complete_reply(msg)<br ALIGN="LEFT"/>complete_request(msg)<br ALIGN="LEFT"/>display_data(msg)<br ALIGN="LEFT"/>execute_reply(msg)<br ALIGN="LEFT"/>execute_request(msg)<br ALIGN="LEFT"/>input_request(msg)<br ALIGN="LEFT"/>inspect_reply(msg)<br ALIGN="LEFT"/>inspect_request(msg)<br ALIGN="LEFT"/>kernel_info_reply(msg)<br ALIGN="LEFT"/>stream(msg)<br ALIGN="LEFT"/>update_header(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_adapter.V4toV5TestCase" [color="black", fontcolor="black", label=<{V4toV5TestCase|from_version : int<br ALIGN="LEFT"/>to_version : int<br ALIGN="LEFT"/>|msg(msg_type, content)<br ALIGN="LEFT"/>test_complete_reply()<br ALIGN="LEFT"/>test_complete_request()<br ALIGN="LEFT"/>test_display_data()<br ALIGN="LEFT"/>test_execute_reply()<br ALIGN="LEFT"/>test_execute_request()<br ALIGN="LEFT"/>test_input_request()<br ALIGN="LEFT"/>test_kernel_info_reply()<br ALIGN="LEFT"/>test_no_adapt()<br ALIGN="LEFT"/>test_object_info_reply()<br ALIGN="LEFT"/>test_object_info_request()<br ALIGN="LEFT"/>test_rename_type()<br ALIGN="LEFT"/>test_same_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.adapter.V5toV4" [color="black", fontcolor="black", label=<{V5toV4|msg_type_map : dict<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|complete_reply(msg)<br ALIGN="LEFT"/>complete_request(msg)<br ALIGN="LEFT"/>display_data(msg)<br ALIGN="LEFT"/>execute_reply(msg)<br ALIGN="LEFT"/>execute_request(msg)<br ALIGN="LEFT"/>input_request(msg)<br ALIGN="LEFT"/>kernel_info_reply(msg)<br ALIGN="LEFT"/>object_info_reply(msg)<br ALIGN="LEFT"/>object_info_request(msg)<br ALIGN="LEFT"/>stream(msg)<br ALIGN="LEFT"/>update_header(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_adapter.V5toV4TestCase" [color="black", fontcolor="black", label=<{V5toV4TestCase|from_version : int<br ALIGN="LEFT"/>to_version : int<br ALIGN="LEFT"/>|msg(msg_type, content)<br ALIGN="LEFT"/>test_complete_reply()<br ALIGN="LEFT"/>test_complete_request()<br ALIGN="LEFT"/>test_display_data()<br ALIGN="LEFT"/>test_execute_request()<br ALIGN="LEFT"/>test_input_request()<br ALIGN="LEFT"/>test_inspect_reply()<br ALIGN="LEFT"/>test_inspect_request()<br ALIGN="LEFT"/>test_kernel_info_reply()<br ALIGN="LEFT"/>test_no_adapt()<br ALIGN="LEFT"/>test_rename_type()<br ALIGN="LEFT"/>test_same_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.ultratb.VerboseTB" [color="black", fontcolor="black", label=<{VerboseTB|check_cache : NoneType<br ALIGN="LEFT"/>include_vars : bool<br ALIGN="LEFT"/>long_header : bool<br ALIGN="LEFT"/>pdb<br ALIGN="LEFT"/>tb<br ALIGN="LEFT"/>tb_offset : int<br ALIGN="LEFT"/>|debugger(force)<br ALIGN="LEFT"/>format_exception(etype, evalue)<br ALIGN="LEFT"/>format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context, tb_offset)<br ALIGN="LEFT"/>format_records(records)<br ALIGN="LEFT"/>get_parts_of_chained_exception(evalue)<br ALIGN="LEFT"/>get_records(etb, number_of_lines_of_context, tb_offset)<br ALIGN="LEFT"/>handler(info)<br ALIGN="LEFT"/>prepare_chained_exception_message(cause)<br ALIGN="LEFT"/>prepare_header(etype, long_version)<br ALIGN="LEFT"/>structured_traceback(etype, evalue, etb, tb_offset, number_of_lines_of_context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.tests.test_message_spec.Version" [color="black", fontcolor="black", label=<{Version|max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>|validate(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.display.Video" [color="black", fontcolor="black", label=<{Video|embed : NoneType, bool<br ALIGN="LEFT"/>mimetype : NoneType<br ALIGN="LEFT"/>|<I>reload</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.client.view.View" [color="black", fontcolor="black", label=<{View|block<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>history<br ALIGN="LEFT"/>outstanding<br ALIGN="LEFT"/>results<br ALIGN="LEFT"/>targets<br ALIGN="LEFT"/>track<br ALIGN="LEFT"/>|abort(jobs, targets, block)<br ALIGN="LEFT"/>apply(f)<br ALIGN="LEFT"/>apply_async(f)<br ALIGN="LEFT"/>apply_sync(f)<br ALIGN="LEFT"/>get_result(indices_or_msg_ids, block, owner)<br ALIGN="LEFT"/>imap(f)<br ALIGN="LEFT"/><I>map</I>(f)<br ALIGN="LEFT"/>map_async(f)<br ALIGN="LEFT"/>map_sync(f)<br ALIGN="LEFT"/>parallel(dist, block)<br ALIGN="LEFT"/>purge_results(jobs, targets)<br ALIGN="LEFT"/>queue_status(targets, verbose)<br ALIGN="LEFT"/>remote(block)<br ALIGN="LEFT"/>set_flags()<br ALIGN="LEFT"/>shutdown(targets, restart, hub, block)<br ALIGN="LEFT"/>spin()<br ALIGN="LEFT"/>temp_flags()<br ALIGN="LEFT"/>wait(jobs, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.display.VimeoVideo" [color="black", fontcolor="black", label=<{VimeoVideo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.decorators._numpy_testing_utils.WarningManager" [color="black", fontcolor="black", label=<{WarningManager|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.decorators._numpy_testing_utils.WarningMessage" [color="black", fontcolor="black", label=<{WarningMessage|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.allow76.WebSocketProtocol" [color="black", fontcolor="black", label=<{WebSocketProtocol|client_terminated : bool<br ALIGN="LEFT"/>handler<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>server_terminated : bool<br ALIGN="LEFT"/>stream<br ALIGN="LEFT"/>|async_callback(callback)<br ALIGN="LEFT"/>on_connection_close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.allow76.WebSocketProtocol76" [color="black", fontcolor="black", label=<{WebSocketProtocol76|challenge : NoneType<br ALIGN="LEFT"/>client_terminated : bool<br ALIGN="LEFT"/>server_terminated : bool<br ALIGN="LEFT"/>|accept_connection()<br ALIGN="LEFT"/>challenge_response(challenge)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>write_message(message, binary)<br ALIGN="LEFT"/>write_ping(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget.Widget" [color="black", fontcolor="black", label=<{Widget|comm<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>model_id<br ALIGN="LEFT"/>msg_throttle<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>widget_types : dict<br ALIGN="LEFT"/>widgets : dict<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_state(key)<br ALIGN="LEFT"/>handle_comm_opened(comm, msg)<br ALIGN="LEFT"/>hold_sync()<br ALIGN="LEFT"/>on_displayed(callback, remove)<br ALIGN="LEFT"/>on_msg(callback, remove)<br ALIGN="LEFT"/>on_widget_constructed(callback)<br ALIGN="LEFT"/>open()<br ALIGN="LEFT"/>send(content)<br ALIGN="LEFT"/>send_state(key)<br ALIGN="LEFT"/>set_state(sync_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_link.WidgetTraitTuple" [color="black", fontcolor="black", label=<{WidgetTraitTuple|<br ALIGN="LEFT"/>|validate_elements(obj, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils._process_win32_controller.Win32ShellCommandController" [color="black", fontcolor="black", label=<{Win32ShellCommandController|cmd<br ALIGN="LEFT"/>hstderr : NoneType, value<br ALIGN="LEFT"/>hstdin : NoneType, value<br ALIGN="LEFT"/>hstdout : NoneType, value<br ALIGN="LEFT"/>mergeout : bool<br ALIGN="LEFT"/>piProcInfo : NoneType<br ALIGN="LEFT"/>|run(stdout_func, stdin_func, stderr_func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.winhpcjob.WinHPCJob" [color="black", fontcolor="black", label=<{WinHPCJob|auto_calculate_max<br ALIGN="LEFT"/>auto_calculate_min<br ALIGN="LEFT"/>is_exclusive<br ALIGN="LEFT"/>job_id<br ALIGN="LEFT"/>job_name<br ALIGN="LEFT"/>job_type<br ALIGN="LEFT"/>max_cores : Integer<br ALIGN="LEFT"/>max_nodes : Integer<br ALIGN="LEFT"/>max_sockets : Integer<br ALIGN="LEFT"/>min_cores : Integer<br ALIGN="LEFT"/>min_nodes : Integer<br ALIGN="LEFT"/>min_sockets : Integer<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>priority<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>requested_nodes<br ALIGN="LEFT"/>run_until_canceled<br ALIGN="LEFT"/>tasks<br ALIGN="LEFT"/>unit_type<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>xmlns<br ALIGN="LEFT"/>|add_task(task)<br ALIGN="LEFT"/>as_element()<br ALIGN="LEFT"/>tostring()<br ALIGN="LEFT"/>write(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.winhpcjob.WinHPCTask" [color="black", fontcolor="black", label=<{WinHPCTask|command_line<br ALIGN="LEFT"/>environment_variables<br ALIGN="LEFT"/>is_parametric<br ALIGN="LEFT"/>is_rerunnaable<br ALIGN="LEFT"/>max_cores : Integer<br ALIGN="LEFT"/>max_nodes : Integer<br ALIGN="LEFT"/>max_sockets : Integer<br ALIGN="LEFT"/>min_cores : Integer<br ALIGN="LEFT"/>min_nodes : Integer<br ALIGN="LEFT"/>min_sockets : Integer<br ALIGN="LEFT"/>std_err_file_path<br ALIGN="LEFT"/>std_out_file_path<br ALIGN="LEFT"/>task_id<br ALIGN="LEFT"/>task_name<br ALIGN="LEFT"/>unit_type<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>work_directory<br ALIGN="LEFT"/>|as_element()<br ALIGN="LEFT"/>get_env_vars()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.tests.test_launcher.WinHPCTest" [color="black", fontcolor="black", label=<{WinHPCTest|<br ALIGN="LEFT"/>|test_batch_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.WindowsHPCControllerLauncher" [color="black", fontcolor="black", label=<{WindowsHPCControllerLauncher|controller_args<br ALIGN="LEFT"/>job_file<br ALIGN="LEFT"/>job_file_name<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>write_job_file(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.WindowsHPCEngineSetLauncher" [color="black", fontcolor="black", label=<{WindowsHPCEngineSetLauncher|engine_args<br ALIGN="LEFT"/>job_file<br ALIGN="LEFT"/>job_file_name<br ALIGN="LEFT"/>|start(n)<br ALIGN="LEFT"/>write_job_file(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.parallel.apps.launcher.WindowsHPCLauncher" [color="black", fontcolor="black", label=<{WindowsHPCLauncher|job_cmd<br ALIGN="LEFT"/>job_file<br ALIGN="LEFT"/>job_file_name<br ALIGN="LEFT"/>job_id<br ALIGN="LEFT"/>job_id_regexp<br ALIGN="LEFT"/>scheduler<br ALIGN="LEFT"/>|find_args()<br ALIGN="LEFT"/>parse_job_id(output)<br ALIGN="LEFT"/>start(n)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/><I>write_job_file</I>(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.nbconvert.writers.base.WriterBase" [color="black", fontcolor="black", label=<{WriterBase|files<br ALIGN="LEFT"/>|<I>write</I>(output, resources)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.inputhook.WxInputHook" [color="black", fontcolor="black", label=<{WxInputHook|<br ALIGN="LEFT"/>|disable()<br ALIGN="LEFT"/>enable(app)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase.setUp.X" [color="black", fontcolor="black", label=<{X|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_prefilter.test_prefilter_attribute_errors.X" [color="black", fontcolor="black", label=<{X|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.nbformat.v2.nbxml.XMLReader" [color="black", fontcolor="black", label=<{XMLReader|<br ALIGN="LEFT"/>|reads(s)<br ALIGN="LEFT"/>to_notebook(root)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.lib.display.YouTubeVideo" [color="black", fontcolor="black", label=<{YouTubeVideo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.services.kernels.handlers.ZMQChannelsHandler" [color="black", fontcolor="black", label=<{ZMQChannelsHandler|channels : dict<br ALIGN="LEFT"/>kernel_id : NoneType<br ALIGN="LEFT"/>kernel_info_channel : NoneType<br ALIGN="LEFT"/>kernel_info_timeout<br ALIGN="LEFT"/>zmq_stream : NoneType<br ALIGN="LEFT"/>|create_stream()<br ALIGN="LEFT"/>get(kernel_id)<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>on_close()<br ALIGN="LEFT"/>on_kernel_restarted()<br ALIGN="LEFT"/>on_message(msg)<br ALIGN="LEFT"/>on_restart_failed()<br ALIGN="LEFT"/>open(kernel_id)<br ALIGN="LEFT"/>pre_get()<br ALIGN="LEFT"/>request_kernel_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.console.completer.ZMQCompleter" [color="black", fontcolor="black", label=<{ZMQCompleter|client<br ALIGN="LEFT"/>matches : list<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>timeout<br ALIGN="LEFT"/>|complete(text, line, cursor_pos)<br ALIGN="LEFT"/>complete_request(text)<br ALIGN="LEFT"/>rlcomplete(text, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.datapub.ZMQDataPublisher" [color="black", fontcolor="black", label=<{ZMQDataPublisher|parent_header<br ALIGN="LEFT"/>pub_socket<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>|publish_data(data)<br ALIGN="LEFT"/>set_parent(parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.displayhook.ZMQDisplayHook" [color="black", fontcolor="black", label=<{ZMQDisplayHook|parent_header : dict<br ALIGN="LEFT"/>pub_socket<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>topic : bytes<br ALIGN="LEFT"/>|set_parent(parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.zmqshell.ZMQDisplayPublisher" [color="black", fontcolor="black", label=<{ZMQDisplayPublisher|parent_header<br ALIGN="LEFT"/>pub_socket<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>topic<br ALIGN="LEFT"/>|clear_output(wait)<br ALIGN="LEFT"/>publish(data, metadata, source)<br ALIGN="LEFT"/>set_parent(parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.autocall.ZMQExitAutocall" [color="black", fontcolor="black", label=<{ZMQExitAutocall|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.terminal.console.zmqhistory.ZMQHistoryManager" [color="black", fontcolor="black", label=<{ZMQHistoryManager|client<br ALIGN="LEFT"/>dir_hist<br ALIGN="LEFT"/>input_hist_parsed<br ALIGN="LEFT"/>output_hist<br ALIGN="LEFT"/>output_hist_reprs<br ALIGN="LEFT"/>|<I>end_session</I>()<br ALIGN="LEFT"/>get_range(session, start, stop, raw, output)<br ALIGN="LEFT"/>get_range_by_str(rangestr, raw, output)<br ALIGN="LEFT"/>get_tail(n, raw, output, include_latest)<br ALIGN="LEFT"/><I>reset</I>(new_session)<br ALIGN="LEFT"/>search(pattern, raw, search_raw, output, n, unique)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [color="black", fontcolor="black", label=<{ZMQInteractiveShell|autoindent<br ALIGN="LEFT"/>colors_force<br ALIGN="LEFT"/>data_pub_class<br ALIGN="LEFT"/>display_pub_class<br ALIGN="LEFT"/>displayhook_class<br ALIGN="LEFT"/>exit_now : bool<br ALIGN="LEFT"/>exiter<br ALIGN="LEFT"/>keepkernel_on_exit : NoneType<br ALIGN="LEFT"/>kernel<br ALIGN="LEFT"/>parent_header<br ALIGN="LEFT"/>readline_use<br ALIGN="LEFT"/>|ask_exit()<br ALIGN="LEFT"/>enable_gui(gui)<br ALIGN="LEFT"/>get_parent()<br ALIGN="LEFT"/>init_environment()<br ALIGN="LEFT"/>init_hooks()<br ALIGN="LEFT"/>init_magics()<br ALIGN="LEFT"/>set_next_input(text, replace)<br ALIGN="LEFT"/>set_parent(parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.zmq.displayhook.ZMQShellDisplayHook" [color="black", fontcolor="black", label=<{ZMQShellDisplayHook|msg : NoneType<br ALIGN="LEFT"/>parent_header<br ALIGN="LEFT"/>pub_socket<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>topic : NoneType<br ALIGN="LEFT"/>|finish_displayhook()<br ALIGN="LEFT"/>set_parent(parent)<br ALIGN="LEFT"/>start_displayhook()<br ALIGN="LEFT"/>write_format_data(format_dict, md_dict)<br ALIGN="LEFT"/>write_output_prompt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.kernel.blocking.channels.ZMQSocketChannel" [color="black", fontcolor="black", label=<{ZMQSocketChannel|proxy_methods : list<br ALIGN="LEFT"/>session : NoneType<br ALIGN="LEFT"/>socket : NoneType<br ALIGN="LEFT"/>stop<br ALIGN="LEFT"/>stream : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_msg(block, timeout)<br ALIGN="LEFT"/>get_msgs()<br ALIGN="LEFT"/>is_alive()<br ALIGN="LEFT"/>msg_ready()<br ALIGN="LEFT"/>send(msg)<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.base.zmqhandlers.ZMQStreamHandler" [color="black", fontcolor="black", label=<{ZMQStreamHandler|<br ALIGN="LEFT"/>|check_origin(origin)<br ALIGN="LEFT"/><I>clear_cookie</I>()<br ALIGN="LEFT"/>send_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.console.app.ZMQTerminalIPythonApp" [color="black", fontcolor="black", label=<{ZMQTerminalIPythonApp|aliases<br ALIGN="LEFT"/>classes : list<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>examples : str<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>frontend_aliases<br ALIGN="LEFT"/>frontend_flags<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>subcommands<br ALIGN="LEFT"/>|handle_sigint()<br ALIGN="LEFT"/><I>init_code</I>()<br ALIGN="LEFT"/><I>init_gui_pylab</I>()<br ALIGN="LEFT"/>init_shell()<br ALIGN="LEFT"/>parse_command_line(argv)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [color="black", fontcolor="black", label=<{ZMQTerminalInteractiveShell|Completer<br ALIGN="LEFT"/>banner<br ALIGN="LEFT"/>callable_image_handler<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>execution_count : int<br ALIGN="LEFT"/>exit_now : bool<br ALIGN="LEFT"/>handle_image_PIL<br ALIGN="LEFT"/>handle_image_callable<br ALIGN="LEFT"/>handle_image_stream<br ALIGN="LEFT"/>handle_image_tempfile<br ALIGN="LEFT"/>history_manager<br ALIGN="LEFT"/>image_handler<br ALIGN="LEFT"/>include_other_output<br ALIGN="LEFT"/>kernel_banner<br ALIGN="LEFT"/>kernel_timeout<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>mime_preference<br ALIGN="LEFT"/>other_output_prefix<br ALIGN="LEFT"/>rl_do_indent : bool<br ALIGN="LEFT"/>session_id<br ALIGN="LEFT"/>stream_image_handler<br ALIGN="LEFT"/>tempfile_image_handler<br ALIGN="LEFT"/>|compute_banner()<br ALIGN="LEFT"/>from_here(msg)<br ALIGN="LEFT"/>handle_execute_reply(msg_id, timeout)<br ALIGN="LEFT"/>handle_image(data, mime)<br ALIGN="LEFT"/>handle_image_PIL(data, mime)<br ALIGN="LEFT"/>handle_image_callable(data, mime)<br ALIGN="LEFT"/>handle_image_stream(data, mime)<br ALIGN="LEFT"/>handle_image_tempfile(data, mime)<br ALIGN="LEFT"/>handle_input_request(msg_id, timeout)<br ALIGN="LEFT"/>handle_iopub(msg_id)<br ALIGN="LEFT"/>handle_rich_data(data)<br ALIGN="LEFT"/>include_output(msg)<br ALIGN="LEFT"/>init_completer()<br ALIGN="LEFT"/>init_history()<br ALIGN="LEFT"/>interact(display_banner)<br ALIGN="LEFT"/>mainloop(display_banner)<br ALIGN="LEFT"/>run_cell(cell, store_history)<br ALIGN="LEFT"/>wait_for_kernel(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.terminal.console.tests.test_image_handler.ZMQTerminalInteractiveShellTestCase" [color="black", fontcolor="black", label=<{ZMQTerminalInteractiveShellTestCase|data : dict<br ALIGN="LEFT"/>mime : str<br ALIGN="LEFT"/>raw : bytes<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|check_handler_with_file(inpath, handler)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_handle_image_PIL()<br ALIGN="LEFT"/>test_handle_image_callable()<br ALIGN="LEFT"/>test_handle_image_stream()<br ALIGN="LEFT"/>test_handle_image_tempfile()<br ALIGN="LEFT"/>test_no_call_by_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_bool._Bool" [color="black", fontcolor="black", label=<{_Bool|description<br ALIGN="LEFT"/>disabled<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float._BoundedFloat" [color="black", fontcolor="black", label=<{_BoundedFloat|max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float._BoundedFloatRange" [color="black", fontcolor="black", label=<{_BoundedFloatRange|lower<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>upper<br ALIGN="LEFT"/>value : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int._BoundedInt" [color="black", fontcolor="black", label=<{_BoundedInt|max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int._BoundedIntRange" [color="black", fontcolor="black", label=<{_BoundedIntRange|lower<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>upper<br ALIGN="LEFT"/>value : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.tests.test_debugger._FakeInput" [color="black", fontcolor="black", label=<{_FakeInput|lines<br ALIGN="LEFT"/>|readline()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float._Float" [color="black", fontcolor="black", label=<{_Float|description<br ALIGN="LEFT"/>disabled<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_float._FloatRange" [color="black", fontcolor="black", label=<{_FloatRange|lower<br ALIGN="LEFT"/>upper<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int._Int" [color="black", fontcolor="black", label=<{_Int|description<br ALIGN="LEFT"/>disabled<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_int._IntRange" [color="black", fontcolor="black", label=<{_IntRange|lower<br ALIGN="LEFT"/>upper<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection._MultipleSelection" [color="black", fontcolor="black", label=<{_MultipleSelection|selected_label<br ALIGN="LEFT"/>selected_labels<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.signatures._ParameterKind" [color="black", fontcolor="black", label=<{_ParameterKind|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.lib.pretty._PrettyPrinterBase" [color="black", fontcolor="black", label=<{_PrettyPrinterBase|indentation<br ALIGN="LEFT"/>|group(indent, open, close)<br ALIGN="LEFT"/>indent(indent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selection._Selection" [color="black", fontcolor="black", label=<{_Selection|description<br ALIGN="LEFT"/>disabled<br ALIGN="LEFT"/>equals<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>options_lock : lock<br ALIGN="LEFT"/>selected_label<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>value_lock : lock<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_selectioncontainer._SelectionContainer" [color="black", fontcolor="black", label=<{_SelectionContainer|selected_index<br ALIGN="LEFT"/>|get_title(index)<br ALIGN="LEFT"/>set_title(index, title)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets._SimpleTest" [color="black", fontcolor="black", label=<{_SimpleTest|value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.html.widgets.widget_string._String" [color="black", fontcolor="black", label=<{_String|description<br ALIGN="LEFT"/>disabled<br ALIGN="LEFT"/>placeholder<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.builtin_trap.__BuiltinUndefined" [color="black", fontcolor="black", label=<{__BuiltinUndefined|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.builtin_trap.__HideBuiltin" [color="black", fontcolor="black", label=<{__HideBuiltin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.signatures._empty" [color="black", fontcolor="black", label=<{_empty|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.signatures._void" [color="black", fontcolor="black", label=<{_void|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.syspathcontext.appended_to_syspath" [color="black", fontcolor="black", label=<{appended_to_syspath|added : bool<br ALIGN="LEFT"/>dir<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic_arguments.argument" [color="black", fontcolor="black", label=<{argument|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic_arguments.argument_group" [color="black", fontcolor="black", label=<{argument_group|<br ALIGN="LEFT"/>|add_to_parser(parser, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.inputtransformer.assemble_python_lines" [color="black", fontcolor="black", label=<{assemble_python_lines|<br ALIGN="LEFT"/>|output(tokens)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.capture.capture_output" [color="black", fontcolor="black", label=<{capture_output|display : bool<br ALIGN="LEFT"/>save_display_pub : NoneType<br ALIGN="LEFT"/>shell : NoneType<br ALIGN="LEFT"/>stderr : bool<br ALIGN="LEFT"/>stdout : bool<br ALIGN="LEFT"/>sys_stderr : StringIO, TextIOWrapper<br ALIGN="LEFT"/>sys_stdout : StringIO, TextIOWrapper<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic_arguments.defaults" [color="black", fontcolor="black", label=<{defaults|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.dependency.depend" [color="black", fontcolor="black", label=<{depend|args : tuple<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.parallel.controller.dependency.dependent" [color="black", fontcolor="black", label=<{dependent|dargs : tuple<br ALIGN="LEFT"/>df<br ALIGN="LEFT"/>dkwargs : dict<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>func_name<br ALIGN="LEFT"/>|check_dependency()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.traitlets.directional_link" [color="black", fontcolor="black", label=<{directional_link|source : NoneType<br ALIGN="LEFT"/>targets : list, tuple<br ALIGN="LEFT"/>updating : bool<br ALIGN="LEFT"/>|unlink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.html.widgets.interaction.fixed" [color="black", fontcolor="black", label=<{fixed|description<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.core.magic_arguments.kwds" [color="black", fontcolor="black", label=<{kwds|kwds : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.traitlets.link" [color="black", fontcolor="black", label=<{link|objects : dict<br ALIGN="LEFT"/>updating : bool<br ALIGN="LEFT"/>|unlink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.magic_arguments.magic_arguments" [color="black", fontcolor="black", label=<{magic_arguments|name : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.terminal.tests.test_interactivshell.mock_input_helper" [color="black", fontcolor="black", label=<{mock_input_helper|exception : NoneType<br ALIGN="LEFT"/>ip<br ALIGN="LEFT"/>orig_raw_input<br ALIGN="LEFT"/>testgen<br ALIGN="LEFT"/>|fake_input(prompt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.path._path.multimethod" [color="black", fontcolor="black", label=<{multimethod|func<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tests.test_wildcard.obj_t" [color="black", fontcolor="black", label=<{obj_t|a : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.path._path.path" [color="black", fontcolor="black", label=<{path|atime<br ALIGN="LEFT"/>cd<br ALIGN="LEFT"/>copy<br ALIGN="LEFT"/>copy2<br ALIGN="LEFT"/>copyfile<br ALIGN="LEFT"/>copymode<br ALIGN="LEFT"/>copystat<br ALIGN="LEFT"/>copytree<br ALIGN="LEFT"/>ctime<br ALIGN="LEFT"/>drive<br ALIGN="LEFT"/>ext<br ALIGN="LEFT"/>get_owner<br ALIGN="LEFT"/>module<br ALIGN="LEFT"/>move<br ALIGN="LEFT"/>mtime<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>namebase<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>rmtree<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>uncshare<br ALIGN="LEFT"/>|abspath()<br ALIGN="LEFT"/>access(mode)<br ALIGN="LEFT"/>basename()<br ALIGN="LEFT"/>bytes()<br ALIGN="LEFT"/>chdir()<br ALIGN="LEFT"/>chmod(mode)<br ALIGN="LEFT"/>chown(uid, gid)<br ALIGN="LEFT"/>chroot()<br ALIGN="LEFT"/>chunks(size)<br ALIGN="LEFT"/>dirname()<br ALIGN="LEFT"/>dirs(pattern)<br ALIGN="LEFT"/>exists()<br ALIGN="LEFT"/>expand()<br ALIGN="LEFT"/>expanduser()<br ALIGN="LEFT"/>expandvars()<br ALIGN="LEFT"/>files(pattern)<br ALIGN="LEFT"/>fnmatch(pattern)<br ALIGN="LEFT"/>getatime()<br ALIGN="LEFT"/>getctime()<br ALIGN="LEFT"/>getcwd()<br ALIGN="LEFT"/>getmtime()<br ALIGN="LEFT"/>getsize()<br ALIGN="LEFT"/>glob(pattern)<br ALIGN="LEFT"/>isabs()<br ALIGN="LEFT"/>isdir()<br ALIGN="LEFT"/>isfile()<br ALIGN="LEFT"/>islink()<br ALIGN="LEFT"/>ismount()<br ALIGN="LEFT"/>joinpath(first)<br ALIGN="LEFT"/>lines(encoding, errors, retain)<br ALIGN="LEFT"/>link(newpath)<br ALIGN="LEFT"/>listdir(pattern)<br ALIGN="LEFT"/>lstat()<br ALIGN="LEFT"/>makedirs(mode)<br ALIGN="LEFT"/>makedirs_p(mode)<br ALIGN="LEFT"/>mkdir(mode)<br ALIGN="LEFT"/>mkdir_p(mode)<br ALIGN="LEFT"/>normcase()<br ALIGN="LEFT"/>normpath()<br ALIGN="LEFT"/>open()<br ALIGN="LEFT"/>pathconf(name)<br ALIGN="LEFT"/>read_hash(hash_name)<br ALIGN="LEFT"/>read_hexhash(hash_name)<br ALIGN="LEFT"/>read_md5()<br ALIGN="LEFT"/>readlink()<br ALIGN="LEFT"/>readlinkabs()<br ALIGN="LEFT"/>realpath()<br ALIGN="LEFT"/>relpath(start)<br ALIGN="LEFT"/>relpathto(dest)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>remove_p()<br ALIGN="LEFT"/>removedirs()<br ALIGN="LEFT"/>removedirs_p()<br ALIGN="LEFT"/>rename(new)<br ALIGN="LEFT"/>renames(new)<br ALIGN="LEFT"/>rmdir()<br ALIGN="LEFT"/>rmdir_p()<br ALIGN="LEFT"/>rmtree_p()<br ALIGN="LEFT"/>samefile(other)<br ALIGN="LEFT"/>splitall()<br ALIGN="LEFT"/>splitdrive()<br ALIGN="LEFT"/>splitext()<br ALIGN="LEFT"/>splitpath()<br ALIGN="LEFT"/>splitunc()<br ALIGN="LEFT"/>startfile()<br ALIGN="LEFT"/>stat()<br ALIGN="LEFT"/>statvfs()<br ALIGN="LEFT"/>stripext()<br ALIGN="LEFT"/>symlink(newlink)<br ALIGN="LEFT"/>text(encoding, errors)<br ALIGN="LEFT"/>touch()<br ALIGN="LEFT"/>unlink()<br ALIGN="LEFT"/>unlink_p()<br ALIGN="LEFT"/>using_module(module)<br ALIGN="LEFT"/>utime(times)<br ALIGN="LEFT"/>walk(pattern, errors)<br ALIGN="LEFT"/>walkdirs(pattern, errors)<br ALIGN="LEFT"/>walkfiles(pattern, errors)<br ALIGN="LEFT"/>write_bytes(bytes, append)<br ALIGN="LEFT"/>write_lines(lines, encoding, errors, linesep, append)<br ALIGN="LEFT"/>write_text(text, encoding, errors, linesep, append)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.utils.syspathcontext.prepended_to_syspath" [color="black", fontcolor="black", label=<{prepended_to_syspath|added : bool<br ALIGN="LEFT"/>dir<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.contexts.preserve_keys" [color="black", fontcolor="black", label=<{preserve_keys|dictionary<br ALIGN="LEFT"/>keys : tuple<br ALIGN="LEFT"/>to_delete : list<br ALIGN="LEFT"/>to_update : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.testing.globalipapp.py_file_finder" [color="black", fontcolor="black", label=<{py_file_finder|test_filename<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.searcher_re" [color="black", fontcolor="black", label=<{searcher_re|end<br ALIGN="LEFT"/>eof_index : int<br ALIGN="LEFT"/>match<br ALIGN="LEFT"/>start : NoneType<br ALIGN="LEFT"/>timeout_index : int<br ALIGN="LEFT"/>|search(buffer, freshlen, searchwindowsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.searcher_string" [color="black", fontcolor="black", label=<{searcher_string|end<br ALIGN="LEFT"/>eof_index : int<br ALIGN="LEFT"/>match<br ALIGN="LEFT"/>start : NoneType<br ALIGN="LEFT"/>timeout_index : int<br ALIGN="LEFT"/>|search(buffer, freshlen, searchwindowsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.core.tests.test_run.TestMagicRunSimple.test_aggressive_namespace_cleanup.secondtmp" [color="black", fontcolor="black", label=<{secondtmp|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.spawn" [color="black", fontcolor="black", label=<{spawn|STDERR_FILENO : int<br ALIGN="LEFT"/>STDIN_FILENO : int<br ALIGN="LEFT"/>STDOUT_FILENO : int<br ALIGN="LEFT"/>after : NoneType<br ALIGN="LEFT"/>allowed_string_types : tuple<br ALIGN="LEFT"/>args : NoneType, list<br ALIGN="LEFT"/>before : NoneType<br ALIGN="LEFT"/>buffer : bytes<br ALIGN="LEFT"/>child_fd : int<br ALIGN="LEFT"/>closed : bool<br ALIGN="LEFT"/>command : NoneType<br ALIGN="LEFT"/>crlf : bytes<br ALIGN="LEFT"/>cwd : NoneType<br ALIGN="LEFT"/>delayafterclose : float<br ALIGN="LEFT"/>delayafterterminate : float<br ALIGN="LEFT"/>delaybeforesend : float<br ALIGN="LEFT"/>delimiter<br ALIGN="LEFT"/>echo : bool<br ALIGN="LEFT"/>encoding : NoneType<br ALIGN="LEFT"/>env : NoneType<br ALIGN="LEFT"/>exitstatus : NoneType<br ALIGN="LEFT"/>flag_eof : bool<br ALIGN="LEFT"/>ignore_sighup : bool<br ALIGN="LEFT"/>ignorecase : bool<br ALIGN="LEFT"/>linesep : bytes<br ALIGN="LEFT"/>logfile : NoneType<br ALIGN="LEFT"/>logfile_read : NoneType<br ALIGN="LEFT"/>logfile_send : NoneType<br ALIGN="LEFT"/>match : NoneType<br ALIGN="LEFT"/>match_index : NoneType<br ALIGN="LEFT"/>maxread : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>pid : NoneType<br ALIGN="LEFT"/>searcher : NoneType<br ALIGN="LEFT"/>searchwindowsize : NoneType<br ALIGN="LEFT"/>signalstatus : NoneType<br ALIGN="LEFT"/>softspace : bool<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>stderr : StringIO, TextIOWrapper<br ALIGN="LEFT"/>stdin : TextIOWrapper<br ALIGN="LEFT"/>stdout : StringIO, TextIOWrapper<br ALIGN="LEFT"/>string_type : bytes<br ALIGN="LEFT"/>terminated : bool<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>use_native_pty_fork<br ALIGN="LEFT"/>|close(force)<br ALIGN="LEFT"/>compile_pattern_list(patterns)<br ALIGN="LEFT"/>eof()<br ALIGN="LEFT"/>expect(pattern, timeout, searchwindowsize)<br ALIGN="LEFT"/>expect_exact(pattern_list, timeout, searchwindowsize)<br ALIGN="LEFT"/>expect_list(pattern_list, timeout, searchwindowsize)<br ALIGN="LEFT"/>expect_loop(searcher, timeout, searchwindowsize)<br ALIGN="LEFT"/>fileno()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/>getecho()<br ALIGN="LEFT"/>getwinsize()<br ALIGN="LEFT"/>interact(escape_character, input_filter, output_filter)<br ALIGN="LEFT"/>isalive()<br ALIGN="LEFT"/>isatty()<br ALIGN="LEFT"/>kill(sig)<br ALIGN="LEFT"/>read(size)<br ALIGN="LEFT"/>read_nonblocking(size, timeout)<br ALIGN="LEFT"/>readline(size)<br ALIGN="LEFT"/>readlines(sizehint)<br ALIGN="LEFT"/>send(s)<br ALIGN="LEFT"/>sendcontrol(char)<br ALIGN="LEFT"/>sendeof()<br ALIGN="LEFT"/>sendintr()<br ALIGN="LEFT"/>sendline(s)<br ALIGN="LEFT"/>setecho(state)<br ALIGN="LEFT"/>setlog(fileobject)<br ALIGN="LEFT"/>setmaxread(maxread)<br ALIGN="LEFT"/>setwinsize(rows, cols)<br ALIGN="LEFT"/>terminate(force)<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>waitnoecho(timeout)<br ALIGN="LEFT"/>write(s)<br ALIGN="LEFT"/>write_to_stdout(b)<br ALIGN="LEFT"/>writelines(sequence)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.external.pexpect._pexpect.spawnu" [color="black", fontcolor="black", label=<{spawnu|allowed_string_types : tuple<br ALIGN="LEFT"/>crlf : str<br ALIGN="LEFT"/>encoding<br ALIGN="LEFT"/>errors<br ALIGN="LEFT"/>linesep : str<br ALIGN="LEFT"/>string_type : str<br ALIGN="LEFT"/>write_to_stdout<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.external.path._path.tempdir" [color="black", fontcolor="black", label=<{tempdir|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.py3compat.with_metaclass.temporary_class" [color="black", fontcolor="black", label=<{temporary_class|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"IPython.utils.tz.tzUTC" [color="black", fontcolor="black", label=<{tzUTC|<br ALIGN="LEFT"/>|dst(d)<br ALIGN="LEFT"/>utcoffset(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"IPython.config.application.Application" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.configurable.Configurable" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.config.configurable.LoggingConfigurable" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.configurable.MultipleInstanceError" -> "IPython.config.configurable.ConfigurableError" [arrowhead="empty", arrowtail="none"];
"IPython.config.configurable.SingletonConfigurable" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.ArgParseConfigLoader" -> "IPython.config.loader.CommandLineConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.ArgumentError" -> "IPython.config.loader.ConfigLoaderError" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.CommandLineConfigLoader" -> "IPython.config.loader.ConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.ConfigFileNotFound" -> "IPython.config.loader.ConfigError" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.ConfigLoaderError" -> "IPython.config.loader.ConfigError" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.FileConfigLoader" -> "IPython.config.loader.ConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.JSONFileConfigLoader" -> "IPython.config.loader.FileConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.KVArgParseConfigLoader" -> "IPython.config.loader.ArgParseConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.KeyValueConfigLoader" -> "IPython.config.loader.CommandLineConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.LazyConfigValue" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.config.loader.PyFileConfigLoader" -> "IPython.config.loader.FileConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.manager.BaseJSONConfigManager" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_application.Bar" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_application.Foo" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_application.MyApp" -> "IPython.config.application.Application" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.Bar" -> "IPython.config.tests.test_configurable.Foo" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.Containers" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.Foo" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.MyConfigurable" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.MyParent" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.MyParent2" -> "IPython.config.tests.test_configurable.MyParent" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.TestConfigContainers.test_config_default.DefaultConfigurable" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.TestConfigContainers.test_config_default.SomeSingleton" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable.test_inheritance.Bam" -> "IPython.config.tests.test_configurable.TestSingletonConfigurable.test_inheritance.Bar" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable.test_inheritance.Bar" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_configurable.TestSingletonConfigurable.test_instance.Foo" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_loader.MyLoader1" -> "IPython.config.loader.ArgParseConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_loader.MyLoader2" -> "IPython.config.loader.ArgParseConfigLoader" [arrowhead="empty", arrowtail="none"];
"IPython.config.tests.test_loader.TestArgParseKVCL" -> "IPython.config.tests.test_loader.TestKeyValueCL" [arrowhead="empty", arrowtail="none"];
"IPython.consoleapp.IPythonConsoleApp" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.alias.AliasManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.alias.InvalidAliasError" -> "IPython.core.alias.AliasError" [arrowhead="empty", arrowtail="none"];
"IPython.core.application.BaseIPythonApplication" -> "IPython.config.application.Application" [arrowhead="empty", arrowtail="none"];
"IPython.core.autocall.ExitAutocall" -> "IPython.core.autocall.IPyAutocall" [arrowhead="empty", arrowtail="none"];
"IPython.core.autocall.ZMQExitAutocall" -> "IPython.core.autocall.ExitAutocall" [arrowhead="empty", arrowtail="none"];
"IPython.core.builtin_trap.BuiltinTrap" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.completer.Completer" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.completer.IPCompleter" -> "IPython.core.completer.Completer" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.HTML" -> "IPython.core.display.TextDisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Image" -> "IPython.core.display.DisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.JSON" -> "IPython.core.display.DisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Javascript" -> "IPython.core.display.TextDisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Latex" -> "IPython.core.display.TextDisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Markdown" -> "IPython.core.display.TextDisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Math" -> "IPython.core.display.TextDisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Pretty" -> "IPython.core.display.TextDisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.SVG" -> "IPython.core.display.DisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.TextDisplayObject" -> "IPython.core.display.DisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display.Video" -> "IPython.core.display.DisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.core.display_trap.DisplayTrap" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.displayhook.DisplayHook" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.displaypub.CapturingDisplayPublisher" -> "IPython.core.displaypub.DisplayPublisher" [arrowhead="empty", arrowtail="none"];
"IPython.core.displaypub.DisplayPublisher" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.error.StdinNotImplementedError" -> "IPython.core.error.IPythonCoreError" [arrowhead="empty", arrowtail="none"];
"IPython.core.error.TryNext" -> "IPython.core.error.IPythonCoreError" [arrowhead="empty", arrowtail="none"];
"IPython.core.error.UsageError" -> "IPython.core.error.IPythonCoreError" [arrowhead="empty", arrowtail="none"];
"IPython.core.extensions.ExtensionManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.BaseFormatter" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.DisplayFormatter" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.HTMLFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.IPythonDisplayFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.JPEGFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.JSONFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.JavascriptFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.LatexFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.MarkdownFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.PDFFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.PNGFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.PlainTextFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.formatters.SVGFormatter" -> "IPython.core.formatters.BaseFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.core.history.HistoryAccessor" -> "IPython.core.history.HistoryAccessorBase" [arrowhead="empty", arrowtail="none"];
"IPython.core.history.HistoryAccessorBase" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.history.HistoryManager" -> "IPython.core.history.HistoryAccessor" [arrowhead="empty", arrowtail="none"];
"IPython.core.historyapp.HistoryApp" -> "IPython.config.application.Application" [arrowhead="empty", arrowtail="none"];
"IPython.core.historyapp.HistoryClear" -> "IPython.core.historyapp.HistoryTrim" [arrowhead="empty", arrowtail="none"];
"IPython.core.historyapp.HistoryTrim" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.core.inputsplitter.InputSplitter" [arrowhead="empty", arrowtail="none"];
"IPython.core.inputtransformer.CoroutineInputTransformer" -> "IPython.core.inputtransformer.InputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.core.inputtransformer.StatelessInputTransformer" -> "IPython.core.inputtransformer.InputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.core.inputtransformer.TokenInputTransformer" -> "IPython.core.inputtransformer.InputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.core.inputtransformer.assemble_python_lines" -> "IPython.core.inputtransformer.TokenInputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.core.interactiveshell.InteractiveShell" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.interactiveshell.SeparateUnicode" -> "IPython.utils.traitlets.Unicode" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic.Magics" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic.MagicsManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic_arguments.ArgMethodWrapper" -> "IPython.core.magic_arguments.ArgDecorator" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic_arguments.argument" -> "IPython.core.magic_arguments.ArgMethodWrapper" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic_arguments.argument_group" -> "IPython.core.magic_arguments.ArgMethodWrapper" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic_arguments.defaults" -> "IPython.core.magic_arguments.ArgMethodWrapper" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic_arguments.kwds" -> "IPython.core.magic_arguments.ArgDecorator" [arrowhead="empty", arrowtail="none"];
"IPython.core.magic_arguments.magic_arguments" -> "IPython.core.magic_arguments.ArgDecorator" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.UserMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.auto.AutoMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.basic.BasicMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.code.CodeMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.config.ConfigMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.deprecated.DeprecatedMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.display.DisplayMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.execution.ExecutionMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.extension.ExtensionMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.history.HistoryMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.logging.LoggingMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.namespace.NamespaceMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.osm.OSMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.pylab.PylabMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.magics.script.ScriptMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.payload.PayloadManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.AssignmentChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.AutoHandler" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.AutoMagicChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.AutocallChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.EmacsChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.EmacsHandler" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.IPyAutocallChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.MacroChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.MacroHandler" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.MagicHandler" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.PrefilterChecker" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.PrefilterHandler" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.PrefilterManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.PrefilterTransformer" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.prefilter.PythonOpsChecker" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="empty", arrowtail="none"];
"IPython.core.profileapp.ProfileApp" -> "IPython.config.application.Application" [arrowhead="empty", arrowtail="none"];
"IPython.core.profileapp.ProfileCreate" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.core.profileapp.ProfileList" -> "IPython.config.application.Application" [arrowhead="empty", arrowtail="none"];
"IPython.core.profileapp.ProfileLocate" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.core.profiledir.ProfileDir" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.prompts.PromptManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.shellapp.InteractiveShellApp" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_formatters.B" -> "IPython.core.tests.test_formatters.A" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_handlers.Autocallable" -> "IPython.core.autocall.IPyAutocall" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_inputsplitter.CellModeCellMagics" -> "IPython.core.tests.test_inputsplitter.CellMagicsCommon" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_inputsplitter.IPythonInputTestCase" -> "IPython.core.tests.test_inputsplitter.InputSplitterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_inputsplitter.IPythonInputTestCase.test_multiline_passthrough.CommentTransformer" -> "IPython.core.inputtransformer.InputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_inputsplitter.LineModeCellMagics" -> "IPython.core.tests.test_inputsplitter.CellMagicsCommon" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_interactiveshell.ExitCodeChecks" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_interactiveshell.TestModules" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_interactiveshell.TestSyntaxErrorTransformer.SyntaxErrorTransformer" -> "IPython.core.inputtransformer.InputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_interactiveshell.TestSystemPipedExitCode" -> "IPython.core.tests.test_interactiveshell.ExitCodeChecks" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_interactiveshell.TestSystemRaw" -> "IPython.core.tests.test_interactiveshell.ExitCodeChecks" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_magic.CellMagicTestCase.test_cell_magic_class.MyMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_magic.CellMagicTestCase.test_cell_magic_class2.MyMagics2" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_magic.DummyMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_magic.FooFoo" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_magic.TestXdel" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_oinspect.SimpleMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_pylabtools.TestPylabSwitch.Shell" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_run.TestMagicRunPass" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_run.TestMagicRunSimple" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_run.TestMagicRunSimple.test_aggressive_namespace_cleanup.secondtmp" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.tests.test_shellapp.TestFileToRun" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.AutoFormattedTB" -> "IPython.core.ultratb.FormattedTB" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.ColorTB" -> "IPython.core.ultratb.FormattedTB" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.FormattedTB" -> "IPython.core.ultratb.ListTB" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.FormattedTB" -> "IPython.core.ultratb.VerboseTB" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.ListTB" -> "IPython.core.ultratb.TBTools" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.SyntaxTB" -> "IPython.core.ultratb.ListTB" [arrowhead="empty", arrowtail="none"];
"IPython.core.ultratb.VerboseTB" -> "IPython.core.ultratb.TBTools" [arrowhead="empty", arrowtail="none"];
"IPython.extensions.autoreload.AutoreloadMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.extensions.rmagic.RMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.extensions.storemagic.StoreMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.extensions.tests.test_autoreload.TestAutoreload" -> "IPython.extensions.tests.test_autoreload.Fixture" [arrowhead="empty", arrowtail="none"];
"IPython.external.path._path.tempdir" -> "IPython.external.path._path.path" [arrowhead="empty", arrowtail="none"];
"IPython.external.pexpect._pexpect.EOF" -> "IPython.external.pexpect._pexpect.ExceptionPexpect" [arrowhead="empty", arrowtail="none"];
"IPython.external.pexpect._pexpect.TIMEOUT" -> "IPython.external.pexpect._pexpect.ExceptionPexpect" [arrowhead="empty", arrowtail="none"];
"IPython.external.pexpect._pexpect.spawnu" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="empty", arrowtail="none"];
"IPython.html.allow76.WebSocketProtocol76" -> "IPython.html.allow76.WebSocketProtocol" [arrowhead="empty", arrowtail="none"];
"IPython.html.auth.login.LoginHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.auth.logout.LogoutHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.handlers.ApiVersionHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.handlers.AuthenticatedFileHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.handlers.FilesRedirectHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.handlers.IPythonHandler" -> "IPython.html.base.handlers.AuthenticatedHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.handlers.Template404" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.zmqhandlers.AuthenticatedZMQStreamHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.zmqhandlers.AuthenticatedZMQStreamHandler" -> "IPython.html.base.zmqhandlers.ZMQStreamHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.base.zmqhandlers.ZMQStreamHandler" -> "IPython.html.allow76.AllowDraftWebSocketHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.edit.handlers.EditorHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.files.handlers.FilesHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.kernelspecs.handlers.KernelSpecResourceHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.nbconvert.handlers.NbconvertFileHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.nbconvert.handlers.NbconvertPostHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.nbconvert.tests.test_nbconvert_handlers.APITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.nbextensions.NBExtensionApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.html.notebook.handlers.NotebookHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.notebookapp.NbserverListApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.html.notebookapp.NotebookApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.clusters.clustermanager.ClusterManager" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.clusters.clustermanager.ClusterManager.build_launchers.DummyIPClusterStart" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.clusters.handlers.ClusterActionHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.clusters.handlers.ClusterProfileHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.clusters.handlers.MainClusterHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.config.handlers.ConfigHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.config.manager.ConfigManager" -> "IPython.config.manager.BaseJSONConfigManager" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.config.tests.test_config_api.APITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.checkpoints.Checkpoints" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.filecheckpoints.FileCheckpoints" -> "IPython.html.services.contents.checkpoints.Checkpoints" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.filecheckpoints.FileCheckpoints" -> "IPython.html.services.contents.fileio.FileManagerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.filecheckpoints.GenericFileCheckpoints" -> "IPython.html.services.contents.checkpoints.GenericCheckpointsMixin" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.filecheckpoints.GenericFileCheckpoints" -> "IPython.html.services.contents.filecheckpoints.FileCheckpoints" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.filemanager.FileContentsManager" -> "IPython.html.services.contents.fileio.FileManagerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.filemanager.FileContentsManager" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.handlers.CheckpointsHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.handlers.ContentsHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.handlers.ModifyCheckpointsHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.handlers.NotebooksRedirectHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.manager.ContentsManager" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.tests.test_contents_api.APITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.contents.tests.test_contents_api.GenericFileCheckpointsAPITest" -> "IPython.html.services.contents.tests.test_contents_api.APITest" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernels.handlers.KernelActionHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernels.handlers.KernelHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernels.handlers.MainKernelHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernels.handlers.ZMQChannelsHandler" -> "IPython.html.base.zmqhandlers.AuthenticatedZMQStreamHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernels.kernelmanager.MappingKernelManager" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernels.tests.test_kernels_api.KernelAPITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernelspecs.handlers.KernelSpecHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernelspecs.handlers.MainKernelSpecHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.kernelspecs.tests.test_kernelspecs_api.APITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.nbconvert.handlers.NbconvertRootHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.nbconvert.tests.test_nbconvert_api.APITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.security.handlers.CSPReportHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.sessions.handlers.SessionHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.sessions.handlers.SessionRootHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.sessions.sessionmanager.SessionManager" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.sessions.tests.test_sessionmanager.DummyMKM" -> "IPython.html.services.kernels.kernelmanager.MappingKernelManager" [arrowhead="empty", arrowtail="none"];
"IPython.html.services.sessions.tests.test_sessions_api.SessionAPITest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.terminal.api_handlers.TerminalHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.terminal.api_handlers.TerminalRootHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.terminal.handlers.TermSocket" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.terminal.handlers.TerminalHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.tests.test_files.FilesTest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.tree.handlers.TreeHandler" -> "IPython.html.base.handlers.IPythonHandler" [arrowhead="empty", arrowtail="none"];
"IPython.html.tree.tests.test_tree_handler.TreeTest" -> "IPython.html.tests.launchnotebook.NotebookTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.interaction.fixed" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.tests.test_interaction.DummyComm" -> "IPython.kernel.comm.comm.Comm" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget.CallbackDispatcher" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget.DOMWidget" -> "IPython.html.widgets.widget.Widget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget.Widget" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_bool.Checkbox" -> "IPython.html.widgets.widget_bool._Bool" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_bool.ToggleButton" -> "IPython.html.widgets.widget_bool._Bool" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_bool._Bool" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_box.Box" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_box.FlexBox" -> "IPython.html.widgets.widget_box.Box" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_button.Button" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float.BoundedFloatText" -> "IPython.html.widgets.widget_float._BoundedFloat" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float.FloatProgress" -> "IPython.html.widgets.widget_float._BoundedFloat" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float.FloatRangeSlider" -> "IPython.html.widgets.widget_float._BoundedFloatRange" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float.FloatSlider" -> "IPython.html.widgets.widget_float._BoundedFloat" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float.FloatText" -> "IPython.html.widgets.widget_float._Float" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float._BoundedFloat" -> "IPython.html.widgets.widget_float._Float" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float._BoundedFloatRange" -> "IPython.html.widgets.widget_float._FloatRange" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float._Float" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_float._FloatRange" -> "IPython.html.widgets.widget_float._Float" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_image.Image" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int.BoundedIntText" -> "IPython.html.widgets.widget_int._BoundedInt" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int.IntProgress" -> "IPython.html.widgets.widget_int._BoundedInt" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int.IntRangeSlider" -> "IPython.html.widgets.widget_int._BoundedIntRange" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int.IntSlider" -> "IPython.html.widgets.widget_int._BoundedInt" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int.IntText" -> "IPython.html.widgets.widget_int._Int" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int._BoundedInt" -> "IPython.html.widgets.widget_int._Int" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int._BoundedIntRange" -> "IPython.html.widgets.widget_int._IntRange" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int._Int" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_int._IntRange" -> "IPython.html.widgets.widget_int._Int" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_link.DirectionalLink" -> "IPython.html.widgets.widget.Widget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_link.Link" -> "IPython.html.widgets.widget.Widget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_link.WidgetTraitTuple" -> "IPython.utils.traitlets.Tuple" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_output.Output" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection.Dropdown" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection.RadioButtons" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection.Select" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection.SelectMultiple" -> "IPython.html.widgets.widget_selection._MultipleSelection" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection.ToggleButtons" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection._MultipleSelection" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selection._Selection" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selectioncontainer.Accordion" -> "IPython.html.widgets.widget_selectioncontainer._SelectionContainer" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selectioncontainer.Tab" -> "IPython.html.widgets.widget_selectioncontainer._SelectionContainer" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_selectioncontainer._SelectionContainer" -> "IPython.html.widgets.widget_box.Box" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_string.HTML" -> "IPython.html.widgets.widget_string._String" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_string.Latex" -> "IPython.html.widgets.widget_string._String" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_string.Text" -> "IPython.html.widgets.widget_string._String" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_string.Textarea" -> "IPython.html.widgets.widget_string._String" [arrowhead="empty", arrowtail="none"];
"IPython.html.widgets.widget_string._String" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.adapter.V4toV5" -> "IPython.kernel.adapter.Adapter" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.adapter.V5toV4" -> "IPython.kernel.adapter.Adapter" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.blocking.client.BlockingKernelClient" -> "IPython.kernel.client.KernelClient" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.channelsabc.HBChannelABC" -> "IPython.kernel.channelsabc.ChannelABC" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.client.KernelClient" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.comm.comm.Comm" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.comm.manager.CommManager" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.connect.ConnectionFileMixin" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.blocking.BlockingInProcessChannel" -> "IPython.kernel.inprocess.channels.InProcessChannel" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.blocking.BlockingInProcessKernelClient" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.blocking.BlockingInProcessStdInChannel" -> "IPython.kernel.inprocess.blocking.BlockingInProcessChannel" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.client.InProcessKernelClient" -> "IPython.kernel.client.KernelClient" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.ipkernel.InProcessInteractiveShell" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.ipkernel.InProcessKernel" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.manager.InProcessKernelManager" -> "IPython.kernel.manager.KernelManager" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.inprocess.socket.DummySocket" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.ioloop.manager.IOLoopKernelManager" -> "IPython.kernel.manager.KernelManager" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.ioloop.restarter.IOLoopKernelRestarter" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.kernelspec.KernelSpec" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.kernelspec.KernelSpecManager" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.kernelspecapp.InstallKernelSpec" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.kernelspecapp.InstallNativeKernelSpec" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.kernelspecapp.KernelSpecApp" -> "IPython.config.application.Application" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.kernelspecapp.ListKernelSpecs" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.manager.KernelManager" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.multikernelmanager.MultiKernelManager" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.restarter.KernelRestarter" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_adapter.V4toV5TestCase" -> "IPython.kernel.tests.test_adapter.AdapterTest" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_adapter.V5toV4TestCase" -> "IPython.kernel.tests.test_adapter.AdapterTest" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_connect.DummyConsoleApp" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_connect.DummyConsoleApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.ArgSpec" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.CompleteReply" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.DisplayData" -> "IPython.kernel.tests.test_message_spec.MimeBundle" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.ExecuteInput" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.ExecuteReply" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.ExecuteReplyError" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.ExecuteReplyOkay" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.ExecuteResult" -> "IPython.kernel.tests.test_message_spec.MimeBundle" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.HistoryReply" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.InspectReply" -> "IPython.kernel.tests.test_message_spec.MimeBundle" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.IsCompleteReply" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.IsCompleteReplyIncomplete" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.KernelInfoReply" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.LanguageInfo" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.MimeBundle" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.RHeader" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.RMessage" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.Reference" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.Status" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.Stream" -> "IPython.kernel.tests.test_message_spec.Reference" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.tests.test_message_spec.Version" -> "IPython.utils.traitlets.Unicode" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.threaded.ThreadedKernelClient" -> "IPython.kernel.client.KernelClient" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.datapub.ZMQDataPublisher" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.displayhook.ZMQShellDisplayHook" -> "IPython.core.displayhook.DisplayHook" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.ipkernel.IPythonKernel" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.ipkernel.Kernel" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.kernelapp.IPKernelApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.kernelapp.IPKernelApp" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.kernelapp.IPKernelApp" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.kernelbase.Kernel" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.pylab.config.InlineBackend" -> "IPython.kernel.zmq.pylab.config.InlineBackendConfig" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.pylab.config.InlineBackendConfig" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.session.Session" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.session.SessionFactory" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.tests.test_serialize.test_class_inheritance.D" -> "IPython.kernel.zmq.tests.test_serialize.test_class_inheritance.C" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.tests.test_session.TestSession" -> "IPython.kernel.zmq.tests.test_session.SessionTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.zmqshell.KernelMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.zmqshell.ZMQDisplayPublisher" -> "IPython.core.displaypub.DisplayPublisher" [arrowhead="empty", arrowtail="none"];
"IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="empty", arrowtail="none"];
"IPython.lib.backgroundjobs.BackgroundJobExpr" -> "IPython.lib.backgroundjobs.BackgroundJobBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.backgroundjobs.BackgroundJobFunc" -> "IPython.lib.backgroundjobs.BackgroundJobBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.ClearDemo" -> "IPython.lib.demo.ClearMixin" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.ClearDemo" -> "IPython.lib.demo.Demo" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.ClearIPDemo" -> "IPython.lib.demo.ClearMixin" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.ClearIPDemo" -> "IPython.lib.demo.IPythonDemo" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.IPythonDemo" -> "IPython.lib.demo.Demo" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.IPythonLineDemo" -> "IPython.lib.demo.IPythonDemo" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.IPythonLineDemo" -> "IPython.lib.demo.LineDemo" [arrowhead="empty", arrowtail="none"];
"IPython.lib.demo.LineDemo" -> "IPython.lib.demo.Demo" [arrowhead="empty", arrowtail="none"];
"IPython.lib.display.Audio" -> "IPython.core.display.DisplayObject" [arrowhead="empty", arrowtail="none"];
"IPython.lib.display.FileLinks" -> "IPython.lib.display.FileLink" [arrowhead="empty", arrowtail="none"];
"IPython.lib.display.ScribdDocument" -> "IPython.lib.display.IFrame" [arrowhead="empty", arrowtail="none"];
"IPython.lib.display.VimeoVideo" -> "IPython.lib.display.IFrame" [arrowhead="empty", arrowtail="none"];
"IPython.lib.display.YouTubeVideo" -> "IPython.lib.display.IFrame" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.GlutInputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.Gtk3InputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.GtkInputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.NullInputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.PygletInputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.Qt4InputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.Qt5InputHook" -> "IPython.lib.inputhook.Qt4InputHook" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.TkInputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.inputhook.WxInputHook" -> "IPython.lib.inputhook.InputHookBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.latextools.LaTeXTool" -> "IPython.config.configurable.SingletonConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.lib.pretty.Breakable" -> "IPython.lib.pretty.Printable" [arrowhead="empty", arrowtail="none"];
"IPython.lib.pretty.Group" -> "IPython.lib.pretty.Printable" [arrowhead="empty", arrowtail="none"];
"IPython.lib.pretty.PrettyPrinter" -> "IPython.lib.pretty._PrettyPrinterBase" [arrowhead="empty", arrowtail="none"];
"IPython.lib.pretty.RepresentationPrinter" -> "IPython.lib.pretty.PrettyPrinter" [arrowhead="empty", arrowtail="none"];
"IPython.lib.pretty.Text" -> "IPython.lib.pretty.Printable" [arrowhead="empty", arrowtail="none"];
"IPython.lib.tests.test_pretty.Dummy2" -> "IPython.lib.tests.test_pretty.Dummy1" [arrowhead="empty", arrowtail="none"];
"IPython.lib.tests.test_pretty.SB" -> "IPython.lib.tests.test_pretty.SA" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.exporter.Exporter" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.exporter.FilenameExtension" -> "IPython.utils.traitlets.Unicode" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.html.HTMLExporter" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.latex.LatexExporter" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.markdown.MarkdownExporter" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.notebook.NotebookExporter" -> "IPython.nbconvert.exporters.exporter.Exporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.pdf.PDFExporter" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.python.PythonExporter" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.rst.RSTExporter" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.script.ScriptExporter" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.slides.SlidesExporter" -> "IPython.nbconvert.exporters.html.HTMLExporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.templateexporter.TemplateExporter" -> "IPython.nbconvert.exporters.exporter.Exporter" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.base.ExportersTestsBase" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.cheese.CheesePreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_export.TestExport" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_exporter.PizzaPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_exporter.TestExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_html.TestHTMLExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_latex.TestLatexExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_markdown.TestMarkdownExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_notebook.TestNotebookExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_pdf.TestPDF" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_python.TestPythonExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_rst.TestRSTExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_script.TestScriptExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_slides.TestSlidesExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.exporters.tests.test_templateexporter.TestExporter" -> "IPython.nbconvert.exporters.tests.base.ExportersTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.datatypefilter.DataTypeFilter" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.highlight.Highlight2HTML" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.highlight.Highlight2Latex" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.markdown.NodeJSMissing" -> "IPython.nbconvert.utils.exceptions.ConversionException" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.tests.test_ansi.TestAnsi" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.tests.test_datatypefilter.TestDataTypeFilter" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.tests.test_highlight.TestHighlight" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.tests.test_latex.TestLatex" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.tests.test_markdown.TestMarkdown" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.filters.tests.test_strings.TestStrings" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.nbconvertapp.DottedOrNone" -> "IPython.utils.traitlets.DottedObjectName" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.nbconvertapp.NbConvertApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.postprocessors.base.PostProcessorBase" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.postprocessors.serve.ServePostProcessor" -> "IPython.nbconvert.postprocessors.base.PostProcessorBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.postprocessors.tests.test_serve.TestServe" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.base.Preprocessor" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.clearoutput.ClearOutputPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.convertfigures.ConvertFiguresPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.csshtmlheader.CSSHTMLHeaderPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.execute.ExecutePreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.extractoutput.ExtractOutputPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.highlightmagics.HighlightMagicsPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.latex.LatexPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.revealhelp.RevealHelpPreprocessor" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.svg2pdf.SVG2PDFPreprocessor" -> "IPython.nbconvert.preprocessors.convertfigures.ConvertFiguresPreprocessor" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_clearoutput.TestClearOutput" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_coalescestreams.TestCoalesceStreams" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_csshtmlheader.TestCSSHTMLHeader" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_execute.TestExecute" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_extractoutput.TestExtractOutput" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_highlightmagics.TestHighlightMagics" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_latex.TestLatex" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_revealhelp.Testrevealhelp" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.preprocessors.tests.test_svg2pdf.Testsvg2pdf" -> "IPython.nbconvert.preprocessors.tests.base.PreprocessorTestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.tests.test_nbconvertapp.DummyPost" -> "IPython.nbconvert.postprocessors.base.PostProcessorBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.tests.test_nbconvertapp.TestNbConvertApp" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.utils.base.NbConvertBase" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.utils.pandoc.PandocMissing" -> "IPython.nbconvert.utils.exceptions.ConversionException" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.utils.tests.test_lexers.TestLexers" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.utils.tests.test_pandoc.TestPandoc" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.base.WriterBase" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.debug.DebugWriter" -> "IPython.nbconvert.writers.base.WriterBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.files.FilesWriter" -> "IPython.nbconvert.writers.base.WriterBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.stdout.StdoutWriter" -> "IPython.nbconvert.writers.base.WriterBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.tests.test_debug.TestDebug" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.tests.test_files.Testfiles" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbconvert.writers.tests.test_stdout.TestStdout" -> "IPython.nbconvert.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.notebooknode.NotebookNode" -> "IPython.utils.ipstruct.Struct" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.sign.NotebookNotary" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.sign.TrustNotebookApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.tests.test_api.TestAPI" -> "IPython.nbformat.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.tests.test_convert.TestConvert" -> "IPython.nbformat.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.tests.test_reader.TestReader" -> "IPython.nbformat.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.tests.test_sign.TestNotary" -> "IPython.nbformat.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.tests.test_validator.TestValidator" -> "IPython.nbformat.tests.base.TestsBase" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v1.nbbase.NotebookNode" -> "IPython.utils.ipstruct.Struct" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v1.nbjson.JSONReader" -> "IPython.nbformat.v1.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v1.nbjson.JSONWriter" -> "IPython.nbformat.v1.rwbase.NotebookWriter" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v2.nbbase.NotebookNode" -> "IPython.utils.ipstruct.Struct" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v2.nbjson.JSONReader" -> "IPython.nbformat.v2.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v2.nbjson.JSONWriter" -> "IPython.nbformat.v2.rwbase.NotebookWriter" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v2.nbpy.PyReader" -> "IPython.nbformat.v2.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v2.nbpy.PyWriter" -> "IPython.nbformat.v2.rwbase.NotebookWriter" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v2.nbxml.XMLReader" -> "IPython.nbformat.v2.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.utils.ipstruct.Struct" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.nbjson.JSONReader" -> "IPython.nbformat.v3.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.nbjson.JSONWriter" -> "IPython.nbformat.v3.rwbase.NotebookWriter" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.nbpy.PyReader" -> "IPython.nbformat.v3.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.nbpy.PyWriter" -> "IPython.nbformat.v3.rwbase.NotebookWriter" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.tests.test_json.TestJSON" -> "IPython.nbformat.v3.tests.formattest.NBFormatTest" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v3.tests.test_nbpy.TestPy" -> "IPython.nbformat.v3.tests.formattest.NBFormatTest" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v4.nbjson.JSONReader" -> "IPython.nbformat.v4.rwbase.NotebookReader" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v4.nbjson.JSONWriter" -> "IPython.nbformat.v4.rwbase.NotebookWriter" [arrowhead="empty", arrowtail="none"];
"IPython.nbformat.v4.tests.test_json.TestJSON" -> "IPython.nbformat.v4.tests.formattest.NBFormatTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.baseapp.BaseParallelApplication" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.baseapp.ParallelCrashHandler" -> "IPython.core.crashhandler.CrashHandler" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipclusterapp.IPClusterApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipclusterapp.IPClusterEngines" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipclusterapp.IPClusterStart" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipclusterapp.IPClusterStop" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipcontrollerapp.IPControllerApp" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipengineapp.IPEngineApp" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.ipengineapp.MPI" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.iploggerapp.IPLoggerApp" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.BaseLauncher" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.BatchClusterAppMixin" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.BatchSystemLauncher" -> "IPython.parallel.apps.launcher.BaseLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.ClusterAppMixin" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.ControllerMixin" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.EngineMixin" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.HTCondorControllerLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.HTCondorControllerLauncher" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.HTCondorEngineSetLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.HTCondorEngineSetLauncher" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.HTCondorLauncher" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.IPClusterLauncher" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LSFControllerLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LSFControllerLauncher" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LSFEngineSetLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LSFEngineSetLauncher" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LSFLauncher" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LocalControllerLauncher" -> "IPython.parallel.apps.launcher.ControllerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LocalControllerLauncher" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LocalEngineLauncher" -> "IPython.parallel.apps.launcher.EngineMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LocalEngineLauncher" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LocalEngineSetLauncher" -> "IPython.parallel.apps.launcher.LocalEngineLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.LocalProcessLauncher" -> "IPython.parallel.apps.launcher.BaseLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIControllerLauncher" -> "IPython.parallel.apps.launcher.ControllerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIControllerLauncher" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIEngineSetLauncher" -> "IPython.parallel.apps.launcher.EngineMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIEngineSetLauncher" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIExecControllerLauncher" -> "IPython.parallel.apps.launcher.DeprecatedMPILauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIExecControllerLauncher" -> "IPython.parallel.apps.launcher.MPIControllerLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIExecEngineSetLauncher" -> "IPython.parallel.apps.launcher.DeprecatedMPILauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIExecEngineSetLauncher" -> "IPython.parallel.apps.launcher.MPIEngineSetLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIExecLauncher" -> "IPython.parallel.apps.launcher.DeprecatedMPILauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPIExecLauncher" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.MPILauncher" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.PBSControllerLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.PBSControllerLauncher" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.PBSEngineSetLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.PBSEngineSetLauncher" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.PBSLauncher" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.ProcessStateError" -> "IPython.parallel.apps.launcher.LauncherError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SGEControllerLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SGEControllerLauncher" -> "IPython.parallel.apps.launcher.SGELauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SGEEngineSetLauncher" -> "IPython.parallel.apps.launcher.BatchClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SGEEngineSetLauncher" -> "IPython.parallel.apps.launcher.SGELauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SGELauncher" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHClusterLauncher" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHClusterLauncher" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHControllerLauncher" -> "IPython.parallel.apps.launcher.ControllerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHControllerLauncher" -> "IPython.parallel.apps.launcher.SSHClusterLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHEngineLauncher" -> "IPython.parallel.apps.launcher.EngineMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHEngineLauncher" -> "IPython.parallel.apps.launcher.SSHClusterLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHEngineSetLauncher" -> "IPython.parallel.apps.launcher.LocalEngineSetLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHLauncher" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.SSHProxyEngineSetLauncher" -> "IPython.parallel.apps.launcher.SSHClusterLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.UnknownStatus" -> "IPython.parallel.apps.launcher.LauncherError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.WindowsHPCControllerLauncher" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.WindowsHPCControllerLauncher" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.WindowsHPCEngineSetLauncher" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.WindowsHPCEngineSetLauncher" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.launcher.WindowsHPCLauncher" -> "IPython.parallel.apps.launcher.BaseLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.logwatcher.LogWatcher" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.winhpcjob.IPControllerJob" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.winhpcjob.IPControllerTask" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.winhpcjob.IPEngineSetJob" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.winhpcjob.IPEngineTask" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.winhpcjob.WinHPCJob" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.apps.winhpcjob.WinHPCTask" -> "IPython.config.configurable.Configurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.asyncresult.AsyncHubResult" -> "IPython.parallel.client.asyncresult.AsyncResult" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.asyncresult.AsyncMapResult" -> "IPython.parallel.client.asyncresult.AsyncResult" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.client.Client" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.client.ExecuteReply" -> "IPython.utils.capture.RichOutput" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.magics.ParallelMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.map.RoundRobinMap" -> "IPython.parallel.client.map.Map" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.remotefunction.ParallelFunction" -> "IPython.parallel.client.remotefunction.RemoteFunction" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.view.DirectView" -> "IPython.parallel.client.view.View" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.view.LoadBalancedView" -> "IPython.parallel.client.view.View" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.client.view.View" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.dictdb.BaseDB" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.dictdb.DictDB" -> "IPython.parallel.controller.dictdb.BaseDB" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.dictdb.NoDB" -> "IPython.parallel.controller.dictdb.BaseDB" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.heartmonitor.HeartMonitor" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.hub.EngineConnector" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.hub.Hub" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.hub.HubFactory" -> "IPython.parallel.factory.RegistrationFactory" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.mongodb.MongoDB" -> "IPython.parallel.controller.dictdb.BaseDB" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.scheduler.TaskScheduler" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.controller.sqlitedb.SQLiteDB" -> "IPython.parallel.controller.dictdb.BaseDB" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.engine.engine.EngineFactory" -> "IPython.parallel.factory.RegistrationFactory" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.CompositeError" -> "IPython.parallel.error.RemoteError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.DependencyTimeout" -> "IPython.parallel.error.ImpossibleDependency" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.EngineError" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.ImpossibleDependency" -> "IPython.parallel.error.UnmetDependency" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.InvalidDependency" -> "IPython.parallel.error.ImpossibleDependency" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.KernelError" -> "IPython.parallel.error.IPythonError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.NoEnginesRegistered" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.RemoteError" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.TaskAborted" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.TaskRejectError" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.TaskTimeout" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.TimeoutError" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.error.UnmetDependency" -> "IPython.parallel.error.KernelError" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.factory.RegistrationFactory" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.TestProcessLauncher" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_asyncresult.AsyncResultTest" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_client.TestClient" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_db.TestDictBackend" -> "IPython.parallel.tests.test_db.TaskDBTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_db.TestSQLiteBackend" -> "IPython.parallel.tests.test_db.TaskDBTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_dependency.DependencyTest" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.ControllerLauncherTest" -> "IPython.parallel.tests.test_launcher.LauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.EngineSetLauncherTest" -> "IPython.parallel.tests.test_launcher.LauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestHTCondorControllerLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestHTCondorControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestHTCondorEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestHTCondorEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestLSFControllerLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestLSFControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestLSFEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestLSFEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestLocalControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestLocalEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestMPIControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestMPIEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestPBSControllerLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestPBSControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestPBSEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestPBSEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSGEControllerLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSGEControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSGEEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.BatchTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSGEEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHControllerLauncher" -> "IPython.parallel.tests.test_launcher.SSHTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHEngineLauncher" -> "IPython.parallel.tests.test_launcher.LauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHEngineLauncher" -> "IPython.parallel.tests.test_launcher.SSHTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHProxyEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.LauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestSSHProxyEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.SSHTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestWinHPCControllerLauncher" -> "IPython.parallel.tests.test_launcher.ControllerLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestWinHPCControllerLauncher" -> "IPython.parallel.tests.test_launcher.WinHPCTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestWinHPCEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.EngineSetLauncherTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_launcher.TestWinHPCEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.WinHPCTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_lbview.TestLoadBalancedView" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_magics.TestParallelMagics" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_mongodb.TestMongoBackend" -> "IPython.parallel.tests.test_db.TaskDBTest" [arrowhead="empty", arrowtail="none"];
"IPython.parallel.tests.test_view.TestView" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="empty", arrowtail="none"];
"IPython.qt.client.QtHBChannel" -> "IPython.kernel.channels.HBChannel" [arrowhead="empty", arrowtail="none"];
"IPython.qt.client.QtHBChannel" -> "IPython.qt.util.SuperQObject" [arrowhead="empty", arrowtail="none"];
"IPython.qt.client.QtKernelClient" -> "IPython.kernel.threaded.ThreadedKernelClient" [arrowhead="empty", arrowtail="none"];
"IPython.qt.client.QtKernelClient" -> "IPython.qt.kernel_mixins.QtKernelClientMixin" [arrowhead="empty", arrowtail="none"];
"IPython.qt.client.QtZMQSocketChannel" -> "IPython.kernel.threaded.ThreadedZMQSocketChannel" [arrowhead="empty", arrowtail="none"];
"IPython.qt.client.QtZMQSocketChannel" -> "IPython.qt.util.SuperQObject" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.ansi_code_processor.QtAnsiCodeProcessor" -> "IPython.qt.console.ansi_code_processor.AnsiCodeProcessor" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.frontend_widget.FrontendHighlighter" -> "IPython.qt.console.pygments_highlighter.PygmentsHighlighter" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.frontend_widget.FrontendWidget" -> "IPython.qt.base_frontend_mixin.BaseFrontendMixin" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.frontend_widget.FrontendWidget" -> "IPython.qt.console.history_console_widget.HistoryConsoleWidget" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.history_console_widget.HistoryConsoleWidget" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.ipython_widget.IPythonWidget" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.qt.console.rich_ipython_widget.RichIPythonWidget" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessChannel" -> "IPython.kernel.inprocess.channels.InProcessChannel" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessChannel" -> "IPython.qt.util.SuperQObject" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessHBChannel" -> "IPython.kernel.inprocess.channels.InProcessHBChannel" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessHBChannel" -> "IPython.qt.util.SuperQObject" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessKernelClient" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessKernelClient" -> "IPython.qt.kernel_mixins.QtKernelClientMixin" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessKernelManager" -> "IPython.kernel.inprocess.manager.InProcessKernelManager" [arrowhead="empty", arrowtail="none"];
"IPython.qt.inprocess.QtInProcessKernelManager" -> "IPython.qt.kernel_mixins.QtKernelManagerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.qt.manager.QtKernelManager" -> "IPython.kernel.manager.KernelManager" [arrowhead="empty", arrowtail="none"];
"IPython.qt.manager.QtKernelManager" -> "IPython.qt.kernel_mixins.QtKernelManagerMixin" [arrowhead="empty", arrowtail="none"];
"IPython.qt.manager.QtKernelRestarter" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="empty", arrowtail="none"];
"IPython.qt.manager.QtKernelRestarter" -> "IPython.qt.kernel_mixins.QtKernelRestarterMixin" [arrowhead="empty", arrowtail="none"];
"IPython.qt.util.MetaQObjectHasTraits" -> "IPython.utils.traitlets.MetaHasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.console.app.ZMQTerminalIPythonApp" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.console.app.ZMQTerminalIPythonApp" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.console.completer.ZMQCompleter" -> "IPython.core.completer.IPCompleter" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.console.zmqhistory.ZMQHistoryManager" -> "IPython.core.history.HistoryAccessorBase" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.embed.EmbeddedMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.embed.InteractiveShellEmbed" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.interactiveshell.TerminalInteractiveShell" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.interactiveshell.TerminalMagics" -> "IPython.core.magic.Magics" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.ipapp.IPAppCrashHandler" -> "IPython.core.crashhandler.CrashHandler" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.ipapp.LocateIPythonApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.ipapp.TerminalIPythonApp" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.ipapp.TerminalIPythonApp" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="empty", arrowtail="none"];
"IPython.terminal.tests.test_interactivshell.SyntaxErrorTransformer" -> "IPython.core.inputtransformer.InputTransformer" [arrowhead="empty", arrowtail="none"];
"IPython.testing.globalipapp.StreamProxy" -> "IPython.utils.io.IOStream" [arrowhead="empty", arrowtail="none"];
"IPython.testing.iptestcontroller.JSController" -> "IPython.testing.iptestcontroller.TestController" [arrowhead="empty", arrowtail="none"];
"IPython.testing.iptestcontroller.PyTestController" -> "IPython.testing.iptestcontroller.TestController" [arrowhead="empty", arrowtail="none"];
"IPython.testing.plugin.ipdoctest.IPythonDoctest" -> "IPython.testing.plugin.ipdoctest.ExtensionDoctest" [arrowhead="empty", arrowtail="none"];
"IPython.testing.tests.test_tools.Test_ipexec_validate" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.testing.tools.AssertNotPrints" -> "IPython.testing.tools.AssertPrints" [arrowhead="empty", arrowtail="none"];
"IPython.utils.pickleutil.CannedArray" -> "IPython.utils.pickleutil.CannedObject" [arrowhead="empty", arrowtail="none"];
"IPython.utils.pickleutil.CannedBytes" -> "IPython.utils.pickleutil.CannedObject" [arrowhead="empty", arrowtail="none"];
"IPython.utils.pickleutil.CannedCell" -> "IPython.utils.pickleutil.CannedObject" [arrowhead="empty", arrowtail="none"];
"IPython.utils.pickleutil.CannedClass" -> "IPython.utils.pickleutil.CannedObject" [arrowhead="empty", arrowtail="none"];
"IPython.utils.pickleutil.CannedFunction" -> "IPython.utils.pickleutil.CannedObject" [arrowhead="empty", arrowtail="none"];
"IPython.utils.pickleutil.Reference" -> "IPython.utils.pickleutil.CannedObject" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_dir2.test_SubClass.SubClass" -> "IPython.utils.tests.test_dir2.Base" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_dir2.test_SubClass_with_trait_names_attr.SubClass" -> "IPython.utils.tests.test_dir2.Base" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_dir2.test_SubClass_with_trait_names_method.SubClass" -> "IPython.utils.tests.test_dir2.Base" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_dir2.test_misbehaving_object_without_trait_names.SillierWithDir" -> "IPython.utils.tests.test_dir2.test_misbehaving_object_without_trait_names.MisbehavingGetattr" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_process.SubProcessTestCase" -> "IPython.testing.tools.TempFileMixin" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.AnyTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.AnyTraitTest" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.BytesTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.CRegExpTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ComplexTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.DictTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.DottedObjectNameTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.FloatTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredBarSub" -> "IPython.utils.tests.test_traitlets.ForwardDeclaredBar" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredTypeListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredTypeTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.HasTraitsStub" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.InstanceListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.IntTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.IntegerTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.LenListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.LongTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.LooseTupleTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.MultiTupleTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.NoneInstanceListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.ObjectNameTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.OrTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.OrTraitTest" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.Pickleable" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TCPAddressTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestBytes" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestCRegExp" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestComplex" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_connect_same.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_link_different.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_link_different.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_unlink.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_validate_args.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDirectionalLink.test_validate_args.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestDottedObjectName" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestEventful.test_dict.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestEventful.test_list.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestFloat" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredInstanceList" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredInstanceTrait" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredTypeList" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestForwardDeclaredTypeTrait" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_init.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_positional_args.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_metadata.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_metadata_default.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_names.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_traits.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraits.test_traits_metadata.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_metaclass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_metaclass.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_metaclass.C" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.B" -> "IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_all.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_args.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_one.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_only_once.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_only_once.B" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_only_once.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_subclass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_subclass.B" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_subclass.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_static_notify.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_static_notify.B" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_static_notify.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_subclass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_subclass.B" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_subclass.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.C" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_bad_default.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.Bar" -> "IPython.utils.tests.test_traitlets.TestInstance.test_basic.Foo" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Bar" -> "IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Foo" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.FooInstance" -> "IPython.utils.traitlets.Instance" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_instance.inner.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstance.test_unique_default_value.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInstanceList" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInt" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestInteger" -> "IPython.utils.tests.test_traitlets.TestLong" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLenList" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_callbacks.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_callbacks.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_connect_same.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_link_different.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_link_different.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_unlink.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_validate_args.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLink.test_validate_args.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestList" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLong" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestLooseTupleTrait" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestMultiTuple" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestNoneInstanceList" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestObjectName" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTCPAddress" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass.Bar" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass.Foo" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass.Foo" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Bar" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Foo" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Foo" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_class.Foo" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_in_container.Tree" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_inst.Foo" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.B" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.MyIntTT" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.B" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.C" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.A" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_error.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_get_undefined.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_info.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_is_valid_for.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_is_valid_for.MyTT" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_set.A" -> "IPython.utils.tests.test_traitlets.HasTraitsStub" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_validate.A" -> "IPython.utils.tests.test_traitlets.HasTraitsStub" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_validate.MyTT" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_value_for.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_value_for.MyTT" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestTupleTrait" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_allow_none.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_allow_none.C" -> "IPython.utils.tests.test_traitlets.TestType.test_allow_none.B" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_default.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_set_str_klass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_str_klass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_default.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_default.C" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_validate_klass.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestType.test_value.A" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestUnicode" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TestUnionListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.TupleTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.UnicodeTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.UnionListTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.UnionTrait" -> "IPython.utils.traitlets.HasTraits" [arrowhead="empty", arrowtail="none"];
"IPython.utils.tests.test_traitlets.UnionTraitTest" -> "IPython.utils.tests.test_traitlets.TraitTestBase" [arrowhead="empty", arrowtail="none"];
"IPython.utils.text.DollarFormatter" -> "IPython.utils.text.FullEvalFormatter" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Any" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Bool" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Bytes" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CBool" -> "IPython.utils.traitlets.Bool" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CBytes" -> "IPython.utils.traitlets.Bytes" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CComplex" -> "IPython.utils.traitlets.Complex" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CFloat" -> "IPython.utils.traitlets.Float" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CInt" -> "IPython.utils.traitlets.Int" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CRegExp" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CUnicode" -> "IPython.utils.traitlets.Unicode" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.utils.traitlets.Enum" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.ClassBasedTraitType" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Complex" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Container" -> "IPython.utils.traitlets.Instance" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Dict" -> "IPython.utils.traitlets.Instance" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.utils.traitlets.ObjectName" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Enum" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.EventfulDict" -> "IPython.utils.traitlets.Instance" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.EventfulList" -> "IPython.utils.traitlets.Instance" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Float" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.ForwardDeclaredInstance" -> "IPython.utils.traitlets.ForwardDeclaredMixin" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.ForwardDeclaredInstance" -> "IPython.utils.traitlets.Instance" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.ForwardDeclaredType" -> "IPython.utils.traitlets.ForwardDeclaredMixin" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.ForwardDeclaredType" -> "IPython.utils.traitlets.Type" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.traitlets.ClassBasedTraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Int" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.List" -> "IPython.utils.traitlets.Container" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.ObjectName" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Set" -> "IPython.utils.traitlets.List" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.TCPAddress" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.This" -> "IPython.utils.traitlets.ClassBasedTraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Tuple" -> "IPython.utils.traitlets.Container" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Type" -> "IPython.utils.traitlets.ClassBasedTraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Unicode" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.utils.traitlets.Union" -> "IPython.utils.traitlets.TraitType" [arrowhead="empty", arrowtail="none"];
"IPython.config.application.LevelFormatter" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_log_formatter_cls", style="solid"];
"IPython.config.application.LevelFormatter" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_log_formatter", style="solid"];
"IPython.config.loader.ArgumentParser" -> "IPython.config.loader.ArgParseConfigLoader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"IPython.config.loader.Config" -> "IPython.config.loader.ConfigLoader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"IPython.config.loader.Config" -> "IPython.config.loader.JSONFileConfigLoader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"IPython.config.loader.Config" -> "IPython.html.services.contents.tests.test_contents_api.GenericFileCheckpointsAPITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"IPython.config.loader.KVArgParseConfigLoader" -> "IPython.config.tests.test_loader.TestArgParseKVCL" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.config.loader.KeyValueConfigLoader" -> "IPython.config.tests.test_loader.TestKeyValueCL" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.config.tests.test_application.Bar" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bar", style="solid"];
"IPython.config.tests.test_application.Foo" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="foo", style="solid"];
"IPython.core.alias.AliasManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alias_manager", style="solid"];
"IPython.core.builtin_trap.BuiltinTrap" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="builtin_trap", style="solid"];
"IPython.core.compilerop.CachingCompiler" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="compile", style="solid"];
"IPython.core.completer.CompletionSplitter" -> "IPython.core.completer.IPCompleter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="splitter", style="solid"];
"IPython.core.completer.CompletionSplitter" -> "IPython.core.tests.test_completer.CompletionSplitterTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sp", style="solid"];
"IPython.core.completer.IPCompleter" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Completer", style="solid"];
"IPython.core.debugger.Pdb" -> "IPython.core.debugger.Tracer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="debugger", style="solid"];
"IPython.core.debugger.Pdb" -> "IPython.core.ultratb.TBTools" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pdb", style="solid"];
"IPython.core.debugger.Pdb" -> "IPython.core.ultratb.VerboseTB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pdb", style="solid"];
"IPython.core.display_trap.DisplayTrap" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_trap", style="solid"];
"IPython.core.events.EventManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="events", style="solid"];
"IPython.core.events.EventManager" -> "IPython.core.tests.test_events.CallbackTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="em", style="solid"];
"IPython.core.events.EventManager" -> "IPython.extensions.tests.test_autoreload.FakeShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="events", style="solid"];
"IPython.core.extensions.ExtensionManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extension_manager", style="solid"];
"IPython.core.formatters.DisplayFormatter" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_formatter", style="solid"];
"IPython.core.history.DummyDB" -> "IPython.core.history.HistoryAccessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.core.history.HistoryManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history_manager", style="solid"];
"IPython.core.history.HistorySavingThread" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="save_thread", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.core.tests.test_inputsplitter.CellModeCellMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sp", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.core.tests.test_inputsplitter.IPythonInputTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="isp", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.core.tests.test_inputsplitter.LineModeCellMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sp", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_prompt_transformer", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_input_splitter_class", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_prompt_transformer", style="solid"];
"IPython.core.inputsplitter.IPythonInputSplitter" -> "IPython.terminal.interactiveshell.TerminalMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_splitter", style="solid"];
"IPython.core.inputsplitter.InputSplitter" -> "IPython.core.tests.test_inputsplitter.InputSplitterTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="isp", style="solid"];
"IPython.core.inputsplitter.InputSplitter" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_input_splitter", style="solid"];
"IPython.core.inputsplitter.InputSplitter" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_input_splitter_class", style="solid"];
"IPython.core.inputtransformer.assemble_python_lines" -> "IPython.core.inputsplitter.IPythonInputSplitter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="assemble_python_lines", style="solid"];
"IPython.core.interactiveshell.DummyMod" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_module", style="solid"];
"IPython.core.interactiveshell.ReadlineNoRecord" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readline_no_record", style="solid"];
"IPython.core.interactiveshell.SeparateUnicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="separate_in", style="solid"];
"IPython.core.interactiveshell.SeparateUnicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="separate_out", style="solid"];
"IPython.core.interactiveshell.SeparateUnicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="separate_out2", style="solid"];
"IPython.core.logger.Logger" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logger", style="solid"];
"IPython.core.magic.Bunch" -> "IPython.core.magics.auto.AutoMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_magic_state", style="solid"];
"IPython.core.magic.MagicsManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="magics_manager", style="solid"];
"IPython.core.oinspect.Inspector" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inspector", style="solid"];
"IPython.core.payload.PayloadManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="payload_manager", style="solid"];
"IPython.core.prefilter.PrefilterManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prefilter_manager", style="solid"];
"IPython.core.profiledir.ProfileDir" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.core.profiledir.ProfileDir" -> "IPython.core.tests.test_profile.ProfileStartupTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pd", style="solid"];
"IPython.core.profiledir.ProfileDir" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cd", style="solid"];
"IPython.core.profiledir.ProfileDir" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cd", style="solid"];
"IPython.core.profiledir.ProfileDir" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.core.prompts.PromptManager" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompt_manager", style="solid"];
"IPython.core.prompts.PromptManager" -> "IPython.core.tests.test_prompts.PromptTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pm", style="solid"];
"IPython.core.prompts.UserNSFormatter" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_formatter", style="solid"];
"IPython.core.tests.test_debugger._FakeInput" -> "IPython.core.tests.test_debugger.PdbTestInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="real_stdin", style="solid"];
"IPython.core.tests.test_debugger._FakeInput" -> "IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="old_stdin", style="solid"];
"IPython.core.tests.test_debugger._FakeInput" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin", style="solid"];
"IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase.setUp.X" -> "IPython.core.tests.test_debugger.PdbTestInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="real_stdin", style="solid"];
"IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase.setUp.X" -> "IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="old_stdin", style="solid"];
"IPython.core.tests.test_inputsplitter.NoInputEncodingTestCase.setUp.X" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin", style="solid"];
"IPython.core.tests.test_interactiveshell.IntegerWrapper" -> "IPython.core.tests.test_interactiveshell.TestAstTransform2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="intwrapper", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_multiple_attribute_lookups.A" -> "IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_multiple_attribute_lookups.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_multiple_attribute_lookups.A" -> "IPython.core.tests.test_interactiveshell.InteractiveShellTestCase.test_ofind_multiple_attribute_lookups.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.core.tests.test_interactiveshell.Negator" -> "IPython.core.tests.test_interactiveshell.TestAstTransform" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="negator", style="solid"];
"IPython.core.tests.test_interactiveshell.StringRejector" -> "IPython.core.tests.test_interactiveshell.TestAstTransformInputRejection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transformer", style="solid"];
"IPython.core.tests.test_interactiveshell.TestSyntaxErrorTransformer.SyntaxErrorTransformer" -> "IPython.core.tests.test_interactiveshell.TestSyntaxErrorTransformer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transformer", style="solid"];
"IPython.core.ultratb.AutoFormattedTB" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InteractiveTB", style="solid"];
"IPython.core.ultratb.SyntaxTB" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SyntaxTB", style="solid"];
"IPython.extensions.autoreload.AutoreloadMagics" -> "IPython.extensions.tests.test_autoreload.FakeShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_magics", style="solid"];
"IPython.extensions.autoreload.ModuleReloader" -> "IPython.extensions.autoreload.AutoreloadMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_reloader", style="solid"];
"IPython.extensions.tests.test_autoreload.FakeShell" -> "IPython.extensions.tests.test_autoreload.Fixture" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.external.path._path.path" -> "IPython.external.path._path.path" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_old_dir", style="solid"];
"IPython.external.path._path.path" -> "IPython.utils.pickleshare.PickleShareDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="root", style="solid"];
"IPython.html.allow76.WebSocketProtocol76" -> "IPython.html.allow76.AllowDraftWebSocketHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ws_connection", style="solid"];
"IPython.html.nbconvert.tests.test_nbconvert_handlers.NbconvertAPI" -> "IPython.html.nbconvert.tests.test_nbconvert_handlers.APITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="nbconvert_api", style="solid"];
"IPython.html.notebookapp.NotebookWebApplication" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="web_app", style="solid"];
"IPython.html.services.config.tests.test_config_api.ConfigAPI" -> "IPython.html.services.config.tests.test_config_api.APITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_api", style="solid"];
"IPython.html.services.contents.filemanager.FileContentsManager" -> "IPython.html.services.contents.tests.test_manager.TestContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="contents_manager", style="solid"];
"IPython.html.services.contents.tests.test_contents_api.API" -> "IPython.html.services.contents.tests.test_contents_api.APITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="api", style="solid"];
"IPython.html.services.kernels.tests.test_kernels_api.KernelAPI" -> "IPython.html.services.kernels.tests.test_kernels_api.KernelAPITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kern_api", style="solid"];
"IPython.html.services.kernelspecs.tests.test_kernelspecs_api.KernelSpecAPI" -> "IPython.html.services.kernelspecs.tests.test_kernelspecs_api.APITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ks_api", style="solid"];
"IPython.html.services.nbconvert.tests.test_nbconvert_api.NbconvertAPI" -> "IPython.html.services.nbconvert.tests.test_nbconvert_api.APITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="nbconvert_api", style="solid"];
"IPython.html.services.sessions.sessionmanager.SessionManager" -> "IPython.html.services.sessions.tests.test_sessionmanager.TestSessionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sm", style="solid"];
"IPython.html.services.sessions.tests.test_sessions_api.SessionAPI" -> "IPython.html.services.sessions.tests.test_sessions_api.SessionAPITest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sess_api", style="solid"];
"IPython.html.widgets.widget.CallbackDispatcher" -> "IPython.html.widgets.widget_button.Button" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_click_handlers", style="solid"];
"IPython.html.widgets.widget.CallbackDispatcher" -> "IPython.html.widgets.widget_string.Text" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_submission_callbacks", style="solid"];
"IPython.html.widgets.widget_link.WidgetTraitTuple" -> "IPython.html.widgets.widget_link.DirectionalLink" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="source", style="solid"];
"IPython.kernel.blocking.client.BlockingKernelClient" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_client", style="solid"];
"IPython.kernel.blocking.client.BlockingKernelClient" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_client_class", style="solid"];
"IPython.kernel.blocking.client.BlockingKernelClient" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_factory", style="solid"];
"IPython.kernel.comm.comm.Comm" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="comm", style="solid"];
"IPython.kernel.comm.manager.CommManager" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="comm_manager", style="solid"];
"IPython.kernel.inprocess.ipkernel.InProcessKernel" -> "IPython.kernel.inprocess.manager.InProcessKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.kernel.inprocess.manager.InProcessKernelManager" -> "IPython.kernel.inprocess.tests.test_kernel.InProcessKernelTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="km", style="solid"];
"IPython.kernel.ioloop.restarter.IOLoopKernelRestarter" -> "IPython.kernel.ioloop.manager.IOLoopKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_restarter", style="solid"];
"IPython.kernel.kernelspec.KernelSpecManager" -> "IPython.kernel.tests.test_kernelspec.KernelSpecTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ksm", style="solid"];
"IPython.kernel.manager.KernelManager" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager", style="solid"];
"IPython.kernel.manager.KernelManager" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager_class", style="solid"];
"IPython.kernel.manager.KernelManager" -> "IPython.nbconvert.preprocessors.execute.ExecutePreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="km", style="solid"];
"IPython.kernel.tests.test_message_spec.Version" -> "IPython.kernel.tests.test_message_spec.KernelInfoReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="protocol_version", style="solid"];
"IPython.kernel.tests.test_message_spec.Version" -> "IPython.kernel.tests.test_message_spec.KernelInfoReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="implementation_version", style="solid"];
"IPython.kernel.tests.test_message_spec.Version" -> "IPython.kernel.tests.test_message_spec.RHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.kernel.threaded.IOLoopThread" -> "IPython.kernel.threaded.ThreadedKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ioloop_thread", style="solid"];
"IPython.kernel.zmq.eventloops.loop_wx.TimerFrame" -> "IPython.kernel.zmq.eventloops.loop_wx.IPWxApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frame", style="solid"];
"IPython.kernel.zmq.heartbeat.Heartbeat" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="heartbeat", style="solid"];
"IPython.kernel.zmq.ipkernel.IPythonKernel" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.kernel.zmq.kernelapp.IPKernelApp" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_app", style="solid"];
"IPython.kernel.zmq.parentpoller.ParentPollerUnix" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="poller", style="solid"];
"IPython.kernel.zmq.parentpoller.ParentPollerWindows" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="poller", style="solid"];
"IPython.kernel.zmq.session.Session" -> "IPython.html.base.zmqhandlers.AuthenticatedZMQStreamHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.kernel.zmq.session.Session" -> "IPython.kernel.tests.test_adapter.AdapterTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.kernel.zmq.session.Session" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.kernel.zmq.session.Session" -> "IPython.kernel.zmq.tests.test_session.SessionTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.kernel.zmq.session.Session" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.kernel.zmq.session.Session" -> "IPython.parallel.tests.test_db.TaskDBTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.lib.backgroundjobs.BackgroundJobManager" -> "IPython.core.magics.script.ScriptMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_manager", style="solid"];
"IPython.lib.inputhookwx.EventLoopTimer" -> "IPython.lib.inputhookwx.EventLoopRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timer", style="solid"];
"IPython.lib.lexers.IPythonConsoleLexer" -> "IPython.lib.lexers.IPyLexer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="IPythonConsoleLexer", style="solid"];
"IPython.lib.lexers.IPythonTracebackLexer" -> "IPython.lib.lexers.IPythonConsoleLexer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tblexer", style="solid"];
"IPython.lib.pretty.GroupQueue" -> "IPython.lib.pretty.PrettyPrinter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group_queue", style="solid"];
"IPython.nbconvert.exporters.exporter.FilenameExtension" -> "IPython.nbconvert.exporters.exporter.Exporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file_extension", style="solid"];
"IPython.nbconvert.exporters.html.HTMLExporter" -> "IPython.nbconvert.exporters.tests.test_html.TestHTMLExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.latex.LatexExporter" -> "IPython.nbconvert.exporters.tests.test_latex.TestLatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.markdown.MarkdownExporter" -> "IPython.nbconvert.exporters.tests.test_markdown.TestMarkdownExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.notebook.NotebookExporter" -> "IPython.nbconvert.exporters.tests.test_notebook.TestNotebookExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.pdf.PDFExporter" -> "IPython.nbconvert.exporters.tests.test_pdf.TestPDF" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.python.PythonExporter" -> "IPython.nbconvert.exporters.tests.test_python.TestPythonExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.rst.RSTExporter" -> "IPython.nbconvert.exporters.tests.test_rst.TestRSTExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.script.ScriptExporter" -> "IPython.nbconvert.exporters.tests.test_script.TestScriptExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.exporters.slides.SlidesExporter" -> "IPython.nbconvert.exporters.tests.test_slides.TestSlidesExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exporter_class", style="solid"];
"IPython.nbconvert.nbconvertapp.DottedOrNone" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="postprocessor_class", style="solid"];
"IPython.nbformat.notebooknode.NotebookNode" -> "IPython.nbformat.notebooknode.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.notebooknode.NotebookNode" -> "IPython.nbformat.notebooknode.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"IPython.nbformat.notebooknode.NotebookNode" -> "IPython.nbformat.notebooknode.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"IPython.nbformat.sign.NotebookNotary" -> "IPython.nbformat.tests.test_sign.TestNotary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notary", style="solid"];
"IPython.nbformat.v2.nbbase.NotebookNode" -> "IPython.nbformat.v2.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v2.nbbase.NotebookNode" -> "IPython.nbformat.v2.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.nbformat.v3.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.nbformat.v3.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.nbformat.v3.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.nbformat.v3.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.nbformat.v3.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.nbformat.v3.nbbase.NotebookNode" -> "IPython.nbformat.v3.nbbase.NotebookNode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.parallel.apps.baseapp.ParallelCrashHandler" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="crash_handler_class", style="solid"];
"IPython.parallel.apps.ipengineapp.MPI" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mpi", style="solid"];
"IPython.parallel.apps.launcher.HTCondorControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestHTCondorControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.HTCondorEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestHTCondorEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.LSFControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestLSFControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.LSFEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestLSFEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.LocalControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestLocalControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.LocalEngineLauncher" -> "IPython.parallel.apps.launcher.LocalEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.LocalEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestLocalEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.MPIControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestMPIControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.MPIEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestMPIEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.PBSControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestPBSControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.PBSEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestPBSEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SGEControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestSGEControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SGEEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestSGEEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SSHControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestSSHControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SSHEngineLauncher" -> "IPython.parallel.apps.launcher.SSHEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SSHEngineLauncher" -> "IPython.parallel.tests.test_launcher.TestSSHEngineLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SSHEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestSSHEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.SSHProxyEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestSSHProxyEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.WindowsHPCControllerLauncher" -> "IPython.parallel.tests.test_launcher.TestWinHPCControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.launcher.WindowsHPCEngineSetLauncher" -> "IPython.parallel.tests.test_launcher.TestWinHPCEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launcher_class", style="solid"];
"IPython.parallel.apps.logwatcher.LogWatcher" -> "IPython.parallel.apps.iploggerapp.IPLoggerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="watcher", style="solid"];
"IPython.parallel.client.client.Client" -> "IPython.parallel.tests.clienttest.ClusterTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"IPython.parallel.client.map.Map" -> "IPython.parallel.client.remotefunction.ParallelFunction" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mapObject", style="solid"];
"IPython.parallel.client.view.DirectView" -> "IPython.parallel.tests.test_dependency.DependencyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dview", style="solid"];
"IPython.parallel.client.view.LoadBalancedView" -> "IPython.parallel.tests.test_dependency.DependencyTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="view", style="solid"];
"IPython.parallel.client.view.LoadBalancedView" -> "IPython.parallel.tests.test_lbview.TestLoadBalancedView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="view", style="solid"];
"IPython.parallel.controller.dictdb.DictDB" -> "IPython.parallel.tests.test_db.TestDictBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.parallel.controller.dictdb.DictDB" -> "IPython.parallel.tests.test_db.TestDictBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.parallel.controller.dictdb.DictDB" -> "IPython.parallel.tests.test_db.TestDictBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.parallel.controller.dictdb.DictDB" -> "IPython.parallel.tests.test_db.TestDictBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.parallel.controller.heartmonitor.HeartMonitor" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="heartmonitor", style="solid"];
"IPython.parallel.controller.hub.Hub" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hub", style="solid"];
"IPython.parallel.controller.hub.HubFactory" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="factory", style="solid"];
"IPython.parallel.engine.engine.EngineFactory" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine", style="solid"];
"IPython.qt.client.QtKernelClient" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_client_class", style="solid"];
"IPython.qt.console.ansi_code_processor.AnsiCodeProcessor" -> "IPython.qt.console.tests.test_ansi_code_processor.TestAnsiCodeProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="processor", style="solid"];
"IPython.qt.console.ansi_code_processor.QtAnsiCodeProcessor" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ansi_processor", style="solid"];
"IPython.qt.console.bracket_matcher.BracketMatcher" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bracket_matcher", style="solid"];
"IPython.qt.console.call_tip_widget.CallTipWidget" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_call_tip_widget", style="solid"];
"IPython.qt.console.completion_html.CompletionHtml" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_completion_widget", style="solid"];
"IPython.qt.console.completion_html.SlidingInterval" -> "IPython.qt.console.completion_html.CompletionHtml" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_sliding_interval", style="solid"];
"IPython.qt.console.completion_plain.CompletionPlain" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_completion_widget", style="solid"];
"IPython.qt.console.completion_widget.CompletionWidget" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_completion_widget", style="solid"];
"IPython.qt.console.frontend_widget.FrontendHighlighter" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_highlighter", style="solid"];
"IPython.qt.console.kill_ring.KillRing" -> "IPython.qt.console.kill_ring.QtKillRing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ring", style="solid"];
"IPython.qt.console.kill_ring.QtKillRing" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_kill_ring", style="solid"];
"IPython.qt.console.magic_helper.MagicHelper" -> "IPython.qt.console.mainwindow.MainWindow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="magic_helper", style="solid"];
"IPython.qt.console.magic_helper.MagicHelper.__init__.MinListWidget" -> "IPython.qt.console.magic_helper.MagicHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="search_list", style="solid"];
"IPython.qt.console.mainwindow.MainWindow" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="window", style="solid"];
"IPython.qt.manager.QtKernelManager" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager_class", style="solid"];
"IPython.qt.manager.QtKernelRestarter" -> "IPython.qt.manager.QtKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_restarter", style="solid"];
"IPython.qt.rich_text.HtmlExporter" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_html_exporter", style="solid"];
"IPython.sphinxext.ipython_directive.EmbeddedSphinxShell" -> "IPython.sphinxext.ipython_directive.IPythonDirective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.terminal.console.completer.ZMQCompleter" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Completer", style="solid"];
"IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" -> "IPython.terminal.console.tests.test_image_handler.ZMQTerminalInteractiveShellTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.terminal.console.zmqhistory.ZMQHistoryManager" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history_manager", style="solid"];
"IPython.terminal.ipapp.IPAppCrashHandler" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="crash_handler_class", style="solid"];
"IPython.testing.iptest.StreamCapturer" -> "IPython.testing.iptest.SubprocessStreamCapturePlugin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream_capturer", style="solid"];
"IPython.testing.iptest.StreamCapturer" -> "IPython.testing.iptestcontroller.JSController" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream_capturer", style="solid"];
"IPython.testing.iptest.StreamCapturer" -> "IPython.testing.iptestcontroller.TestController" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdout_capturer", style="solid"];
"IPython.testing.plugin.ipdoctest.DocTestFinder" -> "IPython.testing.plugin.ipdoctest.ExtensionDoctest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="finder", style="solid"];
"IPython.testing.plugin.ipdoctest.DocTestFinder" -> "IPython.testing.plugin.ipdoctest.IPythonDoctest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="finder", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDocTestParser" -> "IPython.testing.plugin.ipdoctest.IPythonDoctest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDoctestOutputChecker" -> "IPython.testing.plugin.ipdoctest.ExtensionDoctest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checker", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDoctestOutputChecker" -> "IPython.testing.plugin.ipdoctest.IPythonDoctest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checker", style="solid"];
"IPython.utils.PyColorize.Parser" -> "IPython.core.debugger.Pdb" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"IPython.utils.PyColorize.Parser" -> "IPython.core.oinspect.Inspector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"IPython.utils.coloransi.ColorSchemeTable" -> "IPython.core.debugger.Pdb" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="color_scheme_table", style="solid"];
"IPython.utils.coloransi.ColorSchemeTable" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="color_scheme_table", style="solid"];
"IPython.utils.coloransi.ColorSchemeTable" -> "IPython.core.ultratb.TBTools" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="color_scheme_table", style="solid"];
"IPython.utils.io.IOStream" -> "IPython.utils.io.IOTerm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin", style="solid"];
"IPython.utils.io.IOStream" -> "IPython.utils.io.IOTerm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdout", style="solid"];
"IPython.utils.io.IOStream" -> "IPython.utils.io.IOTerm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stderr", style="solid"];
"IPython.utils.io.Tee" -> "IPython.testing.tools.AssertPrints" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tee", style="solid"];
"IPython.utils.ipstruct.Struct" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="meta", style="solid"];
"IPython.utils.ipstruct.Struct" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hooks", style="solid"];
"IPython.utils.ipstruct.Struct" -> "IPython.utils.coloransi.ColorScheme" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colors", style="solid"];
"IPython.utils.ipstruct.Struct" -> "IPython.utils.coloransi.ColorScheme" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colors", style="solid"];
"IPython.utils.pickleshare.PickleShareDB" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.utils.signatures.BoundArguments" -> "IPython.utils.signatures.Signature" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bound_arguments_cls", style="solid"];
"IPython.utils.signatures.Parameter" -> "IPython.utils.signatures.Signature" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_parameter_cls", style="solid"];
"IPython.utils.signatures._ParameterKind" -> "IPython.utils.signatures.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="POSITIONAL_ONLY", style="solid"];
"IPython.utils.signatures._ParameterKind" -> "IPython.utils.signatures.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="POSITIONAL_OR_KEYWORD", style="solid"];
"IPython.utils.signatures._ParameterKind" -> "IPython.utils.signatures.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="VAR_POSITIONAL", style="solid"];
"IPython.utils.signatures._ParameterKind" -> "IPython.utils.signatures.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="KEYWORD_ONLY", style="solid"];
"IPython.utils.signatures._ParameterKind" -> "IPython.utils.signatures.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="VAR_KEYWORD", style="solid"];
"IPython.utils.signatures._empty" -> "IPython.utils.signatures.Parameter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="empty", style="solid"];
"IPython.utils.signatures._empty" -> "IPython.utils.signatures.Signature" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="empty", style="solid"];
"IPython.utils.tests.test_traitlets.AnyTrait" -> "IPython.utils.tests.test_traitlets.AnyTraitTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.BytesTrait" -> "IPython.utils.tests.test_traitlets.TestBytes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.CRegExpTrait" -> "IPython.utils.tests.test_traitlets.TestCRegExp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ComplexTrait" -> "IPython.utils.tests.test_traitlets.TestComplex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.DottedObjectNameTrait" -> "IPython.utils.tests.test_traitlets.TestDottedObjectName" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.FloatTrait" -> "IPython.utils.tests.test_traitlets.TestFloat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceListTrait" -> "IPython.utils.tests.test_traitlets.TestForwardDeclaredInstanceList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceTrait" -> "IPython.utils.tests.test_traitlets.TestForwardDeclaredInstanceTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredTypeListTrait" -> "IPython.utils.tests.test_traitlets.TestForwardDeclaredTypeList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ForwardDeclaredTypeTrait" -> "IPython.utils.tests.test_traitlets.TestForwardDeclaredTypeTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.InstanceListTrait" -> "IPython.utils.tests.test_traitlets.TestInstanceList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.IntTrait" -> "IPython.utils.tests.test_traitlets.TestInt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.IntegerTrait" -> "IPython.utils.tests.test_traitlets.TestInteger" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.LenListTrait" -> "IPython.utils.tests.test_traitlets.TestLenList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ListTrait" -> "IPython.utils.tests.test_traitlets.TestList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.LongTrait" -> "IPython.utils.tests.test_traitlets.TestLong" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.LooseTupleTrait" -> "IPython.utils.tests.test_traitlets.TestLooseTupleTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.MultiTupleTrait" -> "IPython.utils.tests.test_traitlets.TestMultiTuple" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.NoneInstanceListTrait" -> "IPython.utils.tests.test_traitlets.TestNoneInstanceList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.ObjectNameTrait" -> "IPython.utils.tests.test_traitlets.TestObjectName" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.OrTrait" -> "IPython.utils.tests.test_traitlets.OrTraitTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.TCPAddressTrait" -> "IPython.utils.tests.test_traitlets.TestTCPAddress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.Bar" -> "IPython.utils.tests.test_traitlets.TestInstance.test_basic.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_basic.Foo" -> "IPython.utils.tests.test_traitlets.TestInstance.test_basic.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Bar" -> "IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Foo" -> "IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.Foo" -> "IPython.utils.tests.test_traitlets.TestInstance.test_default_klass.FooInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_inst.Foo" -> "IPython.utils.tests.test_traitlets.TestThis.test_this_inst.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="this", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.MyIntTT" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tt", style="solid"];
"IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.MyIntTT" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_default_validate.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tt", style="solid"];
"IPython.utils.tests.test_traitlets.TupleTrait" -> "IPython.utils.tests.test_traitlets.TestTupleTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.UnicodeTrait" -> "IPython.utils.tests.test_traitlets.TestUnicode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.UnionListTrait" -> "IPython.utils.tests.test_traitlets.TestUnionListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_traitlets.UnionTrait" -> "IPython.utils.tests.test_traitlets.UnionTraitTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="obj", style="solid"];
"IPython.utils.tests.test_wildcard.obj_t" -> "IPython.utils.tests.test_wildcard.obj_t" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_apan", style="solid"];
"IPython.utils.tests.test_wildcard.obj_t" -> "IPython.utils.tests.test_wildcard.obj_t" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__anka", style="solid"];
"IPython.utils.tests.test_wildcard.obj_t" -> "IPython.utils.tests.test_wildcard.obj_t" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_APAN", style="solid"];
"IPython.utils.tests.test_wildcard.obj_t" -> "IPython.utils.tests.test_wildcard.obj_t" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ANKA", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontend_flags", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontend_aliases", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.core.display_trap.DisplayTrap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="old_hook", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.core.display_trap.DisplayTrap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hook", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.html.widgets.interaction.fixed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_socket", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_msg_callback", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_close_callback", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.comm.manager.CommManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_socket", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdout", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stderr", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="control_stream", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_restarter", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_module", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_parent_ident", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent_header", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.nbformat.sign.NotebookNotary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.parallel.client.view.LoadBalancedView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="follow", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.parallel.client.view.LoadBalancedView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="after", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="targets", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_targets", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_idents", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.parallel.controller.hub.EngineConnector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stallback", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontend_flags", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontend_aliases", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="widget_factory", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.terminal.console.app.ZMQTerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontend_aliases", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.terminal.console.app.ZMQTerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontend_flags", style="solid"];
"IPython.utils.traitlets.Any" -> "IPython.utils.tests.test_traitlets.AnyTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.config.tests.test_application.Bar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="running", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="overwrite", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="copy_config_files", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="verbose_crash", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.formatters.BaseFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.formatters.DisplayFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="plain_text_only", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="verbose", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db_log_output", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.historyapp.HistoryClear" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="force", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.historyapp.HistoryTrim" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="backup", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_page", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.magic.MagicsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_magic", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.prefilter.EmacsChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.prefilter.PrefilterTransformer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.profileapp.ProfileCreate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.profileapp.ProfileCreate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parallel", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="justify", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reraise_ipython_extension_failures", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hide_initial_ns", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exec_PYTHONSTARTUP", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pylab_import_all", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.extensions.storemagic.StoreMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autorestore", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="overwrite", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="symlink", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NbserverListApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="json", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="allow_credentials", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="open_browser", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enable_mathjax", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="trust_xheaders", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reraise_server_extension_failures", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.services.contents.filemanager.FileContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="save_script", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="visible", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_bool._Bool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_bool._Bool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_float.FloatRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_range", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_float.FloatRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readout", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_float.FloatSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_range", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_float.FloatSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readout", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_float._Float" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_int.IntRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_range", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_int.IntRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readout", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_int.IntSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_range", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_int.IntSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readout", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_int._Int" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.html.widgets.widget_string._String" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="primary", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.kernelspecapp.InstallKernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.kernelspecapp.InstallKernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="replace", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.kernelspecapp.InstallNativeKernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autorestart", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="debug", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.tests.test_message_spec.InspectReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="found", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="no_stdout", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="no_stderr", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_darwin_app_nap", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_allow_stdin", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.kernel.zmq.pylab.config.InlineBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="close_figures", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.lib.latextools.LaTeXTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_breqn", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.nbconvert.exporters.pdf.PDFExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="verbose", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.nbconvert.postprocessors.serve.ServePostProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="open_in_browser", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.nbconvert.preprocessors.base.Preprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.nbconvert.preprocessors.execute.ExecutePreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="interrupt_on_timeout", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.nbformat.sign.TrustNotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reset", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_to_file", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clean_logs", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="daemonize", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clean_logs", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reset", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reuse_files", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="restore_engines", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_threads", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.IPControllerJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_exclusive", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.IPEngineSetJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_exclusive", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_calculate_min", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_calculate_max", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="run_until_canceled", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_exclusive", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_rerunnaable", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_parametric", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="debug", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="track", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_in_sync_results", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="debug", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="paramiko", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ansi_codes", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="execute_on_complete_input", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="override_shortcuts", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="include_other_output", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="custom_interrupt", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="custom_restart", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clear_on_kernel_restart", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="confirm_restart", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.history_console_widget.HistoryConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history_lock", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="custom_edit", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.qt.manager.QtKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autorestart", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="include_other_output", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dummy_mode", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="quick", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_banner", style="solid"];
"IPython.utils.traitlets.Bool" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="force_interact", style="solid"];
"IPython.utils.traitlets.Bytes" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cookie_secret", style="solid"];
"IPython.utils.traitlets.Bytes" -> "IPython.html.widgets.widget_image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Bytes" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="topic", style="solid"];
"IPython.utils.traitlets.Bytes" -> "IPython.utils.tests.test_traitlets.BytesTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auto_create", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="confirm_exit", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.completer.Completer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="greedy", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.completer.IPCompleter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="merge_completions", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.completer.IPCompleter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="limit_to__all__", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="automagic", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="color_info", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colors_force", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="debug", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="deep_reload", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="disable_failing_post_execute", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exit_now", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logstart", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pdb", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="multiline_history", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompts_pad_left", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="show_rewritten_input", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="quiet", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readline_use", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="wildcards_case_sensitive", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.core.prefilter.PrefilterManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="multi_line_specials", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colors_force", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readline_use", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autoindent", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hide_menubar", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="maximize", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="plain", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_banner", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedded", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedded_active", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_banner", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autoedit_syntax", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="confirm_exit", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_banner", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedded", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="embedded_active", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="term_title", style="solid"];
"IPython.utils.traitlets.CBool" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="using_paste_magics", style="solid"];
"IPython.utils.traitlets.CBytes" -> "IPython.kernel.zmq.datapub.ZMQDataPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="topic", style="solid"];
"IPython.utils.traitlets.CBytes" -> "IPython.kernel.zmq.zmqshell.ZMQDisplayPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="topic", style="solid"];
"IPython.utils.traitlets.CBytes" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ident", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._BoundedFloat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._BoundedFloat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._BoundedFloat" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="step", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._BoundedFloatRange" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="step", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._BoundedFloatRange" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._BoundedFloatRange" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.html.widgets.widget_float._Float" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delay", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.parallel.apps.launcher.LocalEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delay", style="solid"];
"IPython.utils.traitlets.CFloat" -> "IPython.parallel.client.view.LoadBalancedView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timeout", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._BoundedInt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="step", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._BoundedInt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._BoundedInt" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._BoundedIntRange" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="step", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._BoundedIntRange" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._BoundedIntRange" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_int._Int" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.CInt" -> "IPython.html.widgets.widget_selectioncontainer._SelectionContainer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="selected_index", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.core.prefilter.AutocallChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="function_name_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.SGELauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.SGELauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp", style="solid"];
"IPython.utils.traitlets.CRegExp" -> "IPython.utils.tests.test_traitlets.CRegExpTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="existing", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="width", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="height", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="padding", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="margin", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="border_radius", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="font_size", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget_image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="width", style="solid"];
"IPython.utils.traitlets.CUnicode" -> "IPython.html.widgets.widget_image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="height", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colors", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xmode", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gui", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="matplotlib", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pylab", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="font_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="font_weight", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_bool.ToggleButton" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="button_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_box.Box" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="overflow_x", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_box.Box" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="overflow_y", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_box.Box" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="box_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_box.FlexBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="orientation", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_box.FlexBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pack", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_box.FlexBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="align", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_button.Button" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="button_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_float.FloatProgress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bar_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_float.FloatRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="orientation", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_float.FloatSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="orientation", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_int.IntProgress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bar_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_int.IntRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="orientation", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_int.IntSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="orientation", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_selection.Dropdown" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="button_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.html.widgets.widget_selection.ToggleButtons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="button_style", style="solid"];
"IPython.utils.traitlets.CaselessStrEnum" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="export_format", style="solid"];
"IPython.utils.traitlets.Complex" -> "IPython.utils.tests.test_traitlets.ComplexTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommands", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.config.tests.test_configurable.Containers" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="d", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.formatters.BaseFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="singleton_printers", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.formatters.BaseFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type_printers", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.formatters.BaseFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="deferred_printers", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.formatters.DisplayFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatters", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.history.HistoryAccessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_options", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_hist", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_hist_reprs", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.historyapp.HistoryApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommands", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.historyapp.HistoryClear" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.historyapp.HistoryClear" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.historyapp.HistoryTrim" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.historyapp.HistoryTrim" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.magic.MagicsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="registry", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.magics.script.ScriptMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="script_paths", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.profileapp.ProfileApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommands", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.profileapp.ProfileCreate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.profileapp.ProfileList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.profileapp.ProfileList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lazy_evaluate_fields", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="templates", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="invisible_chars", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="webapp_settings", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tornado_settings", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ssl_options", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_environment_options", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.services.clusters.clustermanager.ClusterManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profiles", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpoints_kwargs", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.html.widgets.widget_selectioncontainer._SelectionContainer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_titles", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_open_data", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_close_data", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.comm.manager.CommManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="comms", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.comm.manager.CommManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="targets", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.kernelspec.KernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="env", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.kernelspecapp.KernelSpecApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommands", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_kernels", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.ExecuteReplyOkay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_expressions", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.KernelInfoReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="language_info", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.MimeBundle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.MimeBundle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.RMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.RMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent_header", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.tests.test_message_spec.RMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="content", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_parent_header", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_recorded_ports", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.pylab.config.InlineBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rc", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.pylab.config.InlineBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_figure_kwargs", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.nbconvert.exporters.script.ScriptExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_exporters", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="filters", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.nbconvert.preprocessors.highlightmagics.HighlightMagicsPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_languages", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.nbconvert.preprocessors.highlightmagics.HighlightMagicsPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="languages", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipclusterapp.IPClusterApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipclusterapp.IPClusterApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipclusterapp.IPClusterStop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.ipengineapp.MPI" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_inits", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.iploggerapp.IPLoggerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.launcher.LocalEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launchers", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.apps.launcher.SSHEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engines", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_config", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.dictdb.DictDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_records", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_probation", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keytable", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="by_ident", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engines", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clients", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hearts", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queues", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tasks", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="completed", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="incoming_registrations", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_info", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_info", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.mongodb.MongoDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_kwargs", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_map", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="graph", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="retries", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pending", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="completed", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="failed", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="destinations", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clients", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.controller.sqlitedb.SQLiteDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_types", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_info", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_ns", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.console.app.ZMQTerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.console.app.ZMQTerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.console.app.ZMQTerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommands", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.console.zmqhistory.ZMQHistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_hist", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.console.zmqhistory.ZMQHistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_hist_reprs", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.ipapp.LocateIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommands", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flags", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aliases", style="solid"];
"IPython.utils.traitlets.Dict" -> "IPython.utils.tests.test_traitlets.DictTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.inprocess.manager.InProcessKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outstream_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="displayhook_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="packer", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unpacker", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="writer_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_launcher_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controller_launcher_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lexer_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.qt.manager.QtKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_class", style="solid"];
"IPython.utils.traitlets.DottedObjectName" -> "IPython.utils.tests.test_traitlets.DottedObjectNameTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_level", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.core.completer.IPCompleter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="omit__names", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="autocall", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="object_info_string_level", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ast_node_interactivity", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="verbose", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gui", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.kernel.tests.test_message_spec.ExecuteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.kernel.tests.test_message_spec.IsCompleteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.kernel.tests.test_message_spec.Status" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="execution_state", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.kernel.tests.test_message_spec.Stream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.nbconvert.exporters.notebook.NotebookExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="nbformat_version", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.parallel.apps.winhpcjob.IPControllerJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.parallel.apps.winhpcjob.IPEngineSetJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scheme_name", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gui_completion", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kind", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="paging", style="solid"];
"IPython.utils.traitlets.Enum" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="image_handler", style="solid"];
"IPython.utils.traitlets.EventfulDict" -> "IPython.utils.tests.test_traitlets.TestEventful.test_dict.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"IPython.utils.traitlets.EventfulList" -> "IPython.utils.tests.test_traitlets.TestEventful.test_list.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.config.tests.test_configurable.Bar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.config.tests.test_configurable.MyConfigurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.core.displayhook.DisplayHook" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cull_fraction", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.html.services.clusters.clustermanager.ClusterManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delay", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_to_dead", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_execute_sleep", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_poll_interval", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timeout", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.terminal.console.completer.ZMQCompleter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timeout", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_timeout", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.utils.tests.test_traitlets.FloatTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_init.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_names.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="f", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_traits.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="f", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_traits_metadata.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="f", style="solid"];
"IPython.utils.traitlets.Float" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_one.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"IPython.utils.traitlets.ForwardDeclaredInstance" -> "IPython.core.formatters.DisplayFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipython_display_formatter", style="solid"];
"IPython.utils.traitlets.ForwardDeclaredInstance" -> "IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.ForwardDeclaredType" -> "IPython.utils.tests.test_traitlets.ForwardDeclaredTypeTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.config.configurable.Configurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.config.configurable.Configurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.config.configurable.LoggingConfigurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.alias.AliasManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.builtin_trap.BuiltinTrap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.displayhook.DisplayHook" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.displayhook.DisplayHook" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exec_result", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.extensions.ExtensionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exiter", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_splitter", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_transformer_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.magic.MagicsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.magic.MagicsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_magics", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prefilter_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prefilter_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterTransformer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prefilter.PrefilterTransformer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prefilter_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_ns", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.services.clusters.clustermanager.ClusterManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notary", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpoints", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.services.sessions.sessionmanager.SessionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.services.sessions.sessionmanager.SessionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="contents_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_display_callbacks", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_msg_callbacks", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.client.KernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.comm.manager.CommManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.comm.manager.CommManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.comm.manager.CommManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.inprocess.ipkernel.InProcessInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.inprocess.socket.DummySocket" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.ioloop.manager.IOLoopKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.ioloop.restarter.IOLoopKernelRestarter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.kernelspecapp.InstallKernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_spec_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.kernelspecapp.InstallNativeKernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_spec_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.kernelspecapp.ListKernelSpecs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_spec_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_spec_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.datapub.ZMQDataPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.datapub.ZMQDataPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pub_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.displayhook.ZMQShellDisplayHook" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.displayhook.ZMQShellDisplayHook" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pub_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_ns", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="control_stream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.pylab.config.InlineBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.zmqshell.ZMQDisplayPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.zmqshell.ZMQDisplayPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pub_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exiter", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.nbconvert.exporters.pdf.PDFExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="writer", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.nbformat.sign.NotebookNotary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.nbformat.sign.TrustNotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notary", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.apps.launcher.BaseLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.apps.logwatcher.LogWatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.apps.logwatcher.LogWatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="environment_variables", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="results", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metadata", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_outstanding_dict", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_context", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_engines", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_socket", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pingstream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pongstream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loop", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="query", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="monitor", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resubmit", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="heartmonitor", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_stream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_stream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notifier_stream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mon_stream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="query_stream", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="manager", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.tests.test_traitlets.TestInstance.test_args_kw.C" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.tests.test_traitlets.TestInstance.test_bad_default.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.tests.test_traitlets.TestInstance.test_instance.inner.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.traitlets.Instance" -> "IPython.utils.tests.test_traitlets.TestInstance.test_unique_default_value.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inst", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.config.tests.test_application.Bar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.config.tests.test_application.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.config.tests.test_application.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="j", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.config.tests.test_configurable.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.config.tests.test_configurable.MyConfigurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.config.tests.test_configurable.TestConfigContainers.test_config_default.DefaultConfigurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_width", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db_cache_size", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.historyapp.HistoryClear" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keep", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.historyapp.HistoryTrim" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keep", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cache_size", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history_length", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.AssignmentChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.AutoMagicChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.EmacsChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.IPyAutocallChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.MacroChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.PrefilterChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.PrefilterTransformer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.core.prefilter.PythonOpsChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="port_retries", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="msg_throttle", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.html.widgets.widget_box.FlexBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flex", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.connect.ConnectionFileMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="control_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.restarter.KernelRestarter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="restart_limit", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.tests.test_message_spec.CompleteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cursor_start", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.tests.test_message_spec.CompleteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cursor_end", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.tests.test_message_spec.ExecuteInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="execution_count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.tests.test_message_spec.ExecuteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="execution_count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.tests.test_message_spec.ExecuteResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="execution_count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent_handle", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="interrupt", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="int_id", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="digest_history_size", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="buffer_threshold", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="item_threshold", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.nbconvert.exporters.pdf.PDFExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="latex_count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.nbconvert.postprocessors.serve.ServePostProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.nbconvert.preprocessors.execute.ExecutePreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timeout", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.ipclusterapp.IPClusterStop" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="signal", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp_group", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id_regexp_group", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.IPClusterLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="poll_frequency", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.launcher.SSHProxyEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="n", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_cores", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_sockets", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="min_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_nodes", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ignored_hub_replies", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="period", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_heartmonitor_misses", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.hub.EngineConnector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="id", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="registration_timeout", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mon_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notifier_port", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="registration_timeout", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hwm", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_heartbeat_misses", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="buffer_size", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="font_size", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="width", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="height", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="screen_length", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.IntTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.Pickleable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="j", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestDirectionalLink.test_link_different.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestDirectionalLink.test_validate_args.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestDirectionalLink.test_validate_args.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_init.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_positional_args.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_metadata.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_metadata_default.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_trait_names.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_traits.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_traits_metadata.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="i", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraits.test_traits_metadata.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="j", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_only_once.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_notify_subclass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestHasTraitsNotify.test_subclass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestLink.test_validate_args.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestLink.test_validate_args.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="count", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"IPython.utils.traitlets.Int" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_dynamic_initializer.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="x", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.config.loader.LazyConfigValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_extend", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.config.loader.LazyConfigValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_prepend", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.config.loader.LazyConfigValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_inserts", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.config.tests.test_configurable.Containers" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lis", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.alias.AliasManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_aliases", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.alias.AliasManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_aliases", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_file_paths", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_files", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.displaypub.CapturingDisplayPublisher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputs", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_hist_parsed", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_hist_raw", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dir_hist", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ast_transformers", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readline_parse_and_bind", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.magics.script.ScriptMagics" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="script_magics", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.prefilter.AutoHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="esc_strings", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.prefilter.EmacsHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="esc_strings", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.prefilter.MagicHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="esc_strings", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="esc_strings", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extensions", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_extensions", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exec_files", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exec_lines", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extra_static_paths", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extra_template_paths", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extra_nbextensions_path", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="server_extensions", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hide_globs", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.services.kernels.kernelmanager.MappingKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_argv", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.widgets.widget.CallbackDispatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keys", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.widgets.widget_link.DirectionalLink" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="targets", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.widgets.widget_link.Link" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="widgets", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.widgets.widget_selection.ToggleButtons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tooltips", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.html.widgets.widget_selection.ToggleButtons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="icons", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frontends", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_streams", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.kernelspec.KernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="argv", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.kernelspec.KernelSpecManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_dirs", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipython_kernel_argv", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.tests.test_message_spec.ArgSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.tests.test_message_spec.ArgSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="defaults", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.tests.test_message_spec.CompleteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="matches", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.tests.test_message_spec.ExecuteReplyError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="traceback", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.tests.test_message_spec.ExecuteReplyOkay" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="payload", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.tests.test_message_spec.HistoryReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="help_links", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_streams", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="help_links", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.lib.latextools.LaTeXTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="backends", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.lib.latextools.LaTeXTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="packages", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.exporter.Exporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="preprocessors", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.exporter.Exporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_preprocessors", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.pdf.PDFExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="latex_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.pdf.PDFExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bib_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.pdf.PDFExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="temp_file_exts", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="template_path", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="raw_mimetypes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notebooks", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.preprocessors.execute.ExecutePreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extra_arguments", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_data_priority", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.nbconvert.writers.base.WriterBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="files", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.ipclusterapp.IPClusterEngines" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.ipclusterapp.IPClusterStart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="import_statements", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.ipcontrollerapp.IPControllerApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="children", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="submit_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delete_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.ControllerMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controller_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.ControllerMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controller_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.EngineMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.EngineMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="submit_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delete_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.IPClusterLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipcluster_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.IPClusterLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipcluster_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="submit_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delete_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.LocalProcessLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmd_and_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mpi_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mpi_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="program", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.MPILauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="program_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="submit_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="delete_command", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ssh_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ssh_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scp_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="program", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="program_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="to_fetch", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="to_send", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.SSHProxyEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipcluster_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.WindowsHPCControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controller_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.launcher.WindowsHPCEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.logwatcher.LogWatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="topics", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controller_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="controller_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_cmd", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tasks", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.client.view.LoadBalancedView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_flag_names", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.client.view.View" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_flag_names", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.controller.mongodb.MongoDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_args", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="targets", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="loads", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.parallel.controller.sqlitedb.SQLiteDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_keys", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stream_image_handler", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tempfile_image_handler", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mime_preference", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.terminal.console.zmqhistory.ZMQHistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_hist_parsed", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.terminal.console.zmqhistory.ZMQHistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dir_hist", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.terminal.ipapp.TerminalIPythonApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classes", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.ForwardDeclaredInstanceListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.ForwardDeclaredTypeListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.InstanceListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.LenListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.ListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.NoneInstanceListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.List" -> "IPython.utils.tests.test_traitlets.UnionListTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.BaseFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.HTMLFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.IPythonDisplayFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.JPEGFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.JSONFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.JavascriptFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.LatexFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.MarkdownFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.PDFFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.PNGFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.core.formatters.SVGFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="print_method", style="solid"];
"IPython.utils.traitlets.ObjectName" -> "IPython.utils.tests.test_traitlets.ObjectNameTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.config.tests.test_configurable.Containers" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_file_specified", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_states_to_send", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.kernel.kernelspec.KernelSpecManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="whitelist", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aborted", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outstanding", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hearts", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_new_handlers", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.heartmonitor.HeartMonitor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_failure_handlers", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.hub.EngineConnector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pending", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ids", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pending", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="all_completed", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dead_engines", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.hub.Hub" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unassigned", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="all_completed", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="all_failed", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="all_done", style="solid"];
"IPython.utils.traitlets.Set" -> "IPython.parallel.controller.scheduler.TaskScheduler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="all_ids", style="solid"];
"IPython.utils.traitlets.TCPAddress" -> "IPython.utils.tests.test_traitlets.TCPAddressTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tt", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tt", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestHasTraitsMeta.test_this_class.B" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ttt", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Bar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.traitlets.This" -> "IPython.utils.tests.test_traitlets.TestThis.test_this_class.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="this", style="solid"];
"IPython.utils.traitlets.TraitType" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_error.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tt", style="solid"];
"IPython.utils.traitlets.TraitType" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_get_undefined.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="a", style="solid"];
"IPython.utils.traitlets.TraitType" -> "IPython.utils.tests.test_traitlets.TestTraitType.test_info.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tt", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_css", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dom_classes", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.html.widgets.widget_box.Box" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="children", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mux", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="task", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="control", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.utils.tests.test_traitlets.LooseTupleTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.utils.tests.test_traitlets.MultiTupleTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Tuple" -> "IPython.utils.tests.test_traitlets.TupleTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="crash_handler_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="displayhook_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_pub_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="contents_manager_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_manager_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session_manager_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cluster_manager_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_manager_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_spec_manager_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="login_handler_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logout_handler_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpoints_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.blocking.client.BlockingKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.blocking.client.BlockingKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.blocking.client.BlockingKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.blocking.client.BlockingKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.client.KernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.client.KernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.client.KernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.client.KernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.blocking.BlockingInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.blocking.BlockingInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.blocking.BlockingInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.client.InProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.inprocess.ipkernel.InProcessKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.threaded.ThreadedKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.threaded.ThreadedKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.threaded.ThreadedKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.threaded.ThreadedKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.zmq.ipkernel.IPythonKernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.zmq.kernelapp.IPKernelApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="displayhook_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_pub_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.kernel.zmq.zmqshell.ZMQInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_pub_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_stream_factory", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_hook_factory", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.client.QtKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.client.QtKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.client.QtKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.client.QtKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.inprocess.QtInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="iopub_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.inprocess.QtInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.inprocess.QtInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdin_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.qt.inprocess.QtInProcessKernelClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hb_channel_class", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_allow_none.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_default.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_set_str_klass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_str_klass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_validate_default.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_validate_default.C" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_validate_klass.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Type" -> "IPython.utils.tests.test_traitlets.TestType.test_value.A" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.Undefined" -> "IPython.utils.traitlets.TraitType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_value", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="option_description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keyvalue_description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subcommand_description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="examples", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_datefmt", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.application.Application" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_format", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.manager.BaseJSONConfigManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.tests.test_application.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.tests.test_application.MyApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.tests.test_configurable.Bar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.tests.test_configurable.Foo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="b", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.config.tests.test_configurable.MyConfigurable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="c", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sshserver", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sshkey", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.consoleapp.IPythonConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extra_config_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipython_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.BaseFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.HTMLFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.JPEGFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.JSONFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.JavascriptFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.LatexFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.MarkdownFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.PDFFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.PNGFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="newline", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.PlainTextFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="float_format", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.formatters.SVGFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.history.HistoryManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_i00", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="banner1", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="banner2", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="filename", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logfile", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logappend", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompt_in1", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompt_in2", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prompt_out", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readline_remove_delims", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="readline_delims", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prefilter.AutoHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prefilter.EmacsHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prefilter.MacroHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prefilter.MagicHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prefilter.PrefilterHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profileapp.ProfileList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipython_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profiledir.ProfileDir" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="security_dir_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profiledir.ProfileDir" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_dir_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profiledir.ProfileDir" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="startup_dir_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profiledir.ProfileDir" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pid_dir_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profiledir.ProfileDir" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="static_dir_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.profiledir.ProfileDir" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in2_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.prompts.PromptManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="extra_extension", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file_to_run", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="code_to_run", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.core.shellapp.InteractiveShellApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="module_to_run", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prefix", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="nbextensions_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.nbextensions.NBExtensionApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="destination", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file_to_run", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="allow_origin", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="allow_origin_pat", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="certfile", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keyfile", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cookie_secret_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="password", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="browser", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base_project_url", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="websocket_url", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.notebookapp.NotebookApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pylab", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.services.contents.filecheckpoints.FileCheckpoints" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="checkpoint_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.services.contents.filecheckpoints.FileCheckpoints" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="root_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="untitled_notebook", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="untitled_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.services.contents.manager.ContentsManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="untitled_directory", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.interaction.fixed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="background_color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="border_color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.DOMWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="font_family", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model_module", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_module", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget.Widget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_bool.Checkbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_bool.ToggleButton" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_bool.ToggleButton" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tooltip", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_bool.ToggleButton" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="icon", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_bool._Bool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_box.Box" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_box.FlexBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_button.Button" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_button.Button" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_button.Button" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tooltip", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_button.Button" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="icon", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.BoundedFloatText" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.FloatProgress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.FloatRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.FloatRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slider_color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.FloatSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.FloatSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slider_color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float.FloatText" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_float._Float" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="format", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.BoundedIntText" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.IntProgress" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.IntRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.IntRangeSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slider_color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.IntSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.IntSlider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slider_color", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int.IntText" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_int._Int" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_link.DirectionalLink" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_link.Link" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_model_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_output.Output" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection.Dropdown" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection.RadioButtons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection.Select" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection.SelectMultiple" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection.ToggleButtons" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="selected_label", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selection._Selection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selectioncontainer.Accordion" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_selectioncontainer.Tab" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string.HTML" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string.Latex" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string.Text" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string.Textarea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_view_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string._String" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string._String" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.html.widgets.widget_string._String" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="placeholder", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target_module", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.comm.comm.Comm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="comm_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.kernelspec.KernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.kernelspec.KernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="language", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.kernelspec.KernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resource_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.kernelspec.KernelSpecManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipython_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.kernelspec.KernelSpecManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user_kernel_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.kernelspecapp.InstallKernelSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.manager.KernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipython_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_kernel_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.multikernelmanager.MultiKernelManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.ArgSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="varargs", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.ArgSpec" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="varkw", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.CompleteReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.ExecuteInput" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="code", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.ExecuteReplyError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ename", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.ExecuteReplyError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="evalue", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.IsCompleteReplyIncomplete" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="indent", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.KernelInfoReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="implementation", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.KernelInfoReply" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="banner", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.LanguageInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.LanguageInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.RHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="msg_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.RHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="msg_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.RHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.RHeader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="username", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.RMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="msg_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.RMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="msg_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.tests.test_message_spec.Stream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="text", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.zmq.kernelbase.Kernel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ident", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.zmq.pylab.config.InlineBackend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="figure_format", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="username", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="signature_scheme", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.zmq.session.Session" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="keyfile", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.kernel.zmq.session.SessionFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logname", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.lib.latextools.LaTeXTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="preamble", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_comment_block_start", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_comment_block_end", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_variable_block_start", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_variable_block_end", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_logic_block_start", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_logic_block_end", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.latex.LatexExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="template_extension", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template_path", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="template_skeleton_path", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_comment_block_start", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_comment_block_end", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_variable_block_start", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_variable_block_end", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_logic_block_start", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="jinja_logic_block_end", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.exporters.templateexporter.TemplateExporter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="template_extension", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_base", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.nbconvertapp.NbConvertApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="examples", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.postprocessors.serve.ServePostProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reveal_cdn", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.postprocessors.serve.ServePostProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reveal_prefix", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.postprocessors.serve.ServePostProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ip", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.convertfigures.ConvertFiguresPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="from_format", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.convertfigures.ConvertFiguresPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="to_format", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.csshtmlheader.CSSHTMLHeaderPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="highlight_class", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.extractoutput.ExtractOutputPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_filename_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.revealhelp.RevealHelpPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="url_prefix", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.svg2pdf.SVG2PDFPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="command", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.preprocessors.svg2pdf.SVG2PDFPreprocessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="inkscape", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbconvert.utils.base.NbConvertBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_language", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbformat.sign.NotebookNotary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.nbformat.sign.NotebookNotary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="secret_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_url", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.baseapp.BaseParallelApplication" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cluster_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="startup_script", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="startup_command", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.ipengineapp.IPEngineApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_url", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.ipengineapp.MPI" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BaseLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="work_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_template_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.BatchSystemLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.ClusterAppMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cluster_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.HTCondorControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.HTCondorControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.HTCondorEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.HTCondorEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.HTCondorLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.IPClusterLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipcluster_subcommand", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.IPClusterLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.LSFLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.PBSLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SGEControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SGEControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SGEEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SGEEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SGELauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_array_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SGELauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue_template", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hostname", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.SSHLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.WindowsHPCControllerLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.WindowsHPCEngineSetLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_file_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_file", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scheduler", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.launcher.WindowsHPCLauncher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_cmd", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.logwatcher.LogWatcher" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="url", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPControllerJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPControllerJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="username", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPControllerJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="requested_nodes", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPControllerJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="task_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPControllerTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPEngineSetJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPEngineSetJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="username", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPEngineSetJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="requested_nodes", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPEngineSetJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="task_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.IPEngineTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="username", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="job_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="requested_nodes", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xmlns", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCJob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="task_id", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="task_name", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="version", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unit_type", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="command_line", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="work_directory", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="std_out_file_path", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.apps.winhpcjob.WinHPCTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="std_err_file_path", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.client.client.Client" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profile", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.dictdb.BaseDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.EngineConnector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uuid", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_ip", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="engine_transport", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_ip", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="client_transport", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="monitor_ip", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.hub.HubFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="monitor_transport", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.controller.sqlitedb.SQLiteDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="filename", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="location", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.parallel.engine.engine.EngineFactory" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sshkey", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.console_widget.ConsoleWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="font_family", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="banner", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.frontend_widget.FrontendWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="kernel_banner", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editor", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editor_line", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="in_prompt", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out_prompt", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="input_sep", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_sep", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.ipython_widget.IPythonWidget" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output_sep2", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stylesheet", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.terminal.console.interactiveshell.ZMQTerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="other_output_prefix", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="exit_msg", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editor", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pager", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.terminal.interactiveshell.TerminalInteractiveShell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="usage", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.utils.tests.test_traitlets.TestThis.test_this_in_container.Tree" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Unicode" -> "IPython.utils.tests.test_traitlets.UnicodeTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Union" -> "IPython.utils.tests.test_traitlets.OrTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.traitlets.Union" -> "IPython.utils.tests.test_traitlets.UnionTrait" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.core.interactiveshell.DummyMod" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="user_module", style="solid"];
"IPython.core.interactiveshell.DummyMod" -> "IPython.terminal.embed.InteractiveShellEmbed" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="user_module", style="solid"];
"IPython.core.interactiveshell.NoOpContext" -> "IPython.core.interactiveshell.InteractiveShell" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="readline_no_record", style="solid"];
"IPython.core.profiledir.ProfileDir" -> "IPython.core.application.BaseIPythonApplication" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="profile_dir", style="solid"];
"IPython.external.pexpect._pexpect.EOF" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="after", style="solid"];
"IPython.external.pexpect._pexpect.EOF" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="match", style="solid"];
"IPython.external.pexpect._pexpect.EOF" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="delimiter", style="solid"];
"IPython.external.pexpect._pexpect.TIMEOUT" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="after", style="solid"];
"IPython.external.pexpect._pexpect.TIMEOUT" -> "IPython.external.pexpect._pexpect.spawn" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="match", style="solid"];
"IPython.qt.console.ipython_widget.IPythonWidget" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="widget_factory", style="solid"];
"IPython.qt.console.rich_ipython_widget.RichIPythonWidget" -> "IPython.qt.console.qtconsoleapp.IPythonQtConsoleApp" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="widget_factory", style="solid"];
"IPython.sphinxext.ipython_directive.IPythonDirective" -> "IPython.sphinxext.ipython_directive.EmbeddedSphinxShell" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="directive", style="solid"];
"IPython.testing.plugin.ipdoctest.IPDocTestRunner" -> "IPython.testing.plugin.ipdoctest.DocTestCase" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_dt_runner", style="solid"];
"IPython.utils._process_win32_controller.PROCESS_INFORMATION" -> "IPython.utils._process_win32_controller.Win32ShellCommandController" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="piProcInfo", style="solid"];
"IPython.utils.coloransi.ColorSchemeTable" -> "IPython.core.oinspect.Inspector" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="color_table", style="solid"];
"IPython.utils.ipstruct.Struct" -> "IPython.utils.tests.test_traitlets.TestType.test_str_klass.A" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.signatures._empty" -> "IPython.html.widgets.widget_float.FloatSlider" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.signatures._empty" -> "IPython.html.widgets.widget_int.IntSlider" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.signatures._empty" -> "IPython.html.widgets.widget_selection.Dropdown" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass.Bar" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass.Foo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass.Foo" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass.Bar" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Bar" -> "IPython.utils.tests.test_traitlets.TestThis.test_subclass_override.Foo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="t", style="solid"];
"IPython.utils.tests.test_traitlets.TestThis.test_this_class.Foo" -> "IPython.utils.tests.test_traitlets.TestThis.test_this_class.Foo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="this", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_allow_none.C" -> "IPython.utils.tests.test_traitlets.TestType.test_allow_none.A" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_default.B" -> "IPython.utils.tests.test_traitlets.TestType.test_default.A" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.tests.test_traitlets.TestType.test_value.B" -> "IPython.utils.tests.test_traitlets.TestType.test_value.A" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="klass", style="solid"];
"IPython.utils.traitlets.NoDefaultSpecified" -> "IPython.utils.traitlets.TraitType" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="default_value", style="solid"];
}
