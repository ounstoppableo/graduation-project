digraph "classes_1" {
rankdir=BT
charset="utf-8"
"bs4.builder._html5lib.AttrList" [color="black", fontcolor="black", label=<{AttrList|attrs : dict<br ALIGN="LEFT"/>element<br ALIGN="LEFT"/>|items()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.AttributeValueWithCharsetSubstitution" [color="black", fontcolor="black", label=<{AttributeValueWithCharsetSubstitution|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.BeautifulSoup" [color="black", fontcolor="black", label=<{BeautifulSoup|DEFAULT_BUILDER_FEATURES : list<br ALIGN="LEFT"/>ROOT_TAG_NAME : str<br ALIGN="LEFT"/>STRIP_ASCII_SPACES : dict<br ALIGN="LEFT"/>builder : NoneType<br ALIGN="LEFT"/>contains_replacement_characters<br ALIGN="LEFT"/>currentData : list<br ALIGN="LEFT"/>currentTag : NoneType<br ALIGN="LEFT"/>declared_html_encoding<br ALIGN="LEFT"/>hidden : int<br ALIGN="LEFT"/>is_xml<br ALIGN="LEFT"/>markup : NoneType<br ALIGN="LEFT"/>original_encoding<br ALIGN="LEFT"/>parse_only : NoneType<br ALIGN="LEFT"/>previous_element<br ALIGN="LEFT"/>tagStack : list<br ALIGN="LEFT"/>|decode(pretty_print, eventual_encoding, formatter)<br ALIGN="LEFT"/>endData(containerClass)<br ALIGN="LEFT"/>handle_data(data)<br ALIGN="LEFT"/>handle_endtag(name, nsprefix)<br ALIGN="LEFT"/>handle_starttag(name, namespace, nsprefix, attrs)<br ALIGN="LEFT"/>insert_after(successor)<br ALIGN="LEFT"/>insert_before(successor)<br ALIGN="LEFT"/>new_string(s)<br ALIGN="LEFT"/>new_tag(name, namespace, nsprefix)<br ALIGN="LEFT"/>object_was_parsed(o)<br ALIGN="LEFT"/>popTag()<br ALIGN="LEFT"/>pushTag(tag)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.BeautifulStoneSoup" [color="black", fontcolor="black", label=<{BeautifulStoneSoup|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.tests.test_builder_registry.BuiltInRegistryTest" [color="black", fontcolor="black", label=<{BuiltInRegistryTest|<br ALIGN="LEFT"/>|test_beautifulsoup_constructor_does_lookup()<br ALIGN="LEFT"/>test_combination()<br ALIGN="LEFT"/>test_lookup_by_markup_type()<br ALIGN="LEFT"/>test_named_library()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.CData" [color="black", fontcolor="black", label=<{CData|PREFIX : str<br ALIGN="LEFT"/>SUFFIX : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.element.CharsetMetaAttributeValue" [color="black", fontcolor="black", label=<{CharsetMetaAttributeValue|<br ALIGN="LEFT"/>|encode(encoding)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.Comment" [color="black", fontcolor="black", label=<{Comment|PREFIX : str<br ALIGN="LEFT"/>SUFFIX : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.element.ContentMetaAttributeValue" [color="black", fontcolor="black", label=<{ContentMetaAttributeValue|CHARSET_RE<br ALIGN="LEFT"/>|encode(encoding)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.Declaration" [color="black", fontcolor="black", label=<{Declaration|PREFIX : str<br ALIGN="LEFT"/>SUFFIX : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.element.Doctype" [color="black", fontcolor="black", label=<{Doctype|PREFIX : str<br ALIGN="LEFT"/>SUFFIX : str<br ALIGN="LEFT"/>|for_name_and_ids(name, pub_id, system_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder._html5lib.Element" [color="black", fontcolor="black", label=<{Element|attributes<br ALIGN="LEFT"/>element<br ALIGN="LEFT"/>nameTuple<br ALIGN="LEFT"/>namespace<br ALIGN="LEFT"/>soup<br ALIGN="LEFT"/>|appendChild(node)<br ALIGN="LEFT"/>cloneNode()<br ALIGN="LEFT"/>getAttributes()<br ALIGN="LEFT"/>getNameTuple()<br ALIGN="LEFT"/>hasContent()<br ALIGN="LEFT"/>insertBefore(node, refNode)<br ALIGN="LEFT"/>insertText(data, insertBefore)<br ALIGN="LEFT"/>removeChild(node)<br ALIGN="LEFT"/>reparentChildren(newParent)<br ALIGN="LEFT"/>setAttributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.dammit.EntitySubstitution" [color="black", fontcolor="black", label=<{EntitySubstitution|BARE_AMPERSAND_OR_BRACKET<br ALIGN="LEFT"/>CHARACTER_TO_HTML_ENTITY : dict<br ALIGN="LEFT"/>CHARACTER_TO_HTML_ENTITY_RE<br ALIGN="LEFT"/>CHARACTER_TO_XML_ENTITY : dict<br ALIGN="LEFT"/>HTML_ENTITY_TO_CHARACTER : dict<br ALIGN="LEFT"/>|quoted_attribute_value(value)<br ALIGN="LEFT"/>substitute_html(s)<br ALIGN="LEFT"/>substitute_xml(value, make_quoted_attribute)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder._html5lib.HTML5TreeBuilder" [color="black", fontcolor="black", label=<{HTML5TreeBuilder|features : list<br ALIGN="LEFT"/>underlying_builder<br ALIGN="LEFT"/>user_specified_encoding<br ALIGN="LEFT"/>|create_treebuilder(namespaceHTMLElements)<br ALIGN="LEFT"/>feed(markup)<br ALIGN="LEFT"/>prepare_markup(markup, user_specified_encoding)<br ALIGN="LEFT"/>test_fragment_to_document(fragment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.testing.HTML5TreeBuilderSmokeTest" [color="black", fontcolor="black", label=<{HTML5TreeBuilderSmokeTest|<br ALIGN="LEFT"/>|test_html_tags_have_namespace()<br ALIGN="LEFT"/>test_mathml_tags_have_namespace()<br ALIGN="LEFT"/><I>test_real_xhtml_document</I>()<br ALIGN="LEFT"/>test_svg_tags_have_namespace()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_htmlparser.HTMLParserTreeBuilderSmokeTest" [color="black", fontcolor="black", label=<{HTMLParserTreeBuilderSmokeTest|default_builder<br ALIGN="LEFT"/>|<I>test_namespaced_public_doctype</I>()<br ALIGN="LEFT"/><I>test_namespaced_system_doctype</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder.HTMLTreeBuilder" [color="black", fontcolor="black", label=<{HTMLTreeBuilder|cdata_list_attributes : dict<br ALIGN="LEFT"/>empty_element_tags : set<br ALIGN="LEFT"/>preserve_whitespace_tags : set<br ALIGN="LEFT"/>|set_up_substitutions(tag)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.testing.HTMLTreeBuilderSmokeTest" [color="black", fontcolor="black", label=<{HTMLTreeBuilderSmokeTest|<br ALIGN="LEFT"/>|assertDoctypeHandled(doctype_fragment)<br ALIGN="LEFT"/>test_ampersand_in_attribute_value_gets_escaped()<br ALIGN="LEFT"/>test_angle_brackets_in_attribute_values_are_escaped()<br ALIGN="LEFT"/>test_attribute_values_with_double_nested_quotes_get_quoted()<br ALIGN="LEFT"/>test_attribute_values_with_nested_quotes_are_left_alone()<br ALIGN="LEFT"/>test_basic_namespaces()<br ALIGN="LEFT"/>test_br_is_always_empty_element_tag()<br ALIGN="LEFT"/>test_comment()<br ALIGN="LEFT"/>test_correctly_nested_tables()<br ALIGN="LEFT"/>test_deepcopy()<br ALIGN="LEFT"/>test_entities_converted_on_the_way_out()<br ALIGN="LEFT"/>test_entities_in_attributes_converted_to_unicode()<br ALIGN="LEFT"/>test_entities_in_strings_converted_during_parsing()<br ALIGN="LEFT"/>test_entities_in_text_converted_to_unicode()<br ALIGN="LEFT"/>test_escaped_ampersand_in_attribute_value_is_left_alone()<br ALIGN="LEFT"/>test_html5_style_meta_tag_reflects_current_encoding()<br ALIGN="LEFT"/>test_meta_tag_reflects_current_encoding()<br ALIGN="LEFT"/>test_multivalued_attribute_value_becomes_list()<br ALIGN="LEFT"/>test_namespaced_public_doctype()<br ALIGN="LEFT"/>test_namespaced_system_doctype()<br ALIGN="LEFT"/>test_nested_block_level_elements()<br ALIGN="LEFT"/>test_nested_formatting_elements()<br ALIGN="LEFT"/>test_nested_inline_elements()<br ALIGN="LEFT"/>test_non_breaking_spaces_converted_on_the_way_in()<br ALIGN="LEFT"/>test_normal_doctypes()<br ALIGN="LEFT"/>test_out_of_range_entity()<br ALIGN="LEFT"/>test_p_tag_is_never_empty_element()<br ALIGN="LEFT"/>test_preserved_whitespace_in_pre_and_textarea()<br ALIGN="LEFT"/>test_public_doctype_with_url()<br ALIGN="LEFT"/>test_quot_entity_converted_to_quotation_mark()<br ALIGN="LEFT"/>test_real_hebrew_document()<br ALIGN="LEFT"/>test_real_iso_latin_document()<br ALIGN="LEFT"/>test_real_shift_jis_document()<br ALIGN="LEFT"/>test_real_xhtml_document()<br ALIGN="LEFT"/>test_single_quote_attribute_values_become_double_quotes()<br ALIGN="LEFT"/>test_smart_quotes_converted_on_the_way_in()<br ALIGN="LEFT"/>test_soupstrainer()<br ALIGN="LEFT"/>test_system_doctype()<br ALIGN="LEFT"/>test_tag_with_no_attributes_can_have_attributes_added()<br ALIGN="LEFT"/>test_unclosed_tags_get_closed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder._lxml.LXMLTreeBuilder" [color="black", fontcolor="black", label=<{LXMLTreeBuilder|default_parser<br ALIGN="LEFT"/>features : list<br ALIGN="LEFT"/>is_xml : bool<br ALIGN="LEFT"/>|feed(markup)<br ALIGN="LEFT"/>test_fragment_to_document(fragment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder._lxml.LXMLTreeBuilderForXML" [color="black", fontcolor="black", label=<{LXMLTreeBuilderForXML|CHUNK_SIZE : int<br ALIGN="LEFT"/>DEFAULT_PARSER_CLASS<br ALIGN="LEFT"/>default_parser<br ALIGN="LEFT"/>empty_element_tags : set<br ALIGN="LEFT"/>features : list<br ALIGN="LEFT"/>is_xml : bool<br ALIGN="LEFT"/>nsmaps : NoneType, list<br ALIGN="LEFT"/>parser : NoneType<br ALIGN="LEFT"/>soup : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>comment(content)<br ALIGN="LEFT"/>data(content)<br ALIGN="LEFT"/>doctype(name, pubid, system)<br ALIGN="LEFT"/>end(name)<br ALIGN="LEFT"/>feed(markup)<br ALIGN="LEFT"/><I>pi</I>(target, data)<br ALIGN="LEFT"/>prepare_markup(markup, user_specified_encoding, document_declared_encoding)<br ALIGN="LEFT"/>start(name, attrs, nsmap)<br ALIGN="LEFT"/>test_fragment_to_document(fragment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_lxml.LXMLTreeBuilderSmokeTest" [color="black", fontcolor="black", label=<{LXMLTreeBuilderSmokeTest|default_builder<br ALIGN="LEFT"/>|test_beautifulstonesoup_is_xml_parser()<br ALIGN="LEFT"/>test_out_of_range_entity()<br ALIGN="LEFT"/>test_real_xhtml_document()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_lxml.LXMLXMLTreeBuilderSmokeTest" [color="black", fontcolor="black", label=<{LXMLXMLTreeBuilderSmokeTest|default_builder<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.element.NamespacedAttribute" [color="black", fontcolor="black", label=<{NamespacedAttribute|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.element.NavigableString" [color="black", fontcolor="black", label=<{NavigableString|PREFIX : str<br ALIGN="LEFT"/>SUFFIX : str<br ALIGN="LEFT"/>next_element : NoneType<br ALIGN="LEFT"/>next_sibling : NoneType<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>previous_element<br ALIGN="LEFT"/>previous_sibling : NoneType<br ALIGN="LEFT"/>|output_ready(formatter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.PageElement" [color="black", fontcolor="black", label=<{PageElement|FORMATTERS : dict<br ALIGN="LEFT"/>attribselect_re<br ALIGN="LEFT"/>fetchNextSiblings<br ALIGN="LEFT"/>fetchParents<br ALIGN="LEFT"/>fetchPrevious<br ALIGN="LEFT"/>fetchPreviousSiblings<br ALIGN="LEFT"/>findAllNext<br ALIGN="LEFT"/>findAllPrevious<br ALIGN="LEFT"/>findNext<br ALIGN="LEFT"/>findNextSibling<br ALIGN="LEFT"/>findNextSiblings<br ALIGN="LEFT"/>findParent<br ALIGN="LEFT"/>findParents<br ALIGN="LEFT"/>findPrevious<br ALIGN="LEFT"/>findPreviousSibling<br ALIGN="LEFT"/>findPreviousSiblings<br ALIGN="LEFT"/>next<br ALIGN="LEFT"/>nextSibling<br ALIGN="LEFT"/>next_element : NoneType<br ALIGN="LEFT"/>next_elements<br ALIGN="LEFT"/>next_sibling : NoneType<br ALIGN="LEFT"/>next_siblings<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>parents<br ALIGN="LEFT"/>previous<br ALIGN="LEFT"/>previousSibling<br ALIGN="LEFT"/>previous_element : NoneType<br ALIGN="LEFT"/>previous_elements<br ALIGN="LEFT"/>previous_sibling : NoneType<br ALIGN="LEFT"/>previous_siblings<br ALIGN="LEFT"/>replaceWith<br ALIGN="LEFT"/>replaceWithChildren<br ALIGN="LEFT"/>replace_with_children<br ALIGN="LEFT"/>tag_name_re<br ALIGN="LEFT"/>|append(tag)<br ALIGN="LEFT"/>extract()<br ALIGN="LEFT"/>find_all_next(name, attrs, text, limit)<br ALIGN="LEFT"/>find_all_previous(name, attrs, text, limit)<br ALIGN="LEFT"/>find_next(name, attrs, text)<br ALIGN="LEFT"/>find_next_sibling(name, attrs, text)<br ALIGN="LEFT"/>find_next_siblings(name, attrs, text, limit)<br ALIGN="LEFT"/>find_parent(name, attrs)<br ALIGN="LEFT"/>find_parents(name, attrs, limit)<br ALIGN="LEFT"/>find_previous(name, attrs, text)<br ALIGN="LEFT"/>find_previous_sibling(name, attrs, text)<br ALIGN="LEFT"/>find_previous_siblings(name, attrs, text, limit)<br ALIGN="LEFT"/>format_string(s, formatter)<br ALIGN="LEFT"/>insert(position, new_child)<br ALIGN="LEFT"/>insert_after(successor)<br ALIGN="LEFT"/>insert_before(predecessor)<br ALIGN="LEFT"/>nextGenerator()<br ALIGN="LEFT"/>nextSiblingGenerator()<br ALIGN="LEFT"/>parentGenerator()<br ALIGN="LEFT"/>previousGenerator()<br ALIGN="LEFT"/>previousSiblingGenerator()<br ALIGN="LEFT"/>replace_with(replace_with)<br ALIGN="LEFT"/>select(selector)<br ALIGN="LEFT"/>setup(parent, previous_element)<br ALIGN="LEFT"/>unwrap()<br ALIGN="LEFT"/>wrap(wrap_inside)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.PreformattedString" [color="black", fontcolor="black", label=<{PreformattedString|<br ALIGN="LEFT"/>|output_ready(formatter)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.ProcessingInstruction" [color="black", fontcolor="black", label=<{ProcessingInstruction|PREFIX : str<br ALIGN="LEFT"/>SUFFIX : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.tests.test_tree.ProximityTest" [color="black", fontcolor="black", label=<{ProximityTest|tree<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_builder_registry.RegistryTest" [color="black", fontcolor="black", label=<{RegistryTest|registry : TreeBuilderRegistry<br ALIGN="LEFT"/>|builder_for_features()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_lookup_fails_when_cannot_reconcile_requested_features()<br ALIGN="LEFT"/>test_lookup_fails_when_no_builder_implements_feature()<br ALIGN="LEFT"/>test_lookup_fails_when_no_tree_builders_registered()<br ALIGN="LEFT"/>test_lookup_gets_most_recent_builder_supporting_all_features()<br ALIGN="LEFT"/>test_lookup_gets_most_recent_registration_when_no_feature_specified()<br ALIGN="LEFT"/>test_register_with_features_makes_lookup_succeed()<br ALIGN="LEFT"/>test_register_with_no_features()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.ResultSet" [color="black", fontcolor="black", label=<{ResultSet|source<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.builder.SAXTreeBuilder" [color="black", fontcolor="black", label=<{SAXTreeBuilder|<br ALIGN="LEFT"/>|characters(content)<br ALIGN="LEFT"/><I>close</I>()<br ALIGN="LEFT"/><I>endDocument</I>()<br ALIGN="LEFT"/>endElement(name)<br ALIGN="LEFT"/>endElementNS(nsTuple, nodeName)<br ALIGN="LEFT"/><I>endPrefixMapping</I>(prefix)<br ALIGN="LEFT"/><I>feed</I>(markup)<br ALIGN="LEFT"/><I>startDocument</I>()<br ALIGN="LEFT"/>startElement(name, attrs)<br ALIGN="LEFT"/>startElementNS(nsTuple, nodeName, attrs)<br ALIGN="LEFT"/><I>startPrefixMapping</I>(prefix, nodeValue)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.SiblingTest" [color="black", fontcolor="black", label=<{SiblingTest|tree<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.element.SoupStrainer" [color="black", fontcolor="black", label=<{SoupStrainer|attrs : dict<br ALIGN="LEFT"/>name : NoneType, list<br ALIGN="LEFT"/>searchTag<br ALIGN="LEFT"/>text : NoneType, list<br ALIGN="LEFT"/>|search(markup)<br ALIGN="LEFT"/>search_tag(markup_name, markup_attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.testing.SoupTest" [color="black", fontcolor="black", label=<{SoupTest|default_builder<br ALIGN="LEFT"/>|assertSoupEquals(to_parse, compare_parsed_to)<br ALIGN="LEFT"/>document_for(markup)<br ALIGN="LEFT"/>soup(markup)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.StopParsing" [color="black", fontcolor="red", label=<{StopParsing|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"bs4.element.Tag" [color="black", fontcolor="black", label=<{Tag|attrs : NoneType, dict<br ALIGN="LEFT"/>can_be_empty_element : bool<br ALIGN="LEFT"/>children<br ALIGN="LEFT"/>contents : list<br ALIGN="LEFT"/>descendants<br ALIGN="LEFT"/>findAll<br ALIGN="LEFT"/>findChild<br ALIGN="LEFT"/>findChildren<br ALIGN="LEFT"/>getText<br ALIGN="LEFT"/>has_key<br ALIGN="LEFT"/>hidden : bool<br ALIGN="LEFT"/>isSelfClosing<br ALIGN="LEFT"/>is_empty_element<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>namespace : NoneType<br ALIGN="LEFT"/>parserClass<br ALIGN="LEFT"/>parser_class : NoneType<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>string<br ALIGN="LEFT"/>strings<br ALIGN="LEFT"/>stripped_strings<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|childGenerator()<br ALIGN="LEFT"/>clear(decompose)<br ALIGN="LEFT"/>decode(indent_level, eventual_encoding, formatter)<br ALIGN="LEFT"/>decode_contents(indent_level, eventual_encoding, formatter)<br ALIGN="LEFT"/>decompose()<br ALIGN="LEFT"/>encode(encoding, indent_level, formatter, errors)<br ALIGN="LEFT"/>encode_contents(indent_level, encoding, formatter)<br ALIGN="LEFT"/>find(name, attrs, recursive, text)<br ALIGN="LEFT"/>find_all(name, attrs, recursive, text, limit)<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>get_text(separator, strip)<br ALIGN="LEFT"/>has_attr(key)<br ALIGN="LEFT"/>index(element)<br ALIGN="LEFT"/>prettify(encoding, formatter)<br ALIGN="LEFT"/>recursiveChildGenerator()<br ALIGN="LEFT"/>renderContents(encoding, prettyPrint, indentLevel)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestCDAtaListAttributes" [color="black", fontcolor="black", label=<{TestCDAtaListAttributes|<br ALIGN="LEFT"/>|test_accept_charset()<br ALIGN="LEFT"/>test_attributes_joined_into_string_on_output()<br ALIGN="LEFT"/>test_cdata_attribute_applying_only_to_one_tag()<br ALIGN="LEFT"/>test_multiple_values_becomes_list()<br ALIGN="LEFT"/>test_multiple_values_separated_by_weird_whitespace()<br ALIGN="LEFT"/>test_single_value_becomes_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestElementObjects" [color="black", fontcolor="black", label=<{TestElementObjects|<br ALIGN="LEFT"/>|test_all_text()<br ALIGN="LEFT"/>test_attributes_come_out_in_alphabetical_order()<br ALIGN="LEFT"/>test_deprecated_member_access()<br ALIGN="LEFT"/>test_empty_tag_has_no_string()<br ALIGN="LEFT"/>test_has_attr()<br ALIGN="LEFT"/>test_lack_of_string()<br ALIGN="LEFT"/>test_len()<br ALIGN="LEFT"/>test_member_access_invokes_find()<br ALIGN="LEFT"/>test_string()<br ALIGN="LEFT"/>test_tag_with_multiple_children_has_no_string()<br ALIGN="LEFT"/>test_tag_with_recursive_string_has_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestEncoding" [color="black", fontcolor="black", label=<{TestEncoding|<br ALIGN="LEFT"/>|test_decode_contents()<br ALIGN="LEFT"/>test_deprecated_renderContents()<br ALIGN="LEFT"/>test_encode_contents()<br ALIGN="LEFT"/>test_encoding_can_be_made_strict()<br ALIGN="LEFT"/>test_encoding_substitutes_unrecognized_characters_by_default()<br ALIGN="LEFT"/>test_tag_containing_unicode_string_can_be_encoded()<br ALIGN="LEFT"/>test_unicode_string_can_be_encoded()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestFind" [color="black", fontcolor="black", label=<{TestFind|<br ALIGN="LEFT"/>|test_find_tag()<br ALIGN="LEFT"/>test_unicode_text_find()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestFindAll" [color="black", fontcolor="black", label=<{TestFindAll|<br ALIGN="LEFT"/>|test_calling_a_tag_is_calling_findall()<br ALIGN="LEFT"/>test_find_all_limit()<br ALIGN="LEFT"/>test_find_all_text_nodes()<br ALIGN="LEFT"/>test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestFindAllBasicNamespaces" [color="black", fontcolor="black", label=<{TestFindAllBasicNamespaces|<br ALIGN="LEFT"/>|test_find_by_namespaced_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestFindAllByAttribute" [color="black", fontcolor="black", label=<{TestFindAllByAttribute|<br ALIGN="LEFT"/>|test_find_all_by_attribute_dict()<br ALIGN="LEFT"/>test_find_all_by_attribute_name()<br ALIGN="LEFT"/>test_find_all_by_attribute_soupstrainer()<br ALIGN="LEFT"/>test_find_all_by_class()<br ALIGN="LEFT"/>test_find_all_by_utf8_attribute_value()<br ALIGN="LEFT"/>test_find_all_with_defined_attribute()<br ALIGN="LEFT"/>test_find_all_with_list_attribute_values()<br ALIGN="LEFT"/>test_find_all_with_missing_atribute()<br ALIGN="LEFT"/>test_find_all_with_non_dictionary_for_attrs_finds_by_class()<br ALIGN="LEFT"/>test_find_all_with_numeric_attribute()<br ALIGN="LEFT"/>test_find_all_with_regular_expression_attribute_value()<br ALIGN="LEFT"/>test_find_all_with_string_for_attrs_finds_multiple_classes()<br ALIGN="LEFT"/>test_find_by_attribute_and_containing_string()<br ALIGN="LEFT"/>test_find_by_class_when_multiple_classes_present()<br ALIGN="LEFT"/>test_find_by_name_and_containing_string()<br ALIGN="LEFT"/>test_find_by_name_and_containing_string_when_string_is_buried()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestFindAllByName" [color="black", fontcolor="black", label=<{TestFindAllByName|tree<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_calling_element_invokes_find_all()<br ALIGN="LEFT"/>test_find_all_by_name_and_text()<br ALIGN="LEFT"/>test_find_all_by_tag_dict()<br ALIGN="LEFT"/>test_find_all_by_tag_name()<br ALIGN="LEFT"/>test_find_all_by_tag_names()<br ALIGN="LEFT"/>test_find_all_by_tag_re()<br ALIGN="LEFT"/>test_find_all_by_tag_strainer()<br ALIGN="LEFT"/>test_find_all_on_non_root_element()<br ALIGN="LEFT"/>test_find_all_with_tags_matching_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestIndex" [color="black", fontcolor="black", label=<{TestIndex|<br ALIGN="LEFT"/>|test_index()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestNavigableStringSubclasses" [color="black", fontcolor="black", label=<{TestNavigableStringSubclasses|count : int<br ALIGN="LEFT"/>|test_cdata()<br ALIGN="LEFT"/>test_cdata_is_never_formatted()<br ALIGN="LEFT"/>test_doctype_ends_in_newline()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestNextOperations" [color="black", fontcolor="black", label=<{TestNextOperations|start<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_find_all_next()<br ALIGN="LEFT"/>test_find_next()<br ALIGN="LEFT"/>test_find_next_for_text_element()<br ALIGN="LEFT"/>test_next()<br ALIGN="LEFT"/>test_next_generator()<br ALIGN="LEFT"/>test_next_of_last_item_is_none()<br ALIGN="LEFT"/>test_next_of_root_is_none()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestNextSibling" [color="black", fontcolor="black", label=<{TestNextSibling|start : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_find_next_sibling()<br ALIGN="LEFT"/>test_next_sibling()<br ALIGN="LEFT"/>test_next_sibling_for_text_element()<br ALIGN="LEFT"/>test_next_sibling_may_not_exist()<br ALIGN="LEFT"/>test_next_sibling_of_root_is_none()<br ALIGN="LEFT"/>test_next_siblings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestParentOperations" [color="black", fontcolor="black", label=<{TestParentOperations|start<br ALIGN="LEFT"/>tree<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_find_parent()<br ALIGN="LEFT"/>test_find_parents()<br ALIGN="LEFT"/>test_parent()<br ALIGN="LEFT"/>test_parent_generator()<br ALIGN="LEFT"/>test_parent_of_text_element()<br ALIGN="LEFT"/>test_parent_of_top_tag_is_soup_object()<br ALIGN="LEFT"/>test_soup_object_has_no_parent()<br ALIGN="LEFT"/>test_text_element_find_parent()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestPersistence" [color="black", fontcolor="black", label=<{TestPersistence|page : str<br ALIGN="LEFT"/>tree<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_deepcopy_identity()<br ALIGN="LEFT"/>test_pickle_and_unpickle_identity()<br ALIGN="LEFT"/>test_unicode_pickle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestPreviousOperations" [color="black", fontcolor="black", label=<{TestPreviousOperations|end : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_find_all_previous()<br ALIGN="LEFT"/>test_find_previous()<br ALIGN="LEFT"/>test_find_previous_for_text_element()<br ALIGN="LEFT"/>test_previous()<br ALIGN="LEFT"/>test_previous_generator()<br ALIGN="LEFT"/>test_previous_of_first_item_is_none()<br ALIGN="LEFT"/><I>test_previous_of_root_is_none</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestPreviousSibling" [color="black", fontcolor="black", label=<{TestPreviousSibling|end : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_find_previous_sibling()<br ALIGN="LEFT"/>test_previous_sibling()<br ALIGN="LEFT"/>test_previous_sibling_for_text_element()<br ALIGN="LEFT"/>test_previous_sibling_may_not_exist()<br ALIGN="LEFT"/>test_previous_sibling_of_root_is_none()<br ALIGN="LEFT"/>test_previous_siblings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestSoupSelector" [color="black", fontcolor="black", label=<{TestSoupSelector|HTML : str<br ALIGN="LEFT"/>assertSelect<br ALIGN="LEFT"/>soup<br ALIGN="LEFT"/>|assertSelectMultiple()<br ALIGN="LEFT"/>assertSelects(selector, expected_ids)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_a_bunch_of_emptys()<br ALIGN="LEFT"/>test_attribute_contains()<br ALIGN="LEFT"/>test_attribute_endswith()<br ALIGN="LEFT"/>test_attribute_equals()<br ALIGN="LEFT"/>test_attribute_exact_or_hypen()<br ALIGN="LEFT"/>test_attribute_exists()<br ALIGN="LEFT"/>test_attribute_startswith()<br ALIGN="LEFT"/>test_attribute_tilde()<br ALIGN="LEFT"/>test_bad_id()<br ALIGN="LEFT"/>test_child_selector()<br ALIGN="LEFT"/>test_class_mismatched_tag()<br ALIGN="LEFT"/>test_class_one()<br ALIGN="LEFT"/>test_header_tags()<br ALIGN="LEFT"/>test_invalid_tag()<br ALIGN="LEFT"/>test_items_in_id()<br ALIGN="LEFT"/>test_multi_class_selection()<br ALIGN="LEFT"/>test_multi_class_support()<br ALIGN="LEFT"/>test_one_id()<br ALIGN="LEFT"/>test_one_tag_many()<br ALIGN="LEFT"/>test_one_tag_one()<br ALIGN="LEFT"/>test_select_on_element()<br ALIGN="LEFT"/>test_tag_in_tag_many()<br ALIGN="LEFT"/>test_tag_in_tag_one()<br ALIGN="LEFT"/>test_tag_no_match()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestSubstitutions" [color="black", fontcolor="black", label=<{TestSubstitutions|<br ALIGN="LEFT"/>|test_default_formatter_is_minimal()<br ALIGN="LEFT"/>test_encoding_substitution()<br ALIGN="LEFT"/>test_encoding_substitution_doesnt_happen_if_tag_is_strained()<br ALIGN="LEFT"/>test_formatter_custom()<br ALIGN="LEFT"/>test_formatter_html()<br ALIGN="LEFT"/>test_formatter_is_run_on_attribute_values()<br ALIGN="LEFT"/>test_formatter_minimal()<br ALIGN="LEFT"/>test_formatter_null()<br ALIGN="LEFT"/>test_html_entity_substitution_off_by_default()<br ALIGN="LEFT"/>test_prettify_accepts_formatter()<br ALIGN="LEFT"/>test_prettify_can_encode_data()<br ALIGN="LEFT"/>test_prettify_outputs_unicode_by_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestTagCreation" [color="black", fontcolor="black", label=<{TestTagCreation|<br ALIGN="LEFT"/>|test_new_string_creates_navigablestring()<br ALIGN="LEFT"/>test_new_tag()<br ALIGN="LEFT"/>test_tag_inherits_self_closing_rules_from_builder()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TestTreeModification" [color="black", fontcolor="black", label=<{TestTreeModification|<br ALIGN="LEFT"/>|test_append_child_thats_already_at_the_end()<br ALIGN="LEFT"/>test_append_to_contents_moves_tag()<br ALIGN="LEFT"/>test_attribute_modification()<br ALIGN="LEFT"/>test_clear()<br ALIGN="LEFT"/>test_consecutive_text_nodes()<br ALIGN="LEFT"/>test_extract()<br ALIGN="LEFT"/>test_extract_distinguishes_between_identical_strings()<br ALIGN="LEFT"/>test_insert_after()<br ALIGN="LEFT"/>test_insert_after_raises_valueerror_if_after_has_no_meaning()<br ALIGN="LEFT"/>test_insert_before()<br ALIGN="LEFT"/>test_insert_before_raises_valueerror_if_before_has_no_meaning()<br ALIGN="LEFT"/>test_insert_string()<br ALIGN="LEFT"/>test_insert_tag()<br ALIGN="LEFT"/>test_insert_tag_into_itself_raises_exception()<br ALIGN="LEFT"/>test_insert_works_on_empty_element_tag()<br ALIGN="LEFT"/>test_move_tag_to_beginning_of_parent()<br ALIGN="LEFT"/>test_nested_tag_replace_with()<br ALIGN="LEFT"/>test_new_tag_creation()<br ALIGN="LEFT"/>test_replace_final_node()<br ALIGN="LEFT"/>test_replace_first_child()<br ALIGN="LEFT"/>test_replace_last_child()<br ALIGN="LEFT"/>test_replace_tag_with_its_parent_raises_exception()<br ALIGN="LEFT"/>test_replace_tag_with_itself()<br ALIGN="LEFT"/>test_replace_with()<br ALIGN="LEFT"/>test_replace_with_maintains_next_element_throughout()<br ALIGN="LEFT"/>test_replace_with_returns_thing_that_was_replaced()<br ALIGN="LEFT"/>test_set_string_preserves_class_of_string()<br ALIGN="LEFT"/>test_string_set()<br ALIGN="LEFT"/>test_string_set_does_not_affect_original_string()<br ALIGN="LEFT"/>test_unwrap()<br ALIGN="LEFT"/>test_unwrap_returns_thing_that_was_replaced()<br ALIGN="LEFT"/>test_wrap()<br ALIGN="LEFT"/>test_wrap_extracts_tag_from_elsewhere()<br ALIGN="LEFT"/>test_wrap_puts_new_contents_at_the_end()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder._html5lib.TextNode" [color="black", fontcolor="black", label=<{TextNode|element<br ALIGN="LEFT"/>soup<br ALIGN="LEFT"/>|<I>cloneNode</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder.TreeBuilder" [color="black", fontcolor="black", label=<{TreeBuilder|cdata_list_attributes : dict<br ALIGN="LEFT"/>empty_element_tags : NoneType<br ALIGN="LEFT"/>features : list<br ALIGN="LEFT"/>is_xml : bool<br ALIGN="LEFT"/>preserve_whitespace_tags : set<br ALIGN="LEFT"/>soup : NoneType<br ALIGN="LEFT"/>|can_be_empty_element(tag_name)<br ALIGN="LEFT"/><I>feed</I>(markup)<br ALIGN="LEFT"/>prepare_markup(markup, user_specified_encoding, document_declared_encoding)<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/>set_up_substitutions(tag)<br ALIGN="LEFT"/>test_fragment_to_document(fragment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder._html5lib.TreeBuilderForHtml5lib" [color="black", fontcolor="black", label=<{TreeBuilderForHtml5lib|soup<br ALIGN="LEFT"/>|appendChild(node)<br ALIGN="LEFT"/>commentClass(data)<br ALIGN="LEFT"/>documentClass()<br ALIGN="LEFT"/>elementClass(name, namespace)<br ALIGN="LEFT"/>fragmentClass()<br ALIGN="LEFT"/>getDocument()<br ALIGN="LEFT"/>getFragment()<br ALIGN="LEFT"/>insertDoctype(token)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.builder.TreeBuilderRegistry" [color="black", fontcolor="black", label=<{TreeBuilderRegistry|builders : list<br ALIGN="LEFT"/>builders_for_feature : defaultdict<br ALIGN="LEFT"/>|lookup()<br ALIGN="LEFT"/>register(treebuilder_class)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.tests.test_tree.TreeTest" [color="black", fontcolor="black", label=<{TreeTest|<br ALIGN="LEFT"/>|assertSelects(tags, should_match)<br ALIGN="LEFT"/>assertSelectsIDs(tags, should_match)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.dammit.UnicodeDammit" [color="black", fontcolor="black", label=<{UnicodeDammit|CHARSET_ALIASES : dict<br ALIGN="LEFT"/>EBCDIC_TO_ASCII_MAP : NoneType<br ALIGN="LEFT"/>ENCODINGS_WITH_SMART_QUOTES : list<br ALIGN="LEFT"/>FIRST_MULTIBYTE_MARKER : int<br ALIGN="LEFT"/>LAST_MULTIBYTE_MARKER : int<br ALIGN="LEFT"/>MS_CHARS : dict<br ALIGN="LEFT"/>MS_CHARS_TO_ASCII : dict<br ALIGN="LEFT"/>MULTIBYTE_MARKERS_AND_SIZES : list<br ALIGN="LEFT"/>WINDOWS_1252_TO_UTF8 : dict<br ALIGN="LEFT"/>contains_replacement_characters : bool<br ALIGN="LEFT"/>declared_html_encoding : NoneType<br ALIGN="LEFT"/>markup<br ALIGN="LEFT"/>original_encoding : NoneType, str<br ALIGN="LEFT"/>smart_quotes_to : NoneType<br ALIGN="LEFT"/>tried_encodings : list<br ALIGN="LEFT"/>unicode_markup : NoneType<br ALIGN="LEFT"/>|detwingle(in_bytes, main_encoding, embedded_encoding)<br ALIGN="LEFT"/>find_codec(charset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.testing.XMLTreeBuilderSmokeTest" [color="black", fontcolor="black", label=<{XMLTreeBuilderSmokeTest|<br ALIGN="LEFT"/>|test_docstring_generated()<br ALIGN="LEFT"/>test_docstring_includes_correct_encoding()<br ALIGN="LEFT"/>test_large_xml_document()<br ALIGN="LEFT"/>test_namespaces_are_preserved()<br ALIGN="LEFT"/>test_real_xhtml_document()<br ALIGN="LEFT"/>test_tags_are_empty_element_if_and_only_if_they_are_empty()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"bs4.BeautifulSoup" -> "bs4.element.Tag" [arrowhead="empty", arrowtail="none"];
"bs4.BeautifulStoneSoup" -> "bs4.BeautifulSoup" [arrowhead="empty", arrowtail="none"];
"bs4.builder.HTMLTreeBuilder" -> "bs4.builder.TreeBuilder" [arrowhead="empty", arrowtail="none"];
"bs4.builder.SAXTreeBuilder" -> "bs4.builder.TreeBuilder" [arrowhead="empty", arrowtail="none"];
"bs4.builder._html5lib.TextNode" -> "bs4.builder._html5lib.Element" [arrowhead="empty", arrowtail="none"];
"bs4.builder._lxml.LXMLTreeBuilder" -> "bs4.builder._lxml.LXMLTreeBuilderForXML" [arrowhead="empty", arrowtail="none"];
"bs4.element.CData" -> "bs4.element.PreformattedString" [arrowhead="empty", arrowtail="none"];
"bs4.element.CharsetMetaAttributeValue" -> "bs4.element.AttributeValueWithCharsetSubstitution" [arrowhead="empty", arrowtail="none"];
"bs4.element.Comment" -> "bs4.element.PreformattedString" [arrowhead="empty", arrowtail="none"];
"bs4.element.ContentMetaAttributeValue" -> "bs4.element.AttributeValueWithCharsetSubstitution" [arrowhead="empty", arrowtail="none"];
"bs4.element.Declaration" -> "bs4.element.PreformattedString" [arrowhead="empty", arrowtail="none"];
"bs4.element.Doctype" -> "bs4.element.PreformattedString" [arrowhead="empty", arrowtail="none"];
"bs4.element.NavigableString" -> "bs4.element.PageElement" [arrowhead="empty", arrowtail="none"];
"bs4.element.PreformattedString" -> "bs4.element.NavigableString" [arrowhead="empty", arrowtail="none"];
"bs4.element.ProcessingInstruction" -> "bs4.element.PreformattedString" [arrowhead="empty", arrowtail="none"];
"bs4.element.Tag" -> "bs4.element.PageElement" [arrowhead="empty", arrowtail="none"];
"bs4.testing.HTML5TreeBuilderSmokeTest" -> "bs4.testing.HTMLTreeBuilderSmokeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_htmlparser.HTMLParserTreeBuilderSmokeTest" -> "bs4.testing.HTMLTreeBuilderSmokeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_htmlparser.HTMLParserTreeBuilderSmokeTest" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_lxml.LXMLTreeBuilderSmokeTest" -> "bs4.testing.HTMLTreeBuilderSmokeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_lxml.LXMLTreeBuilderSmokeTest" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_lxml.LXMLXMLTreeBuilderSmokeTest" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_lxml.LXMLXMLTreeBuilderSmokeTest" -> "bs4.testing.XMLTreeBuilderSmokeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.ProximityTest" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.SiblingTest" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestCDAtaListAttributes" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestElementObjects" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestEncoding" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestFind" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestFindAll" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestFindAllBasicNamespaces" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestFindAllByAttribute" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestFindAllByName" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestIndex" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestNavigableStringSubclasses" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestNextOperations" -> "bs4.tests.test_tree.ProximityTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestNextSibling" -> "bs4.tests.test_tree.SiblingTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestParentOperations" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestPersistence" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestPreviousOperations" -> "bs4.tests.test_tree.ProximityTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestPreviousSibling" -> "bs4.tests.test_tree.SiblingTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestSoupSelector" -> "bs4.tests.test_tree.TreeTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestSubstitutions" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestTagCreation" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TestTreeModification" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.tests.test_tree.TreeTest" -> "bs4.testing.SoupTest" [arrowhead="empty", arrowtail="none"];
"bs4.BeautifulSoup" -> "bs4.tests.test_tree.ProximityTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"bs4.BeautifulSoup" -> "bs4.tests.test_tree.SiblingTest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"bs4.BeautifulSoup" -> "bs4.tests.test_tree.TestFindAllByName" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"bs4.BeautifulSoup" -> "bs4.tests.test_tree.TestParentOperations" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"bs4.BeautifulSoup" -> "bs4.tests.test_tree.TestPersistence" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"bs4.BeautifulSoup" -> "bs4.tests.test_tree.TestSoupSelector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="soup", style="solid"];
"bs4.builder._html5lib.TreeBuilderForHtml5lib" -> "bs4.builder._html5lib.HTML5TreeBuilder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="underlying_builder", style="solid"];
"bs4.element.NavigableString" -> "bs4.element.NavigableString" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="previous_element", style="solid"];
"bs4.element.NavigableString" -> "bs4.element.NavigableString" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="next_element", style="solid"];
"bs4.element.PageElement" -> "bs4.element.NavigableString" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"bs4.element.PageElement" -> "bs4.element.NavigableString" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="previous_element", style="solid"];
"bs4.element.Tag" -> "bs4.BeautifulSoup" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="previous_element", style="solid"];
}
