digraph "classes_1" {
rankdir=BT
charset="utf-8"
"sentry.coreapi.APIError" [color="black", fontcolor="red", label=<{APIError|http_status : int<br ALIGN="LEFT"/>msg : str<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.coreapi.APIForbidden" [color="black", fontcolor="red", label=<{APIForbidden|http_status : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.coreapi.APIRateLimited" [color="black", fontcolor="red", label=<{APIRateLimited|http_status : int<br ALIGN="LEFT"/>msg : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>retry_after : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.testutils.cases.APITestCase" [color="black", fontcolor="black", label=<{APITestCase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.coreapi.APIUnauthorized" [color="black", fontcolor="red", label=<{APIUnauthorized|http_status : int<br ALIGN="LEFT"/>msg : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.api.APIView" [color="black", fontcolor="black", label=<{APIView|helper_cls<br ALIGN="LEFT"/>|dispatch(request, project_id)<br ALIGN="LEFT"/>options(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lint.absolute_import_check.AbsoluteImportCheck" [color="black", fontcolor="black", label=<{AbsoluteImportCheck|code : str<br ALIGN="LEFT"/>msg : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>tree<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.accept_organization_invite.AcceptInviteForm" [color="black", fontcolor="black", label=<{AcceptInviteForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.accept_organization_invite.AcceptOrganizationInviteView" [color="black", fontcolor="black", label=<{AcceptOrganizationInviteView|auth_required : bool<br ALIGN="LEFT"/>|get_form(request)<br ALIGN="LEFT"/>handle(request, member_id, token)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.access.Access" [color="black", fontcolor="black", label=<{Access|is_active<br ALIGN="LEFT"/>scopes<br ALIGN="LEFT"/>sso_is_valid<br ALIGN="LEFT"/>teams<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_access_request_details.AccessRequestPermission" [color="black", fontcolor="black", label=<{AccessRequestPermission|scope_map : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_access_request_details.AccessRequestSerializer" [color="black", fontcolor="black", label=<{AccessRequestSerializer|isApproved<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.AccountSettingsForm" [color="black", fontcolor="black", label=<{AccountSettingsForm|email<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>new_password<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|clean_email()<br ALIGN="LEFT"/>clean_name()<br ALIGN="LEFT"/>clean_username()<br ALIGN="LEFT"/>is_readonly()<br ALIGN="LEFT"/>save(commit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.activity.Activity" [color="black", fontcolor="black", label=<{Activity|ASSIGNED : int<br ALIGN="LEFT"/>CREATE_ISSUE : int<br ALIGN="LEFT"/>FIRST_SEEN : int<br ALIGN="LEFT"/>NOTE : int<br ALIGN="LEFT"/>RELEASE : int<br ALIGN="LEFT"/>SET_MUTED : int<br ALIGN="LEFT"/>SET_PRIVATE : int<br ALIGN="LEFT"/>SET_PUBLIC : int<br ALIGN="LEFT"/>SET_REGRESSION : int<br ALIGN="LEFT"/>SET_RESOLVED : int<br ALIGN="LEFT"/>SET_RESOLVED_IN_RELEASE : int<br ALIGN="LEFT"/>SET_UNRESOLVED : int<br ALIGN="LEFT"/>TYPE : tuple<br ALIGN="LEFT"/>UNASSIGNED : int<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datetime<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>send_notification()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.activity.ActivitySerializer" [color="black", fontcolor="black", label=<{ActivitySerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.add_organization_member.AddOrganizationMemberForm" [color="black", fontcolor="black", label=<{AddOrganizationMemberForm|user<br ALIGN="LEFT"/>|save(actor, organization, ip_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.add_project.AddProjectForm" [color="black", fontcolor="black", label=<{AddProjectForm|name<br ALIGN="LEFT"/>|save(actor, team, ip_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_project.AddProjectWithTeamForm" [color="black", fontcolor="black", label=<{AddProjectWithTeamForm|team<br ALIGN="LEFT"/>team_list<br ALIGN="LEFT"/>|clean_team()<br ALIGN="LEFT"/>save(actor, ip_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.add_team.AddTeamForm" [color="black", fontcolor="black", label=<{AddTeamForm|name<br ALIGN="LEFT"/>|save(actor, organization, ip_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.admin_queue.AdminQueueView" [color="black", fontcolor="black", label=<{AdminQueueView|<br ALIGN="LEFT"/>|handle(request)<br ALIGN="LEFT"/>has_permission(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.runner.hacks.AllowedHosts" [color="black", fontcolor="black", label=<{AllowedHosts|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.structs.Annotation" [color="black", fontcolor="black", label=<{Annotation|description : NoneType<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>url : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.client.ApiClient" [color="black", fontcolor="black", label=<{ApiClient|ApiError<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>post()<br ALIGN="LEFT"/>put()<br ALIGN="LEFT"/>request(method, path, user, auth, params, data, is_sudo, is_superuser, request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.client.ApiError" [color="black", fontcolor="red", label=<{ApiError|body<br ALIGN="LEFT"/>status_code<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.apikey.ApiKey" [color="black", fontcolor="black", label=<{ApiKey|allowed_origins<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>scopes<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|generate_api_key()<br ALIGN="LEFT"/>get_allowed_origins()<br ALIGN="LEFT"/>get_audit_log_data()<br ALIGN="LEFT"/>get_scopes()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.authentication.ApiKeyAuthentication" [color="black", fontcolor="black", label=<{ApiKeyAuthentication|<br ALIGN="LEFT"/>|authenticate_credentials(userid, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_api_key_settings.ApiKeyForm" [color="black", fontcolor="black", label=<{ApiKeyForm|allowed_origins<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.apikey.ApiKeyStatus" [color="black", fontcolor="black", label=<{ApiKeyStatus|ACTIVE : int<br ALIGN="LEFT"/>INACTIVE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.AppearanceSettingsForm" [color="black", fontcolor="black", label=<{AppearanceSettingsForm|clock_24_hours<br ALIGN="LEFT"/>language<br ALIGN="LEFT"/>stacktrace_order<br ALIGN="LEFT"/>timezone<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.providers.dummy.AskEmail" [color="black", fontcolor="black", label=<{AskEmail|<br ALIGN="LEFT"/>|dispatch(request, helper)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.auditlogentry.AuditLogEntry" [color="black", fontcolor="black", label=<{AuditLogEntry|actor<br ALIGN="LEFT"/>actor_key<br ALIGN="LEFT"/>actor_label<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datetime<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>ip_address<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>target_object<br ALIGN="LEFT"/>target_user<br ALIGN="LEFT"/>|get_actor_name()<br ALIGN="LEFT"/>get_note()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.AuditLogEntryAdmin" [color="black", fontcolor="black", label=<{AuditLogEntryAdmin|list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.auditlogentry.AuditLogEntryEvent" [color="black", fontcolor="black", label=<{AuditLogEntryEvent|APIKEY_ADD : int<br ALIGN="LEFT"/>APIKEY_EDIT : int<br ALIGN="LEFT"/>APIKEY_REMOVE : int<br ALIGN="LEFT"/>MEMBER_ACCEPT : int<br ALIGN="LEFT"/>MEMBER_ADD : int<br ALIGN="LEFT"/>MEMBER_EDIT : int<br ALIGN="LEFT"/>MEMBER_INVITE : int<br ALIGN="LEFT"/>MEMBER_JOIN_TEAM : int<br ALIGN="LEFT"/>MEMBER_LEAVE_TEAM : int<br ALIGN="LEFT"/>MEMBER_REMOVE : int<br ALIGN="LEFT"/>ORG_ADD : int<br ALIGN="LEFT"/>ORG_EDIT : int<br ALIGN="LEFT"/>ORG_REMOVE : int<br ALIGN="LEFT"/>PROJECTKEY_ADD : int<br ALIGN="LEFT"/>PROJECTKEY_DISABLE : int<br ALIGN="LEFT"/>PROJECTKEY_EDIT : int<br ALIGN="LEFT"/>PROJECTKEY_ENABLE : int<br ALIGN="LEFT"/>PROJECTKEY_REMOVE : int<br ALIGN="LEFT"/>PROJECT_ADD : int<br ALIGN="LEFT"/>PROJECT_EDIT : int<br ALIGN="LEFT"/>PROJECT_REMOVE : int<br ALIGN="LEFT"/>PROJECT_SET_PRIVATE : int<br ALIGN="LEFT"/>PROJECT_SET_PUBLIC : int<br ALIGN="LEFT"/>SSO_DISABLE : int<br ALIGN="LEFT"/>SSO_EDIT : int<br ALIGN="LEFT"/>SSO_ENABLE : int<br ALIGN="LEFT"/>SSO_IDENTITY_LINK : int<br ALIGN="LEFT"/>TAGKEY_REMOVE : int<br ALIGN="LEFT"/>TEAM_ADD : int<br ALIGN="LEFT"/>TEAM_EDIT : int<br ALIGN="LEFT"/>TEAM_REMOVE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.coreapi.Auth" [color="black", fontcolor="black", label=<{Auth|client<br ALIGN="LEFT"/>is_public : bool<br ALIGN="LEFT"/>public_key<br ALIGN="LEFT"/>secret_key<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.auth.helper.AuthHelper" [color="black", fontcolor="black", label=<{AuthHelper|FLOW_LINK_IDENTITY : int<br ALIGN="LEFT"/>FLOW_LOGIN : int<br ALIGN="LEFT"/>FLOW_SETUP_PROVIDER : int<br ALIGN="LEFT"/>auth_provider : NoneType<br ALIGN="LEFT"/>flow<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>pipeline<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>signature : str<br ALIGN="LEFT"/>|bind_state(key, value)<br ALIGN="LEFT"/>clear_session()<br ALIGN="LEFT"/>current_step()<br ALIGN="LEFT"/>error(message)<br ALIGN="LEFT"/>fetch_state(key)<br ALIGN="LEFT"/>finish_pipeline()<br ALIGN="LEFT"/>get_for_request(request)<br ALIGN="LEFT"/>get_redirect_url()<br ALIGN="LEFT"/>init_pipeline()<br ALIGN="LEFT"/>next_step()<br ALIGN="LEFT"/>pipeline_is_valid()<br ALIGN="LEFT"/>respond(template, context, status)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.authidentity.AuthIdentity" [color="black", fontcolor="black", label=<{AuthIdentity|auth_provider<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>last_synced<br ALIGN="LEFT"/>last_verified<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|get_audit_log_data()<br ALIGN="LEFT"/>is_valid(member)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.AuthIdentityAdmin" [color="black", fontcolor="black", label=<{AuthIdentityAdmin|list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.admin.AuthIdentityInline" [color="black", fontcolor="black", label=<{AuthIdentityInline|extra : int<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.auth_index.AuthIndexEndpoint" [color="black", fontcolor="black", label=<{AuthIndexEndpoint|authentication_classes : list<br ALIGN="LEFT"/>permission_classes : tuple<br ALIGN="LEFT"/>|delete(request)<br ALIGN="LEFT"/>get(request)<br ALIGN="LEFT"/>post(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.auth_link_identity.AuthLinkIdentityView" [color="black", fontcolor="black", label=<{AuthLinkIdentityView|auth_required : bool<br ALIGN="LEFT"/>|get_login_form(request)<br ALIGN="LEFT"/>handle(request, organization_slug)<br ALIGN="LEFT"/>handle_anon(request, organization, auth_provider)<br ALIGN="LEFT"/>handle_authed(request, organization, auth_provider)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.auth_login.AuthLoginView" [color="black", fontcolor="black", label=<{AuthLoginView|auth_required : bool<br ALIGN="LEFT"/>|get_auth_provider(organization_slug)<br ALIGN="LEFT"/>get_login_form(request)<br ALIGN="LEFT"/>get_register_form(request)<br ALIGN="LEFT"/>handle(request)<br ALIGN="LEFT"/>handle_basic_auth(request)<br ALIGN="LEFT"/>handle_sso(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.auth_logout.AuthLogoutView" [color="black", fontcolor="black", label=<{AuthLogoutView|auth_required : bool<br ALIGN="LEFT"/>|handle(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.auth_organization_login.AuthOrganizationLoginView" [color="black", fontcolor="black", label=<{AuthOrganizationLoginView|auth_required : bool<br ALIGN="LEFT"/>|get_login_form(request)<br ALIGN="LEFT"/>get_register_form(request)<br ALIGN="LEFT"/>handle(request, organization_slug)<br ALIGN="LEFT"/>handle_basic_auth(request, organization)<br ALIGN="LEFT"/>handle_sso(request, organization, auth_provider)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.authprovider.AuthProvider" [color="black", fontcolor="black", label=<{AuthProvider|config<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>default_global_access<br ALIGN="LEFT"/>default_role<br ALIGN="LEFT"/>default_teams<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>last_sync<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>sync_time<br ALIGN="LEFT"/>|get_audit_log_data()<br ALIGN="LEFT"/>get_provider()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.AuthProviderAdmin" [color="black", fontcolor="black", label=<{AuthProviderAdmin|list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.auth_provider_login.AuthProviderLoginView" [color="black", fontcolor="black", label=<{AuthProviderLoginView|auth_required : bool<br ALIGN="LEFT"/>|handle(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_auth_settings.AuthProviderSettingsForm" [color="black", fontcolor="black", label=<{AuthProviderSettingsForm|default_role<br ALIGN="LEFT"/>require_link<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.testutils.cases.AuthProviderTestCase" [color="black", fontcolor="black", label=<{AuthProviderTestCase|provider<br ALIGN="LEFT"/>provider_name : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.view.AuthView" [color="black", fontcolor="black", label=<{AuthView|auth_required : bool<br ALIGN="LEFT"/>sudo_required : bool<br ALIGN="LEFT"/>|get_ident()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.accounts.AuthenticationForm" [color="black", fontcolor="black", label=<{AuthenticationForm|error_messages : dict<br ALIGN="LEFT"/>password<br ALIGN="LEFT"/>request : NoneType<br ALIGN="LEFT"/>user_cache : NoneType<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>username_field<br ALIGN="LEFT"/>|check_for_test_cookie()<br ALIGN="LEFT"/>clean()<br ALIGN="LEFT"/>clean_username()<br ALIGN="LEFT"/>get_user()<br ALIGN="LEFT"/>get_user_id()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.auth.AuthenticationMiddleware" [color="black", fontcolor="black", label=<{AuthenticationMiddleware|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.digests.backends.base.Backend" [color="black", fontcolor="black", label=<{Backend|capacity<br ALIGN="LEFT"/>codec<br ALIGN="LEFT"/>increment_delay<br ALIGN="LEFT"/>maximum_delay<br ALIGN="LEFT"/>minimum_delay<br ALIGN="LEFT"/>truncation_chance : float<br ALIGN="LEFT"/>|<I>add</I>(key, record, increment_delay, maximum_delay)<br ALIGN="LEFT"/><I>delete</I>(key)<br ALIGN="LEFT"/><I>digest</I>(key, minimum_delay)<br ALIGN="LEFT"/>enabled(project)<br ALIGN="LEFT"/><I>maintenance</I>(deadline)<br ALIGN="LEFT"/><I>schedule</I>(deadline)<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lang.javascript.processor.BadSource" [color="black", fontcolor="red", label=<{BadSource|data : NoneType, dict<br ALIGN="LEFT"/>error_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.auth.access.BaseAccess" [color="black", fontcolor="black", label=<{BaseAccess|is_active : bool<br ALIGN="LEFT"/>scopes : frozenset<br ALIGN="LEFT"/>sso_is_valid : bool<br ALIGN="LEFT"/>teams : tuple<br ALIGN="LEFT"/>|has_scope(scope)<br ALIGN="LEFT"/>has_team(team)<br ALIGN="LEFT"/>has_team_scope(team, scope)<br ALIGN="LEFT"/>to_django_context()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.cache.base.BaseCache" [color="black", fontcolor="black", label=<{BaseCache|prefix : str<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|<I>delete</I>(key, version)<br ALIGN="LEFT"/><I>get</I>(key, version)<br ALIGN="LEFT"/>make_key(key, version)<br ALIGN="LEFT"/><I>set</I>(key, value, timeout, version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.manager.BaseManager" [color="black", fontcolor="black", label=<{BaseManager|cache_fields<br ALIGN="LEFT"/>cache_ttl<br ALIGN="LEFT"/>cache_version : str<br ALIGN="LEFT"/>lookup_handlers : dict<br ALIGN="LEFT"/>use_for_related_fields : bool<br ALIGN="LEFT"/>|bind_nodes(object_list)<br ALIGN="LEFT"/>contribute_to_class(model, name)<br ALIGN="LEFT"/>create_or_update()<br ALIGN="LEFT"/>get_from_cache()<br ALIGN="LEFT"/><I>post_delete</I>(instance)<br ALIGN="LEFT"/><I>post_save</I>(instance)<br ALIGN="LEFT"/>uncache_object(instance_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.base.BaseModel" [color="black", fontcolor="black", label=<{BaseModel|objects<br ALIGN="LEFT"/>update<br ALIGN="LEFT"/>|has_changed(field_name)<br ALIGN="LEFT"/>old_value(field_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.bases.notify.BaseNotificationUserOptionsForm" [color="black", fontcolor="black", label=<{BaseNotificationUserOptionsForm|plugin<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|get_description()<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/><I>save</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.paginator.BasePaginator" [color="black", fontcolor="black", label=<{BasePaginator|desc : bool<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>queryset<br ALIGN="LEFT"/>|<I>get_item_key</I>(item)<br ALIGN="LEFT"/>get_result(limit, cursor)<br ALIGN="LEFT"/><I>value_from_cursor</I>(cursor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.tsdb.base.BaseTSDB" [color="black", fontcolor="black", label=<{BaseTSDB|models<br ALIGN="LEFT"/>rollups<br ALIGN="LEFT"/>|calculate_expiry(rollup, samples, timestamp)<br ALIGN="LEFT"/><I>get_distinct_counts_series</I>(model, keys, start, end, rollup)<br ALIGN="LEFT"/><I>get_distinct_counts_totals</I>(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_optimal_rollup(start_timestamp, end_timestamp)<br ALIGN="LEFT"/>get_optimal_rollup_series(start, end, rollup)<br ALIGN="LEFT"/><I>get_range</I>(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_sums(model, keys, start, end, rollup)<br ALIGN="LEFT"/><I>incr</I>(model, key, timestamp, count)<br ALIGN="LEFT"/>incr_multi(items, timestamp, count)<br ALIGN="LEFT"/>normalize_to_epoch(timestamp, seconds)<br ALIGN="LEFT"/>normalize_to_rollup(timestamp, seconds)<br ALIGN="LEFT"/>normalize_ts_to_epoch(epoch, seconds)<br ALIGN="LEFT"/>normalize_ts_to_rollup(epoch, seconds)<br ALIGN="LEFT"/><I>record</I>(model, key, values, timestamp)<br ALIGN="LEFT"/>record_multi(items, timestamp)<br ALIGN="LEFT"/>rollup(values, rollup)<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.cases.BaseTestCase" [color="black", fontcolor="black", label=<{BaseTestCase|session<br ALIGN="LEFT"/>urls : str<br ALIGN="LEFT"/>|assertRequiresAuthentication(path, method)<br ALIGN="LEFT"/>auth_provider(name, cls)<br ALIGN="LEFT"/>feature(name, active)<br ALIGN="LEFT"/>load_fixture(filepath)<br ALIGN="LEFT"/>login_as(user)<br ALIGN="LEFT"/>options(options)<br ALIGN="LEFT"/>save_session()<br ALIGN="LEFT"/>setup_session()<br ALIGN="LEFT"/>tasks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.BaseUserForm" [color="black", fontcolor="black", label=<{BaseUserForm|email<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.base.BaseView" [color="black", fontcolor="black", label=<{BaseView|auth_required : bool<br ALIGN="LEFT"/>default_context<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>sudo_required : bool<br ALIGN="LEFT"/>|convert_args(request)<br ALIGN="LEFT"/>dispatch(request)<br ALIGN="LEFT"/>get_access(request)<br ALIGN="LEFT"/>get_context_data(request)<br ALIGN="LEFT"/>get_no_permission_url()<br ALIGN="LEFT"/>get_team_list(user, organization)<br ALIGN="LEFT"/>handle(request)<br ALIGN="LEFT"/>handle_auth_required(request)<br ALIGN="LEFT"/>handle_permission_required(request)<br ALIGN="LEFT"/>handle_sudo_required(request)<br ALIGN="LEFT"/>has_permission(request)<br ALIGN="LEFT"/>is_auth_required(request)<br ALIGN="LEFT"/>is_sudo_required(request)<br ALIGN="LEFT"/>redirect(url)<br ALIGN="LEFT"/>respond(template, context, status)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.json.BetterJSONEncoder" [color="black", fontcolor="black", label=<{BetterJSONEncoder|<br ALIGN="LEFT"/>|default(o)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.signals.BetterSignal" [color="black", fontcolor="black", label=<{BetterSignal|<br ALIGN="LEFT"/>|connect(receiver)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.http.BlacklistAdapter" [color="black", fontcolor="black", label=<{BlacklistAdapter|<br ALIGN="LEFT"/>|send(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.bounded.BoundedAutoField" [color="black", fontcolor="black", label=<{BoundedAutoField|MAX_VALUE : int<br ALIGN="LEFT"/>|get_prep_value(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.bounded.BoundedBigAutoField" [color="black", fontcolor="black", label=<{BoundedBigAutoField|MAX_VALUE : int<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>|db_type(connection)<br ALIGN="LEFT"/>get_internal_type()<br ALIGN="LEFT"/>get_prep_value(value)<br ALIGN="LEFT"/>get_related_db_type(connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.bounded.BoundedBigIntegerField" [color="black", fontcolor="black", label=<{BoundedBigIntegerField|MAX_VALUE : int<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>|get_internal_type()<br ALIGN="LEFT"/>get_prep_value(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.bounded.BoundedIntegerField" [color="black", fontcolor="black", label=<{BoundedIntegerField|MAX_VALUE : int<br ALIGN="LEFT"/>|get_prep_value(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" [color="black", fontcolor="black", label=<{BoundedPositiveIntegerField|MAX_VALUE : int<br ALIGN="LEFT"/>|get_prep_value(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.broadcast.Broadcast" [color="black", fontcolor="black", label=<{Broadcast|date_added<br ALIGN="LEFT"/>date_expires<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>link<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>upstream_id<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.admin.BroadcastAdmin" [color="black", fontcolor="black", label=<{BroadcastAdmin|list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>readonly_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.broadcast_index.BroadcastIndexEndpoint" [color="black", fontcolor="black", label=<{BroadcastIndexEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>put(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.broadcast.BroadcastSeen" [color="black", fontcolor="black", label=<{BroadcastSeen|broadcast<br ALIGN="LEFT"/>date_seen<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.broadcast_index.BroadcastSerializer" [color="black", fontcolor="black", label=<{BroadcastSerializer|hasSeen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.broadcast.BroadcastSerializer" [color="black", fontcolor="black", label=<{BroadcastSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.middleware.BrokenRequestMiddleware" [color="black", fontcolor="black", label=<{BrokenRequestMiddleware|<br ALIGN="LEFT"/>|process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.middleware.BrokenResponseMiddleware" [color="black", fontcolor="black", label=<{BrokenResponseMiddleware|<br ALIGN="LEFT"/>|process_response(request, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.middleware.BrokenViewMiddleware" [color="black", fontcolor="black", label=<{BrokenViewMiddleware|<br ALIGN="LEFT"/>|process_view(request, func, args, kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_useragents.models.BrowserPlugin" [color="black", fontcolor="black", label=<{BrowserPlugin|slug : str<br ALIGN="LEFT"/>tag : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|get_tag_from_ua(ua)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.buffer.base.Buffer" [color="black", fontcolor="black", label=<{Buffer|<br ALIGN="LEFT"/>|incr(model, columns, filters, extra)<br ALIGN="LEFT"/>process(model, columns, filters, extra)<br ALIGN="LEFT"/>process_pending()<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.buffer.base.BufferMount" [color="black", fontcolor="black", label=<{BufferMount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.deletion.BulkDeleteQuery" [color="black", fontcolor="black", label=<{BulkDeleteQuery|days : NoneType, int<br ALIGN="LEFT"/>dtfield : NoneType<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>project_id : NoneType<br ALIGN="LEFT"/>|execute(chunk_size)<br ALIGN="LEFT"/>execute_generic(chunk_size)<br ALIGN="LEFT"/>execute_postgres(chunk_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.exceptions.CacheNotPopulated" [color="black", fontcolor="red", label=<{CacheNotPopulated|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.debug.panels.base.CallRecordingPanel" [color="black", fontcolor="black", label=<{CallRecordingPanel|calls<br ALIGN="LEFT"/>collector<br ALIGN="LEFT"/>nav_subtitle<br ALIGN="LEFT"/>|disable_instrumentation()<br ALIGN="LEFT"/>enable_instrumentation()<br ALIGN="LEFT"/><I>get_context</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lang.javascript.processor.CannotFetchSource" [color="black", fontcolor="red", label=<{CannotFetchSource|error_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.exceptions.CannotResolveExpression" [color="black", fontcolor="red", label=<{CannotResolveExpression|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.CaptchaForm" [color="black", fontcolor="black", label=<{CaptchaForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.CaptchaModelForm" [color="black", fontcolor="black", label=<{CaptchaModelForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.nodestore.cassandra.backend.CassandraNodeStorage" [color="black", fontcolor="black", label=<{CassandraNodeStorage|columnfamily : str<br ALIGN="LEFT"/>keyspace : str<br ALIGN="LEFT"/>options : dict<br ALIGN="LEFT"/>servers<br ALIGN="LEFT"/>|connection()<br ALIGN="LEFT"/>delete(id)<br ALIGN="LEFT"/>get(id)<br ALIGN="LEFT"/>get_multi(id_list)<br ALIGN="LEFT"/>set(id, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.catchall.CatchallEndpoint" [color="black", fontcolor="black", label=<{CatchallEndpoint|delete<br ALIGN="LEFT"/>head<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>permission_classes : tuple<br ALIGN="LEFT"/>post<br ALIGN="LEFT"/>put<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.celery.Celery" [color="black", fontcolor="black", label=<{Celery|<br ALIGN="LEFT"/>|on_configure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.status_checks.celery_alive.CeleryAliveCheck" [color="black", fontcolor="black", label=<{CeleryAliveCheck|<br ALIGN="LEFT"/>|check()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.status_checks.celery_app_version.CeleryAppVersionCheck" [color="black", fontcolor="black", label=<{CeleryAppVersionCheck|<br ALIGN="LEFT"/>|check()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.queue.command.CeleryCommand" [color="black", fontcolor="black", label=<{CeleryCommand|keep_base_opts : bool<br ALIGN="LEFT"/>option_list<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>skip_opts : list<br ALIGN="LEFT"/>|die(msg)<br ALIGN="LEFT"/>execute()<br ALIGN="LEFT"/>get_version()<br ALIGN="LEFT"/>handle_default_options(argv)<br ALIGN="LEFT"/>run_from_argv(argv)<br ALIGN="LEFT"/>set_broker(broker)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.accounts.ChangePasswordRecoverForm" [color="black", fontcolor="black", label=<{ChangePasswordRecoverForm|password<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.ChangeUserForm" [color="black", fontcolor="black", label=<{ChangeUserForm|is_staff<br ALIGN="LEFT"/>is_superuser<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|clean_username()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.cases.CliTestCase" [color="black", fontcolor="black", label=<{CliTestCase|command : NoneType<br ALIGN="LEFT"/>default_args : list<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>|invoke()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.coreapi.ClientApiHelper" [color="black", fontcolor="black", label=<{ClientApiHelper|context<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>|auth_from_request(request)<br ALIGN="LEFT"/>decode_and_decompress_data(encoded_data)<br ALIGN="LEFT"/>decompress_deflate(encoded_data)<br ALIGN="LEFT"/>decompress_gzip(encoded_data)<br ALIGN="LEFT"/>ensure_does_not_have_ip(data)<br ALIGN="LEFT"/>ensure_has_ip(data, ip_address)<br ALIGN="LEFT"/>insert_data_to_database(data)<br ALIGN="LEFT"/>origin_from_request(request)<br ALIGN="LEFT"/>project_from_auth(auth)<br ALIGN="LEFT"/>safely_load_json_string(json_string)<br ALIGN="LEFT"/>validate_data(project, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.coreapi.ClientContext" [color="black", fontcolor="black", label=<{ClientContext|agent : NoneType<br ALIGN="LEFT"/>ip_address : NoneType<br ALIGN="LEFT"/>project : NoneType<br ALIGN="LEFT"/>project_id : NoneType<br ALIGN="LEFT"/>version : NoneType<br ALIGN="LEFT"/>|bind_auth(auth)<br ALIGN="LEFT"/>bind_project(project)<br ALIGN="LEFT"/>get_tags_context()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.coreapi.ClientLogHelper" [color="black", fontcolor="black", label=<{ClientLogHelper|context<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>|debug()<br ALIGN="LEFT"/>error()<br ALIGN="LEFT"/>info()<br ALIGN="LEFT"/>warning()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.digests.codecs.Codec" [color="black", fontcolor="black", label=<{Codec|<br ALIGN="LEFT"/>|<I>decode</I>(value)<br ALIGN="LEFT"/><I>encode</I>(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.celery.Command" [color="black", fontcolor="black", label=<{Command|help : str<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>|run_from_argv(argv)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.celerybeat.Command" [color="black", fontcolor="black", label=<{Command|help : str<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>|handle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.collectstatic.Command" [color="black", fontcolor="black", label=<{Command|<br ALIGN="LEFT"/>|collect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.create_sample_event.Command" [color="black", fontcolor="black", label=<{Command|help : str<br ALIGN="LEFT"/>option_list<br ALIGN="LEFT"/>|handle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.merge_users.Command" [color="black", fontcolor="black", label=<{Command|help : str<br ALIGN="LEFT"/>option_list<br ALIGN="LEFT"/>|handle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.runserver.Command" [color="black", fontcolor="black", label=<{Command|cwd : bytes, str<br ALIGN="LEFT"/>help : str<br ALIGN="LEFT"/>option_list<br ALIGN="LEFT"/>style<br ALIGN="LEFT"/>verbosity : int<br ALIGN="LEFT"/>|get_env()<br ALIGN="LEFT"/>get_watchers()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>run_server(verbosity)<br ALIGN="LEFT"/>run_watchers(verbosity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.management.commands.send_fake_data.Command" [color="black", fontcolor="black", label=<{Command|help : str<br ALIGN="LEFT"/>option_list<br ALIGN="LEFT"/>|handle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.postgres.exceptions.CompositeTraceback" [color="black", fontcolor="black", label=<{CompositeTraceback|<br ALIGN="LEFT"/>|tb_frame()<br ALIGN="LEFT"/>tb_lasti()<br ALIGN="LEFT"/>tb_lineno()<br ALIGN="LEFT"/>tb_next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.digests.codecs.CompressedPickleCodec" [color="black", fontcolor="black", label=<{CompressedPickleCodec|<br ALIGN="LEFT"/>|decode(value)<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.release_files.ConditionalContentNegotiation" [color="black", fontcolor="black", label=<{ConditionalContentNegotiation|<br ALIGN="LEFT"/>|select_parser(request, parsers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.runner.importer.ConfigurationError" [color="black", fontcolor="red", label=<{ConfigurationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.settings.ConfigurationError" [color="black", fontcolor="red", label=<{ConfigurationError|<br ALIGN="LEFT"/>|get_error_message(dependency, package)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.view.ConfigureView" [color="black", fontcolor="black", label=<{ConfigureView|<br ALIGN="LEFT"/>|dispatch(request, organization, auth_provider)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.riak.client.ConnectionManager" [color="black", fontcolor="black", label=<{ConnectionManager|connections : map<br ALIGN="LEFT"/>cooldown : int<br ALIGN="LEFT"/>dead_connections : list<br ALIGN="LEFT"/>max_retries : int<br ALIGN="LEFT"/>strategy<br ALIGN="LEFT"/>tcp_keepalive : bool<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>|cleanup_dead()<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>create_pool(host)<br ALIGN="LEFT"/>force_revive()<br ALIGN="LEFT"/>mark_dead(conn)<br ALIGN="LEFT"/>urlopen(method, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_organization_member.CreateOrganizationMemberView" [color="black", fontcolor="black", label=<{CreateOrganizationMemberView|required_scope : str<br ALIGN="LEFT"/>|get_form(request, organization)<br ALIGN="LEFT"/>handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_organization.CreateOrganizationView" [color="black", fontcolor="black", label=<{CreateOrganizationView|<br ALIGN="LEFT"/>|get_form(request)<br ALIGN="LEFT"/>handle(request)<br ALIGN="LEFT"/>has_permission(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_project_key.CreateProjectKeyView" [color="black", fontcolor="black", label=<{CreateProjectKeyView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_project.CreateProjectView" [color="black", fontcolor="black", label=<{CreateProjectView|required_scope : str<br ALIGN="LEFT"/>|get_form(request, organization, team_list)<br ALIGN="LEFT"/>handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_team.CreateTeamView" [color="black", fontcolor="black", label=<{CreateTeamView|required_scope : str<br ALIGN="LEFT"/>|get_form(request)<br ALIGN="LEFT"/>handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.csp.Csp" [color="black", fontcolor="black", label=<{Csp|display_score : int<br ALIGN="LEFT"/>score : int<br ALIGN="LEFT"/>|get_culprit()<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>get_message()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_tags()<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/>to_email_html(event)<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>to_string(is_public)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.coreapi.CspApiHelper" [color="black", fontcolor="black", label=<{CspApiHelper|<br ALIGN="LEFT"/>|origin_from_request(request)<br ALIGN="LEFT"/>validate_data(project, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.api.CspReportView" [color="black", fontcolor="black", label=<{CspReportView|content_types : tuple<br ALIGN="LEFT"/>helper_cls<br ALIGN="LEFT"/>|post(request, project, auth, helper)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.csrf_failure.CsrfFailureView" [color="black", fontcolor="black", label=<{CsrfFailureView|<br ALIGN="LEFT"/>|dispatch(request, reason)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.cursors.Cursor" [color="black", fontcolor="black", label=<{Cursor|has_results : NoneType<br ALIGN="LEFT"/>is_prev : bool<br ALIGN="LEFT"/>offset : int<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|from_string(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.cursors.CursorResult" [color="black", fontcolor="black", label=<{CursorResult|next<br ALIGN="LEFT"/>prev<br ALIGN="LEFT"/>results<br ALIGN="LEFT"/>|from_ids(id_list, key, limit, cursor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.postgres.base.CursorWrapper" [color="black", fontcolor="black", label=<{CursorWrapper|cursor<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>|execute(sql, params)<br ALIGN="LEFT"/>executemany(sql, paramlist)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.CustomTypedChoiceField" [color="black", fontcolor="black", label=<{CustomTypedChoiceField|<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.metrics.datadog.DatadogMetricsBackend" [color="black", fontcolor="black", label=<{DatadogMetricsBackend|host<br ALIGN="LEFT"/>tags<br ALIGN="LEFT"/>|incr(key, instance, tags, amount, sample_rate)<br ALIGN="LEFT"/>stats()<br ALIGN="LEFT"/>timing(key, value, instance, tags, sample_rate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.paginator.DateTimePaginator" [color="black", fontcolor="black", label=<{DateTimePaginator|multiplier : int<br ALIGN="LEFT"/>|get_item_key(item)<br ALIGN="LEFT"/>value_from_cursor(cursor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.debug.debug_error_embed.DebugErrorPageEmbedView" [color="black", fontcolor="black", label=<{DebugErrorPageEmbedView|<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.middleware.DebugMiddleware" [color="black", fontcolor="black", label=<{DebugMiddleware|<br ALIGN="LEFT"/>|process_request(request)<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>process_view(request, view_func, view_args, view_kwargs)<br ALIGN="LEFT"/>show_toolbar(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.debug.debug_new_release_email.DebugNewReleaseEmailView" [color="black", fontcolor="black", label=<{DebugNewReleaseEmailView|<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.debug.debug_trigger_error.DebugTriggerErrorView" [color="black", fontcolor="black", label=<{DebugTriggerErrorView|<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.exceptions.DeleteAborted" [color="black", fontcolor="red", label=<{DeleteAborted|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.organization.DetailedOrganizationSerializer" [color="black", fontcolor="black", label=<{DetailedOrganizationSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.ua_parser.parser.DeviceParser" [color="black", fontcolor="black", label=<{DeviceParser|brand_replacement : NoneType<br ALIGN="LEFT"/>device_replacement : NoneType<br ALIGN="LEFT"/>model_replacement : NoneType<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>user_agent_re<br ALIGN="LEFT"/>|MatchSpans(user_agent_string)<br ALIGN="LEFT"/>MultiReplace(string, match)<br ALIGN="LEFT"/>Parse(user_agent_string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_useragents.models.DevicePlugin" [color="black", fontcolor="black", label=<{DevicePlugin|slug : str<br ALIGN="LEFT"/>tag : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|get_tag_from_ua(ua)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.projects.DigestSettingsForm" [color="black", fontcolor="black", label=<{DigestSettingsForm|maximum_delay<br ALIGN="LEFT"/>minimum_delay<br ALIGN="LEFT"/>|clean()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.disable_project_key.DisableProjectKeyView" [color="black", fontcolor="black", label=<{DisableProjectKeyView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project, key_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.cache.django.DjangoCache" [color="black", fontcolor="black", label=<{DjangoCache|<br ALIGN="LEFT"/>|delete(key, version)<br ALIGN="LEFT"/>get(key, version)<br ALIGN="LEFT"/>set(key, value, timeout, version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.django.backend.DjangoNodeStorage" [color="black", fontcolor="black", label=<{DjangoNodeStorage|<br ALIGN="LEFT"/>|cleanup(cutoff_timestamp)<br ALIGN="LEFT"/>delete(id)<br ALIGN="LEFT"/>get(id)<br ALIGN="LEFT"/>get_multi(id_list)<br ALIGN="LEFT"/>set(id, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.search.django.backend.DjangoSearchBackend" [color="black", fontcolor="black", label=<{DjangoSearchBackend|<br ALIGN="LEFT"/>|<I>index</I>(event)<br ALIGN="LEFT"/>query(project, query, status, tags, bookmarked_by, assigned_to, first_release, sort_by, date_filter, date_from, date_to, cursor, limit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.base.DocSection" [color="black", fontcolor="black", label=<{DocSection|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.digests.backends.dummy.DummyBackend" [color="black", fontcolor="black", label=<{DummyBackend|<br ALIGN="LEFT"/>|<I>add</I>(key, record, increment_delay, maximum_delay)<br ALIGN="LEFT"/>digest(key, minimum_delay)<br ALIGN="LEFT"/>enabled(project)<br ALIGN="LEFT"/><I>maintenance</I>(deadline)<br ALIGN="LEFT"/>schedule(deadline)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.metrics.dummy.DummyMetricsBackend" [color="black", fontcolor="black", label=<{DummyMetricsBackend|<br ALIGN="LEFT"/>|<I>incr</I>(key, instance, tags, amount, rate)<br ALIGN="LEFT"/><I>timing</I>(key, value, instance, tags, rate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.providers.dummy.DummyProvider" [color="black", fontcolor="black", label=<{DummyProvider|TEMPLATE : str<br ALIGN="LEFT"/>|build_identity(state)<br ALIGN="LEFT"/>get_auth_pipeline()<br ALIGN="LEFT"/><I>refresh_identity</I>(auth_identity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.tsdb.dummy.DummyTSDB" [color="black", fontcolor="black", label=<{DummyTSDB|<br ALIGN="LEFT"/>|get_distinct_counts_series(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_distinct_counts_totals(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_range(model, keys, start, end, rollup)<br ALIGN="LEFT"/><I>incr</I>(model, key, timestamp, count)<br ALIGN="LEFT"/><I>record</I>(model, key, values, timestamp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.edit_organization_member.EditOrganizationMemberForm" [color="black", fontcolor="black", label=<{EditOrganizationMemberForm|teams<br ALIGN="LEFT"/>|save(actor, organization, ip_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_settings.EditProjectForm" [color="black", fontcolor="black", label=<{EditProjectForm|blacklisted_ips<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>origins<br ALIGN="LEFT"/>resolve_age<br ALIGN="LEFT"/>scrape_javascript<br ALIGN="LEFT"/>scrub_data<br ALIGN="LEFT"/>scrub_ip_address<br ALIGN="LEFT"/>sensitive_fields<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>team_list<br ALIGN="LEFT"/>token<br ALIGN="LEFT"/>|clean_sensitive_fields()<br ALIGN="LEFT"/>clean_slug()<br ALIGN="LEFT"/>clean_team()<br ALIGN="LEFT"/>get_team_choices(team_list, default)<br ALIGN="LEFT"/>get_team_label(team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.projectkeys.EditProjectKeyForm" [color="black", fontcolor="black", label=<{EditProjectKeyForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.edit_project_key.EditProjectKeyView" [color="black", fontcolor="black", label=<{EditProjectKeyView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project, key_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.team_settings.EditTeamForm" [color="black", fontcolor="black", label=<{EditTeamForm|slug<br ALIGN="LEFT"/>|clean_slug()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.auth.EmailAuthBackend" [color="black", fontcolor="black", label=<{EmailAuthBackend|<br ALIGN="LEFT"/>|authenticate(username, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.enable_project_key.EnableProjectKeyView" [color="black", fontcolor="black", label=<{EnableProjectKeyView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project, key_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.base.Endpoint" [color="black", fontcolor="black", label=<{Endpoint|args : tuple<br ALIGN="LEFT"/>authentication_classes : tuple<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>parser_classes : tuple<br ALIGN="LEFT"/>permission_classes : tuple<br ALIGN="LEFT"/>renderer_classes : tuple<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>|add_cors_headers(request, response)<br ALIGN="LEFT"/>build_cursor_link(request, name, cursor)<br ALIGN="LEFT"/>convert_args(request)<br ALIGN="LEFT"/>create_audit_entry(request)<br ALIGN="LEFT"/>dispatch(request)<br ALIGN="LEFT"/>finalize_response(request, response)<br ALIGN="LEFT"/>handle_exception(request, exc)<br ALIGN="LEFT"/>paginate(request, on_results, paginator_cls, default_per_page)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.error_500.Error500View" [color="black", fontcolor="black", label=<{Error500View|<br ALIGN="LEFT"/>|dispatch(request)<br ALIGN="LEFT"/>get_embed_config(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.error_page_embed.ErrorPageEmbedView" [color="black", fontcolor="black", label=<{ErrorPageEmbedView|<br ALIGN="LEFT"/>|dispatch(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.event.Event" [color="black", fontcolor="black", label=<{Event|checksum<br ALIGN="LEFT"/>culprit<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>datetime<br ALIGN="LEFT"/>event_id<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>message_short<br ALIGN="LEFT"/>num_comments<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>platform<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>server_name<br ALIGN="LEFT"/>site<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>tags<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>time_spent<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|as_dict()<br ALIGN="LEFT"/>error()<br ALIGN="LEFT"/>get_interfaces()<br ALIGN="LEFT"/>get_level_display()<br ALIGN="LEFT"/>get_tag(key)<br ALIGN="LEFT"/>get_tags(with_internal)<br ALIGN="LEFT"/>has_two_part_message()<br ALIGN="LEFT"/>interfaces()<br ALIGN="LEFT"/>ip_address()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.actions.base.EventAction" [color="black", fontcolor="black", label=<{EventAction|rule_type : str<br ALIGN="LEFT"/>|<I>after</I>(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_attribute.EventAttributeCondition" [color="black", fontcolor="black", label=<{EventAttributeCondition|form_cls<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>|passes(event, state)<br ALIGN="LEFT"/>render_label()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_attribute.EventAttributeForm" [color="black", fontcolor="black", label=<{EventAttributeForm|attribute<br ALIGN="LEFT"/>match<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.rules.conditions.base.EventCondition" [color="black", fontcolor="black", label=<{EventCondition|rule_type : str<br ALIGN="LEFT"/>|<I>passes</I>(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.event_details.EventDetailsEndpoint" [color="black", fontcolor="black", label=<{EventDetailsEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request, event_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.eventerror.EventError" [color="black", fontcolor="black", label=<{EventError|INVALID_ATTRIBUTE : str<br ALIGN="LEFT"/>INVALID_DATA : str<br ALIGN="LEFT"/>JS_GENERIC_FETCH_ERROR : str<br ALIGN="LEFT"/>JS_INVALID_HTTP_CODE : str<br ALIGN="LEFT"/>JS_INVALID_SOURCEMAP : str<br ALIGN="LEFT"/>JS_MISSING_SOURCE : str<br ALIGN="LEFT"/>JS_NO_COLUMN : str<br ALIGN="LEFT"/>JS_TOO_MANY_REMOTE_SOURCES : str<br ALIGN="LEFT"/>SECURITY_VIOLATION : str<br ALIGN="LEFT"/>UNKNOWN_ERROR : str<br ALIGN="LEFT"/>VALUE_TOO_LONG : str<br ALIGN="LEFT"/>|get_message(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_frequency.EventFrequencyCondition" [color="black", fontcolor="black", label=<{EventFrequencyCondition|form_cls<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>tsdb<br ALIGN="LEFT"/>|clear_cache(event)<br ALIGN="LEFT"/>get_rate(event, interval)<br ALIGN="LEFT"/>passes(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_frequency.EventFrequencyForm" [color="black", fontcolor="black", label=<{EventFrequencyForm|interval<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.event_manager.EventManager" [color="black", fontcolor="black", label=<{EventManager|data<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|normalize()<br ALIGN="LEFT"/>save(project, raw)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.eventmapping.EventMapping" [color="black", fontcolor="black", label=<{EventMapping|date_added<br ALIGN="LEFT"/>event_id<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.event.EventSerializer" [color="black", fontcolor="black", label=<{EventSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user, is_public)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.base.EventState" [color="black", fontcolor="black", label=<{EventState|is_new<br ALIGN="LEFT"/>is_regression<br ALIGN="LEFT"/>is_sample : tuple<br ALIGN="LEFT"/>rule_is_active<br ALIGN="LEFT"/>rule_last_active<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.eventuser.EventUser" [color="black", fontcolor="black", label=<{EventUser|date_added<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>hash<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>ip_address<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>tag_value<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|attr_from_keyword(keyword)<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>get_label()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.eventuser.EventUserSerializer" [color="black", fontcolor="black", label=<{EventUserSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.every_event.EveryEventCondition" [color="black", fontcolor="black", label=<{EveryEventCondition|label : str<br ALIGN="LEFT"/>|passes(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.query.EverythingCollector" [color="black", fontcolor="black", label=<{EverythingCollector|<br ALIGN="LEFT"/>|collect(objs, source, nullable, collect_related, source_attr, reverse_dependency)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.exception.Exception" [color="black", fontcolor="red", label=<{Exception|score : int<br ALIGN="LEFT"/>|compute_hashes(platform)<br ALIGN="LEFT"/>data_has_system_frames(data)<br ALIGN="LEFT"/>get_alias()<br ALIGN="LEFT"/>get_api_context(is_public)<br ALIGN="LEFT"/>get_hash(system_frames)<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_stacktrace()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>to_string(event, is_public)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.base.Feature" [color="black", fontcolor="black", label=<{Feature|name<br ALIGN="LEFT"/>|has(actor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.handler.FeatureHandler" [color="black", fontcolor="black", label=<{FeatureHandler|features : set<br ALIGN="LEFT"/>|<I>has</I>(feature, actor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.manager.FeatureManager" [color="black", fontcolor="black", label=<{FeatureManager|<br ALIGN="LEFT"/>|add(name, cls)<br ALIGN="LEFT"/>get(name)<br ALIGN="LEFT"/>has(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.templatetags.sentry_features.FeatureNode" [color="black", fontcolor="black", label=<{FeatureNode|name<br ALIGN="LEFT"/>nodelist_false<br ALIGN="LEFT"/>nodelist_true<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|render(context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.exceptions.FeatureNotRegistered" [color="black", fontcolor="red", label=<{FeatureNotRegistered|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.file.File" [color="black", fontcolor="black", label=<{File|blob<br ALIGN="LEFT"/>checksum<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>ensure_blob()<br ALIGN="LEFT"/>getfile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.file.FileBlob" [color="black", fontcolor="black", label=<{FileBlob|checksum<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>deletefile(commit)<br ALIGN="LEFT"/>from_file(fileobj)<br ALIGN="LEFT"/>generate_unique_path(timestamp)<br ALIGN="LEFT"/>get_storage()<br ALIGN="LEFT"/>getfile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.first_seen_event.FirstSeenEventCondition" [color="black", fontcolor="black", label=<{FirstSeenEventCondition|label : str<br ALIGN="LEFT"/>|passes(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_attribute.FixedTypeaheadInput" [color="black", fontcolor="black", label=<{FixedTypeaheadInput|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.testutils.fixtures.Fixtures" [color="black", fontcolor="black", label=<{Fixtures|<br ALIGN="LEFT"/>|activity()<br ALIGN="LEFT"/>create_event(event_id)<br ALIGN="LEFT"/>create_group(project, checksum)<br ALIGN="LEFT"/>create_member(teams)<br ALIGN="LEFT"/>create_organization()<br ALIGN="LEFT"/>create_project()<br ALIGN="LEFT"/>create_project_key(project)<br ALIGN="LEFT"/>create_team()<br ALIGN="LEFT"/>create_user(email)<br ALIGN="LEFT"/>event()<br ALIGN="LEFT"/>group()<br ALIGN="LEFT"/>organization()<br ALIGN="LEFT"/>project()<br ALIGN="LEFT"/>projectkey()<br ALIGN="LEFT"/>team()<br ALIGN="LEFT"/>user()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" [color="black", fontcolor="black", label=<{FlexibleForeignKey|<br ALIGN="LEFT"/>|db_type(connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.stacktrace.Frame" [color="black", fontcolor="black", label=<{Frame|<br ALIGN="LEFT"/>|get_api_context(is_public)<br ALIGN="LEFT"/>get_culprit_string()<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>is_caused_by()<br ALIGN="LEFT"/>is_unhashable_function()<br ALIGN="LEFT"/>is_unhashable_module()<br ALIGN="LEFT"/>is_url()<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>to_string(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.utils.function_wrapper.FunctionWrapper" [color="black", fontcolor="black", label=<{FunctionWrapper|collector<br ALIGN="LEFT"/>|record(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.react_page.GenericReactPageView" [color="black", fontcolor="black", label=<{GenericReactPageView|<br ALIGN="LEFT"/>|handle(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.group.Group" [color="black", fontcolor="black", label=<{Group|active_at<br ALIGN="LEFT"/>avg_time_spent<br ALIGN="LEFT"/>checksum<br ALIGN="LEFT"/>culprit<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>first_release<br ALIGN="LEFT"/>first_seen<br ALIGN="LEFT"/>is_public<br ALIGN="LEFT"/>last_seen<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>message_short<br ALIGN="LEFT"/>num_comments<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>platform<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>resolved_at<br ALIGN="LEFT"/>score<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>time_spent_count<br ALIGN="LEFT"/>time_spent_total<br ALIGN="LEFT"/>times_seen<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|error()<br ALIGN="LEFT"/>from_share_id(share_id)<br ALIGN="LEFT"/>get_absolute_url()<br ALIGN="LEFT"/>get_email_subject()<br ALIGN="LEFT"/>get_latest_event()<br ALIGN="LEFT"/>get_oldest_event()<br ALIGN="LEFT"/>get_score()<br ALIGN="LEFT"/>get_share_id()<br ALIGN="LEFT"/>get_status()<br ALIGN="LEFT"/>get_tags(with_internal)<br ALIGN="LEFT"/>get_unique_tags(tag, since, order_by)<br ALIGN="LEFT"/>has_two_part_message()<br ALIGN="LEFT"/>is_muted()<br ALIGN="LEFT"/>is_over_resolve_age()<br ALIGN="LEFT"/>is_resolved()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.groupassignee.GroupAssignee" [color="black", fontcolor="black", label=<{GroupAssignee|date_added<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupassignee.GroupAssigneeManager" [color="black", fontcolor="black", label=<{GroupAssigneeManager|<br ALIGN="LEFT"/>|assign(group, assigned_to, acting_user)<br ALIGN="LEFT"/>deassign(group, acting_user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.groupbookmark.GroupBookmark" [color="black", fontcolor="black", label=<{GroupBookmark|date_added<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.group_details.GroupDetailsEndpoint" [color="black", fontcolor="black", label=<{GroupDetailsEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|delete(request, group)<br ALIGN="LEFT"/>get(request, group)<br ALIGN="LEFT"/>put(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.groupemailthread.GroupEmailThread" [color="black", fontcolor="black", label=<{GroupEmailThread|date<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>msgid<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.bases.group.GroupEndpoint" [color="black", fontcolor="black", label=<{GroupEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|convert_args(request, issue_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.group_event_json.GroupEventJsonView" [color="black", fontcolor="black", label=<{GroupEventJsonView|required_scope : str<br ALIGN="LEFT"/>|get(request, organization, project, team, group_id, event_id_or_latest)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_events.GroupEventsEndpoint" [color="black", fontcolor="black", label=<{GroupEventsEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_events_latest.GroupEventsLatestEndpoint" [color="black", fontcolor="black", label=<{GroupEventsLatestEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_events_oldest.GroupEventsOldestEndpoint" [color="black", fontcolor="black", label=<{GroupEventsOldestEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.grouphash.GroupHash" [color="black", fontcolor="black", label=<{GroupHash|group<br ALIGN="LEFT"/>hash<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.group.GroupManager" [color="black", fontcolor="black", label=<{GroupManager|use_for_related_fields : bool<br ALIGN="LEFT"/>|add_tags(group, tags)<br ALIGN="LEFT"/>from_kwargs(project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.groupmeta.GroupMeta" [color="black", fontcolor="black", label=<{GroupMeta|group<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupmeta.GroupMetaManager" [color="black", fontcolor="black", label=<{GroupMetaManager|<br ALIGN="LEFT"/>|clear_local_cache()<br ALIGN="LEFT"/>contribute_to_class(model, name)<br ALIGN="LEFT"/>get_value(instance, key, default)<br ALIGN="LEFT"/>get_value_bulk(instance_list, key, default)<br ALIGN="LEFT"/>populate_cache(instance_list)<br ALIGN="LEFT"/>set_value(instance, key, value)<br ALIGN="LEFT"/>unset_value(instance, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_notes_details.GroupNotesDetailsEndpoint" [color="black", fontcolor="black", label=<{GroupNotesDetailsEndpoint|<br ALIGN="LEFT"/>|delete(request, group, note_id)<br ALIGN="LEFT"/>put(request, group, note_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_notes.GroupNotesEndpoint" [color="black", fontcolor="black", label=<{GroupNotesEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>post(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.group.GroupPermission" [color="black", fontcolor="black", label=<{GroupPermission|scope_map : dict<br ALIGN="LEFT"/>|has_object_permission(request, view, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.group_plugin_action.GroupPluginActionView" [color="black", fontcolor="black", label=<{GroupPluginActionView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project, group_id, slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.groupresolution.GroupResolution" [color="black", fontcolor="black", label=<{GroupResolution|datetime<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>release<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupresolution.GroupResolutionStatus" [color="black", fontcolor="black", label=<{GroupResolutionStatus|PENDING : int<br ALIGN="LEFT"/>RESOLVED : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.grouprulestatus.GroupRuleStatus" [color="black", fontcolor="black", label=<{GroupRuleStatus|ACTIVE : int<br ALIGN="LEFT"/>INACTIVE : int<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>last_active<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>rule<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupseen.GroupSeen" [color="black", fontcolor="black", label=<{GroupSeen|group<br ALIGN="LEFT"/>last_seen<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.groupseen.GroupSeenSerializer" [color="black", fontcolor="black", label=<{GroupSeenSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_details.GroupSerializer" [color="black", fontcolor="black", label=<{GroupSerializer|assignedTo<br ALIGN="LEFT"/>hasSeen<br ALIGN="LEFT"/>isBookmarked<br ALIGN="LEFT"/>snoozeDuration<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_group_index.GroupSerializer" [color="black", fontcolor="black", label=<{GroupSerializer|hasSeen<br ALIGN="LEFT"/>isBookmarked<br ALIGN="LEFT"/>isPublic<br ALIGN="LEFT"/>merge<br ALIGN="LEFT"/>snoozeDuration<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.group.GroupSerializer" [color="black", fontcolor="black", label=<{GroupSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.groupsnooze.GroupSnooze" [color="black", fontcolor="black", label=<{GroupSnooze|group<br ALIGN="LEFT"/>until<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.group_stats.GroupStatsEndpoint" [color="black", fontcolor="black", label=<{GroupStatsEndpoint|<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.group.GroupStatus" [color="black", fontcolor="black", label=<{GroupStatus|DELETION_IN_PROGRESS : int<br ALIGN="LEFT"/>MUTED : int<br ALIGN="LEFT"/>PENDING_DELETION : int<br ALIGN="LEFT"/>PENDING_MERGE : int<br ALIGN="LEFT"/>RESOLVED : int<br ALIGN="LEFT"/>UNRESOLVED : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.grouptagkey.GroupTagKey" [color="black", fontcolor="black", label=<{GroupTagKey|group<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>values_seen<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.group_tagkey_details.GroupTagKeyDetailsEndpoint" [color="black", fontcolor="black", label=<{GroupTagKeyDetailsEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, group, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.grouptagkey.GroupTagKeySerializer" [color="black", fontcolor="black", label=<{GroupTagKeySerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_tagkey_values.GroupTagKeyValuesEndpoint" [color="black", fontcolor="black", label=<{GroupTagKeyValuesEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, group, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.grouptagvalue.GroupTagValue" [color="black", fontcolor="black", label=<{GroupTagValue|first_seen<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>last_seen<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>times_seen<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|get_top_values(group_id, key, limit)<br ALIGN="LEFT"/>get_value_count(group_id, key)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.grouptagvalue.GroupTagValueSerializer" [color="black", fontcolor="black", label=<{GroupTagValueSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_tags.GroupTagsEndpoint" [color="black", fontcolor="black", label=<{GroupTagsEndpoint|<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.javascript.GroupTransformer" [color="black", fontcolor="black", label=<{GroupTransformer|<br ALIGN="LEFT"/>|attach_metadata(objects, request)<br ALIGN="LEFT"/>localize_datetime(dt, request)<br ALIGN="LEFT"/>transform(obj, request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.group_user_reports.GroupUserReportsEndpoint" [color="black", fontcolor="black", label=<{GroupUserReportsEndpoint|<br ALIGN="LEFT"/>|get(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" [color="black", fontcolor="black", label=<{GzippedDictField|<br ALIGN="LEFT"/>|get_prep_value(value)<br ALIGN="LEFT"/>to_python(value)<br ALIGN="LEFT"/>value_to_string(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.helppage.HelpPage" [color="black", fontcolor="black", label=<{HelpPage|content<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>is_visible<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>priority<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|natural_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.HelpPageAdmin" [color="black", fontcolor="black", label=<{HelpPageAdmin|list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.home.HomeView" [color="black", fontcolor="black", label=<{HomeView|<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.http.Http" [color="black", fontcolor="black", label=<{Http|FORM_TYPE : str<br ALIGN="LEFT"/>display_score : int<br ALIGN="LEFT"/>full_url<br ALIGN="LEFT"/>score : int<br ALIGN="LEFT"/>|get_alias()<br ALIGN="LEFT"/>get_api_context(is_public)<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/>to_email_html(event)<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.IPNetworksField" [color="black", fontcolor="black", label=<{IPNetworksField|widget<br ALIGN="LEFT"/>|clean(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.base.v1.IPlugin" [color="black", fontcolor="black", label=<{IPlugin|author : NoneType<br ALIGN="LEFT"/>author_url : NoneType<br ALIGN="LEFT"/>can_disable : bool<br ALIGN="LEFT"/>conf_key : NoneType<br ALIGN="LEFT"/>conf_title : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>project_conf_form : NoneType<br ALIGN="LEFT"/>project_conf_template : str<br ALIGN="LEFT"/>project_default_enabled : bool<br ALIGN="LEFT"/>resource_links : tuple<br ALIGN="LEFT"/>selected<br ALIGN="LEFT"/>site_conf_form : NoneType<br ALIGN="LEFT"/>site_conf_template : str<br ALIGN="LEFT"/>slug : NoneType<br ALIGN="LEFT"/>title : NoneType<br ALIGN="LEFT"/>version : NoneType<br ALIGN="LEFT"/>|actions(request, group, action_list)<br ALIGN="LEFT"/><I>before_events</I>(request, group_list)<br ALIGN="LEFT"/>can_configure_for_project(project)<br ALIGN="LEFT"/>can_enable_for_projects()<br ALIGN="LEFT"/>configure(request, project)<br ALIGN="LEFT"/>disable(project, user)<br ALIGN="LEFT"/>enable(project, user)<br ALIGN="LEFT"/>get_conf_form(project)<br ALIGN="LEFT"/>get_conf_key()<br ALIGN="LEFT"/>get_conf_options(project)<br ALIGN="LEFT"/>get_conf_template(project)<br ALIGN="LEFT"/>get_conf_title()<br ALIGN="LEFT"/>get_conf_version(project)<br ALIGN="LEFT"/>get_description()<br ALIGN="LEFT"/>get_form_initial(project)<br ALIGN="LEFT"/>get_notification_forms()<br ALIGN="LEFT"/>get_option(key, project, user)<br ALIGN="LEFT"/>get_resource_links()<br ALIGN="LEFT"/><I>get_tags</I>(event)<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/>get_url(group)<br ALIGN="LEFT"/><I>get_url_module</I>()<br ALIGN="LEFT"/>get_view_response(request, group)<br ALIGN="LEFT"/><I>has_perm</I>(user, perm)<br ALIGN="LEFT"/>has_project_conf()<br ALIGN="LEFT"/>has_site_conf()<br ALIGN="LEFT"/>is_enabled(project)<br ALIGN="LEFT"/><I>is_regression</I>(group, event)<br ALIGN="LEFT"/>is_testable()<br ALIGN="LEFT"/><I>missing_perm_response</I>(request, perm)<br ALIGN="LEFT"/>panels(request, group, panel_list)<br ALIGN="LEFT"/><I>post_process</I>(group, event, is_new, is_sample)<br ALIGN="LEFT"/>reset_options(project, user)<br ALIGN="LEFT"/>set_option(key, value, project, user)<br ALIGN="LEFT"/>tags(request, group, tag_list)<br ALIGN="LEFT"/>unset_option(key, project, user)<br ALIGN="LEFT"/><I>view</I>(request, group)<br ALIGN="LEFT"/><I>widget</I>(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.base.v2.IPlugin2" [color="black", fontcolor="black", label=<{IPlugin2|author : NoneType<br ALIGN="LEFT"/>author_url : NoneType<br ALIGN="LEFT"/>can_disable : bool<br ALIGN="LEFT"/>conf_key : NoneType<br ALIGN="LEFT"/>conf_title : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>project_conf_form : NoneType<br ALIGN="LEFT"/>project_conf_template : str<br ALIGN="LEFT"/>project_default_enabled : bool<br ALIGN="LEFT"/>resource_links : tuple<br ALIGN="LEFT"/>slug : NoneType<br ALIGN="LEFT"/>title : NoneType<br ALIGN="LEFT"/>version : NoneType<br ALIGN="LEFT"/>|can_configure_for_project(project)<br ALIGN="LEFT"/>configure(project, request)<br ALIGN="LEFT"/>disable(project, user)<br ALIGN="LEFT"/>enable(project, user)<br ALIGN="LEFT"/>get_actions(request, group)<br ALIGN="LEFT"/>get_annotations(group)<br ALIGN="LEFT"/>get_conf_form(project)<br ALIGN="LEFT"/>get_conf_key()<br ALIGN="LEFT"/>get_conf_options(project)<br ALIGN="LEFT"/>get_conf_template(project)<br ALIGN="LEFT"/>get_conf_title()<br ALIGN="LEFT"/>get_conf_version(project)<br ALIGN="LEFT"/>get_description()<br ALIGN="LEFT"/>get_event_preprocessors()<br ALIGN="LEFT"/>get_feature_hooks()<br ALIGN="LEFT"/>get_form_initial(project)<br ALIGN="LEFT"/>get_notifiers()<br ALIGN="LEFT"/>get_option(key, project, user)<br ALIGN="LEFT"/>get_release_hook()<br ALIGN="LEFT"/>get_resource_links()<br ALIGN="LEFT"/>get_rules()<br ALIGN="LEFT"/>get_tags(event)<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/><I>get_url_module</I>()<br ALIGN="LEFT"/>has_project_conf()<br ALIGN="LEFT"/>is_enabled(project)<br ALIGN="LEFT"/>redirect(url)<br ALIGN="LEFT"/>render(template, context)<br ALIGN="LEFT"/>reset_options(project, user)<br ALIGN="LEFT"/>set_option(key, value, project, user)<br ALIGN="LEFT"/>unset_option(key, project, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.exceptions.IdentityNotValid" [color="black", fontcolor="red", label=<{IdentityNotValid|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.models.manager.ImmutableDict" [color="black", fontcolor="black", label=<{ImmutableDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.lint.absolute_import_check.ImportVisitor" [color="black", fontcolor="black", label=<{ImportVisitor|has_import : bool<br ALIGN="LEFT"/>|visit_ImportFrom(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.runner.importer.Importer" [color="black", fontcolor="black", label=<{Importer|callback : NoneType<br ALIGN="LEFT"/>config_path<br ALIGN="LEFT"/>default_settings : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|find_module(fullname, path)<br ALIGN="LEFT"/>load_module(fullname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.tsdb.inmemory.InMemoryTSDB" [color="black", fontcolor="black", label=<{InMemoryTSDB|data : defaultdict<br ALIGN="LEFT"/>sets : defaultdict<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>get_distinct_counts_series(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_distinct_counts_totals(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_range(model, keys, start, end, rollup)<br ALIGN="LEFT"/>incr(model, key, timestamp, count)<br ALIGN="LEFT"/>record(model, key, values, timestamp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.buffer.inprocess.InProcessBuffer" [color="black", fontcolor="black", label=<{InProcessBuffer|<br ALIGN="LEFT"/>|incr(model, columns, filters, extra)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.index.IndexEndpoint" [color="black", fontcolor="black", label=<{IndexEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.managers.InstanceManager" [color="black", fontcolor="black", label=<{InstanceManager|cache : NoneType, list<br ALIGN="LEFT"/>class_list<br ALIGN="LEFT"/>instances : bool<br ALIGN="LEFT"/>|add(class_path)<br ALIGN="LEFT"/>all()<br ALIGN="LEFT"/>get_class_list()<br ALIGN="LEFT"/>remove(class_path)<br ALIGN="LEFT"/>update(class_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.base.Interface" [color="black", fontcolor="black", label=<{Interface|display_score : NoneType<br ALIGN="LEFT"/>score : int<br ALIGN="LEFT"/>|compute_hashes(platform)<br ALIGN="LEFT"/>get_alias()<br ALIGN="LEFT"/>get_api_context(is_public)<br ALIGN="LEFT"/>get_display_score()<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_score()<br ALIGN="LEFT"/>get_slug()<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/>to_email_html(event)<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>to_string(event, is_public)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_interface_types.models.InterfaceTypePlugin" [color="black", fontcolor="black", label=<{InterfaceTypePlugin|author : str<br ALIGN="LEFT"/>author_url : str<br ALIGN="LEFT"/>descrption : str<br ALIGN="LEFT"/>project_default_enabled : bool<br ALIGN="LEFT"/>slug : str<br ALIGN="LEFT"/>tag : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|get_tag_values(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.base.InterfaceValidationError" [color="black", fontcolor="red", label=<{InterfaceValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.internal_stats.InternalStatsEndpoint" [color="black", fontcolor="black", label=<{InternalStatsEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_frequency.Interval" [color="black", fontcolor="black", label=<{Interval|ONE_HOUR : str<br ALIGN="LEFT"/>ONE_MINUTE : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.exceptions.InvalidConfiguration" [color="black", fontcolor="red", label=<{InvalidConfiguration|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.exceptions.InvalidData" [color="black", fontcolor="red", label=<{InvalidData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.coreapi.InvalidFingerprint" [color="black", fontcolor="red", label=<{InvalidFingerprint|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.exceptions.InvalidInterface" [color="black", fontcolor="red", label=<{InvalidInterface|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.exceptions.InvalidOrigin" [color="black", fontcolor="red", label=<{InvalidOrigin|origin<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.query.InvalidQuerySetError" [color="black", fontcolor="red", label=<{InvalidQuerySetError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.exceptions.InvalidRequest" [color="black", fontcolor="red", label=<{InvalidRequest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.coreapi.InvalidTimestamp" [color="black", fontcolor="red", label=<{InvalidTimestamp|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.invite_organization_member.InviteOrganizationMemberForm" [color="black", fontcolor="black", label=<{InviteOrganizationMemberForm|email<br ALIGN="LEFT"/>|save(actor, organization, ip_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.bases.issue.IssueTrackingPlugin" [color="black", fontcolor="black", label=<{IssueTrackingPlugin|auth_provider : NoneType<br ALIGN="LEFT"/>create_issue_template : str<br ALIGN="LEFT"/>needs_auth_template : str<br ALIGN="LEFT"/>new_issue_form<br ALIGN="LEFT"/>not_configured_template : str<br ALIGN="LEFT"/>|actions(request, group, action_list)<br ALIGN="LEFT"/><I>create_issue</I>(request, group, form_data)<br ALIGN="LEFT"/>get_auth_for_user(user)<br ALIGN="LEFT"/>get_initial_form_data(request, group, event)<br ALIGN="LEFT"/>get_issue_doc_html()<br ALIGN="LEFT"/>get_issue_label(group, issue_id)<br ALIGN="LEFT"/><I>get_issue_url</I>(group, issue_id)<br ALIGN="LEFT"/>get_new_issue_form(request, group, event)<br ALIGN="LEFT"/>get_new_issue_title()<br ALIGN="LEFT"/>has_auth_configured()<br ALIGN="LEFT"/><I>is_configured</I>(request, project)<br ALIGN="LEFT"/>needs_auth(request, project)<br ALIGN="LEFT"/>tags(request, group, tag_list)<br ALIGN="LEFT"/>view(request, group)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.base.response.JSONResponse" [color="black", fontcolor="black", label=<{JSONResponse|context<br ALIGN="LEFT"/>|respond(request, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lang.javascript.plugin.JavascriptPlugin" [color="black", fontcolor="black", label=<{JavascriptPlugin|can_disable : bool<br ALIGN="LEFT"/>|get_event_preprocessors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_keys.KeySerializer" [color="black", fontcolor="black", label=<{KeySerializer|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_key_details.KeySerializer" [color="black", fontcolor="black", label=<{KeySerializer|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.legacy_project_redirect.LegacyProjectRedirectEndpoint" [color="black", fontcolor="black", label=<{LegacyProjectRedirectEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|convert_args(request, project_id)<br ALIGN="LEFT"/>get(request, project, path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.level.LevelCondition" [color="black", fontcolor="black", label=<{LevelCondition|form_cls<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>|passes(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.level.LevelEventForm" [color="black", fontcolor="black", label=<{LevelEventForm|level<br ALIGN="LEFT"/>match<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.rules.conditions.level.LevelMatchType" [color="black", fontcolor="black", label=<{LevelMatchType|EQUAL : str<br ALIGN="LEFT"/>GREATER_OR_EQUAL : str<br ALIGN="LEFT"/>LESS_OR_EQUAL : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.rest_framework.list.ListField" [color="black", fontcolor="black", label=<{ListField|child<br ALIGN="LEFT"/>|from_native(data)<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>to_native(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.cache.Lock" [color="black", fontcolor="black", label=<{Lock|cache<br ALIGN="LEFT"/>held<br ALIGN="LEFT"/>lock_key<br ALIGN="LEFT"/>nowait : bool<br ALIGN="LEFT"/>seconds_remaining<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>|acquire()<br ALIGN="LEFT"/>release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.cache.LockAlreadyHeld" [color="black", fontcolor="red", label=<{LockAlreadyHeld|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.metrics.logging.LoggingBackend" [color="black", fontcolor="black", label=<{LoggingBackend|<br ALIGN="LEFT"/>|incr(key, instance, tags, amount, sample_rate)<br ALIGN="LEFT"/>timing(key, value, instance, tags, sample_rate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.lostpasswordhash.LostPasswordHash" [color="black", fontcolor="black", label=<{LostPasswordHash|date_added<br ALIGN="LEFT"/>hash<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|is_valid()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>send_recover_mail()<br ALIGN="LEFT"/>set_hash()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_mail.models.MailPlugin" [color="black", fontcolor="black", label=<{MailPlugin|author : str<br ALIGN="LEFT"/>author_url : str<br ALIGN="LEFT"/>conf_key : str<br ALIGN="LEFT"/>project_conf_form : NoneType<br ALIGN="LEFT"/>project_default_enabled : bool<br ALIGN="LEFT"/>slug : str<br ALIGN="LEFT"/>subject_prefix<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|get_notification_settings_url()<br ALIGN="LEFT"/>get_project_url(project)<br ALIGN="LEFT"/>get_send_to(project)<br ALIGN="LEFT"/>is_configured(project)<br ALIGN="LEFT"/>notify(notification)<br ALIGN="LEFT"/>notify_about_activity(activity)<br ALIGN="LEFT"/>notify_digest(project, digest)<br ALIGN="LEFT"/>send_test_mail(project)<br ALIGN="LEFT"/>should_notify(group, event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.debug.mail.MailPreview" [color="black", fontcolor="black", label=<{MailPreview|context : NoneType, dict<br ALIGN="LEFT"/>html_template<br ALIGN="LEFT"/>text_template<br ALIGN="LEFT"/>|html_body()<br ALIGN="LEFT"/>render()<br ALIGN="LEFT"/>text_body()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.mailgun_inbound_webhook.MailgunInboundWebhookView" [color="black", fontcolor="black", label=<{MailgunInboundWebhookView|<br ALIGN="LEFT"/>|dispatch()<br ALIGN="LEFT"/>post(request)<br ALIGN="LEFT"/>verify(api_key, token, timestamp, signature)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.event_attribute.MatchType" [color="black", fontcolor="black", label=<{MatchType|CONTAINS : str<br ALIGN="LEFT"/>ENDS_WITH : str<br ALIGN="LEFT"/>EQUAL : str<br ALIGN="LEFT"/>IS_SET : str<br ALIGN="LEFT"/>NOT_CONTAINS : str<br ALIGN="LEFT"/>NOT_EQUAL : str<br ALIGN="LEFT"/>NOT_SET : str<br ALIGN="LEFT"/>STARTS_WITH : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.rules.conditions.tagged_event.MatchType" [color="black", fontcolor="black", label=<{MatchType|CONTAINS : str<br ALIGN="LEFT"/>ENDS_WITH : str<br ALIGN="LEFT"/>EQUAL : str<br ALIGN="LEFT"/>NOT_CONTAINS : str<br ALIGN="LEFT"/>NOT_EQUAL : str<br ALIGN="LEFT"/>STARTS_WITH : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_index.MemberPermission" [color="black", fontcolor="black", label=<{MemberPermission|scope_map : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.interfaces.message.Message" [color="black", fontcolor="black", label=<{Message|<br ALIGN="LEFT"/>|get_hash()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.email.MessageBuilder" [color="black", fontcolor="black", label=<{MessageBuilder|context : dict<br ALIGN="LEFT"/>from_email<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>html_template : NoneType<br ALIGN="LEFT"/>reference : NoneType<br ALIGN="LEFT"/>reply_reference : NoneType<br ALIGN="LEFT"/>subject<br ALIGN="LEFT"/>template : NoneType<br ALIGN="LEFT"/>|add_users(user_ids, project)<br ALIGN="LEFT"/>build(to, reply_to)<br ALIGN="LEFT"/>get_built_messages(to)<br ALIGN="LEFT"/>html_body()<br ALIGN="LEFT"/>send(to, fail_silently)<br ALIGN="LEFT"/>send_all(messages, fail_silently)<br ALIGN="LEFT"/>send_async(to)<br ALIGN="LEFT"/>txt_body()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_details.OrganizationSerializer.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_details.ProjectSerializer.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.team_details.TeamSerializer.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.user_details.UserSerializer.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.models.base.BaseModel.Meta" [color="black", fontcolor="black", label=<{Meta|abstract : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.models.base.Model.Meta" [color="black", fontcolor="black", label=<{Meta|abstract : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.activity.Activity.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.apikey.ApiKey.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.auditlogentry.AuditLogEntry.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.authidentity.AuthIdentity.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.authprovider.AuthProvider.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.broadcast.Broadcast.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.broadcast.BroadcastSeen.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.event.Event.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>index_together : tuple<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>verbose_name_plural<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.eventmapping.EventMapping.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.eventuser.EventUser.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>index_together : tuple<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.file.FileBlob.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.file.File.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.group.Group.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>index_together : tuple<br ALIGN="LEFT"/>permissions : tuple<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>verbose_name_plural<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupassignee.GroupAssignee.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupbookmark.GroupBookmark.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupemailthread.GroupEmailThread.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.grouphash.GroupHash.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupmeta.GroupMeta.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupresolution.GroupResolution.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.grouprulestatus.GroupRuleStatus.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupseen.GroupSeen.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.groupsnooze.GroupSnooze.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.grouptagkey.GroupTagKey.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.grouptagvalue.GroupTagValue.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.helppage.HelpPage.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.lostpasswordhash.LostPasswordHash.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.option.Option.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.organization.Organization.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.organizationaccessrequest.OrganizationAccessRequest.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.organizationmember.OrganizationMemberTeam.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.organizationmember.OrganizationMember.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.organizationoption.OrganizationOption.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.project.Project.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.projectkey.ProjectKey.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.projectoption.ProjectOption.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.release.Release.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.releasefile.ReleaseFile.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.rule.Rule.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.savedsearch.SavedSearch.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.tagkey.TagKey.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.tagvalue.TagValue.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.team.Team.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.user.User.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>verbose_name<br ALIGN="LEFT"/>verbose_name_plural<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.useroption.UserOption.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>unique_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.userreport.UserReport.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>db_table : str<br ALIGN="LEFT"/>index_together : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.nodestore.django.models.Node.Meta" [color="black", fontcolor="black", label=<{Meta|app_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.RegistrationForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.add_organization_member.AddOrganizationMemberForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.add_project.AddProjectForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.add_team.AddTeamForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.edit_organization_member.EditOrganizationMemberForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.invite_organization_member.InviteOrganizationMemberForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.projectkeys.EditProjectKeyForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.NewUserForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.ChangeUserForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.create_organization.NewOrganizationForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.create_project.AddProjectWithTeamForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.error_page_embed.UserReportForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.organization_api_key_settings.ApiKeyForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.organization_settings.OrganizationSettingsForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.project_settings.EditProjectForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.team_settings.EditTeamForm.Meta" [color="black", fontcolor="black", label=<{Meta|fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.metrics.base.MetricsBackend" [color="black", fontcolor="black", label=<{MetricsBackend|prefix : NoneType<br ALIGN="LEFT"/>|<I>incr</I>(key, instance, tags, amount, sample_rate)<br ALIGN="LEFT"/><I>timing</I>(key, value, instance, tags, sample_rate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0001_initial.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0002_auto__del_field_groupedmessage_url__chg_field_groupedmessage_view__chg.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0003_auto__add_field_message_group__del_field_groupedmessage_server_name.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0004_auto__add_filtervalue__add_unique_filtervalue_key_value.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0005_auto.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0006_auto.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0007_auto__add_field_message_site.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0008_auto__chg_field_message_view__add_field_groupedmessage_data__chg_field.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0009_auto__add_field_message_message_id.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0010_auto__add_messageindex__add_unique_messageindex_column_value_object_id.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0011_auto__add_field_groupedmessage_score.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0012_auto.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0013_auto__add_messagecountbyminute__add_unique_messagecountbyminute_group_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0014_auto.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0014_auto__add_project__add_projectmember__add_unique_projectmember_project.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0015_auto__add_field_message_project__add_field_messagecountbyminute_projec.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0016_auto__add_field_projectmember_is_superuser.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0017_auto__add_field_projectmember_api_key.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0018_auto__chg_field_project_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0019_auto__del_field_projectmember_api_key__add_field_projectmember_public_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0020_auto__add_projectdomain__add_unique_projectdomain_project_domain.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0021_auto__del_message__del_groupedmessage__del_unique_groupedmessage_proje.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0022_auto__del_field_group_class_name__del_field_group_traceback__del_field.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0023_auto__add_field_event_time_spent.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0024_auto__add_field_group_time_spent_total__add_field_group_time_spent_cou.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0025_auto__add_field_messagecountbyminute_time_spent_total__add_field_messa.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0026_auto__add_field_project_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0027_auto__chg_field_event_server_name.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0028_auto__add_projectoptions__add_unique_projectoptions_project_key_value.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0029_auto__del_field_projectmember_is_superuser__del_field_projectmember_pe.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0030_auto__add_view__chg_field_event_group.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0031_auto__add_field_view_verbose_name__add_field_view_verbose_name_plural_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0032_auto__add_eventmeta.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0033_auto__add_option__add_unique_option_key_value.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0034_auto__add_groupbookmark__add_unique_groupbookmark_project_user_group.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0034_auto__add_unique_option_key__del_unique_option_value_key__del_unique_g.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0036_auto__chg_field_option_value__chg_field_projectoption_value.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0037_auto__add_unique_option_key__del_unique_option_value_key__del_unique_g.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0039_auto__add_field_searchdocument_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0040_auto__del_unique_event_event_id__add_unique_event_project_event_id.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0042_auto__add_projectcountbyminute__add_unique_projectcountbyminute_projec.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0043_auto__chg_field_option_value__chg_field_projectoption_value.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0044_auto__add_field_projectmember_is_active.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0046_auto__add_teammember__add_unique_teammember_team_user__add_team__add_p.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0047_migrate_project_slugs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0048_migrate_project_keys.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0049_create_default_project_keys.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0050_remove_project_keys_from_members.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0052_migrate_project_members.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0053_auto__del_projectmember__del_unique_projectmember_project_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0054_fix_project_keys.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0055_auto__del_projectdomain__del_unique_projectdomain_project_domain.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0056_auto__add_field_group_resolved_at.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0057_auto__add_field_group_active_at.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0058_auto__add_useroption__add_unique_useroption_user_project_key.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0059_auto__add_filterkey__add_unique_filterkey_project_key.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0060_fill_filter_key.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0061_auto__add_field_group_group_id__add_field_group_is_public.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0062_correct_del_index_sentry_groupedmessage_logger__view__checksum.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0063_auto.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0064_index_checksum.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0065_create_default_project_key.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0066_auto__del_view.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0067_auto__add_field_group_platform__add_field_event_platform.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0069_auto__add_lostpasswordhash.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0070_projectoption_key_length.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0071_auto__add_field_group_users_seen.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0072_auto__add_affecteduserbygroup__add_unique_affecteduserbygroup_project_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0073_auto__add_field_project_platform.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0074_correct_filtervalue_index.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0075_add_groupbookmark_index.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0076_add_groupmeta_index.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0077_auto__add_trackeduser__add_unique_trackeduser_project_ident.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0078_auto__add_field_affecteduserbygroup_tuser.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0079_auto__del_unique_affecteduserbygroup_project_ident_group__add_unique_a.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0080_auto__chg_field_affecteduserbygroup_ident.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0081_fill_trackeduser.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0083_migrate_dupe_groups.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0084_auto__del_unique_group_project_checksum_logger_culprit__add_unique_gro.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0085_auto__del_unique_project_slug__add_unique_project_slug_team.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0086_auto__add_field_team_date_added.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0087_auto__del_messagefiltervalue__del_unique_messagefiltervalue_project_ke.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0088_auto__del_messagecountbyminute__del_unique_messagecountbyminute_projec.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0089_auto__add_accessgroup__add_unique_accessgroup_team_name.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0090_auto__add_grouptagkey__add_unique_grouptagkey_project_group_key__add_f.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0091_auto__add_alert.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0092_auto__add_alertrelatedgroup__add_unique_alertrelatedgroup_group_alert.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0093_auto__add_field_alert_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0094_auto__add_eventmapping__add_unique_eventmapping_project_event_id.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0095_rebase.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0096_auto__add_field_tagvalue_data.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0097_auto__del_affecteduserbygroup__del_unique_affecteduserbygroup_project_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>create_auth(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0099_auto__del_field_teammember_is_active.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0100_auto__add_field_tagkey_label.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0101_ensure_teams.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0102_ensure_slugs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0103_ensure_non_empty_slugs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0104_auto__add_groupseen__add_unique_groupseen_group_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0105_auto__chg_field_projectcountbyminute_time_spent_total__chg_field_group.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0106_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0107_expand_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0108_fix_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0109_index_filtervalue_times_seen.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0110_index_filtervalue_last_seen.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0111_index_filtervalue_first_seen.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0112_auto__chg_field_option_value__chg_field_useroption_value__chg_field_pr.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0113_auto__add_field_team_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0114_auto__add_field_projectkey_roles.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0115_auto__del_projectcountbyminute__del_unique_projectcountbyminute_projec.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0116_auto__del_field_event_server_name__del_field_event_culprit__del_field_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0117_auto__add_rule.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0118_create_default_rules.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0119_auto__add_field_projectkey_label.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0120_auto__add_grouprulestatus.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0121_auto__add_unique_grouprulestatus_rule_group.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0122_add_event_group_id_datetime_index.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0123_auto__add_groupassignee__add_index_event_group_datetime.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0124_auto__add_grouphash__add_unique_grouphash_project_hash.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0125_auto__add_field_user_is_managed.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0126_auto__add_field_option_last_updated.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0127_auto__add_release__add_unique_release_project_version.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0128_auto__add_broadcast.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0129_auto__chg_field_release_id__chg_field_pendingteammember_id__chg_field_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0130_auto__del_field_project_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0131_auto__add_organizationmember__add_unique_organizationmember_organizati.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0132_add_default_orgs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0133_add_org_members.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0134_auto__chg_field_team_organization.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0135_auto__chg_field_project_team.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>fix_missing_teams(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0136_auto__add_field_organizationmember_email__chg_field_organizationmember.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0137_auto__add_field_organizationmember_has_global_access.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0138_migrate_team_members.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0139_auto__add_auditlogentry.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0140_auto__add_field_organization_slug.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0141_fill_org_slugs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0142_auto__add_field_project_organization__add_unique_project_organization_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0143_fill_project_orgs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0144_auto__chg_field_project_organization.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0145_auto__chg_field_organization_slug.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0146_auto__add_field_auditlogentry_ip_address.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0147_auto__del_unique_team_slug__add_unique_team_organization_slug.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0148_auto__add_helppage.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0149_auto__chg_field_groupseen_project__chg_field_groupseen_user__chg_field.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0150_fix_broken_rules.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0151_auto__add_file.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0152_auto__add_field_file_checksum__chg_field_file_name__add_unique_file_na.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0153_auto__add_field_grouprulestatus_last_active.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0154_auto__add_field_tagkey_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0155_auto__add_field_projectkey_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0156_auto__add_apikey.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0157_auto__add_authidentity__add_unique_authidentity_auth_provider_ident__a.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0158_auto__add_unique_authidentity_auth_provider_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0159_auto__add_field_authidentity_last_verified__add_field_organizationmemb.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0160_auto__add_field_authprovider_default_global_access.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0161_auto__chg_field_authprovider_config.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0162_auto__chg_field_authidentity_data.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0163_auto__add_field_authidentity_last_synced.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0164_auto__add_releasefile__add_unique_releasefile_release_ident__add_field.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0165_auto__del_unique_file_name_checksum.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0166_auto__chg_field_user_id__add_field_apikey_allowed_origins.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0167_auto__add_field_authprovider_flags.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0168_unfill_projectkey_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0169_auto__del_field_projectkey_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0170_auto__add_organizationmemberteam__add_unique_organizationmemberteam_te.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0171_auto__chg_field_team_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0172_auto__del_field_team_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0173_auto__del_teammember__del_unique_teammember_team_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0174_auto__del_field_projectkey_user_added.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0175_auto__del_pendingteammember__del_unique_pendingteammember_team_email.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0176_auto__add_field_organizationmember_counter__add_unique_organizationmem.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0177_fill_member_counters.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0178_auto__del_unique_organizationmember_organization_counter.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0179_auto__add_field_release_date_released.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0180_auto__add_field_release_environment__add_field_release_ref__add_field_.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0181_auto__del_field_release_environment__del_unique_release_project_versio.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0182_auto__add_field_auditlogentry_actor_label__add_field_auditlogentry_act.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0183_auto__del_index_grouphash_hash.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0184_auto__del_field_group_checksum__del_unique_group_project_checksum__del.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0185_auto__add_savedsearch__add_unique_savedsearch_project_name.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0186_auto__add_field_group_first_release.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0187_auto__add_index_group_project_first_release.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0188_auto__add_userreport.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0189_auto__add_index_userreport_project_event_id.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0190_auto__add_field_release_new_groups.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0191_auto__del_alert__del_alertrelatedgroup__del_unique_alertrelatedgroup_g.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0192_add_model_groupemailthread.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0193_auto__del_unique_groupemailthread_msgid__add_unique_groupemailthread_e.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0194_auto__del_field_project_platform.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0195_auto__chg_field_organization_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0196_auto__del_field_organization_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0197_auto__del_accessgroup__del_unique_accessgroup_team_name.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0198_auto__add_field_release_primary_owner.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0199_auto__add_field_project_first_event.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0200_backfill_first_event.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0202_auto__add_field_eventuser_hash__add_unique_eventuser_project_hash.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0203_auto__chg_field_eventuser_username__chg_field_eventuser_ident.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0204_backfill_team_membership.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0205_auto__add_field_organizationmember_role.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0206_backfill_member_role.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0207_auto__add_field_organization_default_role.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0208_backfill_default_role.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0209_auto__add_broadcastseen__add_unique_broadcastseen_broadcast_user.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0210_auto__del_field_broadcast_badge.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0211_auto__add_field_broadcast_title.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0212_auto__add_fileblob__add_field_file_blob.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0212_auto__add_organizationoption__add_unique_organizationoption_organizati.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0213_migrate_file_blobs.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>symmetrical : bool<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0214_auto__add_field_broadcast_upstream_id.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0215_auto__add_field_broadcast_date_expires.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0216_auto__add_groupsnooze.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0217_auto__add_groupresolution.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0218_auto__add_field_groupresolution_status.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0219_auto__add_field_groupbookmark_date_added.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0220_auto__del_field_fileblob_storage_options__del_field_fileblob_storage__.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0221_auto__chg_field_user_first_name.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.migrations.0222_auto__del_field_user_last_name__del_field_user_first_name__add_field_u.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.migrations.0001_initial.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.search.migrations.0001_initial.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|<I>backwards</I>(orm)<br ALIGN="LEFT"/><I>forwards</I>(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.search.migrations.0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.Migration" [color="black", fontcolor="black", label=<{Migration|complete_apps : list<br ALIGN="LEFT"/>models : dict<br ALIGN="LEFT"/>|backwards(orm)<br ALIGN="LEFT"/>forwards(orm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lint.mock_check.MockAttrVisitor" [color="black", fontcolor="black", label=<{MockAttrVisitor|errors : list<br ALIGN="LEFT"/>non_existent_methods : frozenset<br ALIGN="LEFT"/>|visit_Attribute(node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lint.mock_check.MockCheck" [color="black", fontcolor="black", label=<{MockCheck|code : str<br ALIGN="LEFT"/>tree<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.apidocs.MockUtils" [color="black", fontcolor="black", label=<{MockUtils|<br ALIGN="LEFT"/>|create_api_key(org, label)<br ALIGN="LEFT"/>create_client_key(project, label)<br ALIGN="LEFT"/>create_event(project, release, platform, raw)<br ALIGN="LEFT"/>create_org(name, owner)<br ALIGN="LEFT"/>create_project(name, team, org)<br ALIGN="LEFT"/>create_release(project, user, version)<br ALIGN="LEFT"/>create_release_file(project, release, path, content_type, contents)<br ALIGN="LEFT"/>create_team(name, org)<br ALIGN="LEFT"/>create_user(mail)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.base.Model" [color="black", fontcolor="black", label=<{Model|id : BoundedBigAutoField<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.imports.ModuleProxyCache" [color="black", fontcolor="black", label=<{ModuleProxyCache|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.nodestore.multi.backend.MultiNodeStorage" [color="black", fontcolor="black", label=<{MultiNodeStorage|backends : list<br ALIGN="LEFT"/>read_selector<br ALIGN="LEFT"/>|cleanup(cutoff_timestamp)<br ALIGN="LEFT"/>delete(id)<br ALIGN="LEFT"/>get(id)<br ALIGN="LEFT"/>get_multi(id_list)<br ALIGN="LEFT"/>set(id, data)<br ALIGN="LEFT"/>set_multi(values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.bases.issue.NewIssueForm" [color="black", fontcolor="black", label=<{NewIssueForm|description<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.NewNoteForm" [color="black", fontcolor="black", label=<{NewNoteForm|text<br ALIGN="LEFT"/>|save(group, user, event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.create_organization.NewOrganizationForm" [color="black", fontcolor="black", label=<{NewOrganizationForm|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.projects.NewRuleForm" [color="black", fontcolor="black", label=<{NewRuleForm|label<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.NewUserForm" [color="black", fontcolor="black", label=<{NewUserForm|send_welcome_mail<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.auth.access.NoAccess" [color="black", fontcolor="black", label=<{NoAccess|is_active<br ALIGN="LEFT"/>scopes<br ALIGN="LEFT"/>sso_is_valid<br ALIGN="LEFT"/>teams<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.middleware.debug.NoIfModifiedSinceMiddleware" [color="black", fontcolor="black", label=<{NoIfModifiedSinceMiddleware|<br ALIGN="LEFT"/>|process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.permissions.NoPermission" [color="black", fontcolor="black", label=<{NoPermission|<br ALIGN="LEFT"/>|has_permission(request, view)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.django.models.Node" [color="black", fontcolor="black", label=<{Node|data<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.models.fields.node.NodeData" [color="black", fontcolor="black", label=<{NodeData|field<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>ref : NoneType<br ALIGN="LEFT"/>|bind_data(data, ref)<br ALIGN="LEFT"/>bind_ref(instance)<br ALIGN="LEFT"/>data()<br ALIGN="LEFT"/>get_ref(instance)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.node.NodeField" [color="black", fontcolor="black", label=<{NodeField|ref_func<br ALIGN="LEFT"/>|contribute_to_class(cls, name)<br ALIGN="LEFT"/>get_prep_value(value)<br ALIGN="LEFT"/>on_delete(instance)<br ALIGN="LEFT"/>to_python(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.node.NodeIntegrityFailure" [color="black", fontcolor="red", label=<{NodeIntegrityFailure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.nodestore.base.NodeStorage" [color="black", fontcolor="black", label=<{NodeStorage|<br ALIGN="LEFT"/>|<I>cleanup</I>(cutoff_timestamp)<br ALIGN="LEFT"/>create(data)<br ALIGN="LEFT"/><I>delete</I>(id)<br ALIGN="LEFT"/>delete_multi(id_list)<br ALIGN="LEFT"/>generate_id()<br ALIGN="LEFT"/><I>get</I>(id)<br ALIGN="LEFT"/>get_multi(id_list)<br ALIGN="LEFT"/><I>set</I>(id, data)<br ALIGN="LEFT"/>set_multi(values)<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.models.fields.node.NodeUnpopulated" [color="black", fontcolor="red", label=<{NodeUnpopulated|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.rest_framework.group_notes.NoteSerializer" [color="black", fontcolor="black", label=<{NoteSerializer|text<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.structs.Notification" [color="black", fontcolor="black", label=<{Notification|event<br ALIGN="LEFT"/>rule<br ALIGN="LEFT"/>rules : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.bases.notify.NotificationConfigurationForm" [color="black", fontcolor="black", label=<{NotificationConfigurationForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.bases.notify.NotificationPlugin" [color="black", fontcolor="black", label=<{NotificationPlugin|description : str<br ALIGN="LEFT"/>project_conf_form<br ALIGN="LEFT"/>|get_notification_doc_html()<br ALIGN="LEFT"/>get_sendable_users(project)<br ALIGN="LEFT"/><I>is_configured</I>(project)<br ALIGN="LEFT"/>notify(notification)<br ALIGN="LEFT"/><I>notify_about_activity</I>(activity)<br ALIGN="LEFT"/><I>notify_users</I>(group, event, fail_silently)<br ALIGN="LEFT"/>rule_notify(event, futures)<br ALIGN="LEFT"/>should_notify(group, event)<br ALIGN="LEFT"/>test_configuration(project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.accounts.NotificationSettingsForm" [color="black", fontcolor="black", label=<{NotificationSettingsForm|alert_email<br ALIGN="LEFT"/>subscribe_by_default<br ALIGN="LEFT"/>subscribe_notes<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|get_title()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.projects.NotificationSettingsForm" [color="black", fontcolor="black", label=<{NotificationSettingsForm|subject_prefix<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.notifier.Notifier" [color="black", fontcolor="black", label=<{Notifier|<br ALIGN="LEFT"/>|<I>notify</I>(notification)<br ALIGN="LEFT"/><I>notify_about_activity</I>(activity)<br ALIGN="LEFT"/>should_notify(group, event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.actions.notify_event.NotifyEventAction" [color="black", fontcolor="black", label=<{NotifyEventAction|label : str<br ALIGN="LEFT"/>|after(event, state)<br ALIGN="LEFT"/>get_plugins()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.actions.notify_event_service.NotifyEventServiceAction" [color="black", fontcolor="black", label=<{NotifyEventServiceAction|form_cls<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>|after(event, state)<br ALIGN="LEFT"/>get_form_instance()<br ALIGN="LEFT"/>get_plugins()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.actions.notify_event_service.NotifyEventServiceForm" [color="black", fontcolor="black", label=<{NotifyEventServiceForm|service<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.auth.providers.oauth2.OAuth2Callback" [color="black", fontcolor="black", label=<{OAuth2Callback|access_token_url : NoneType<br ALIGN="LEFT"/>client_id : NoneType<br ALIGN="LEFT"/>client_secret : NoneType<br ALIGN="LEFT"/>|dispatch(request, helper)<br ALIGN="LEFT"/>exchange_token(request, helper, code)<br ALIGN="LEFT"/>get_token_params(code, redirect_uri)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.providers.oauth2.OAuth2Login" [color="black", fontcolor="black", label=<{OAuth2Login|authorize_url : NoneType<br ALIGN="LEFT"/>client_id : NoneType<br ALIGN="LEFT"/>scope : str<br ALIGN="LEFT"/>|dispatch(request, helper)<br ALIGN="LEFT"/>get_authorize_params(state, redirect_uri)<br ALIGN="LEFT"/>get_authorize_url()<br ALIGN="LEFT"/>get_scope()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.providers.oauth2.OAuth2Provider" [color="black", fontcolor="black", label=<{OAuth2Provider|client_id : NoneType<br ALIGN="LEFT"/>client_secret : NoneType<br ALIGN="LEFT"/>|<I>build_identity</I>(state)<br ALIGN="LEFT"/>get_auth_pipeline()<br ALIGN="LEFT"/>get_oauth_data(payload)<br ALIGN="LEFT"/>get_refresh_token_params(refresh_token)<br ALIGN="LEFT"/><I>get_refresh_token_url</I>()<br ALIGN="LEFT"/>refresh_identity(auth_identity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.ua_parser.parser.OSParser" [color="black", fontcolor="black", label=<{OSParser|os_replacement : NoneType<br ALIGN="LEFT"/>os_v1_replacement : NoneType<br ALIGN="LEFT"/>os_v2_replacement : NoneType<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>user_agent_re<br ALIGN="LEFT"/>|MatchSpans(user_agent_string)<br ALIGN="LEFT"/>Parse(user_agent_string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.paginator.OffsetPaginator" [color="black", fontcolor="black", label=<{OffsetPaginator|<br ALIGN="LEFT"/>|get_result(limit, cursor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.option.Option" [color="black", fontcolor="black", label=<{Option|key<br ALIGN="LEFT"/>last_updated<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.admin.OptionAdmin" [color="black", fontcolor="black", label=<{OptionAdmin|fields : tuple<br ALIGN="LEFT"/>list_display : tuple<br ALIGN="LEFT"/>readonly_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|value_repr(instance)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.options.manager.OptionsManager" [color="black", fontcolor="black", label=<{OptionsManager|registry : dict<br ALIGN="LEFT"/>store<br ALIGN="LEFT"/>|all()<br ALIGN="LEFT"/>delete(key)<br ALIGN="LEFT"/>filter(flag)<br ALIGN="LEFT"/>get(key, silent)<br ALIGN="LEFT"/>lookup_key(key)<br ALIGN="LEFT"/>register(key, default, type, flags, ttl, grace)<br ALIGN="LEFT"/>set(key, value)<br ALIGN="LEFT"/>unregister(key)<br ALIGN="LEFT"/>validate(options)<br ALIGN="LEFT"/>validate_option(key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.options.store.OptionsStore" [color="black", fontcolor="black", label=<{OptionsStore|cache : NoneType<br ALIGN="LEFT"/>ttl : NoneType<br ALIGN="LEFT"/>|clean_local_cache()<br ALIGN="LEFT"/>connect_signals()<br ALIGN="LEFT"/>delete(key)<br ALIGN="LEFT"/>delete_cache(key)<br ALIGN="LEFT"/>delete_store(key)<br ALIGN="LEFT"/>flush_local_cache()<br ALIGN="LEFT"/>get(key, silent)<br ALIGN="LEFT"/>get_cache(key, silent)<br ALIGN="LEFT"/>get_local_cache(key, force_grace)<br ALIGN="LEFT"/>get_store(key, silent)<br ALIGN="LEFT"/>make_key(name, default, type, flags, ttl, grace)<br ALIGN="LEFT"/>maybe_clean_local_cache()<br ALIGN="LEFT"/>model()<br ALIGN="LEFT"/>set(key, value)<br ALIGN="LEFT"/>set_cache(key, value)<br ALIGN="LEFT"/>set_store(key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organization.Organization" [color="black", fontcolor="black", label=<{Organization|date_added<br ALIGN="LEFT"/>default_role<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>members<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>get_audit_log_data()<br ALIGN="LEFT"/>get_default()<br ALIGN="LEFT"/>get_default_owner()<br ALIGN="LEFT"/>has_access(user, access)<br ALIGN="LEFT"/>has_single_owner()<br ALIGN="LEFT"/>is_default()<br ALIGN="LEFT"/>merge_to(to_org)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organizationaccessrequest.OrganizationAccessRequest" [color="black", fontcolor="black", label=<{OrganizationAccessRequest|member<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>|send_approved_email()<br ALIGN="LEFT"/>send_request_email()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_access_request_details.OrganizationAccessRequestDetailsEndpoint" [color="black", fontcolor="black", label=<{OrganizationAccessRequestDetailsEndpoint|permission_classes : list<br ALIGN="LEFT"/>|put(request, organization, request_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_activity.OrganizationActivityEndpoint" [color="black", fontcolor="black", label=<{OrganizationActivityEndpoint|<br ALIGN="LEFT"/>|get(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.activity.OrganizationActivitySerializer" [color="black", fontcolor="black", label=<{OrganizationActivitySerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.OrganizationAdmin" [color="black", fontcolor="black", label=<{OrganizationAdmin|fields : tuple<br ALIGN="LEFT"/>inlines : tuple<br ALIGN="LEFT"/>list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.admin.OrganizationApiKeyInline" [color="black", fontcolor="black", label=<{OrganizationApiKeyInline|extra : int<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.organization_api_key_settings.OrganizationApiKeySettingsView" [color="black", fontcolor="black", label=<{OrganizationApiKeySettingsView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, key_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_api_keys.OrganizationApiKeysView" [color="black", fontcolor="black", label=<{OrganizationApiKeysView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_audit_log.OrganizationAuditLogView" [color="black", fontcolor="black", label=<{OrganizationAuditLogView|required_scope : str<br ALIGN="LEFT"/>|get(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_auth_settings.OrganizationAuthSettingsView" [color="black", fontcolor="black", label=<{OrganizationAuthSettingsView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization)<br ALIGN="LEFT"/>handle_existing_provider(request, organization, auth_provider)<br ALIGN="LEFT"/>handle_provider_setup(request, organization, provider_key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_details.OrganizationDetailsEndpoint" [color="black", fontcolor="black", label=<{OrganizationDetailsEndpoint|doc_section : ORGANIZATIONS<br ALIGN="LEFT"/>|delete(request, organization)<br ALIGN="LEFT"/>get(request, organization)<br ALIGN="LEFT"/>put(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.organization.OrganizationEndpoint" [color="black", fontcolor="black", label=<{OrganizationEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|convert_args(request, organization_slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.base.OrganizationFeature" [color="black", fontcolor="black", label=<{OrganizationFeature|organization<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_index.OrganizationIndexEndpoint" [color="black", fontcolor="black", label=<{OrganizationIndexEndpoint|doc_section : ORGANIZATIONS<br ALIGN="LEFT"/>permission_classes : tuple<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>post(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.organizationissues.OrganizationIssuesEndpoint" [color="black", fontcolor="black", label=<{OrganizationIssuesEndpoint|<br ALIGN="LEFT"/>|get(request, organization, member)<br ALIGN="LEFT"/>get_queryset(request, organization, member)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organization.OrganizationManager" [color="black", fontcolor="black", label=<{OrganizationManager|<br ALIGN="LEFT"/>|get_for_user(user, scope)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organizationmember.OrganizationMember" [color="black", fontcolor="black", label=<{OrganizationMember|counter<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>flags<br ALIGN="LEFT"/>has_global_access<br ALIGN="LEFT"/>is_pending<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>role<br ALIGN="LEFT"/>teams<br ALIGN="LEFT"/>token<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|can_manage_member(member)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>get_audit_log_data()<br ALIGN="LEFT"/>get_display_name()<br ALIGN="LEFT"/>get_email()<br ALIGN="LEFT"/>get_scopes()<br ALIGN="LEFT"/>get_teams()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>send_invite_email()<br ALIGN="LEFT"/>send_sso_link_email()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_details.OrganizationMemberDetailsEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberDetailsEndpoint|permission_classes : list<br ALIGN="LEFT"/>|delete(request, organization, member_id)<br ALIGN="LEFT"/>put(request, organization, member_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.organizationmember.OrganizationMemberEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberEndpoint|<br ALIGN="LEFT"/>|convert_args(request, organization_slug, member_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_index.OrganizationMemberIndexEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberIndexEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.OrganizationMemberInline" [color="black", fontcolor="black", label=<{OrganizationMemberInline|extra : int<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_issues_assigned.OrganizationMemberIssuesAssignedEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberIssuesAssignedEndpoint|<br ALIGN="LEFT"/>|get_queryset(request, organization, member, project_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_issues_bookmarked.OrganizationMemberIssuesBookmarkedEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberIssuesBookmarkedEndpoint|<br ALIGN="LEFT"/>|get_queryset(request, organization, member, project_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_issues_viewed.OrganizationMemberIssuesViewedEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberIssuesViewedEndpoint|<br ALIGN="LEFT"/>|get_queryset(request, organization, member, project_list)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_details.OrganizationMemberSerializer" [color="black", fontcolor="black", label=<{OrganizationMemberSerializer|reinvite<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.organization_member.OrganizationMemberSerializer" [color="black", fontcolor="black", label=<{OrganizationMemberSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_member_settings.OrganizationMemberSettingsView" [color="black", fontcolor="black", label=<{OrganizationMemberSettingsView|<br ALIGN="LEFT"/>|get_form(request, member)<br ALIGN="LEFT"/>handle(request, organization, member_id)<br ALIGN="LEFT"/>resend_invite(request, organization, member)<br ALIGN="LEFT"/>view_member(request, organization, member)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organizationmember.OrganizationMemberTeam" [color="black", fontcolor="black", label=<{OrganizationMemberTeam|id<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>organizationmember<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>|get_audit_log_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_team_details.OrganizationMemberTeamDetailsEndpoint" [color="black", fontcolor="black", label=<{OrganizationMemberTeamDetailsEndpoint|permission_classes : list<br ALIGN="LEFT"/>|delete(request, organization, member_id, team_slug)<br ALIGN="LEFT"/>post(request, organization, member_id, team_slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_team_details.OrganizationMemberTeamSerializer" [color="black", fontcolor="black", label=<{OrganizationMemberTeamSerializer|isActive<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.organization_members.OrganizationMembersView" [color="black", fontcolor="black", label=<{OrganizationMembersView|<br ALIGN="LEFT"/>|handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.base.OrganizationMixin" [color="black", fontcolor="black", label=<{OrganizationMixin|<br ALIGN="LEFT"/>|get_active_organization(request, organization_slug)<br ALIGN="LEFT"/>get_active_project(request, organization, project_slug)<br ALIGN="LEFT"/>get_active_team(request, organization, team_slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organizationoption.OrganizationOption" [color="black", fontcolor="black", label=<{OrganizationOption|key<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.organizationoption.OrganizationOptionManager" [color="black", fontcolor="black", label=<{OrganizationOptionManager|<br ALIGN="LEFT"/>|clear_local_cache()<br ALIGN="LEFT"/>contribute_to_class(model, name)<br ALIGN="LEFT"/>get_all_values(organization)<br ALIGN="LEFT"/>get_value(organization, key, default)<br ALIGN="LEFT"/>get_value_bulk(instances, key)<br ALIGN="LEFT"/>post_delete(instance)<br ALIGN="LEFT"/>post_save(instance)<br ALIGN="LEFT"/>reload_cache(organization_id)<br ALIGN="LEFT"/>set_value(organization, key, value)<br ALIGN="LEFT"/>unset_value(organization, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.organization.OrganizationPermission" [color="black", fontcolor="black", label=<{OrganizationPermission|scope_map : dict<br ALIGN="LEFT"/>|has_object_permission(request, view, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.OrganizationProjectInline" [color="black", fontcolor="black", label=<{OrganizationProjectInline|extra : int<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_projects.OrganizationProjectsEndpoint" [color="black", fontcolor="black", label=<{OrganizationProjectsEndpoint|doc_section : ORGANIZATIONS<br ALIGN="LEFT"/>|get(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_details.OrganizationSerializer" [color="black", fontcolor="black", label=<{OrganizationSerializer|projectRateLimit<br ALIGN="LEFT"/>|save()<br ALIGN="LEFT"/>validate_slug(attrs, source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_index.OrganizationSerializer" [color="black", fontcolor="black", label=<{OrganizationSerializer|name<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.organization.OrganizationSerializer" [color="black", fontcolor="black", label=<{OrganizationSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.organization_settings.OrganizationSettingsForm" [color="black", fontcolor="black", label=<{OrganizationSettingsForm|allow_joinleave<br ALIGN="LEFT"/>default_role<br ALIGN="LEFT"/>enhanced_privacy<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.organization_settings.OrganizationSettingsView" [color="black", fontcolor="black", label=<{OrganizationSettingsView|required_scope : str<br ALIGN="LEFT"/>|get_form(request, organization)<br ALIGN="LEFT"/>handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_stats.OrganizationStatsEndpoint" [color="black", fontcolor="black", label=<{OrganizationStatsEndpoint|doc_section : ORGANIZATIONS<br ALIGN="LEFT"/>|get(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.organization.OrganizationStatus" [color="black", fontcolor="black", label=<{OrganizationStatus|DELETION_IN_PROGRESS : int<br ALIGN="LEFT"/>PENDING_DELETION : int<br ALIGN="LEFT"/>VISIBLE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.admin.OrganizationTeamInline" [color="black", fontcolor="black", label=<{OrganizationTeamInline|extra : int<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_teams.OrganizationTeamsEndpoint" [color="black", fontcolor="black", label=<{OrganizationTeamsEndpoint|doc_section : TEAMS<br ALIGN="LEFT"/>|get(request, organization)<br ALIGN="LEFT"/>post(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.base.OrganizationView" [color="black", fontcolor="black", label=<{OrganizationView|required_scope : NoneType<br ALIGN="LEFT"/>valid_sso_required : bool<br ALIGN="LEFT"/>|convert_args(request, organization_slug)<br ALIGN="LEFT"/>get_access(request, organization)<br ALIGN="LEFT"/>get_context_data(request, organization)<br ALIGN="LEFT"/>handle_permission_required(request, organization)<br ALIGN="LEFT"/>has_permission(request, organization)<br ALIGN="LEFT"/>is_auth_required(request, organization_slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.OriginsField" [color="black", fontcolor="black", label=<{OriginsField|WHITELIST_ORIGINS : str<br ALIGN="LEFT"/>widget<br ALIGN="LEFT"/>|clean(value)<br ALIGN="LEFT"/>is_valid_origin(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_useragents.models.OsPlugin" [color="black", fontcolor="black", label=<{OsPlugin|slug : str<br ALIGN="LEFT"/>tag : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|get_tag_from_ua(ua)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.paginator.Paginator" [color="black", fontcolor="black", label=<{Paginator|<br ALIGN="LEFT"/>|get_item_key(item)<br ALIGN="LEFT"/>value_from_cursor(cursor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.utils.patch_context.PatchContext" [color="black", fontcolor="black", label=<{PatchContext|attr<br ALIGN="LEFT"/>callback<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>target<br ALIGN="LEFT"/>|patch()<br ALIGN="LEFT"/>unpatch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.cases.PermissionTestCase" [color="black", fontcolor="black", label=<{PermissionTestCase|organization<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>|assert_can_access(user, path, method)<br ALIGN="LEFT"/>assert_cannot_access(user, path, method)<br ALIGN="LEFT"/>assert_member_can_access(path)<br ALIGN="LEFT"/>assert_member_cannot_access(path)<br ALIGN="LEFT"/>assert_non_member_cannot_access(path)<br ALIGN="LEFT"/>assert_owner_can_access(path)<br ALIGN="LEFT"/>assert_owner_cannot_access(path)<br ALIGN="LEFT"/>assert_team_admin_can_access(path)<br ALIGN="LEFT"/>assert_team_admin_cannot_access(path)<br ALIGN="LEFT"/>assert_team_owner_can_access(path)<br ALIGN="LEFT"/>assert_teamless_admin_can_access(path)<br ALIGN="LEFT"/>assert_teamless_admin_cannot_access(path)<br ALIGN="LEFT"/>assert_teamless_member_can_access(path)<br ALIGN="LEFT"/>assert_teamless_member_cannot_access(path)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.base.view.PluggableViewMixin" [color="black", fontcolor="black", label=<{PluggableViewMixin|<br ALIGN="LEFT"/>|redirect(url)<br ALIGN="LEFT"/>render(template, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.base.v1.Plugin" [color="black", fontcolor="black", label=<{Plugin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.v2.Plugin2" [color="black", fontcolor="black", label=<{Plugin2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.manager.PluginManager" [color="black", fontcolor="black", label=<{PluginManager|<br ALIGN="LEFT"/>|all(version)<br ALIGN="LEFT"/>configurable_for_project(project, version)<br ALIGN="LEFT"/>first(func_name)<br ALIGN="LEFT"/>for_project(project, version)<br ALIGN="LEFT"/>for_site(version)<br ALIGN="LEFT"/>get(slug)<br ALIGN="LEFT"/>register(cls)<br ALIGN="LEFT"/>unregister(cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.base.v1.PluginMount" [color="black", fontcolor="black", label=<{PluginMount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.v2.PluginMount" [color="black", fontcolor="black", label=<{PluginMount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.testutils.cases.PluginTestCase" [color="black", fontcolor="black", label=<{PluginTestCase|plugin : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.status_checks.base.Problem" [color="black", fontcolor="black", label=<{Problem|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.middleware.profiler.ProfileMiddleware" [color="black", fontcolor="black", label=<{ProfileMiddleware|prof : Profile<br ALIGN="LEFT"/>|can(request)<br ALIGN="LEFT"/>get_group(filename)<br ALIGN="LEFT"/>get_summary(results_dict, total)<br ALIGN="LEFT"/>normalize_paths(stats)<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>process_view(request, callback, callback_args, callback_kwargs)<br ALIGN="LEFT"/>summary_for_files(stats_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.debug.ProfileMiddleware" [color="black", fontcolor="black", label=<{ProfileMiddleware|prof : Profile<br ALIGN="LEFT"/>|can(request)<br ALIGN="LEFT"/>get_group(filename)<br ALIGN="LEFT"/>get_summary(results_dict, total)<br ALIGN="LEFT"/>normalize_paths(stats)<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>process_view(request, callback, callback_args, callback_kwargs)<br ALIGN="LEFT"/>summary_for_files(stats_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.project.Project" [color="black", fontcolor="black", label=<{Project|date_added<br ALIGN="LEFT"/>first_event<br ALIGN="LEFT"/>member_set<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>public<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>team<br ALIGN="LEFT"/>|delete_option()<br ALIGN="LEFT"/>get_absolute_url()<br ALIGN="LEFT"/>get_audit_log_data()<br ALIGN="LEFT"/>get_full_name()<br ALIGN="LEFT"/>get_option()<br ALIGN="LEFT"/>get_tags(with_internal)<br ALIGN="LEFT"/>has_access(user, access)<br ALIGN="LEFT"/>is_internal_project()<br ALIGN="LEFT"/>merge_to(project)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>update_option()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.ProjectAdmin" [color="black", fontcolor="black", label=<{ProjectAdmin|list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_details.ProjectDetailsEndpoint" [color="black", fontcolor="black", label=<{ProjectDetailsEndpoint|doc_section : PROJECTS<br ALIGN="LEFT"/>|delete(request, project)<br ALIGN="LEFT"/>get(request, project)<br ALIGN="LEFT"/>put(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_docs.ProjectDocsEndpoint" [color="black", fontcolor="black", label=<{ProjectDocsEndpoint|<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_docs_platform.ProjectDocsPlatformEndpoint" [color="black", fontcolor="black", label=<{ProjectDocsPlatformEndpoint|<br ALIGN="LEFT"/>|get(request, project, platform)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.accounts.ProjectEmailOptionsForm" [color="black", fontcolor="black", label=<{ProjectEmailOptionsForm|alert<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>|save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.project.ProjectEndpoint" [color="black", fontcolor="black", label=<{ProjectEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|convert_args(request, organization_slug, project_slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_event_details.ProjectEventDetailsEndpoint" [color="black", fontcolor="black", label=<{ProjectEventDetailsEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, project, event_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.project.ProjectEventPermission" [color="black", fontcolor="black", label=<{ProjectEventPermission|scope_map : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_events.ProjectEventsEndpoint" [color="black", fontcolor="black", label=<{ProjectEventsEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.base.ProjectFeature" [color="black", fontcolor="black", label=<{ProjectFeature|project<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_group_index.ProjectGroupIndexEndpoint" [color="black", fontcolor="black", label=<{ProjectGroupIndexEndpoint|doc_section : EVENTS<br ALIGN="LEFT"/>permission_classes : tuple<br ALIGN="LEFT"/>|delete(request, project)<br ALIGN="LEFT"/>get(request, project)<br ALIGN="LEFT"/>put(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_group_stats.ProjectGroupStatsEndpoint" [color="black", fontcolor="black", label=<{ProjectGroupStatsEndpoint|<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_issue_tracking.ProjectIssueTrackingView" [color="black", fontcolor="black", label=<{ProjectIssueTrackingView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.projectkey.ProjectKey" [color="black", fontcolor="black", label=<{ProjectKey|date_added<br ALIGN="LEFT"/>dsn_private<br ALIGN="LEFT"/>dsn_public<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>public_key<br ALIGN="LEFT"/>roles<br ALIGN="LEFT"/>scopes : tuple<br ALIGN="LEFT"/>secret_key<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|from_dsn(dsn)<br ALIGN="LEFT"/>generate_api_key()<br ALIGN="LEFT"/>get_allowed_origins()<br ALIGN="LEFT"/>get_audit_log_data()<br ALIGN="LEFT"/>get_default(project)<br ALIGN="LEFT"/>get_dsn(domain, secure, public)<br ALIGN="LEFT"/>get_scopes()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.authentication.ProjectKeyAuthentication" [color="black", fontcolor="black", label=<{ProjectKeyAuthentication|<br ALIGN="LEFT"/>|authenticate_credentials(userid, password)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_key_details.ProjectKeyDetailsEndpoint" [color="black", fontcolor="black", label=<{ProjectKeyDetailsEndpoint|doc_section : PROJECTS<br ALIGN="LEFT"/>|delete(request, project, key_id)<br ALIGN="LEFT"/>put(request, project, key_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.project_key.ProjectKeySerializer" [color="black", fontcolor="black", label=<{ProjectKeySerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.projectkey.ProjectKeyStatus" [color="black", fontcolor="black", label=<{ProjectKeyStatus|ACTIVE : int<br ALIGN="LEFT"/>INACTIVE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_keys.ProjectKeysEndpoint" [color="black", fontcolor="black", label=<{ProjectKeysEndpoint|doc_section : PROJECTS<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>post(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_keys.ProjectKeysView" [color="black", fontcolor="black", label=<{ProjectKeysView|<br ALIGN="LEFT"/>|get(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.project.ProjectManager" [color="black", fontcolor="black", label=<{ProjectManager|<br ALIGN="LEFT"/>|get_for_user(team, user, _skip_team_check)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_member_index.ProjectMemberIndexEndpoint" [color="black", fontcolor="black", label=<{ProjectMemberIndexEndpoint|<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_notifications.ProjectNotificationsView" [color="black", fontcolor="black", label=<{ProjectNotificationsView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.projectoption.ProjectOption" [color="black", fontcolor="black", label=<{ProjectOption|key<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.projectoption.ProjectOptionManager" [color="black", fontcolor="black", label=<{ProjectOptionManager|<br ALIGN="LEFT"/>|clear_local_cache()<br ALIGN="LEFT"/>contribute_to_class(model, name)<br ALIGN="LEFT"/>get_all_values(project)<br ALIGN="LEFT"/>get_value(project, key, default)<br ALIGN="LEFT"/>get_value_bulk(instances, key)<br ALIGN="LEFT"/>post_delete(instance)<br ALIGN="LEFT"/>post_save(instance)<br ALIGN="LEFT"/>reload_cache(project_id)<br ALIGN="LEFT"/>set_value(project, key, value)<br ALIGN="LEFT"/>unset_value(project, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.project.ProjectPermission" [color="black", fontcolor="black", label=<{ProjectPermission|scope_map : dict<br ALIGN="LEFT"/>|has_object_permission(request, view, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_plugin_configure.ProjectPluginConfigureView" [color="black", fontcolor="black", label=<{ProjectPluginConfigureView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project, slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_plugin_disable.ProjectPluginDisableView" [color="black", fontcolor="black", label=<{ProjectPluginDisableView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project, slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_plugin_enable.ProjectPluginEnableView" [color="black", fontcolor="black", label=<{ProjectPluginEnableView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project, slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.features.base.ProjectPluginFeature" [color="black", fontcolor="black", label=<{ProjectPluginFeature|plugin<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.project_plugin_reset.ProjectPluginResetView" [color="black", fontcolor="black", label=<{ProjectPluginResetView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project, slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_plugins.ProjectPluginsView" [color="black", fontcolor="black", label=<{ProjectPluginsView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.projects.ProjectQuotasForm" [color="black", fontcolor="black", label=<{ProjectQuotasForm|per_minute<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|clean_per_minute()<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_quotas.ProjectQuotasView" [color="black", fontcolor="black", label=<{ProjectQuotasView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_release_tracking.ProjectReleaseTrackingView" [color="black", fontcolor="black", label=<{ProjectReleaseTrackingView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_releases.ProjectReleasesEndpoint" [color="black", fontcolor="black", label=<{ProjectReleasesEndpoint|doc_section : RELEASES<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>post(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_rule_details.ProjectRuleDetailsEndpoint" [color="black", fontcolor="black", label=<{ProjectRuleDetailsEndpoint|<br ALIGN="LEFT"/>|get(request, project, rule_id)<br ALIGN="LEFT"/>put(request, project, rule_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_rule_edit.ProjectRuleEditView" [color="black", fontcolor="black", label=<{ProjectRuleEditView|required_scope : str<br ALIGN="LEFT"/>|get(request, organization, team, project, rule_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_rule_remove.ProjectRuleRemoveView" [color="black", fontcolor="black", label=<{ProjectRuleRemoveView|required_scope : str<br ALIGN="LEFT"/>|post(request, organization, team, project, rule_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_rules.ProjectRulesEndpoint" [color="black", fontcolor="black", label=<{ProjectRulesEndpoint|<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>post(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_rules.ProjectRulesView" [color="black", fontcolor="black", label=<{ProjectRulesView|required_scope : str<br ALIGN="LEFT"/>|get(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_search_details.ProjectSearchDetailsEndpoint" [color="black", fontcolor="black", label=<{ProjectSearchDetailsEndpoint|<br ALIGN="LEFT"/>|delete(request, project, search_id)<br ALIGN="LEFT"/>get(request, project, search_id)<br ALIGN="LEFT"/>put(request, project, search_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_searches.ProjectSearchesEndpoint" [color="black", fontcolor="black", label=<{ProjectSearchesEndpoint|<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>post(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_details.ProjectSerializer" [color="black", fontcolor="black", label=<{ProjectSerializer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.team_project_index.ProjectSerializer" [color="black", fontcolor="black", label=<{ProjectSerializer|name<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.project.ProjectSerializer" [color="black", fontcolor="black", label=<{ProjectSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_settings.ProjectSettingsView" [color="black", fontcolor="black", label=<{ProjectSettingsView|required_scope : str<br ALIGN="LEFT"/>|get_form(request, project)<br ALIGN="LEFT"/>handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_stats.ProjectStatsEndpoint" [color="black", fontcolor="black", label=<{ProjectStatsEndpoint|doc_section : PROJECTS<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.project.ProjectStatus" [color="black", fontcolor="black", label=<{ProjectStatus|DELETION_IN_PROGRESS : int<br ALIGN="LEFT"/>HIDDEN : int<br ALIGN="LEFT"/>PENDING_DELETION : int<br ALIGN="LEFT"/>VISIBLE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_tagkey_details.ProjectTagKeyDetailsEndpoint" [color="black", fontcolor="black", label=<{ProjectTagKeyDetailsEndpoint|<br ALIGN="LEFT"/>|delete(request, project, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_tagkey_values.ProjectTagKeyValuesEndpoint" [color="black", fontcolor="black", label=<{ProjectTagKeyValuesEndpoint|doc_section : PROJECTS<br ALIGN="LEFT"/>|get(request, project, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_tags.ProjectTagsEndpoint" [color="black", fontcolor="black", label=<{ProjectTagsEndpoint|<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.project_tags.ProjectTagsView" [color="black", fontcolor="black", label=<{ProjectTagsView|<br ALIGN="LEFT"/>|get(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_users.ProjectUsersEndpoint" [color="black", fontcolor="black", label=<{ProjectUsersEndpoint|doc_section : PROJECTS<br ALIGN="LEFT"/>|get(request, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.base.ProjectView" [color="black", fontcolor="black", label=<{ProjectView|<br ALIGN="LEFT"/>|convert_args(request, organization_slug, project_slug)<br ALIGN="LEFT"/>get_context_data(request, organization, team, project)<br ALIGN="LEFT"/>has_permission(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.provider.Provider" [color="black", fontcolor="black", label=<{Provider|config : dict<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|<I>build_config</I>(state)<br ALIGN="LEFT"/><I>build_identity</I>(state)<br ALIGN="LEFT"/><I>get_auth_pipeline</I>()<br ALIGN="LEFT"/>get_configure_view()<br ALIGN="LEFT"/>get_setup_pipeline()<br ALIGN="LEFT"/><I>refresh_identity</I>(auth_identity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.manager.ProviderManager" [color="black", fontcolor="black", label=<{ProviderManager|<br ALIGN="LEFT"/>|exists(key)<br ALIGN="LEFT"/>get(key)<br ALIGN="LEFT"/>register(key, cls)<br ALIGN="LEFT"/>unregister(key, cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.auth.exceptions.ProviderNotRegistered" [color="black", fontcolor="red", label=<{ProviderNotRegistered|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.interfaces.query.Query" [color="black", fontcolor="black", label=<{Query|<br ALIGN="LEFT"/>|get_hash()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.exceptions.QueryError" [color="black", fontcolor="red", label=<{QueryError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.authentication.QuietBasicAuthentication" [color="black", fontcolor="black", label=<{QuietBasicAuthentication|<br ALIGN="LEFT"/>|authenticate_header(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.quotas.base.Quota" [color="black", fontcolor="black", label=<{Quota|<br ALIGN="LEFT"/>|get_organization_quota(organization)<br ALIGN="LEFT"/>get_project_quota(project)<br ALIGN="LEFT"/>get_time_remaining()<br ALIGN="LEFT"/>is_rate_limited(project)<br ALIGN="LEFT"/>translate_quota(quota, parent_quota)<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.RangeField" [color="black", fontcolor="black", label=<{RangeField|step_value<br ALIGN="LEFT"/>widget<br ALIGN="LEFT"/>|widget_attrs(widget)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.RangeInput" [color="black", fontcolor="black", label=<{RangeInput|input_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.query.RangeQuerySetWrapper" [color="black", fontcolor="black", label=<{RangeQuerySetWrapper|callbacks : tuple<br ALIGN="LEFT"/>desc<br ALIGN="LEFT"/>limit : NoneType<br ALIGN="LEFT"/>min_value : NoneType<br ALIGN="LEFT"/>order_by : str<br ALIGN="LEFT"/>queryset<br ALIGN="LEFT"/>step<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.query.RangeQuerySetWrapperWithProgressBar" [color="black", fontcolor="black", label=<{RangeQuerySetWrapperWithProgressBar|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.ratelimits.base.RateLimiter" [color="black", fontcolor="black", label=<{RateLimiter|<br ALIGN="LEFT"/>|is_limited(project, key, limit)<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.react_page.ReactMixin" [color="black", fontcolor="black", label=<{ReactMixin|<br ALIGN="LEFT"/>|handle_react(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.react_page.ReactPageView" [color="black", fontcolor="black", label=<{ReactPageView|<br ALIGN="LEFT"/>|handle(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.ReadOnlyTextField" [color="black", fontcolor="black", label=<{ReadOnlyTextField|widget<br ALIGN="LEFT"/>|bound_data(data, initial)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.ReadOnlyTextWidget" [color="black", fontcolor="black", label=<{ReadOnlyTextWidget|<br ALIGN="LEFT"/>|render(name, value, attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.digests.Record" [color="black", fontcolor="black", label=<{Record|datetime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.RecoverPasswordForm" [color="black", fontcolor="black", label=<{RecoverPasswordForm|user<br ALIGN="LEFT"/>|clean_user()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.digests.backends.redis.RedisBackend" [color="black", fontcolor="black", label=<{RedisBackend|cluster<br ALIGN="LEFT"/>namespace<br ALIGN="LEFT"/>ttl<br ALIGN="LEFT"/>|add(key, record, increment_delay, maximum_delay)<br ALIGN="LEFT"/>delete(key)<br ALIGN="LEFT"/>digest(key, minimum_delay)<br ALIGN="LEFT"/>maintenance(deadline, chunk)<br ALIGN="LEFT"/>schedule(deadline, chunk)<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.buffer.redis.RedisBuffer" [color="black", fontcolor="black", label=<{RedisBuffer|cluster<br ALIGN="LEFT"/>key_expire : int<br ALIGN="LEFT"/>pending_key : str<br ALIGN="LEFT"/>|incr(model, columns, filters, extra)<br ALIGN="LEFT"/>process(key)<br ALIGN="LEFT"/>process_pending()<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.cache.redis.RedisCache" [color="black", fontcolor="black", label=<{RedisCache|client<br ALIGN="LEFT"/>cluster<br ALIGN="LEFT"/>key_expire : int<br ALIGN="LEFT"/>|delete(key, version)<br ALIGN="LEFT"/>get(key, version)<br ALIGN="LEFT"/>set(key, value, timeout, version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.panels.redis.RedisPanel" [color="black", fontcolor="black", label=<{RedisPanel|content<br ALIGN="LEFT"/>nav_title<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>|get_context(collector)<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.panels.redis.RedisPipelineWrapper" [color="black", fontcolor="black", label=<{RedisPipelineWrapper|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.quotas.redis.RedisQuota" [color="black", fontcolor="black", label=<{RedisQuota|cluster<br ALIGN="LEFT"/>grace : int<br ALIGN="LEFT"/>namespace : str<br ALIGN="LEFT"/>|get_quotas(project)<br ALIGN="LEFT"/>get_redis_key(key, timestamp, interval)<br ALIGN="LEFT"/>is_rate_limited(project)<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.ratelimits.redis.RedisRateLimiter" [color="black", fontcolor="black", label=<{RedisRateLimiter|cluster<br ALIGN="LEFT"/>ttl : int<br ALIGN="LEFT"/>|is_limited(project, key, limit)<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.tsdb.redis.RedisTSDB" [color="black", fontcolor="black", label=<{RedisTSDB|cluster<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>vnodes : int<br ALIGN="LEFT"/>|get_distinct_counts_series(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_distinct_counts_totals(model, keys, start, end, rollup)<br ALIGN="LEFT"/>get_model_key(key)<br ALIGN="LEFT"/>get_range(model, keys, start, end, rollup)<br ALIGN="LEFT"/>incr(model, key, timestamp, count)<br ALIGN="LEFT"/>incr_multi(items, timestamp, count)<br ALIGN="LEFT"/>make_distinct_counter_key(model, rollup, timestamp, key)<br ALIGN="LEFT"/>make_key(model, epoch, model_key)<br ALIGN="LEFT"/>record(model, key, values, timestamp)<br ALIGN="LEFT"/>record_multi(items, timestamp)<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.panels.redis.RedisWrapper" [color="black", fontcolor="black", label=<{RedisWrapper|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.accounts.RegistrationForm" [color="black", fontcolor="black", label=<{RegistrationForm|password<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|clean_username()<br ALIGN="LEFT"/>save(commit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.regression_event.RegressionEventCondition" [color="black", fontcolor="black", label=<{RegressionEventCondition|label : str<br ALIGN="LEFT"/>|passes(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_details.RelaxedMemberPermission" [color="black", fontcolor="black", label=<{RelaxedMemberPermission|scope_map : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_member_team_details.RelaxedOrganizationPermission" [color="black", fontcolor="black", label=<{RelaxedOrganizationPermission|scope_map : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.release.Release" [color="black", fontcolor="black", label=<{Release|data<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>date_released<br ALIGN="LEFT"/>date_started<br ALIGN="LEFT"/>new_groups<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>short_version<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|get(project, version)<br ALIGN="LEFT"/>get_cache_key(project_id, version)<br ALIGN="LEFT"/>get_or_create(project, version, date_added)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.release_details.ReleaseDetailsEndpoint" [color="black", fontcolor="black", label=<{ReleaseDetailsEndpoint|doc_section : RELEASES<br ALIGN="LEFT"/>|delete(request, project, version)<br ALIGN="LEFT"/>get(request, project, version)<br ALIGN="LEFT"/>put(request, project, version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.releasefile.ReleaseFile" [color="black", fontcolor="black", label=<{ReleaseFile|file<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>release<br ALIGN="LEFT"/>|get_ident(name)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.release_file_details.ReleaseFileDetailsEndpoint" [color="black", fontcolor="black", label=<{ReleaseFileDetailsEndpoint|doc_section : RELEASES<br ALIGN="LEFT"/>|delete(request, project, version, file_id)<br ALIGN="LEFT"/>get(request, project, version, file_id)<br ALIGN="LEFT"/>put(request, project, version, file_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.release_file_details.ReleaseFileSerializer" [color="black", fontcolor="black", label=<{ReleaseFileSerializer|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.release_file.ReleaseFileSerializer" [color="black", fontcolor="black", label=<{ReleaseFileSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.release_files.ReleaseFilesEndpoint" [color="black", fontcolor="black", label=<{ReleaseFilesEndpoint|content_negotiation_class<br ALIGN="LEFT"/>doc_section : RELEASES<br ALIGN="LEFT"/>|get(request, project, version)<br ALIGN="LEFT"/>post(request, project, version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.interfaces.releasehook.ReleaseHook" [color="black", fontcolor="black", label=<{ReleaseHook|project<br ALIGN="LEFT"/>|finish_release(version)<br ALIGN="LEFT"/><I>handle</I>(request)<br ALIGN="LEFT"/>start_release(version)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_releases.ReleaseSerializer" [color="black", fontcolor="black", label=<{ReleaseSerializer|dateReleased<br ALIGN="LEFT"/>dateStarted<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.release_details.ReleaseSerializer" [color="black", fontcolor="black", label=<{ReleaseSerializer|dateReleased<br ALIGN="LEFT"/>dateStarted<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.release.ReleaseSerializer" [color="black", fontcolor="black", label=<{ReleaseSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.bases.releasetracking.ReleaseTrackingPlugin" [color="black", fontcolor="black", label=<{ReleaseTrackingPlugin|<br ALIGN="LEFT"/>|<I>get_release_doc_html</I>(hook_url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.release_webhook.ReleaseWebhookView" [color="black", fontcolor="black", label=<{ReleaseWebhookView|<br ALIGN="LEFT"/>|dispatch()<br ALIGN="LEFT"/>post(request, plugin_id, project_id, signature)<br ALIGN="LEFT"/>verify(plugin_id, project_id, token, signature)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.remove_account.RemoveAccountForm" [color="black", fontcolor="black", label=<{RemoveAccountForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.remove_account.RemoveAccountView" [color="black", fontcolor="black", label=<{RemoveAccountView|sudo_required : bool<br ALIGN="LEFT"/>|get_form(request)<br ALIGN="LEFT"/>handle(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.remove_organization.RemoveOrganizationForm" [color="black", fontcolor="black", label=<{RemoveOrganizationForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.remove_organization.RemoveOrganizationView" [color="black", fontcolor="black", label=<{RemoveOrganizationView|required_scope : str<br ALIGN="LEFT"/>sudo_required : bool<br ALIGN="LEFT"/>|get_form(request, organization)<br ALIGN="LEFT"/>handle(request, organization)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.remove_project.RemoveProjectForm" [color="black", fontcolor="black", label=<{RemoveProjectForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.remove_project_key.RemoveProjectKeyView" [color="black", fontcolor="black", label=<{RemoveProjectKeyView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, team, project, key_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.remove_project.RemoveProjectView" [color="black", fontcolor="black", label=<{RemoveProjectView|required_scope : str<br ALIGN="LEFT"/>sudo_required : bool<br ALIGN="LEFT"/>|get_form(request)<br ALIGN="LEFT"/>handle(request, organization, team, project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.remove_team.RemoveTeamForm" [color="black", fontcolor="black", label=<{RemoveTeamForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.remove_team.RemoveTeamView" [color="black", fontcolor="black", label=<{RemoveTeamView|required_scope : str<br ALIGN="LEFT"/>sudo_required : bool<br ALIGN="LEFT"/>|get_form(request)<br ALIGN="LEFT"/>handle(request, organization, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.RemoveUserForm" [color="black", fontcolor="black", label=<{RemoveUserForm|removal_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.replay_event.ReplayEventView" [color="black", fontcolor="black", label=<{ReplayEventView|required_scope : str<br ALIGN="LEFT"/>|handle(request, organization, project, team, group_id, event_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.ReplayForm" [color="black", fontcolor="black", label=<{ReplayForm|data<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|clean_headers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.replays.Replayer" [color="black", fontcolor="black", label=<{Replayer|data : NoneType<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>url<br ALIGN="LEFT"/>|replay()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.stats.RequestTimingMiddleware" [color="black", fontcolor="black", label=<{RequestTimingMiddleware|allowed_methods : tuple<br ALIGN="LEFT"/>allowed_paths : tuple<br ALIGN="LEFT"/>|process_exception(request, exception)<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>process_view(request, view_func, view_args, view_kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.exceptions.ResourceDoesNotExist" [color="black", fontcolor="black", label=<{ResourceDoesNotExist|status_code : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.base.response.Response" [color="black", fontcolor="black", label=<{Response|context : NoneType<br ALIGN="LEFT"/>template<br ALIGN="LEFT"/>|render(request, context)<br ALIGN="LEFT"/>respond(request, context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.stats.ResponseCodeMiddleware" [color="black", fontcolor="black", label=<{ResponseCodeMiddleware|<br ALIGN="LEFT"/>|process_exception(request, exception)<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.django_admin.RestrictiveAdminSite" [color="black", fontcolor="black", label=<{RestrictiveAdminSite|<br ALIGN="LEFT"/>|has_permission(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.riak.client.RiakClient" [color="black", fontcolor="black", label=<{RiakClient|manager<br ALIGN="LEFT"/>queue : Queue<br ALIGN="LEFT"/>|build_url(bucket, key, qs)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>delete(bucket, key, headers)<br ALIGN="LEFT"/>get(bucket, key, headers)<br ALIGN="LEFT"/>multiget(bucket, keys, headers)<br ALIGN="LEFT"/>put(bucket, key, data, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.riak.backend.RiakNodeStorage" [color="black", fontcolor="black", label=<{RiakNodeStorage|bucket : str<br ALIGN="LEFT"/>conn<br ALIGN="LEFT"/>|<I>cleanup</I>(cutoff_timestamp)<br ALIGN="LEFT"/>delete(id)<br ALIGN="LEFT"/>get(id)<br ALIGN="LEFT"/>get_multi(id_list)<br ALIGN="LEFT"/>set(id, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.roles.manager.Role" [color="black", fontcolor="black", label=<{Role|desc : str<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_global : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>priority<br ALIGN="LEFT"/>scopes : frozenset<br ALIGN="LEFT"/>|has_scope(scope)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.roles.manager.RoleManager" [color="black", fontcolor="black", label=<{RoleManager|<br ALIGN="LEFT"/>|can_manage(role, other)<br ALIGN="LEFT"/>get(id)<br ALIGN="LEFT"/>get_all()<br ALIGN="LEFT"/>get_choices()<br ALIGN="LEFT"/>get_default()<br ALIGN="LEFT"/>get_top_dog()<br ALIGN="LEFT"/>with_scope(scope)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.nodestore.riak.client.RoundRobinStrategy" [color="black", fontcolor="black", label=<{RoundRobinStrategy|i : int<br ALIGN="LEFT"/>|next(connections)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.panels.route.RoutePanel" [color="black", fontcolor="black", label=<{RoutePanel|content<br ALIGN="LEFT"/>has_content : bool<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>|nav_subtitle()<br ALIGN="LEFT"/>process_response(request, response)<br ALIGN="LEFT"/>process_view(request, view_func, view_args, view_kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.rule.Rule" [color="black", fontcolor="black", label=<{Rule|data<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.rules.base.RuleBase" [color="black", fontcolor="black", label=<{RuleBase|data : dict<br ALIGN="LEFT"/>form_cls : NoneType<br ALIGN="LEFT"/>had_data<br ALIGN="LEFT"/>label : NoneType<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>rule : NoneType<br ALIGN="LEFT"/>|future(callback)<br ALIGN="LEFT"/>get_form_instance()<br ALIGN="LEFT"/>get_option(key)<br ALIGN="LEFT"/>render_form()<br ALIGN="LEFT"/>render_label()<br ALIGN="LEFT"/>validate_form()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.base.RuleDescriptor" [color="black", fontcolor="black", label=<{RuleDescriptor|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.rest_framework.rule.RuleNodeField" [color="black", fontcolor="black", label=<{RuleNodeField|type_name<br ALIGN="LEFT"/>|from_native(data)<br ALIGN="LEFT"/>to_native(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.processor.RuleProcessor" [color="black", fontcolor="black", label=<{RuleProcessor|event<br ALIGN="LEFT"/>futures_by_cb : defaultdict<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>is_new<br ALIGN="LEFT"/>is_regression<br ALIGN="LEFT"/>is_sample<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|apply()<br ALIGN="LEFT"/>apply_rule(rule)<br ALIGN="LEFT"/>condition_matches(condition, state, rule)<br ALIGN="LEFT"/>get_rule_status(rule)<br ALIGN="LEFT"/>get_rules()<br ALIGN="LEFT"/>get_state(rule_status)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.registry.RuleRegistry" [color="black", fontcolor="black", label=<{RuleRegistry|<br ALIGN="LEFT"/>|add(rule)<br ALIGN="LEFT"/>get(rule_id, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.rule.RuleSerializer" [color="black", fontcolor="black", label=<{RuleSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.rest_framework.rule.RuleSerializer" [color="black", fontcolor="black", label=<{RuleSerializer|actionMatch<br ALIGN="LEFT"/>actions<br ALIGN="LEFT"/>conditions<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|save(rule)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.cases.RuleTestCase" [color="black", fontcolor="black", label=<{RuleTestCase|rule_cls : NoneType<br ALIGN="LEFT"/>|assertDoesNotPass(rule, event)<br ALIGN="LEFT"/>assertPasses(rule, event)<br ALIGN="LEFT"/>get_event()<br ALIGN="LEFT"/>get_rule(data)<br ALIGN="LEFT"/>get_state()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.apidocs.Runner" [color="black", fontcolor="black", label=<{Runner|api_key<br ALIGN="LEFT"/>default_event<br ALIGN="LEFT"/>default_project<br ALIGN="LEFT"/>default_release<br ALIGN="LEFT"/>default_team<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>me<br ALIGN="LEFT"/>org<br ALIGN="LEFT"/>requests : list<br ALIGN="LEFT"/>teams : NoneType<br ALIGN="LEFT"/>utils<br ALIGN="LEFT"/>|isolated_org(org_name)<br ALIGN="LEFT"/>isolated_project(project_name)<br ALIGN="LEFT"/>request(method, path, headers, data, api_key, format)<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.savedsearch.SavedSearch" [color="black", fontcolor="black", label=<{SavedSearch|date_added<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_searches.SavedSearchSerializer" [color="black", fontcolor="black", label=<{SavedSearchSerializer|name<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.project_search_details.SavedSearchSerializer" [color="black", fontcolor="black", label=<{SavedSearchSerializer|name<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.savedsearch.SavedSearchSerializer" [color="black", fontcolor="black", label=<{SavedSearchSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.permissions.ScopedPermission" [color="black", fontcolor="black", label=<{ScopedPermission|scope_map : dict<br ALIGN="LEFT"/>|has_object_permission(request, view, obj)<br ALIGN="LEFT"/>has_permission(request, view)<br ALIGN="LEFT"/>is_project_key(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.event_manager.ScoreClause" [color="black", fontcolor="black", label=<{ScoreClause|group<br ALIGN="LEFT"/>|calculate(times_seen, last_seen)<br ALIGN="LEFT"/>evaluate(node, qn, connection)<br ALIGN="LEFT"/>prepare(evaluator, query, allow_joins)<br ALIGN="LEFT"/>prepare_database_save(unused)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.search.base.SearchBackend" [color="black", fontcolor="black", label=<{SearchBackend|<br ALIGN="LEFT"/>|<I>index</I>(event)<br ALIGN="LEFT"/><I>query</I>(project, query, status, tags, bookmarked_by, assigned_to, first_release, sort_by, date_filter, date_from, date_to, cursor, limit)<br ALIGN="LEFT"/><I>upgrade</I>()<br ALIGN="LEFT"/><I>validate</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.data_scrubber.SensitiveDataFilter" [color="black", fontcolor="black", label=<{SensitiveDataFilter|URL_PASSWORD_RE<br ALIGN="LEFT"/>VALUES_RE<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>|apply(data)<br ALIGN="LEFT"/>filter_http(data)<br ALIGN="LEFT"/>filter_stacktrace(data)<br ALIGN="LEFT"/>sanitize(key, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.env.SentryEnvMiddleware" [color="black", fontcolor="black", label=<{SentryEnvMiddleware|<br ALIGN="LEFT"/>|process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.services.http.SentryGunicornCommand" [color="black", fontcolor="black", label=<{SentryGunicornCommand|callable : NoneType<br ALIGN="LEFT"/>cfg : NoneType<br ALIGN="LEFT"/>config_file : str<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>prog : NoneType<br ALIGN="LEFT"/>project_path : NoneType<br ALIGN="LEFT"/>usage : NoneType<br ALIGN="LEFT"/>|init()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.services.http.SentryHTTPServer" [color="black", fontcolor="black", label=<{SentryHTTPServer|host<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>workers : NoneType<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>validate_settings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.raven.SentryInternalClient" [color="black", fontcolor="black", label=<{SentryInternalClient|<br ALIGN="LEFT"/>|capture()<br ALIGN="LEFT"/>is_enabled()<br ALIGN="LEFT"/>send()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.raven.SentryInternalFilter" [color="black", fontcolor="black", label=<{SentryInternalFilter|<br ALIGN="LEFT"/>|filter(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.locale.SentryLocaleMiddleware" [color="black", fontcolor="black", label=<{SentryLocaleMiddleware|<br ALIGN="LEFT"/>|load_user_conf(request)<br ALIGN="LEFT"/>process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.services.smtp.SentrySMTPServer" [color="black", fontcolor="black", label=<{SentrySMTPServer|host<br ALIGN="LEFT"/>max_message_length : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>|process_message(peer, mailfrom, rcpttos, raw_message)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware" [color="black", fontcolor="black", label=<{SentrySocialAuthExceptionMiddleware|<br ALIGN="LEFT"/>|get_redirect_uri(request, exception)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.base.Serializer" [color="black", fontcolor="black", label=<{Serializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.services.base.Service" [color="black", fontcolor="black", label=<{Service|debug : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.middleware.maintenance.ServicesUnavailableMiddleware" [color="black", fontcolor="black", label=<{ServicesUnavailableMiddleware|<br ALIGN="LEFT"/>|process_exception(request, exception)<br ALIGN="LEFT"/>process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.proxy.SetRemoteAddrFromForwardedFor" [color="black", fontcolor="black", label=<{SetRemoteAddrFromForwardedFor|<br ALIGN="LEFT"/>|process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.event.SharedEventSerializer" [color="black", fontcolor="black", label=<{SharedEventSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.shared_group_details.SharedGroupDetailsEndpoint" [color="black", fontcolor="black", label=<{SharedGroupDetailsEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request, share_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.group.SharedGroupSerializer" [color="black", fontcolor="black", label=<{SharedGroupSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.exception.SingleException" [color="black", fontcolor="red", label=<{SingleException|display_score : int<br ALIGN="LEFT"/>score : int<br ALIGN="LEFT"/>|get_alias()<br ALIGN="LEFT"/>get_api_context(is_public)<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>to_python(data, has_system_frames)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lang.javascript.cache.SourceCache" [color="black", fontcolor="black", label=<{SourceCache|<br ALIGN="LEFT"/>|add(url, source)<br ALIGN="LEFT"/>add_error(url, error)<br ALIGN="LEFT"/>alias(u1, u2)<br ALIGN="LEFT"/>get(url)<br ALIGN="LEFT"/>get_errors(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lang.javascript.cache.SourceMapCache" [color="black", fontcolor="black", label=<{SourceMapCache|<br ALIGN="LEFT"/>|add(sourcemap_url, sourcemap_index)<br ALIGN="LEFT"/>get(sourcemap_url)<br ALIGN="LEFT"/>get_link(url)<br ALIGN="LEFT"/>link(url, sourcemap_url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.lang.javascript.processor.SourceProcessor" [color="black", fontcolor="black", label=<{SourceProcessor|allow_scraping : bool<br ALIGN="LEFT"/>cache<br ALIGN="LEFT"/>max_fetches : int<br ALIGN="LEFT"/>sourcemaps<br ALIGN="LEFT"/>|ensure_module_names(frames)<br ALIGN="LEFT"/>expand_frames(frames)<br ALIGN="LEFT"/>fix_culprit(data, stacktraces)<br ALIGN="LEFT"/>get_release(project, data)<br ALIGN="LEFT"/>get_stacktraces(data)<br ALIGN="LEFT"/>get_valid_frames(stacktraces)<br ALIGN="LEFT"/>populate_source_cache(project, frames, release)<br ALIGN="LEFT"/>process(project, data)<br ALIGN="LEFT"/>update_stacktraces(stacktraces)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.queue.routers.SplitQueueRouter" [color="black", fontcolor="black", label=<{SplitQueueRouter|counter_queues : cycle<br ALIGN="LEFT"/>trigger_queues : cycle<br ALIGN="LEFT"/>|route_for_task(task)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.stacktrace.Stacktrace" [color="black", fontcolor="black", label=<{Stacktrace|score : int<br ALIGN="LEFT"/>|compute_hashes(platform)<br ALIGN="LEFT"/>data_has_system_frames(data)<br ALIGN="LEFT"/>get_api_context(is_public)<br ALIGN="LEFT"/>get_culprit_string()<br ALIGN="LEFT"/>get_hash(system_frames)<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_stacktrace(event, system_frames, newest_first, max_frames, header)<br ALIGN="LEFT"/>get_traceback(event, newest_first)<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>to_python(data, has_system_frames)<br ALIGN="LEFT"/>to_string(event, is_public)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.app.State" [color="black", fontcolor="black", label=<{State|data : dict<br ALIGN="LEFT"/>request : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.base.StatsMixin" [color="black", fontcolor="black", label=<{StatsMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.metrics.statsd.StatsdMetricsBackend" [color="black", fontcolor="black", label=<{StatsdMetricsBackend|client<br ALIGN="LEFT"/>|incr(key, instance, tags, amount, sample_rate)<br ALIGN="LEFT"/>timing(key, value, instance, tags, sample_rate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.status_checks.base.StatusCheck" [color="black", fontcolor="black", label=<{StatusCheck|<br ALIGN="LEFT"/>|<I>check</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.api.StoreView" [color="black", fontcolor="black", label=<{StoreView|<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>post(request)<br ALIGN="LEFT"/>process(request, project, auth, helper, data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.group.StreamGroupSerializer" [color="black", fontcolor="black", label=<{StreamGroupSerializer|stats_period : NoneType<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.sudo.SudoMiddleware" [color="black", fontcolor="black", label=<{SudoMiddleware|<br ALIGN="LEFT"/>|has_sudo_privileges(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.testutils.middleware.SudoMiddleware" [color="black", fontcolor="black", label=<{SudoMiddleware|<br ALIGN="LEFT"/>|has_sudo_privileges(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.middleware.superuser.SuperuserMiddleware" [color="black", fontcolor="black", label=<{SuperuserMiddleware|<br ALIGN="LEFT"/>|process_request(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.permissions.SuperuserPermission" [color="black", fontcolor="black", label=<{SuperuserPermission|<br ALIGN="LEFT"/>|has_permission(request, view)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.system_health.SystemHealthEndpoint" [color="black", fontcolor="black", label=<{SystemHealthEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.system_options.SystemOptionsEndpoint" [color="black", fontcolor="black", label=<{SystemOptionsEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|get(request)<br ALIGN="LEFT"/>put(request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.tsdb.base.TSDBModel" [color="black", fontcolor="black", label=<{TSDBModel|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.tagkey.TagKey" [color="black", fontcolor="black", label=<{TagKey|key<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>values_seen<br ALIGN="LEFT"/>|get_audit_log_data()<br ALIGN="LEFT"/>get_label()<br ALIGN="LEFT"/>is_valid_key(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.tagkey.TagKeyManager" [color="black", fontcolor="black", label=<{TagKeyManager|<br ALIGN="LEFT"/>|all_keys(project)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.tagkey.TagKeyStatus" [color="black", fontcolor="black", label=<{TagKeyStatus|DELETION_IN_PROGRESS : int<br ALIGN="LEFT"/>PENDING_DELETION : int<br ALIGN="LEFT"/>VISIBLE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.bases.tag.TagPlugin" [color="black", fontcolor="black", label=<{TagPlugin|project_default_enabled : bool<br ALIGN="LEFT"/>tag : NoneType<br ALIGN="LEFT"/>|<I>get_tag_values</I>(event)<br ALIGN="LEFT"/>get_tags(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.tagvalue.TagValue" [color="black", fontcolor="black", label=<{TagValue|data<br ALIGN="LEFT"/>first_seen<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>last_seen<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>times_seen<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|get_absolute_url()<br ALIGN="LEFT"/>get_label()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.tagvalue.TagValueSerializer" [color="black", fontcolor="black", label=<{TagValueSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.tagged_event.TaggedEventCondition" [color="black", fontcolor="black", label=<{TaggedEventCondition|form_cls<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>|passes(event, state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.rules.conditions.tagged_event.TaggedEventForm" [color="black", fontcolor="black", label=<{TaggedEventForm|key<br ALIGN="LEFT"/>match<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.team.Team" [color="black", fontcolor="black", label=<{Team|date_added<br ALIGN="LEFT"/>member_set<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>organization<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|get_audit_log_data()<br ALIGN="LEFT"/>has_access(user, access)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.TeamAdmin" [color="black", fontcolor="black", label=<{TeamAdmin|inlines : tuple<br ALIGN="LEFT"/>list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|save_model(request, obj, form, change)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.team_details.TeamDetailsEndpoint" [color="black", fontcolor="black", label=<{TeamDetailsEndpoint|doc_section : TEAMS<br ALIGN="LEFT"/>|delete(request, team)<br ALIGN="LEFT"/>get(request, team)<br ALIGN="LEFT"/>put(request, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.team.TeamEndpoint" [color="black", fontcolor="black", label=<{TeamEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|convert_args(request, organization_slug, team_slug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.team_groups_new.TeamGroupsNewEndpoint" [color="black", fontcolor="black", label=<{TeamGroupsNewEndpoint|<br ALIGN="LEFT"/>|get(request, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.team_groups_trending.TeamGroupsTrendingEndpoint" [color="black", fontcolor="black", label=<{TeamGroupsTrendingEndpoint|<br ALIGN="LEFT"/>|get(request, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.team.TeamManager" [color="black", fontcolor="black", label=<{TeamManager|<br ALIGN="LEFT"/>|get_for_user(organization, user, with_projects)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.team.TeamPermission" [color="black", fontcolor="black", label=<{TeamPermission|scope_map : dict<br ALIGN="LEFT"/>|has_object_permission(request, view, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.team_project_index.TeamProjectIndexEndpoint" [color="black", fontcolor="black", label=<{TeamProjectIndexEndpoint|doc_section : TEAMS<br ALIGN="LEFT"/>|get(request, team)<br ALIGN="LEFT"/>post(request, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.TeamProjectInline" [color="black", fontcolor="black", label=<{TeamProjectInline|extra : int<br ALIGN="LEFT"/>fields : tuple<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>raw_id_fields : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.organization_teams.TeamSerializer" [color="black", fontcolor="black", label=<{TeamSerializer|name<br ALIGN="LEFT"/>slug<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.endpoints.team_details.TeamSerializer" [color="black", fontcolor="black", label=<{TeamSerializer|<br ALIGN="LEFT"/>|validate_slug(attrs, source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.team.TeamSerializer" [color="black", fontcolor="black", label=<{TeamSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.team_settings.TeamSettingsView" [color="black", fontcolor="black", label=<{TeamSettingsView|required_scope : str<br ALIGN="LEFT"/>|get_form(request, team)<br ALIGN="LEFT"/>handle(request, organization, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.team_stats.TeamStatsEndpoint" [color="black", fontcolor="black", label=<{TeamStatsEndpoint|doc_section : TEAMS<br ALIGN="LEFT"/>|get(request, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.team.TeamStatus" [color="black", fontcolor="black", label=<{TeamStatus|DELETION_IN_PROGRESS : int<br ALIGN="LEFT"/>PENDING_DELETION : int<br ALIGN="LEFT"/>VISIBLE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.base.TeamView" [color="black", fontcolor="black", label=<{TeamView|<br ALIGN="LEFT"/>|convert_args(request, organization_slug, team_slug)<br ALIGN="LEFT"/>get_context_data(request, organization, team)<br ALIGN="LEFT"/>has_permission(request, organization, team)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.serializers.models.team.TeamWithProjectsSerializer" [color="black", fontcolor="black", label=<{TeamWithProjectsSerializer|<br ALIGN="LEFT"/>|get_attrs(item_list, user)<br ALIGN="LEFT"/>serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.template.Template" [color="black", fontcolor="black", label=<{Template|score : int<br ALIGN="LEFT"/>|get_alias()<br ALIGN="LEFT"/>get_api_context(is_public)<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_traceback(event, context)<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>to_string(event, is_public)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.frontend.generic.TemplateView" [color="black", fontcolor="black", label=<{TemplateView|<br ALIGN="LEFT"/>|render_to_response(context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.TestEmailForm" [color="black", fontcolor="black", label=<{TestEmailForm|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.debug.utils.thread_collector.ThreadCollector" [color="black", fontcolor="black", label=<{ThreadCollector|collections : WeakKeyDictionary<br ALIGN="LEFT"/>|append(item, thread)<br ALIGN="LEFT"/>disable(thread)<br ALIGN="LEFT"/>enable(thread)<br ALIGN="LEFT"/>get(thread)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.threadpool.ThreadPool" [color="black", fontcolor="black", label=<{ThreadPool|queue : Queue<br ALIGN="LEFT"/>tasks : list<br ALIGN="LEFT"/>workers : list<br ALIGN="LEFT"/>|add(ident, func, args, kwargs)<br ALIGN="LEFT"/>join()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.debug.middleware.ToolbarCache" [color="black", fontcolor="black", label=<{ToolbarCache|<br ALIGN="LEFT"/>|create(request)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.db.postgres.exceptions.TransactionAborted" [color="black", fontcolor="black", label=<{TransactionAborted|cur_exc_info<br ALIGN="LEFT"/>exc_info<br ALIGN="LEFT"/>|get_traceback()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.javascript.Transformer" [color="black", fontcolor="black", label=<{Transformer|<br ALIGN="LEFT"/>|<I>attach_metadata</I>(objects, request)<br ALIGN="LEFT"/>transform(obj, request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.cache.UnableToGetLock" [color="black", fontcolor="red", label=<{UnableToGetLock|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.db.models.fields.pickle.UnicodePickledObjectField" [color="black", fontcolor="black", label=<{UnicodePickledObjectField|<br ALIGN="LEFT"/>|get_db_prep_value(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.runner.UnknownCommand" [color="black", fontcolor="red", label=<{UnknownCommand|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.options.manager.UnknownOption" [color="black", fontcolor="red", label=<{UnknownOption|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.lang.javascript.processor.UnparseableSourcemap" [color="black", fontcolor="red", label=<{UnparseableSourcemap|error_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.sentry_urls.models.UrlsPlugin" [color="black", fontcolor="black", label=<{UrlsPlugin|author : str<br ALIGN="LEFT"/>author_url : str<br ALIGN="LEFT"/>project_default_enabled : bool<br ALIGN="LEFT"/>slug : str<br ALIGN="LEFT"/>tag : str<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|get_tag_values(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.interfaces.user.User" [color="black", fontcolor="black", label=<{User|<br ALIGN="LEFT"/>|get_api_context(is_public)<br ALIGN="LEFT"/>get_hash()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>to_email_html(event)<br ALIGN="LEFT"/>to_python(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.user.User" [color="black", fontcolor="black", label=<{User|REQUIRED_FIELDS : list<br ALIGN="LEFT"/>USERNAME_FIELD : str<br ALIGN="LEFT"/>date_joined<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>is_active<br ALIGN="LEFT"/>is_managed<br ALIGN="LEFT"/>is_staff<br ALIGN="LEFT"/>is_superuser<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>objects : UserManager<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>get_display_name()<br ALIGN="LEFT"/>get_full_name()<br ALIGN="LEFT"/>get_short_name()<br ALIGN="LEFT"/>has_module_perms(app_label)<br ALIGN="LEFT"/>has_perm(perm_name)<br ALIGN="LEFT"/>merge_to(to_user)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.admin.UserAdmin" [color="black", fontcolor="black", label=<{UserAdmin|add_fieldsets : tuple<br ALIGN="LEFT"/>add_form<br ALIGN="LEFT"/>add_form_template : str<br ALIGN="LEFT"/>change_password_form<br ALIGN="LEFT"/>change_user_password_template : NoneType<br ALIGN="LEFT"/>fieldsets : tuple<br ALIGN="LEFT"/>form<br ALIGN="LEFT"/>inlines : tuple<br ALIGN="LEFT"/>list_display : tuple<br ALIGN="LEFT"/>list_filter : tuple<br ALIGN="LEFT"/>ordering : tuple<br ALIGN="LEFT"/>search_fields : tuple<br ALIGN="LEFT"/>|add_view(request, form_url, extra_context)<br ALIGN="LEFT"/>get_fieldsets(request, obj)<br ALIGN="LEFT"/>get_form(request, obj)<br ALIGN="LEFT"/>get_urls()<br ALIGN="LEFT"/>lookup_allowed(lookup, value)<br ALIGN="LEFT"/>response_add(request, obj, post_url_continue)<br ALIGN="LEFT"/>user_change_password(request, id, form_url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.ua_parser.parser.UserAgentParser" [color="black", fontcolor="black", label=<{UserAgentParser|family_replacement : NoneType<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>user_agent_re<br ALIGN="LEFT"/>v1_replacement : NoneType<br ALIGN="LEFT"/>v2_replacement : NoneType<br ALIGN="LEFT"/>|MatchSpans(user_agent_string)<br ALIGN="LEFT"/>Parse(user_agent_string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_useragents.models.UserAgentPlugin" [color="black", fontcolor="black", label=<{UserAgentPlugin|author : str<br ALIGN="LEFT"/>author_url : str<br ALIGN="LEFT"/>project_default_enabled : bool<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|get_tag_values(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.user_details.UserDetailsEndpoint" [color="black", fontcolor="black", label=<{UserDetailsEndpoint|<br ALIGN="LEFT"/>|get(request, user)<br ALIGN="LEFT"/>put(request, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.user.UserEndpoint" [color="black", fontcolor="black", label=<{UserEndpoint|permission_classes : tuple<br ALIGN="LEFT"/>|convert_args(request, user_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.fields.user.UserField" [color="black", fontcolor="black", label=<{UserField|<br ALIGN="LEFT"/>|from_native(data)<br ALIGN="LEFT"/>to_native(obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.web.forms.fields.UserField" [color="black", fontcolor="black", label=<{UserField|<br ALIGN="LEFT"/>|clean(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.useroption.UserOption" [color="black", fontcolor="black", label=<{UserOption|key<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>user<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.models.useroption.UserOptionManager" [color="black", fontcolor="black", label=<{UserOptionManager|<br ALIGN="LEFT"/>|clear_cache()<br ALIGN="LEFT"/>contribute_to_class(model, name)<br ALIGN="LEFT"/>get_all_values(user, project)<br ALIGN="LEFT"/>get_value(user, project, key, default)<br ALIGN="LEFT"/>set_value(user, project, key, value)<br ALIGN="LEFT"/>unset_value(user, project, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.bases.user.UserPermission" [color="black", fontcolor="black", label=<{UserPermission|<br ALIGN="LEFT"/>|has_object_permission(request, view, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.models.userreport.UserReport" [color="black", fontcolor="black", label=<{UserReport|comments<br ALIGN="LEFT"/>date_added<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>event_id<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>project<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.frontend.error_page_embed.UserReportForm" [color="black", fontcolor="black", label=<{UserReportForm|comments<br ALIGN="LEFT"/>email<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.userreport.UserReportSerializer" [color="black", fontcolor="black", label=<{UserReportSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.user_details.UserSerializer" [color="black", fontcolor="black", label=<{UserSerializer|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.api.serializers.models.user.UserSerializer" [color="black", fontcolor="black", label=<{UserSerializer|<br ALIGN="LEFT"/>|serialize(obj, attrs, user)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.endpoints.project_group_index.ValidationError" [color="black", fontcolor="red", label=<{ValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.sqlparser.ValueFilter" [color="black", fontcolor="black", label=<{ValueFilter|exclude : tuple<br ALIGN="LEFT"/>include : tuple<br ALIGN="LEFT"/>|process(stack, stream)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.versioning.Version" [color="black", fontcolor="black", label=<{Version|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.plugins.sentry_webhooks.plugin.WebHooksOptionsForm" [color="black", fontcolor="black", label=<{WebHooksOptionsForm|urls<br ALIGN="LEFT"/>|clean_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.plugins.sentry_webhooks.plugin.WebHooksPlugin" [color="black", fontcolor="black", label=<{WebHooksPlugin|author : str<br ALIGN="LEFT"/>author_url : str<br ALIGN="LEFT"/>conf_key : str<br ALIGN="LEFT"/>conf_title : str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>project_conf_form<br ALIGN="LEFT"/>resource_links : list<br ALIGN="LEFT"/>slug : str<br ALIGN="LEFT"/>timeout<br ALIGN="LEFT"/>title : str<br ALIGN="LEFT"/>user_agent<br ALIGN="LEFT"/>version : str<br ALIGN="LEFT"/>|get_group_data(group, event)<br ALIGN="LEFT"/>get_webhook_urls(project)<br ALIGN="LEFT"/>is_configured(project)<br ALIGN="LEFT"/>notify_users(group, event, fail_silently)<br ALIGN="LEFT"/>send_webhook(url, payload)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.query.WithProgressBar" [color="black", fontcolor="black", label=<{WithProgressBar|caption<br ALIGN="LEFT"/>count : NoneType<br ALIGN="LEFT"/>iterator<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.logging.WithoutRavenManager" [color="black", fontcolor="black", label=<{WithoutRavenManager|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.threadpool.Worker" [color="black", fontcolor="black", label=<{Worker|queue<br ALIGN="LEFT"/>results : defaultdict<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.email._CaseInsensitiveSigner" [color="black", fontcolor="black", label=<{_CaseInsensitiveSigner|<br ALIGN="LEFT"/>|signature(value)<br ALIGN="LEFT"/>unsign(signed_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.utils.cache.cached_for_request" [color="black", fontcolor="black", label=<{cached_for_request|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.utils.cache.memoize" [color="black", fontcolor="black", label=<{memoize|func<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"sentry.web.forms.fields.UserField.widget" [color="black", fontcolor="black", label=<{widget|<br ALIGN="LEFT"/>|render(name, value, attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"sentry.api.authentication.ApiKeyAuthentication" -> "sentry.api.authentication.QuietBasicAuthentication" [arrowhead="empty", arrowtail="none"];
"sentry.api.authentication.ProjectKeyAuthentication" -> "sentry.api.authentication.QuietBasicAuthentication" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.group.GroupEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.group.GroupPermission" -> "sentry.api.bases.project.ProjectPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.organization.OrganizationEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.organization.OrganizationPermission" -> "sentry.api.permissions.ScopedPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.organizationissues.OrganizationIssuesEndpoint" -> "sentry.api.bases.organizationmember.OrganizationMemberEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.organizationmember.OrganizationMemberEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.project.ProjectEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.project.ProjectEventPermission" -> "sentry.api.bases.project.ProjectPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.project.ProjectPermission" -> "sentry.api.permissions.ScopedPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.team.TeamEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.team.TeamPermission" -> "sentry.api.permissions.ScopedPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.user.UserEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.bases.user.UserPermission" -> "sentry.api.permissions.ScopedPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.auth_index.AuthIndexEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.broadcast_index.BroadcastIndexEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.catchall.CatchallEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.event_details.EventDetailsEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_details.GroupDetailsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_events.GroupEventsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_events_latest.GroupEventsLatestEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_events_oldest.GroupEventsOldestEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_notes.GroupNotesEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_notes_details.GroupNotesDetailsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_stats.GroupStatsEndpoint" -> "sentry.api.base.StatsMixin" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_stats.GroupStatsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_tagkey_details.GroupTagKeyDetailsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_tagkey_values.GroupTagKeyValuesEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_tags.GroupTagsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.group_user_reports.GroupUserReportsEndpoint" -> "sentry.api.bases.group.GroupEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.index.IndexEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.internal_stats.InternalStatsEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.internal_stats.InternalStatsEndpoint" -> "sentry.api.base.StatsMixin" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.legacy_project_redirect.LegacyProjectRedirectEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_access_request_details.AccessRequestPermission" -> "sentry.api.bases.organization.OrganizationPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_access_request_details.OrganizationAccessRequestDetailsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_activity.OrganizationActivityEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_details.OrganizationDetailsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_index.OrganizationIndexEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_details.OrganizationMemberDetailsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_details.RelaxedMemberPermission" -> "sentry.api.bases.organization.OrganizationPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_index.MemberPermission" -> "sentry.api.bases.organization.OrganizationPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_index.OrganizationMemberIndexEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_issues_assigned.OrganizationMemberIssuesAssignedEndpoint" -> "sentry.api.bases.organizationissues.OrganizationIssuesEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_issues_bookmarked.OrganizationMemberIssuesBookmarkedEndpoint" -> "sentry.api.bases.organizationissues.OrganizationIssuesEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_issues_viewed.OrganizationMemberIssuesViewedEndpoint" -> "sentry.api.bases.organizationissues.OrganizationIssuesEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_team_details.OrganizationMemberTeamDetailsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_member_team_details.RelaxedOrganizationPermission" -> "sentry.api.bases.organization.OrganizationPermission" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_projects.OrganizationProjectsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_stats.OrganizationStatsEndpoint" -> "sentry.api.base.StatsMixin" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_stats.OrganizationStatsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.organization_teams.OrganizationTeamsEndpoint" -> "sentry.api.bases.organization.OrganizationEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_details.ProjectDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_docs.ProjectDocsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_docs_platform.ProjectDocsPlatformEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_event_details.ProjectEventDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_events.ProjectEventsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_group_index.ProjectGroupIndexEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_group_stats.ProjectGroupStatsEndpoint" -> "sentry.api.base.StatsMixin" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_group_stats.ProjectGroupStatsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_key_details.ProjectKeyDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_keys.ProjectKeysEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_member_index.ProjectMemberIndexEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_releases.ProjectReleasesEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_rule_details.ProjectRuleDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_rules.ProjectRulesEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_search_details.ProjectSearchDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_searches.ProjectSearchesEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_stats.ProjectStatsEndpoint" -> "sentry.api.base.StatsMixin" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_stats.ProjectStatsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_tagkey_details.ProjectTagKeyDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_tagkey_values.ProjectTagKeyValuesEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_tags.ProjectTagsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.project_users.ProjectUsersEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.release_details.ReleaseDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.release_file_details.ReleaseFileDetailsEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.release_files.ReleaseFilesEndpoint" -> "sentry.api.bases.project.ProjectEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.shared_group_details.SharedGroupDetailsEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.system_health.SystemHealthEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.system_options.SystemOptionsEndpoint" -> "sentry.api.base.Endpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.team_details.TeamDetailsEndpoint" -> "sentry.api.bases.team.TeamEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.team_groups_new.TeamGroupsNewEndpoint" -> "sentry.api.bases.team.TeamEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.team_groups_trending.TeamGroupsTrendingEndpoint" -> "sentry.api.bases.team.TeamEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.team_project_index.TeamProjectIndexEndpoint" -> "sentry.api.bases.team.TeamEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.team_stats.TeamStatsEndpoint" -> "sentry.api.base.StatsMixin" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.team_stats.TeamStatsEndpoint" -> "sentry.api.bases.team.TeamEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.endpoints.user_details.UserDetailsEndpoint" -> "sentry.api.bases.user.UserEndpoint" [arrowhead="empty", arrowtail="none"];
"sentry.api.paginator.DateTimePaginator" -> "sentry.api.paginator.BasePaginator" [arrowhead="empty", arrowtail="none"];
"sentry.api.paginator.OffsetPaginator" -> "sentry.api.paginator.BasePaginator" [arrowhead="empty", arrowtail="none"];
"sentry.api.paginator.Paginator" -> "sentry.api.paginator.BasePaginator" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.activity.ActivitySerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.activity.OrganizationActivitySerializer" -> "sentry.api.serializers.models.activity.ActivitySerializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.broadcast.BroadcastSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.event.EventSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.event.SharedEventSerializer" -> "sentry.api.serializers.models.event.EventSerializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.eventuser.EventUserSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.group.GroupSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.group.SharedGroupSerializer" -> "sentry.api.serializers.models.group.GroupSerializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.group.StreamGroupSerializer" -> "sentry.api.serializers.models.group.GroupSerializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.groupseen.GroupSeenSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.grouptagkey.GroupTagKeySerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.grouptagvalue.GroupTagValueSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.organization.DetailedOrganizationSerializer" -> "sentry.api.serializers.models.organization.OrganizationSerializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.organization.OrganizationSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.organization_member.OrganizationMemberSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.project.ProjectSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.project_key.ProjectKeySerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.release.ReleaseSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.release_file.ReleaseFileSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.rule.RuleSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.savedsearch.SavedSearchSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.tagvalue.TagValueSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.team.TeamSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.team.TeamWithProjectsSerializer" -> "sentry.api.serializers.models.team.TeamSerializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.user.UserSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.api.serializers.models.userreport.UserReportSerializer" -> "sentry.api.serializers.base.Serializer" [arrowhead="empty", arrowtail="none"];
"sentry.auth.access.Access" -> "sentry.auth.access.BaseAccess" [arrowhead="empty", arrowtail="none"];
"sentry.auth.access.NoAccess" -> "sentry.auth.access.BaseAccess" [arrowhead="empty", arrowtail="none"];
"sentry.auth.providers.dummy.AskEmail" -> "sentry.auth.view.AuthView" [arrowhead="empty", arrowtail="none"];
"sentry.auth.providers.dummy.DummyProvider" -> "sentry.auth.provider.Provider" [arrowhead="empty", arrowtail="none"];
"sentry.auth.providers.oauth2.OAuth2Callback" -> "sentry.auth.view.AuthView" [arrowhead="empty", arrowtail="none"];
"sentry.auth.providers.oauth2.OAuth2Login" -> "sentry.auth.view.AuthView" [arrowhead="empty", arrowtail="none"];
"sentry.auth.providers.oauth2.OAuth2Provider" -> "sentry.auth.provider.Provider" [arrowhead="empty", arrowtail="none"];
"sentry.auth.view.AuthView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.auth.view.ConfigureView" -> "sentry.plugins.base.view.PluggableViewMixin" [arrowhead="empty", arrowtail="none"];
"sentry.auth.view.ConfigureView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.buffer.inprocess.InProcessBuffer" -> "sentry.buffer.base.Buffer" [arrowhead="empty", arrowtail="none"];
"sentry.buffer.redis.RedisBuffer" -> "sentry.buffer.base.Buffer" [arrowhead="empty", arrowtail="none"];
"sentry.cache.django.DjangoCache" -> "sentry.cache.base.BaseCache" [arrowhead="empty", arrowtail="none"];
"sentry.cache.redis.RedisCache" -> "sentry.cache.base.BaseCache" [arrowhead="empty", arrowtail="none"];
"sentry.coreapi.APIForbidden" -> "sentry.coreapi.APIError" [arrowhead="empty", arrowtail="none"];
"sentry.coreapi.APIRateLimited" -> "sentry.coreapi.APIError" [arrowhead="empty", arrowtail="none"];
"sentry.coreapi.APIUnauthorized" -> "sentry.coreapi.APIError" [arrowhead="empty", arrowtail="none"];
"sentry.coreapi.CspApiHelper" -> "sentry.coreapi.ClientApiHelper" [arrowhead="empty", arrowtail="none"];
"sentry.db.models.base.Model" -> "sentry.db.models.base.BaseModel" [arrowhead="empty", arrowtail="none"];
"sentry.db.models.fields.node.NodeField" -> "sentry.db.models.fields.gzippeddict.GzippedDictField" [arrowhead="empty", arrowtail="none"];
"sentry.debug.panels.redis.RedisPanel" -> "sentry.debug.panels.base.CallRecordingPanel" [arrowhead="empty", arrowtail="none"];
"sentry.debug.panels.redis.RedisPipelineWrapper" -> "sentry.debug.utils.function_wrapper.FunctionWrapper" [arrowhead="empty", arrowtail="none"];
"sentry.debug.panels.redis.RedisWrapper" -> "sentry.debug.utils.function_wrapper.FunctionWrapper" [arrowhead="empty", arrowtail="none"];
"sentry.digests.backends.dummy.DummyBackend" -> "sentry.digests.backends.base.Backend" [arrowhead="empty", arrowtail="none"];
"sentry.digests.backends.redis.RedisBackend" -> "sentry.digests.backends.base.Backend" [arrowhead="empty", arrowtail="none"];
"sentry.digests.codecs.CompressedPickleCodec" -> "sentry.digests.codecs.Codec" [arrowhead="empty", arrowtail="none"];
"sentry.exceptions.InvalidInterface" -> "sentry.exceptions.InvalidData" [arrowhead="empty", arrowtail="none"];
"sentry.exceptions.InvalidOrigin" -> "sentry.exceptions.InvalidRequest" [arrowhead="empty", arrowtail="none"];
"sentry.features.base.OrganizationFeature" -> "sentry.features.base.Feature" [arrowhead="empty", arrowtail="none"];
"sentry.features.base.ProjectFeature" -> "sentry.features.base.Feature" [arrowhead="empty", arrowtail="none"];
"sentry.features.base.ProjectPluginFeature" -> "sentry.features.base.ProjectFeature" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.csp.Csp" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.exception.Exception" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.exception.SingleException" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.http.Http" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.message.Message" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.query.Query" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.stacktrace.Frame" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.stacktrace.Stacktrace" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.template.Template" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.interfaces.user.User" -> "sentry.interfaces.base.Interface" [arrowhead="empty", arrowtail="none"];
"sentry.lang.javascript.plugin.JavascriptPlugin" -> "sentry.plugins.base.v2.Plugin2" [arrowhead="empty", arrowtail="none"];
"sentry.lang.javascript.processor.CannotFetchSource" -> "sentry.lang.javascript.processor.BadSource" [arrowhead="empty", arrowtail="none"];
"sentry.lang.javascript.processor.UnparseableSourcemap" -> "sentry.lang.javascript.processor.BadSource" [arrowhead="empty", arrowtail="none"];
"sentry.management.commands.celery.Command" -> "sentry.queue.command.CeleryCommand" [arrowhead="empty", arrowtail="none"];
"sentry.management.commands.celerybeat.Command" -> "sentry.queue.command.CeleryCommand" [arrowhead="empty", arrowtail="none"];
"sentry.metrics.datadog.DatadogMetricsBackend" -> "sentry.metrics.base.MetricsBackend" [arrowhead="empty", arrowtail="none"];
"sentry.metrics.dummy.DummyMetricsBackend" -> "sentry.metrics.base.MetricsBackend" [arrowhead="empty", arrowtail="none"];
"sentry.metrics.logging.LoggingBackend" -> "sentry.metrics.base.MetricsBackend" [arrowhead="empty", arrowtail="none"];
"sentry.metrics.statsd.StatsdMetricsBackend" -> "sentry.metrics.base.MetricsBackend" [arrowhead="empty", arrowtail="none"];
"sentry.models.activity.Activity" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.apikey.ApiKey" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.auditlogentry.AuditLogEntry" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.authidentity.AuthIdentity" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.authprovider.AuthProvider" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.broadcast.Broadcast" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.broadcast.BroadcastSeen" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.event.Event" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.eventmapping.EventMapping" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.eventuser.EventUser" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.file.File" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.file.FileBlob" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.group.Group" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.group.GroupManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupassignee.GroupAssignee" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupassignee.GroupAssigneeManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupbookmark.GroupBookmark" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupemailthread.GroupEmailThread" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.grouphash.GroupHash" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupmeta.GroupMeta" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupmeta.GroupMetaManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupresolution.GroupResolution" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.grouprulestatus.GroupRuleStatus" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupseen.GroupSeen" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.groupsnooze.GroupSnooze" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.grouptagkey.GroupTagKey" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.grouptagvalue.GroupTagValue" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.helppage.HelpPage" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.lostpasswordhash.LostPasswordHash" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.option.Option" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.organization.Organization" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.organization.OrganizationManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.organizationaccessrequest.OrganizationAccessRequest" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.organizationmember.OrganizationMember" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.organizationmember.OrganizationMemberTeam" -> "sentry.db.models.base.BaseModel" [arrowhead="empty", arrowtail="none"];
"sentry.models.organizationoption.OrganizationOption" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.organizationoption.OrganizationOptionManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.project.Project" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.project.ProjectManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.projectkey.ProjectKey" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.projectoption.ProjectOption" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.projectoption.ProjectOptionManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.release.Release" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.releasefile.ReleaseFile" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.rule.Rule" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.savedsearch.SavedSearch" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.tagkey.TagKey" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.tagkey.TagKeyManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.tagvalue.TagValue" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.team.Team" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.team.TeamManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.user.User" -> "sentry.db.models.base.BaseModel" [arrowhead="empty", arrowtail="none"];
"sentry.models.useroption.UserOption" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.models.useroption.UserOptionManager" -> "sentry.db.models.manager.BaseManager" [arrowhead="empty", arrowtail="none"];
"sentry.models.userreport.UserReport" -> "sentry.db.models.base.Model" [arrowhead="empty", arrowtail="none"];
"sentry.nodestore.cassandra.backend.CassandraNodeStorage" -> "sentry.nodestore.base.NodeStorage" [arrowhead="empty", arrowtail="none"];
"sentry.nodestore.django.backend.DjangoNodeStorage" -> "sentry.nodestore.base.NodeStorage" [arrowhead="empty", arrowtail="none"];
"sentry.nodestore.django.models.Node" -> "sentry.db.models.base.BaseModel" [arrowhead="empty", arrowtail="none"];
"sentry.nodestore.multi.backend.MultiNodeStorage" -> "sentry.nodestore.base.NodeStorage" [arrowhead="empty", arrowtail="none"];
"sentry.nodestore.riak.backend.RiakNodeStorage" -> "sentry.nodestore.base.NodeStorage" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.base.manager.PluginManager" -> "sentry.utils.managers.InstanceManager" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.base.response.JSONResponse" -> "sentry.plugins.base.response.Response" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.base.v1.IPlugin" -> "sentry.plugins.base.view.PluggableViewMixin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.base.v1.Plugin" -> "sentry.plugins.base.v1.IPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.base.v2.Plugin2" -> "sentry.plugins.base.v2.IPlugin2" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.bases.issue.IssueTrackingPlugin" -> "sentry.plugins.base.v1.Plugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.bases.notify.NotificationPlugin" -> "sentry.plugins.base.v1.Plugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.bases.releasetracking.ReleaseTrackingPlugin" -> "sentry.plugins.base.v2.Plugin2" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.bases.tag.TagPlugin" -> "sentry.plugins.base.v2.Plugin2" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_interface_types.models.InterfaceTypePlugin" -> "sentry.plugins.bases.tag.TagPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_mail.models.MailPlugin" -> "sentry.plugins.bases.notify.NotificationPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_urls.models.UrlsPlugin" -> "sentry.plugins.bases.tag.TagPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_useragents.models.BrowserPlugin" -> "sentry.plugins.sentry_useragents.models.UserAgentPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_useragents.models.DevicePlugin" -> "sentry.plugins.sentry_useragents.models.UserAgentPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_useragents.models.OsPlugin" -> "sentry.plugins.sentry_useragents.models.UserAgentPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_useragents.models.UserAgentPlugin" -> "sentry.plugins.bases.tag.TagPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_webhooks.plugin.WebHooksOptionsForm" -> "sentry.plugins.bases.notify.NotificationConfigurationForm" [arrowhead="empty", arrowtail="none"];
"sentry.plugins.sentry_webhooks.plugin.WebHooksPlugin" -> "sentry.plugins.bases.notify.NotificationPlugin" [arrowhead="empty", arrowtail="none"];
"sentry.quotas.redis.RedisQuota" -> "sentry.quotas.base.Quota" [arrowhead="empty", arrowtail="none"];
"sentry.ratelimits.redis.RedisRateLimiter" -> "sentry.ratelimits.base.RateLimiter" [arrowhead="empty", arrowtail="none"];
"sentry.rules.actions.base.EventAction" -> "sentry.rules.base.RuleBase" [arrowhead="empty", arrowtail="none"];
"sentry.rules.actions.notify_event.NotifyEventAction" -> "sentry.rules.actions.base.EventAction" [arrowhead="empty", arrowtail="none"];
"sentry.rules.actions.notify_event_service.NotifyEventServiceAction" -> "sentry.rules.actions.base.EventAction" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.base.EventCondition" -> "sentry.rules.base.RuleBase" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.event_attribute.EventAttributeCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.event_frequency.EventFrequencyCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.every_event.EveryEventCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.first_seen_event.FirstSeenEventCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.level.LevelCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.regression_event.RegressionEventCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.rules.conditions.tagged_event.TaggedEventCondition" -> "sentry.rules.conditions.base.EventCondition" [arrowhead="empty", arrowtail="none"];
"sentry.search.django.backend.DjangoSearchBackend" -> "sentry.search.base.SearchBackend" [arrowhead="empty", arrowtail="none"];
"sentry.services.http.SentryHTTPServer" -> "sentry.services.base.Service" [arrowhead="empty", arrowtail="none"];
"sentry.services.smtp.SentrySMTPServer" -> "sentry.services.base.Service" [arrowhead="empty", arrowtail="none"];
"sentry.status_checks.celery_alive.CeleryAliveCheck" -> "sentry.status_checks.base.StatusCheck" [arrowhead="empty", arrowtail="none"];
"sentry.status_checks.celery_app_version.CeleryAppVersionCheck" -> "sentry.status_checks.base.StatusCheck" [arrowhead="empty", arrowtail="none"];
"sentry.testutils.cases.APITestCase" -> "sentry.testutils.cases.BaseTestCase" [arrowhead="empty", arrowtail="none"];
"sentry.testutils.cases.BaseTestCase" -> "sentry.testutils.fixtures.Fixtures" [arrowhead="empty", arrowtail="none"];
"sentry.testutils.middleware.SudoMiddleware" -> "sentry.middleware.sudo.SudoMiddleware" [arrowhead="empty", arrowtail="none"];
"sentry.tsdb.dummy.DummyTSDB" -> "sentry.tsdb.base.BaseTSDB" [arrowhead="empty", arrowtail="none"];
"sentry.tsdb.inmemory.InMemoryTSDB" -> "sentry.tsdb.base.BaseTSDB" [arrowhead="empty", arrowtail="none"];
"sentry.tsdb.redis.RedisTSDB" -> "sentry.tsdb.base.BaseTSDB" [arrowhead="empty", arrowtail="none"];
"sentry.utils.cache.LockAlreadyHeld" -> "sentry.utils.cache.UnableToGetLock" [arrowhead="empty", arrowtail="none"];
"sentry.utils.cache.cached_for_request" -> "sentry.utils.cache.memoize" [arrowhead="empty", arrowtail="none"];
"sentry.utils.javascript.GroupTransformer" -> "sentry.utils.javascript.Transformer" [arrowhead="empty", arrowtail="none"];
"sentry.utils.query.RangeQuerySetWrapperWithProgressBar" -> "sentry.utils.query.RangeQuerySetWrapper" [arrowhead="empty", arrowtail="none"];
"sentry.web.api.CspReportView" -> "sentry.web.api.StoreView" [arrowhead="empty", arrowtail="none"];
"sentry.web.api.StoreView" -> "sentry.web.api.APIView" [arrowhead="empty", arrowtail="none"];
"sentry.web.forms.ChangeUserForm" -> "sentry.web.forms.BaseUserForm" [arrowhead="empty", arrowtail="none"];
"sentry.web.forms.NewUserForm" -> "sentry.web.forms.BaseUserForm" [arrowhead="empty", arrowtail="none"];
"sentry.web.forms.accounts.AuthenticationForm" -> "sentry.web.forms.accounts.CaptchaForm" [arrowhead="empty", arrowtail="none"];
"sentry.web.forms.accounts.RecoverPasswordForm" -> "sentry.web.forms.accounts.CaptchaForm" [arrowhead="empty", arrowtail="none"];
"sentry.web.forms.accounts.RegistrationForm" -> "sentry.web.forms.accounts.CaptchaModelForm" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.accept_organization_invite.AcceptOrganizationInviteView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.admin_queue.AdminQueueView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.auth_link_identity.AuthLinkIdentityView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.auth_login.AuthLoginView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.auth_logout.AuthLogoutView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.auth_organization_login.AuthOrganizationLoginView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.auth_provider_login.AuthProviderLoginView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.base.BaseView" -> "sentry.web.frontend.base.OrganizationMixin" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.base.OrganizationView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.base.ProjectView" -> "sentry.web.frontend.base.TeamView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.base.TeamView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.create_organization.CreateOrganizationView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.create_organization_member.CreateOrganizationMemberView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.create_project.AddProjectWithTeamForm" -> "sentry.web.forms.add_project.AddProjectForm" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.create_project.CreateProjectView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.create_project_key.CreateProjectKeyView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.create_team.CreateTeamView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.disable_project_key.DisableProjectKeyView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.edit_project_key.EditProjectKeyView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.enable_project_key.EnableProjectKeyView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.group_event_json.GroupEventJsonView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.group_plugin_action.GroupPluginActionView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.home.HomeView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_api_key_settings.OrganizationApiKeySettingsView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_api_keys.OrganizationApiKeysView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_audit_log.OrganizationAuditLogView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_auth_settings.OrganizationAuthSettingsView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_member_settings.OrganizationMemberSettingsView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_members.OrganizationMembersView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.organization_settings.OrganizationSettingsView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_issue_tracking.ProjectIssueTrackingView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_keys.ProjectKeysView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_notifications.ProjectNotificationsView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_plugin_configure.ProjectPluginConfigureView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_plugin_disable.ProjectPluginDisableView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_plugin_enable.ProjectPluginEnableView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_plugin_reset.ProjectPluginResetView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_plugins.ProjectPluginsView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_quotas.ProjectQuotasView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_release_tracking.ProjectReleaseTrackingView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_rule_edit.ProjectRuleEditView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_rule_remove.ProjectRuleRemoveView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_rules.ProjectRulesView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_settings.ProjectSettingsView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.project_tags.ProjectTagsView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.react_page.GenericReactPageView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.react_page.GenericReactPageView" -> "sentry.web.frontend.react_page.ReactMixin" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.react_page.ReactPageView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.react_page.ReactPageView" -> "sentry.web.frontend.react_page.ReactMixin" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.remove_account.RemoveAccountView" -> "sentry.web.frontend.base.BaseView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.remove_organization.RemoveOrganizationView" -> "sentry.web.frontend.base.OrganizationView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.remove_project.RemoveProjectView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.remove_project_key.RemoveProjectKeyView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.remove_team.RemoveTeamView" -> "sentry.web.frontend.base.TeamView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.replay_event.ReplayEventView" -> "sentry.web.frontend.base.ProjectView" [arrowhead="empty", arrowtail="none"];
"sentry.web.frontend.team_settings.TeamSettingsView" -> "sentry.web.frontend.base.TeamView" [arrowhead="empty", arrowtail="none"];
"sentry.api.client.ApiError" -> "sentry.api.client.ApiClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ApiError", style="solid"];
"sentry.api.endpoints.release_files.ConditionalContentNegotiation" -> "sentry.api.endpoints.release_files.ReleaseFilesEndpoint" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="content_negotiation_class", style="solid"];
"sentry.api.fields.user.UserField" -> "sentry.api.endpoints.project_releases.ReleaseSerializer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"sentry.auth.providers.dummy.DummyProvider" -> "sentry.testutils.cases.AuthProviderTestCase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="provider", style="solid"];
"sentry.buffer.base.BufferMount" -> "sentry.buffer.base.Buffer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"sentry.coreapi.ClientApiHelper" -> "sentry.web.api.APIView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="helper_cls", style="solid"];
"sentry.coreapi.ClientContext" -> "sentry.coreapi.ClientApiHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"sentry.coreapi.ClientLogHelper" -> "sentry.coreapi.ClientApiHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"sentry.coreapi.CspApiHelper" -> "sentry.web.api.CspReportView" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="helper_cls", style="solid"];
"sentry.db.models.fields.bounded.BoundedAutoField" -> "sentry.models.organizationmember.OrganizationMemberTeam" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="id", style="solid"];
"sentry.db.models.fields.bounded.BoundedAutoField" -> "sentry.models.user.User" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="id", style="solid"];
"sentry.db.models.fields.bounded.BoundedBigAutoField" -> "sentry.db.models.base.Model" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="id", style="solid"];
"sentry.db.models.fields.bounded.BoundedIntegerField" -> "sentry.models.event.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_spent", style="solid"];
"sentry.db.models.fields.bounded.BoundedIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_spent_total", style="solid"];
"sentry.db.models.fields.bounded.BoundedIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_spent_count", style="solid"];
"sentry.db.models.fields.bounded.BoundedIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="score", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.activity.Activity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.apikey.ApiKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target_object", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="event", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.authprovider.AuthProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sync_time", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.authprovider.AuthProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="default_role", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.event.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="num_comments", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.file.File" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="size", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.file.FileBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="size", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="level", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="num_comments", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="times_seen", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.groupresolution.GroupResolution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.grouptagkey.GroupTagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="values_seen", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.grouptagvalue.GroupTagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="times_seen", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.helppage.HelpPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="priority", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.organization.Organization" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.organizationmember.OrganizationMember" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="counter", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.organizationmember.OrganizationMember" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="type", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.project.Project" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.projectkey.ProjectKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.release.Release" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="new_groups", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.tagkey.TagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="values_seen", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.tagkey.TagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.tagvalue.TagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="times_seen", style="solid"];
"sentry.db.models.fields.bounded.BoundedPositiveIntegerField" -> "sentry.models.team.Team" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.activity.Activity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.activity.Activity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.activity.Activity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="event", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.activity.Activity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.apikey.ApiKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="actor", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="actor_key", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target_user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.authidentity.AuthIdentity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.authidentity.AuthIdentity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="auth_provider", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.authprovider.AuthProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.broadcast.BroadcastSeen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="broadcast", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.broadcast.BroadcastSeen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.event.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.event.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.eventmapping.EventMapping" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.eventmapping.EventMapping" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.eventuser.EventUser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.file.File" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="blob", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="first_release", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupassignee.GroupAssignee" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupassignee.GroupAssignee" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupassignee.GroupAssignee" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupbookmark.GroupBookmark" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupbookmark.GroupBookmark" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupbookmark.GroupBookmark" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupemailthread.GroupEmailThread" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupemailthread.GroupEmailThread" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouphash.GroupHash" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouphash.GroupHash" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupmeta.GroupMeta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupresolution.GroupResolution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupresolution.GroupResolution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="release", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouprulestatus.GroupRuleStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouprulestatus.GroupRuleStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rule", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouprulestatus.GroupRuleStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupseen.GroupSeen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupseen.GroupSeen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupseen.GroupSeen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.groupsnooze.GroupSnooze" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouptagkey.GroupTagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouptagkey.GroupTagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouptagvalue.GroupTagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.grouptagvalue.GroupTagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.lostpasswordhash.LostPasswordHash" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationaccessrequest.OrganizationAccessRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="team", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationaccessrequest.OrganizationAccessRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="member", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationmember.OrganizationMember" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationmember.OrganizationMember" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationmember.OrganizationMemberTeam" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="team", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationmember.OrganizationMemberTeam" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organizationmember", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.organizationoption.OrganizationOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.project.Project" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.project.Project" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="team", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.projectkey.ProjectKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.projectoption.ProjectOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.release.Release" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.release.Release" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.releasefile.ReleaseFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.releasefile.ReleaseFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="release", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.releasefile.ReleaseFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="file", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.rule.Rule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.savedsearch.SavedSearch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.tagkey.TagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.tagvalue.TagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.team.Team" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="organization", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.useroption.UserOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.useroption.UserOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.userreport.UserReport" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project", style="solid"];
"sentry.db.models.fields.foreignkey.FlexibleForeignKey" -> "sentry.models.userreport.UserReport" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="group", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" -> "sentry.models.activity.Activity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" -> "sentry.models.auditlogentry.AuditLogEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" -> "sentry.models.rule.Rule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" -> "sentry.models.tagvalue.TagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.gzippeddict.GzippedDictField" -> "sentry.nodestore.django.models.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.node.NodeField" -> "sentry.models.event.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
"sentry.db.models.fields.pickle.UnicodePickledObjectField" -> "sentry.models.option.Option" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"sentry.db.models.fields.pickle.UnicodePickledObjectField" -> "sentry.models.organizationoption.OrganizationOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"sentry.db.models.fields.pickle.UnicodePickledObjectField" -> "sentry.models.projectoption.ProjectOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"sentry.db.models.fields.pickle.UnicodePickledObjectField" -> "sentry.models.useroption.UserOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="value", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.db.models.base.BaseModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.apikey.ApiKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.event.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.groupbookmark.GroupBookmark" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.groupemailthread.GroupEmailThread" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.grouptagkey.GroupTagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.grouptagvalue.GroupTagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.helppage.HelpPage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.projectkey.ProjectKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.rule.Rule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.db.models.manager.BaseManager" -> "sentry.models.tagvalue.TagValue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.debug.utils.thread_collector.ThreadCollector" -> "sentry.debug.panels.base.CallRecordingPanel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="collector", style="solid"];
"sentry.lang.javascript.cache.SourceCache" -> "sentry.lang.javascript.processor.SourceProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cache", style="solid"];
"sentry.lang.javascript.cache.SourceMapCache" -> "sentry.lang.javascript.processor.SourceProcessor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sourcemaps", style="solid"];
"sentry.models.group.GroupManager" -> "sentry.models.group.Group" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.groupassignee.GroupAssigneeManager" -> "sentry.models.groupassignee.GroupAssignee" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.groupmeta.GroupMetaManager" -> "sentry.models.groupmeta.GroupMeta" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.organization.OrganizationManager" -> "sentry.models.organization.Organization" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.organizationoption.OrganizationOptionManager" -> "sentry.models.organizationoption.OrganizationOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.project.ProjectManager" -> "sentry.models.project.Project" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.projectoption.ProjectOptionManager" -> "sentry.models.projectoption.ProjectOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.tagkey.TagKeyManager" -> "sentry.models.tagkey.TagKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.team.TeamManager" -> "sentry.models.team.Team" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.models.useroption.UserOptionManager" -> "sentry.models.useroption.UserOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="objects", style="solid"];
"sentry.nodestore.riak.client.ConnectionManager" -> "sentry.nodestore.riak.client.RiakClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="manager", style="solid"];
"sentry.nodestore.riak.client.RiakClient" -> "sentry.nodestore.riak.backend.RiakNodeStorage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn", style="solid"];
"sentry.nodestore.riak.client.RoundRobinStrategy" -> "sentry.nodestore.riak.client.ConnectionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="strategy", style="solid"];
"sentry.plugins.base.v1.PluginMount" -> "sentry.plugins.base.v1.Plugin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"sentry.plugins.base.v2.PluginMount" -> "sentry.plugins.base.v2.Plugin2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"sentry.plugins.bases.issue.NewIssueForm" -> "sentry.plugins.bases.issue.IssueTrackingPlugin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="new_issue_form", style="solid"];
"sentry.plugins.bases.notify.NotificationConfigurationForm" -> "sentry.plugins.bases.notify.NotificationPlugin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project_conf_form", style="solid"];
"sentry.plugins.sentry_webhooks.plugin.WebHooksOptionsForm" -> "sentry.plugins.sentry_webhooks.plugin.WebHooksPlugin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="project_conf_form", style="solid"];
"sentry.rules.actions.notify_event_service.NotifyEventServiceForm" -> "sentry.rules.actions.notify_event_service.NotifyEventServiceAction" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="form_cls", style="solid"];
"sentry.rules.base.RuleDescriptor" -> "sentry.rules.base.RuleBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"sentry.rules.conditions.event_attribute.EventAttributeForm" -> "sentry.rules.conditions.event_attribute.EventAttributeCondition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="form_cls", style="solid"];
"sentry.rules.conditions.event_frequency.EventFrequencyForm" -> "sentry.rules.conditions.event_frequency.EventFrequencyCondition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="form_cls", style="solid"];
"sentry.rules.conditions.level.LevelEventForm" -> "sentry.rules.conditions.level.LevelCondition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="form_cls", style="solid"];
"sentry.rules.conditions.tagged_event.TaggedEventForm" -> "sentry.rules.conditions.tagged_event.TaggedEventCondition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="form_cls", style="solid"];
"sentry.tsdb.base.TSDBModel" -> "sentry.tsdb.base.BaseTSDB" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="models", style="solid"];
"sentry.utils.apidocs.MockUtils" -> "sentry.utils.apidocs.Runner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="utils", style="solid"];
"sentry.web.forms.fields.CustomTypedChoiceField" -> "sentry.web.frontend.project_settings.EditProjectForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="team", style="solid"];
"sentry.web.forms.fields.IPNetworksField" -> "sentry.web.frontend.project_settings.EditProjectForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="blacklisted_ips", style="solid"];
"sentry.web.forms.fields.OriginsField" -> "sentry.web.frontend.organization_api_key_settings.ApiKeyForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="allowed_origins", style="solid"];
"sentry.web.forms.fields.OriginsField" -> "sentry.web.frontend.project_settings.EditProjectForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="origins", style="solid"];
"sentry.web.forms.fields.RangeField" -> "sentry.web.forms.projects.DigestSettingsForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="minimum_delay", style="solid"];
"sentry.web.forms.fields.RangeField" -> "sentry.web.forms.projects.DigestSettingsForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="maximum_delay", style="solid"];
"sentry.web.forms.fields.RangeField" -> "sentry.web.frontend.project_settings.EditProjectForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resolve_age", style="solid"];
"sentry.web.forms.fields.RangeInput" -> "sentry.web.forms.fields.RangeField" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="widget", style="solid"];
"sentry.web.forms.fields.ReadOnlyTextWidget" -> "sentry.web.forms.fields.ReadOnlyTextField" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="widget", style="solid"];
"sentry.web.forms.fields.UserField" -> "sentry.web.forms.add_organization_member.AddOrganizationMemberForm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
}
