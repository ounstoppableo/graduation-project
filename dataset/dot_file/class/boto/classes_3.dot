digraph "classes_boto" {
rankdir=BT
charset="utf-8"
"boto.gs.acl.ACL" [color="black", fontcolor="black", label=<{ACL|acl<br ALIGN="LEFT"/>entries<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>|add_email_grant(permission, email_address)<br ALIGN="LEFT"/>add_group_email_grant(permission, email_address)<br ALIGN="LEFT"/>add_group_grant(permission, group_id)<br ALIGN="LEFT"/>add_user_grant(permission, user_id)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.acl.ACL" [color="black", fontcolor="black", label=<{ACL|grants : list<br ALIGN="LEFT"/>policy : NoneType<br ALIGN="LEFT"/>|add_email_grant(permission, email_address)<br ALIGN="LEFT"/>add_grant(grant)<br ALIGN="LEFT"/>add_user_grant(permission, user_id, display_name)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.connection.AWSAuthConnection" [color="black", fontcolor="black", label=<{AWSAuthConnection|access_key<br ALIGN="LEFT"/>auth_region_name<br ALIGN="LEFT"/>auth_service_name<br ALIGN="LEFT"/>ca_certificates_file<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>gs_access_key_id<br ALIGN="LEFT"/>gs_secret_access_key<br ALIGN="LEFT"/>host : NoneType, object<br ALIGN="LEFT"/>host_header : NoneType, object<br ALIGN="LEFT"/>http_connection_kwargs : dict<br ALIGN="LEFT"/>http_exceptions : tuple<br ALIGN="LEFT"/>http_unretryable_exceptions : list<br ALIGN="LEFT"/>https_connection_factory : NoneType<br ALIGN="LEFT"/>https_validate_certificates<br ALIGN="LEFT"/>is_secure : bool<br ALIGN="LEFT"/>no_proxy<br ALIGN="LEFT"/>num_retries : int<br ALIGN="LEFT"/>path : str<br ALIGN="LEFT"/>port : NoneType, int<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>provider : str<br ALIGN="LEFT"/>proxy<br ALIGN="LEFT"/>proxy_pass<br ALIGN="LEFT"/>proxy_port : NoneType, int<br ALIGN="LEFT"/>proxy_user<br ALIGN="LEFT"/>request_hook : NoneType<br ALIGN="LEFT"/>secret_key<br ALIGN="LEFT"/>socket_exception_values : tuple<br ALIGN="LEFT"/>suppress_consec_slashes : bool<br ALIGN="LEFT"/>use_proxy<br ALIGN="LEFT"/>|aws_access_key_id()<br ALIGN="LEFT"/>aws_secret_access_key()<br ALIGN="LEFT"/>build_base_http_request(method, path, auth_path, params, headers, data, host)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>connection()<br ALIGN="LEFT"/>get_http_connection(host, port, is_secure)<br ALIGN="LEFT"/>get_path(path)<br ALIGN="LEFT"/>get_proxy_auth_header()<br ALIGN="LEFT"/>get_proxy_url_with_auth()<br ALIGN="LEFT"/>handle_proxy(proxy, proxy_port, proxy_user, proxy_pass)<br ALIGN="LEFT"/>make_request(method, path, headers, data, host, auth_path, sender, override_num_retries, params, retry_handler)<br ALIGN="LEFT"/>new_http_connection(host, port, is_secure)<br ALIGN="LEFT"/>prefix_proxy_to_path(path, host)<br ALIGN="LEFT"/>profile_name()<br ALIGN="LEFT"/>proxy_ssl(host, port)<br ALIGN="LEFT"/>put_http_connection(host, port, is_secure, connection)<br ALIGN="LEFT"/>server_name(port)<br ALIGN="LEFT"/>set_host_header(request)<br ALIGN="LEFT"/>set_request_hook(hook)<br ALIGN="LEFT"/>skip_proxy(host)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.AWSConnectionError" [color="black", fontcolor="red", label=<{AWSConnectionError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.awslambda.layer1.AWSLambdaConnection" [color="black", fontcolor="black", label=<{AWSLambdaConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|add_event_source(event_source, function_name, role, batch_size, parameters)<br ALIGN="LEFT"/>delete_function(function_name)<br ALIGN="LEFT"/>get_event_source(uuid)<br ALIGN="LEFT"/>get_function(function_name)<br ALIGN="LEFT"/>get_function_configuration(function_name)<br ALIGN="LEFT"/>invoke_async(function_name, invoke_args)<br ALIGN="LEFT"/>list_event_sources(event_source_arn, function_name, marker, max_items)<br ALIGN="LEFT"/>list_functions(marker, max_items)<br ALIGN="LEFT"/>make_request(verb, resource, headers, data, expected_status, params)<br ALIGN="LEFT"/>remove_event_source(uuid)<br ALIGN="LEFT"/>update_function_configuration(function_name, role, handler, description, timeout, memory_size)<br ALIGN="LEFT"/>upload_function(function_name, function_zip, runtime, role, handler, mode, description, timeout, memory_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.connection.AWSQueryConnection" [color="black", fontcolor="black", label=<{AWSQueryConnection|APIVersion : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>|build_complex_list_params(params, items, label, names)<br ALIGN="LEFT"/>build_list_params(params, items, label)<br ALIGN="LEFT"/>get_list(action, params, markers, path, parent, verb)<br ALIGN="LEFT"/>get_object(action, params, cls, path, parent, verb)<br ALIGN="LEFT"/>get_status(action, params, path, parent, verb)<br ALIGN="LEFT"/>get_utf8_value(value)<br ALIGN="LEFT"/>make_request(action, params, path, verb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.roboto.awsqueryrequest.AWSQueryRequest" [color="black", fontcolor="black", label=<{AWSQueryRequest|Args : list<br ALIGN="LEFT"/>CLITypeMap : dict<br ALIGN="LEFT"/>Description : str<br ALIGN="LEFT"/>Filters : list<br ALIGN="LEFT"/>Params : list<br ALIGN="LEFT"/>Response : dict<br ALIGN="LEFT"/>ServiceClass : NoneType<br ALIGN="LEFT"/>args : dict<br ALIGN="LEFT"/>aws_response<br ALIGN="LEFT"/>body<br ALIGN="LEFT"/>cli_args : NoneType<br ALIGN="LEFT"/>cli_options : NoneType<br ALIGN="LEFT"/>cli_output_format : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>connection_args : NoneType<br ALIGN="LEFT"/>http_response<br ALIGN="LEFT"/>item_markers : list<br ALIGN="LEFT"/>list_markers : list<br ALIGN="LEFT"/>parser : NoneType, OptionParser<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>request_id<br ALIGN="LEFT"/>request_params : dict<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|add_standard_options()<br ALIGN="LEFT"/>build_cli_parser()<br ALIGN="LEFT"/>cli_formatter(data)<br ALIGN="LEFT"/>do_cli()<br ALIGN="LEFT"/>get_connection()<br ALIGN="LEFT"/>get_usage()<br ALIGN="LEFT"/>name()<br ALIGN="LEFT"/>process_args()<br ALIGN="LEFT"/>process_filters()<br ALIGN="LEFT"/>process_markers(fmt, prev_name)<br ALIGN="LEFT"/>process_standard_options(options, args, d)<br ALIGN="LEFT"/>send(verb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.roboto.awsqueryservice.AWSQueryService" [color="black", fontcolor="black", label=<{AWSQueryService|APIVersion : str<br ALIGN="LEFT"/>Authentication : str<br ALIGN="LEFT"/>Description : str<br ALIGN="LEFT"/>EnvURL : str<br ALIGN="LEFT"/>Name : str<br ALIGN="LEFT"/>Path : str<br ALIGN="LEFT"/>Port : int<br ALIGN="LEFT"/>Provider : str<br ALIGN="LEFT"/>Regions : list<br ALIGN="LEFT"/>args : dict<br ALIGN="LEFT"/>aws_response : NoneType<br ALIGN="LEFT"/>|check_for_credential_file()<br ALIGN="LEFT"/>check_for_env_url()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.AccessDeniedException" [color="black", fontcolor="red", label=<{AccessDeniedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.AccessFailure" [color="black", fontcolor="red", label=<{AccessFailure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.attributes.AccessLogAttribute" [color="black", fontcolor="black", label=<{AccessLogAttribute|emit_interval : NoneType, int<br ALIGN="LEFT"/>enabled : NoneType, bool<br ALIGN="LEFT"/>s3_bucket_name : NoneType<br ALIGN="LEFT"/>s3_bucket_prefix : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.AccessToSnapshotDenied" [color="black", fontcolor="red", label=<{AccessToSnapshotDenied|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AccessToSnapshotDeniedFault" [color="black", fontcolor="red", label=<{AccessToSnapshotDeniedFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.attributes.AccountAttribute" [color="black", fontcolor="black", label=<{AccountAttribute|attribute_name : NoneType<br ALIGN="LEFT"/>attribute_values : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.AccountBalance" [color="black", fontcolor="black", label=<{AccountBalance|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.AccountClosed" [color="black", fontcolor="red", label=<{AccountClosed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.limits.AccountLimits" [color="black", fontcolor="black", label=<{AccountLimits|connection : NoneType<br ALIGN="LEFT"/>max_autoscaling_groups : NoneType, int<br ALIGN="LEFT"/>max_launch_configurations : NoneType, int<br ALIGN="LEFT"/>request_id<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.AccountLimitsExceeded" [color="black", fontcolor="red", label=<{AccountLimitsExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.volumestatus.Action" [color="black", fontcolor="black", label=<{Action|code : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.volumestatus.ActionSet" [color="black", fontcolor="black", label=<{ActionSet|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.signers.ActiveTrustedSigners" [color="black", fontcolor="black", label=<{ActiveTrustedSigners|<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.activity.Activity" [color="black", fontcolor="black", label=<{Activity|activity_id : NoneType<br ALIGN="LEFT"/>cause : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>end_time : NoneType, datetime<br ALIGN="LEFT"/>group_name : NoneType<br ALIGN="LEFT"/>progress : NoneType<br ALIGN="LEFT"/>start_time : NoneType, datetime<br ALIGN="LEFT"/>status_code : NoneType<br ALIGN="LEFT"/>status_message : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.ActivityType" [color="black", fontcolor="black", label=<{ActivityType|version : NoneType<br ALIGN="LEFT"/>|deprecate()<br ALIGN="LEFT"/>describe()<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.ActivityWorker" [color="black", fontcolor="black", label=<{ActivityWorker|last_tasktoken<br ALIGN="LEFT"/>|cancel(task_token, details)<br ALIGN="LEFT"/>complete(task_token, result)<br ALIGN="LEFT"/>fail(task_token, details, reason)<br ALIGN="LEFT"/>heartbeat(task_token, details)<br ALIGN="LEFT"/>poll()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.Actor" [color="black", fontcolor="black", label=<{Actor|domain : NoneType<br ALIGN="LEFT"/>last_tasktoken : NoneType<br ALIGN="LEFT"/>task_list : NoneType<br ALIGN="LEFT"/>|<I>run</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.AddInstanceGroupsResponse" [color="black", fontcolor="black", label=<{AddInstanceGroupsResponse|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.address.Address" [color="black", fontcolor="black", label=<{Address|allocation_id : NoneType<br ALIGN="LEFT"/>association_id : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>delete<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>network_interface_id : NoneType<br ALIGN="LEFT"/>network_interface_owner_id : NoneType<br ALIGN="LEFT"/>private_ip_address : NoneType<br ALIGN="LEFT"/>public_ip : NoneType<br ALIGN="LEFT"/>|associate(instance_id, network_interface_id, private_ip_address, allow_reassociation, dry_run)<br ALIGN="LEFT"/>disassociate(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>release(dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.AdjustmentType" [color="black", fontcolor="black", label=<{AdjustmentType|adjustment_type : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.qualification.AdultRequirement" [color="black", fontcolor="black", label=<{AdultRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.Alarm" [color="black", fontcolor="black", label=<{Alarm|alarm_arn : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.alarm.AlarmHistoryItem" [color="black", fontcolor="black", label=<{AlarmHistoryItem|connection : NoneType<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>summary<br ALIGN="LEFT"/>tem_type<br ALIGN="LEFT"/>timestamp : datetime<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.fields.AllIndex" [color="black", fontcolor="black", label=<{AllIndex|projection_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.AlreadyExistsException" [color="black", fontcolor="red", label=<{AlreadyExistsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.AmountCollection" [color="black", fontcolor="black", label=<{AmountCollection|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.AmountOutOfRange" [color="black", fontcolor="red", label=<{AmountOutOfRange|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.AnonAuthHandler" [color="black", fontcolor="black", label=<{AnonAuthHandler|capability : list<br ALIGN="LEFT"/>|<I>add_auth</I>(http_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.AnswerSpecification" [color="black", fontcolor="black", label=<{AnswerSpecification|spec<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.installers.ubuntu.apache.Apache" [color="black", fontcolor="black", label=<{Apache|<br ALIGN="LEFT"/>|install()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.policies.AppCookieStickinessPolicy" [color="black", fontcolor="black", label=<{AppCookieStickinessPolicy|cookie_name : NoneType<br ALIGN="LEFT"/>policy_name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.Application" [color="black", fontcolor="black", label=<{Application|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.Application" [color="black", fontcolor="black", label=<{Application|height<br ALIGN="LEFT"/>parameter_template : str<br ALIGN="LEFT"/>parameters : dict<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>get_inner_content(content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.ApplicationAlreadyExistsException" [color="black", fontcolor="red", label=<{ApplicationAlreadyExistsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.ApplicationDescription" [color="black", fontcolor="black", label=<{ApplicationDescription|application_name : str<br ALIGN="LEFT"/>configuration_templates : list<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>versions : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.ApplicationDoesNotExistException" [color="black", fontcolor="red", label=<{ApplicationDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.ApplicationLimitExceededException" [color="black", fontcolor="red", label=<{ApplicationLimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.ApplicationNameRequiredException" [color="black", fontcolor="red", label=<{ApplicationNameRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.ApplicationVersionDescription" [color="black", fontcolor="black", label=<{ApplicationVersionDescription|application_name : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>source_bundle : NoneType<br ALIGN="LEFT"/>version_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.exceptions.ArchiveError" [color="black", fontcolor="red", label=<{ArchiveError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.Arg" [color="black", fontcolor="black", label=<{Arg|value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.Assignment" [color="black", fontcolor="black", label=<{Assignment|answers : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sts.credentials.AssumedRole" [color="black", fontcolor="black", label=<{AssumedRole|credentials : NoneType<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.networkinterface.Attachment" [color="black", fontcolor="black", label=<{Attachment|attach_time : NoneType<br ALIGN="LEFT"/>delete_on_termination : bool<br ALIGN="LEFT"/>device_index : int<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>instance_owner_id : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpngateway.Attachment" [color="black", fontcolor="black", label=<{Attachment|state : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.support.exceptions.AttachmentIdNotFound" [color="black", fontcolor="red", label=<{AttachmentIdNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.AttachmentLimitExceeded" [color="black", fontcolor="red", label=<{AttachmentLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.volume.AttachmentSet" [color="black", fontcolor="black", label=<{AttachmentSet|attach_time : NoneType<br ALIGN="LEFT"/>device : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.support.exceptions.AttachmentSetExpired" [color="black", fontcolor="red", label=<{AttachmentSetExpired|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.AttachmentSetIdNotFound" [color="black", fontcolor="red", label=<{AttachmentSetIdNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.AttachmentSetSizeLimitExceeded" [color="black", fontcolor="red", label=<{AttachmentSetSizeLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.AttributeSet" [color="black", fontcolor="black", label=<{AttributeSet|ItemDimensions<br ALIGN="LEFT"/>ListPrice<br ALIGN="LEFT"/>PackageDimensions<br ALIGN="LEFT"/>SmallImage<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.attributes.AttributeValues" [color="black", fontcolor="black", label=<{AttributeValues|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.attributes.Attributes" [color="black", fontcolor="black", label=<{Attributes|current_key : NoneType<br ALIGN="LEFT"/>current_value : NoneType<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.AuthFailure" [color="black", fontcolor="red", label=<{AuthFailure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth_handler.AuthHandler" [color="black", fontcolor="black", label=<{AuthHandler|capability : list<br ALIGN="LEFT"/>|<I>add_auth</I>(http_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.utils.AuthSMTPHandler" [color="black", fontcolor="black", label=<{AuthSMTPHandler|password<br ALIGN="LEFT"/>username<br ALIGN="LEFT"/>|emit(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.AuthorizationAlreadyExists" [color="black", fontcolor="red", label=<{AuthorizationAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AuthorizationAlreadyExists" [color="black", fontcolor="red", label=<{AuthorizationAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AuthorizationAlreadyExistsFault" [color="black", fontcolor="red", label=<{AuthorizationAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.AuthorizationDetails" [color="black", fontcolor="black", label=<{AuthorizationDetails|AuthorizationAmount<br ALIGN="LEFT"/>AuthorizationFee<br ALIGN="LEFT"/>AuthorizationStatus<br ALIGN="LEFT"/>CapturedAmount<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.AuthorizationNotFound" [color="black", fontcolor="red", label=<{AuthorizationNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AuthorizationNotFound" [color="black", fontcolor="red", label=<{AuthorizationNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AuthorizationNotFoundFault" [color="black", fontcolor="red", label=<{AuthorizationNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.AuthorizationQuotaExceeded" [color="black", fontcolor="red", label=<{AuthorizationQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AuthorizationQuotaExceeded" [color="black", fontcolor="red", label=<{AuthorizationQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.AuthorizationQuotaExceededFault" [color="black", fontcolor="red", label=<{AuthorizationQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.AuthorizeResult" [color="black", fontcolor="black", label=<{AuthorizeResult|AuthorizationDetails<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.AutoScaleConnection" [color="black", fontcolor="black", label=<{AutoScaleConnection|APIVersion : object<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>use_block_device_types : bool<br ALIGN="LEFT"/>|attach_instances(name, instance_ids)<br ALIGN="LEFT"/>build_list_params(params, items, label)<br ALIGN="LEFT"/>create_auto_scaling_group(as_group)<br ALIGN="LEFT"/>create_launch_configuration(launch_config)<br ALIGN="LEFT"/>create_or_update_tags(tags)<br ALIGN="LEFT"/>create_scaling_policy(scaling_policy)<br ALIGN="LEFT"/>create_scheduled_group_action(as_group, name, time, desired_capacity, min_size, max_size, start_time, end_time, recurrence)<br ALIGN="LEFT"/>delete_auto_scaling_group(name, force_delete)<br ALIGN="LEFT"/>delete_launch_configuration(launch_config_name)<br ALIGN="LEFT"/>delete_notification_configuration(autoscale_group, topic)<br ALIGN="LEFT"/>delete_policy(policy_name, autoscale_group)<br ALIGN="LEFT"/>delete_scheduled_action(scheduled_action_name, autoscale_group)<br ALIGN="LEFT"/>delete_tags(tags)<br ALIGN="LEFT"/>detach_instances(name, instance_ids, decrement_capacity)<br ALIGN="LEFT"/>disable_metrics_collection(as_group, metrics)<br ALIGN="LEFT"/>enable_metrics_collection(as_group, granularity, metrics)<br ALIGN="LEFT"/>execute_policy(policy_name, as_group, honor_cooldown)<br ALIGN="LEFT"/>get_account_limits()<br ALIGN="LEFT"/>get_all_activities(autoscale_group, activity_ids, max_records, next_token)<br ALIGN="LEFT"/>get_all_adjustment_types()<br ALIGN="LEFT"/>get_all_autoscaling_instances(instance_ids, max_records, next_token)<br ALIGN="LEFT"/>get_all_groups(names, max_records, next_token)<br ALIGN="LEFT"/>get_all_launch_configurations()<br ALIGN="LEFT"/>get_all_metric_collection_types()<br ALIGN="LEFT"/>get_all_policies(as_group, policy_names, max_records, next_token)<br ALIGN="LEFT"/>get_all_scaling_process_types()<br ALIGN="LEFT"/>get_all_scheduled_actions(as_group, start_time, end_time, scheduled_actions, max_records, next_token)<br ALIGN="LEFT"/>get_all_tags(filters, max_records, next_token)<br ALIGN="LEFT"/>get_termination_policies()<br ALIGN="LEFT"/>put_notification_configuration(autoscale_group, topic, notification_types)<br ALIGN="LEFT"/>resume_processes(as_group, scaling_processes)<br ALIGN="LEFT"/>set_desired_capacity(group_name, desired_capacity, honor_cooldown)<br ALIGN="LEFT"/>set_instance_health(instance_id, health_status, should_respect_grace_period)<br ALIGN="LEFT"/>suspend_processes(as_group, scaling_processes)<br ALIGN="LEFT"/>terminate_instance(instance_id, decrement_capacity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.AutoScalingGroup" [color="black", fontcolor="black", label=<{AutoScalingGroup|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.group.AutoScalingGroup" [color="black", fontcolor="black", label=<{AutoScalingGroup|autoscaling_group_arn : NoneType<br ALIGN="LEFT"/>availability_zones<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>cooldown<br ALIGN="LEFT"/>created_time : NoneType<br ALIGN="LEFT"/>default_cooldown : int<br ALIGN="LEFT"/>desired_capacity : NoneType, int<br ALIGN="LEFT"/>enabled_metrics<br ALIGN="LEFT"/>health_check_period : NoneType, int<br ALIGN="LEFT"/>health_check_type : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>instances : NoneType<br ALIGN="LEFT"/>launch_config_name : NoneType<br ALIGN="LEFT"/>load_balancers<br ALIGN="LEFT"/>max_size : NoneType, int<br ALIGN="LEFT"/>min_size : NoneType, int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>placement_group : NoneType<br ALIGN="LEFT"/>suspended_processes<br ALIGN="LEFT"/>tags : NoneType<br ALIGN="LEFT"/>termination_policies<br ALIGN="LEFT"/>vpc_zone_identifier : NoneType, str<br ALIGN="LEFT"/>|delete(force_delete)<br ALIGN="LEFT"/>delete_notification_configuration(topic)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_activities(activity_ids, max_records)<br ALIGN="LEFT"/>put_notification_configuration(topic, notification_types)<br ALIGN="LEFT"/>resume_processes(scaling_processes)<br ALIGN="LEFT"/>set_capacity(capacity)<br ALIGN="LEFT"/>shutdown_instances()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>suspend_processes(scaling_processes)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.group.AutoScalingGroupMetric" [color="black", fontcolor="black", label=<{AutoScalingGroupMetric|connection : NoneType<br ALIGN="LEFT"/>granularity : NoneType<br ALIGN="LEFT"/>metric : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.optionstatus.AvailabilityOptionsStatus" [color="black", fontcolor="black", label=<{AvailabilityOptionsStatus|<br ALIGN="LEFT"/>|<I>save</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.BEGINS_WITH" [color="black", fontcolor="black", label=<{BEGINS_WITH|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.BETWEEN" [color="black", fontcolor="black", label=<{BETWEEN|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.services.bs.BS" [color="black", fontcolor="black", label=<{BS|Commands : dict<br ALIGN="LEFT"/>Usage : str<br ALIGN="LEFT"/>args<br ALIGN="LEFT"/>command<br ALIGN="LEFT"/>config_file<br ALIGN="LEFT"/>options<br ALIGN="LEFT"/>parser : OptionParser<br ALIGN="LEFT"/>sd<br ALIGN="LEFT"/>service_name : NoneType<br ALIGN="LEFT"/>|do_batches()<br ALIGN="LEFT"/>do_reset()<br ALIGN="LEFT"/>do_retrieve()<br ALIGN="LEFT"/>do_start()<br ALIGN="LEFT"/>do_status()<br ALIGN="LEFT"/>do_submit()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>print_command_help()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.loadbalancer.Backend" [color="black", fontcolor="black", label=<{Backend|connection : NoneType<br ALIGN="LEFT"/>instance_port : NoneType, int<br ALIGN="LEFT"/>policies : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.BaseAutoResultElement" [color="black", fontcolor="black", label=<{BaseAutoResultElement|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.exceptions.BaseException" [color="black", fontcolor="red", label=<{BaseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.fields.BaseIndexField" [color="black", fontcolor="black", label=<{BaseIndexField|name<br ALIGN="LEFT"/>parts<br ALIGN="LEFT"/>|definition()<br ALIGN="LEFT"/>schema()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.BaseObject" [color="black", fontcolor="black", label=<{BaseObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.fields.BaseSchemaField" [color="black", fontcolor="black", label=<{BaseSchemaField|attr_type : NoneType<br ALIGN="LEFT"/>data_type : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|definition()<br ALIGN="LEFT"/>schema()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.MetricCollectionTypes.BaseType" [color="black", fontcolor="black", label=<{BaseType|arg : str<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>val : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.batch.Batch" [color="black", fontcolor="black", label=<{Batch|attributes_to_get : NoneType<br ALIGN="LEFT"/>consistent_read : bool<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.results.BatchGetResultSet" [color="black", fontcolor="black", label=<{BatchGetResultSet|<br ALIGN="LEFT"/>|fetch_more()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.batch.BatchList" [color="black", fontcolor="black", label=<{BatchList|layer2<br ALIGN="LEFT"/>unprocessed : NoneType<br ALIGN="LEFT"/>|add_batch(table, keys, attributes_to_get, consistent_read)<br ALIGN="LEFT"/>resubmit()<br ALIGN="LEFT"/>submit()<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.batchresults.BatchResults" [color="black", fontcolor="black", label=<{BatchResults|errors : list<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>results : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.table.BatchTable" [color="black", fontcolor="black", label=<{BatchTable|table<br ALIGN="LEFT"/>|delete_item()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>handle_unprocessed(resp)<br ALIGN="LEFT"/>put_item(data, overwrite)<br ALIGN="LEFT"/>resend_unprocessed()<br ALIGN="LEFT"/>should_flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.batch.BatchWrite" [color="black", fontcolor="black", label=<{BatchWrite|deletes : list<br ALIGN="LEFT"/>puts : list<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.batch.BatchWriteList" [color="black", fontcolor="black", label=<{BatchWriteList|layer2<br ALIGN="LEFT"/>|add_batch(table, puts, deletes)<br ALIGN="LEFT"/>submit()<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.bigmessage.BigMessage" [color="black", fontcolor="black", label=<{BigMessage|s3_url : NoneType<br ALIGN="LEFT"/>|decode(value)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.image.BillingProducts" [color="black", fontcolor="black", label=<{BillingProducts|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.types.Binary" [color="black", fontcolor="black", label=<{Binary|value<br ALIGN="LEFT"/>|encode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.Binary" [color="black", fontcolor="black", label=<{Binary|template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.blob.Blob" [color="black", fontcolor="black", label=<{Blob|file<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>read()<br ALIGN="LEFT"/>readline()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.BlobProperty" [color="black", fontcolor="black", label=<{BlobProperty|data_type<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceMapping" [color="black", fontcolor="black", label=<{BlockDeviceMapping|connection : NoneType<br ALIGN="LEFT"/>current_name : NoneType<br ALIGN="LEFT"/>current_value : NoneType<br ALIGN="LEFT"/>|autoscale_build_list_params(params, prefix)<br ALIGN="LEFT"/>ec2_build_list_params(params, prefix)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.launchconfig.BlockDeviceMapping" [color="black", fontcolor="black", label=<{BlockDeviceMapping|connection : NoneType<br ALIGN="LEFT"/>device_name : NoneType<br ALIGN="LEFT"/>ebs : NoneType<br ALIGN="LEFT"/>no_device : NoneType<br ALIGN="LEFT"/>virtual_name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceType" [color="black", fontcolor="black", label=<{BlockDeviceType|attach_time : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>delete_on_termination : bool<br ALIGN="LEFT"/>encrypted : NoneType<br ALIGN="LEFT"/>ephemeral_name : NoneType<br ALIGN="LEFT"/>iops : NoneType, int<br ALIGN="LEFT"/>no_device : bool<br ALIGN="LEFT"/>size : NoneType, int<br ALIGN="LEFT"/>snapshot_id : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>volume_id : NoneType<br ALIGN="LEFT"/>volume_type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.BooleanProperty" [color="black", fontcolor="black", label=<{BooleanProperty|data_type : bool<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|empty(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.resultset.BooleanResult" [color="black", fontcolor="black", label=<{BooleanResult|box_usage : NoneType<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>status : bool<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_boolean(value, true_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.bootstrap.Bootstrap" [color="black", fontcolor="black", label=<{Bootstrap|working_dir : str<br ALIGN="LEFT"/>|create_working_dir()<br ALIGN="LEFT"/>fetch_s3_file(s3_file)<br ALIGN="LEFT"/>load_boto()<br ALIGN="LEFT"/>load_packages()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>write_metadata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.bootstrap_action.BootstrapAction" [color="black", fontcolor="black", label=<{BootstrapAction|bootstrap_action_args : list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>|args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.BootstrapAction" [color="black", fontcolor="black", label=<{BootstrapAction|Fields : set<br ALIGN="LEFT"/>args<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.BootstrapActionList" [color="black", fontcolor="black", label=<{BootstrapActionList|Fields : set<br ALIGN="LEFT"/>actions : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.BotoClientError" [color="black", fontcolor="red", label=<{BotoClientError|reason<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.BotoServerError" [color="black", fontcolor="red", label=<{BotoServerError|body : NoneType, str<br ALIGN="LEFT"/>box_usage : NoneType<br ALIGN="LEFT"/>error_code : NoneType<br ALIGN="LEFT"/>message : NoneType, str<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.file.bucket.Bucket" [color="black", fontcolor="black", label=<{Bucket|contained_key<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|delete_key(key_name, headers, version_id, mfa_token)<br ALIGN="LEFT"/>get_all_keys(headers)<br ALIGN="LEFT"/>get_key(key_name, headers, version_id, key_type)<br ALIGN="LEFT"/>new_key(key_name, key_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.bucket.Bucket" [color="black", fontcolor="black", label=<{Bucket|VersioningBody : str<br ALIGN="LEFT"/>WebsiteBody : str<br ALIGN="LEFT"/>WebsiteErrorFragment : str<br ALIGN="LEFT"/>WebsiteMainPageFragment : str<br ALIGN="LEFT"/>creation_date<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|add_email_grant(permission, email_address, recursive, headers)<br ALIGN="LEFT"/>add_group_email_grant(permission, email_address, recursive, headers)<br ALIGN="LEFT"/>add_user_grant(permission, user_id, recursive, headers)<br ALIGN="LEFT"/>configure_lifecycle(lifecycle_config, headers)<br ALIGN="LEFT"/>configure_versioning(enabled, headers)<br ALIGN="LEFT"/>configure_website(main_page_suffix, error_key, headers)<br ALIGN="LEFT"/>copy_key(new_key_name, src_bucket_name, src_key_name, metadata, src_version_id, storage_class, preserve_acl, encrypt_key, headers, query_args, src_generation)<br ALIGN="LEFT"/>delete_key(key_name, headers, version_id, mfa_token, generation)<br ALIGN="LEFT"/>delete_website_configuration(headers)<br ALIGN="LEFT"/>disable_logging(headers)<br ALIGN="LEFT"/>enable_logging(target_bucket, target_prefix, headers)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_acl(key_name, headers, version_id, generation)<br ALIGN="LEFT"/>get_cors(headers)<br ALIGN="LEFT"/>get_def_acl(headers)<br ALIGN="LEFT"/>get_key(key_name, headers, version_id, response_headers, generation)<br ALIGN="LEFT"/>get_lifecycle_config(headers)<br ALIGN="LEFT"/>get_logging_config(headers)<br ALIGN="LEFT"/>get_logging_config_with_xml(headers)<br ALIGN="LEFT"/>get_storage_class()<br ALIGN="LEFT"/>get_versioning_status(headers)<br ALIGN="LEFT"/>get_website_configuration(headers)<br ALIGN="LEFT"/>get_website_configuration_with_xml(headers)<br ALIGN="LEFT"/>get_xml_acl(key_name, headers, version_id, generation)<br ALIGN="LEFT"/>list_grants(headers)<br ALIGN="LEFT"/>list_versions(prefix, delimiter, marker, generation_marker, headers)<br ALIGN="LEFT"/>set_acl(acl_or_str, key_name, headers, version_id, generation, if_generation, if_metageneration)<br ALIGN="LEFT"/>set_canned_acl(acl_str, key_name, headers, version_id, generation, if_generation, if_metageneration)<br ALIGN="LEFT"/>set_cors(cors, headers)<br ALIGN="LEFT"/>set_def_acl(acl_or_str, headers)<br ALIGN="LEFT"/>set_def_canned_acl(acl_str, headers)<br ALIGN="LEFT"/>set_def_xml_acl(acl_str, headers)<br ALIGN="LEFT"/>set_xml_acl(acl_str, key_name, headers, version_id, query_args, generation, if_generation, if_metageneration)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>validate_get_all_versions_params(params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.bucket.Bucket" [color="black", fontcolor="black", label=<{Bucket|BucketPaymentBody : str<br ALIGN="LEFT"/>LoggingGroup : str<br ALIGN="LEFT"/>MFADeleteRE : str<br ALIGN="LEFT"/>VersionRE : str<br ALIGN="LEFT"/>VersioningBody : str<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>creation_date<br ALIGN="LEFT"/>distribution<br ALIGN="LEFT"/>key_class<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|add_email_grant(permission, email_address, recursive, headers)<br ALIGN="LEFT"/>add_user_grant(permission, user_id, recursive, headers, display_name)<br ALIGN="LEFT"/>cancel_multipart_upload(key_name, upload_id, headers)<br ALIGN="LEFT"/>complete_multipart_upload(key_name, upload_id, xml_body, headers)<br ALIGN="LEFT"/>configure_lifecycle(lifecycle_config, headers)<br ALIGN="LEFT"/>configure_versioning(versioning, mfa_delete, mfa_token, headers)<br ALIGN="LEFT"/>configure_website(suffix, error_key, redirect_all_requests_to, routing_rules, headers)<br ALIGN="LEFT"/>copy_key(new_key_name, src_bucket_name, src_key_name, metadata, src_version_id, storage_class, preserve_acl, encrypt_key, headers, query_args)<br ALIGN="LEFT"/>delete(headers)<br ALIGN="LEFT"/>delete_cors(headers)<br ALIGN="LEFT"/>delete_key(key_name, headers, version_id, mfa_token)<br ALIGN="LEFT"/>delete_keys(keys, quiet, mfa_token, headers)<br ALIGN="LEFT"/>delete_lifecycle_configuration(headers)<br ALIGN="LEFT"/>delete_policy(headers)<br ALIGN="LEFT"/>delete_tags(headers)<br ALIGN="LEFT"/>delete_website_configuration(headers)<br ALIGN="LEFT"/>disable_logging(headers)<br ALIGN="LEFT"/>enable_logging(target_bucket, target_prefix, grants, headers)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>generate_url(expires_in, method, headers, force_http, response_headers, expires_in_absolute)<br ALIGN="LEFT"/>get_acl(key_name, headers, version_id)<br ALIGN="LEFT"/>get_all_keys(headers)<br ALIGN="LEFT"/>get_all_multipart_uploads(headers)<br ALIGN="LEFT"/>get_all_versions(headers)<br ALIGN="LEFT"/>get_cors(headers)<br ALIGN="LEFT"/>get_cors_xml(headers)<br ALIGN="LEFT"/>get_key(key_name, headers, version_id, response_headers, validate)<br ALIGN="LEFT"/>get_lifecycle_config(headers)<br ALIGN="LEFT"/>get_location()<br ALIGN="LEFT"/>get_logging_status(headers)<br ALIGN="LEFT"/>get_policy(headers)<br ALIGN="LEFT"/>get_request_payment(headers)<br ALIGN="LEFT"/>get_subresource(subresource, key_name, headers, version_id)<br ALIGN="LEFT"/>get_tags()<br ALIGN="LEFT"/>get_versioning_status(headers)<br ALIGN="LEFT"/>get_website_configuration(headers)<br ALIGN="LEFT"/>get_website_configuration_obj(headers)<br ALIGN="LEFT"/>get_website_configuration_with_xml(headers)<br ALIGN="LEFT"/>get_website_configuration_xml(headers)<br ALIGN="LEFT"/>get_website_endpoint()<br ALIGN="LEFT"/>get_xml_acl(key_name, headers, version_id)<br ALIGN="LEFT"/>get_xml_tags()<br ALIGN="LEFT"/>initiate_multipart_upload(key_name, headers, reduced_redundancy, metadata, encrypt_key, policy)<br ALIGN="LEFT"/>list(prefix, delimiter, marker, headers, encoding_type)<br ALIGN="LEFT"/>list_grants(headers)<br ALIGN="LEFT"/>list_multipart_uploads(key_marker, upload_id_marker, headers, encoding_type)<br ALIGN="LEFT"/>list_versions(prefix, delimiter, key_marker, version_id_marker, headers, encoding_type)<br ALIGN="LEFT"/>lookup(key_name, headers)<br ALIGN="LEFT"/>make_public(recursive, headers)<br ALIGN="LEFT"/>new_key(key_name)<br ALIGN="LEFT"/>set_acl(acl_or_str, key_name, headers, version_id)<br ALIGN="LEFT"/>set_as_logging_target(headers)<br ALIGN="LEFT"/>set_canned_acl(acl_str, key_name, headers, version_id)<br ALIGN="LEFT"/>set_cors(cors_config, headers)<br ALIGN="LEFT"/>set_cors_xml(cors_xml, headers)<br ALIGN="LEFT"/>set_key_class(key_class)<br ALIGN="LEFT"/>set_policy(policy, headers)<br ALIGN="LEFT"/>set_request_payment(payer, headers)<br ALIGN="LEFT"/>set_subresource(subresource, value, key_name, headers, version_id)<br ALIGN="LEFT"/>set_tags(tags, headers)<br ALIGN="LEFT"/>set_website_configuration(config, headers)<br ALIGN="LEFT"/>set_website_configuration_xml(xml, headers)<br ALIGN="LEFT"/>set_xml_acl(acl_str, key_name, headers, version_id, query_args)<br ALIGN="LEFT"/>set_xml_logging(logging_str, headers)<br ALIGN="LEFT"/>set_xml_tags(tag_str, headers, query_args)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>validate_get_all_versions_params(params)<br ALIGN="LEFT"/>validate_kwarg_names(kwargs, names)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.bucketlistresultset.BucketListResultSet" [color="black", fontcolor="black", label=<{BucketListResultSet|bucket : NoneType<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>encoding_type : NoneType<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>marker : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.bucketlogging.BucketLogging" [color="black", fontcolor="black", label=<{BucketLogging|grants : list<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>target : NoneType<br ALIGN="LEFT"/>|add_grant(grant)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.BucketNameFilterRequiredException" [color="black", fontcolor="red", label=<{BucketNameFilterRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.BucketNotFound" [color="black", fontcolor="red", label=<{BucketNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.storage_uri.BucketStorageUri" [color="black", fontcolor="black", label=<{BucketStorageUri|bucket_name : NoneType<br ALIGN="LEFT"/>capabilities : set<br ALIGN="LEFT"/>connection_args : NoneType<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>delim : str<br ALIGN="LEFT"/>generation : NoneType<br ALIGN="LEFT"/>is_latest : bool<br ALIGN="LEFT"/>is_version_specific : bool<br ALIGN="LEFT"/>md5<br ALIGN="LEFT"/>object_name : NoneType<br ALIGN="LEFT"/>scheme<br ALIGN="LEFT"/>suppress_consec_slashes : bool<br ALIGN="LEFT"/>uri<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>version_specific_uri<br ALIGN="LEFT"/>versionless_uri<br ALIGN="LEFT"/>|add_email_grant(permission, email_address, recursive, validate, headers)<br ALIGN="LEFT"/>add_group_email_grant(permission, email_address, recursive, validate, headers)<br ALIGN="LEFT"/>add_user_grant(permission, user_id, recursive, validate, headers)<br ALIGN="LEFT"/>clone_replace_key(key)<br ALIGN="LEFT"/>clone_replace_name(new_name)<br ALIGN="LEFT"/>compose(components, content_type, headers)<br ALIGN="LEFT"/>configure_lifecycle(lifecycle_config, validate, headers)<br ALIGN="LEFT"/>configure_versioning(enabled, headers)<br ALIGN="LEFT"/>copy_key(src_bucket_name, src_key_name, metadata, src_version_id, storage_class, preserve_acl, encrypt_key, headers, query_args, src_generation)<br ALIGN="LEFT"/>create_bucket(headers, location, policy, storage_class)<br ALIGN="LEFT"/>delete_bucket(headers)<br ALIGN="LEFT"/>delete_key(validate, headers, version_id, mfa_token)<br ALIGN="LEFT"/>disable_logging(validate, headers, version_id)<br ALIGN="LEFT"/>enable_logging(target_bucket, target_prefix, validate, headers, version_id)<br ALIGN="LEFT"/>exists(headers)<br ALIGN="LEFT"/>get_acl(validate, headers, version_id)<br ALIGN="LEFT"/>get_all_buckets(headers)<br ALIGN="LEFT"/>get_cors(validate, headers)<br ALIGN="LEFT"/>get_def_acl(validate, headers)<br ALIGN="LEFT"/>get_key(validate, headers, version_id)<br ALIGN="LEFT"/>get_lifecycle_config(validate, headers)<br ALIGN="LEFT"/>get_location(validate, headers)<br ALIGN="LEFT"/>get_logging_config(validate, headers, version_id)<br ALIGN="LEFT"/>get_provider()<br ALIGN="LEFT"/>get_storage_class(validate, headers)<br ALIGN="LEFT"/>get_subresource(subresource, validate, headers, version_id)<br ALIGN="LEFT"/>get_versioning_config(headers)<br ALIGN="LEFT"/>get_website_config(validate, headers)<br ALIGN="LEFT"/>is_cloud_uri()<br ALIGN="LEFT"/>is_file_uri()<br ALIGN="LEFT"/>is_stream()<br ALIGN="LEFT"/>list_grants(headers)<br ALIGN="LEFT"/>names_bucket()<br ALIGN="LEFT"/>names_container()<br ALIGN="LEFT"/>names_directory()<br ALIGN="LEFT"/>names_file()<br ALIGN="LEFT"/>names_object()<br ALIGN="LEFT"/>names_provider()<br ALIGN="LEFT"/>names_singleton()<br ALIGN="LEFT"/>set_acl(acl_or_str, key_name, validate, headers, version_id, if_generation, if_metageneration)<br ALIGN="LEFT"/>set_canned_acl(acl_str, validate, headers, version_id)<br ALIGN="LEFT"/>set_contents_from_file(fp, headers, replace, cb, num_cb, policy, md5, size, rewind, res_upload_handler)<br ALIGN="LEFT"/>set_contents_from_stream(fp, headers, replace, cb, policy, reduced_redundancy)<br ALIGN="LEFT"/>set_contents_from_string(s, headers, replace, cb, num_cb, policy, md5, reduced_redundancy)<br ALIGN="LEFT"/>set_cors(cors, validate, headers)<br ALIGN="LEFT"/>set_def_acl(acl_or_str, validate, headers, version_id)<br ALIGN="LEFT"/>set_def_canned_acl(acl_str, validate, headers, version_id)<br ALIGN="LEFT"/>set_def_xml_acl(xmlstring, validate, headers)<br ALIGN="LEFT"/>set_metadata(metadata_plus, metadata_minus, preserve_acl, headers)<br ALIGN="LEFT"/>set_subresource(subresource, value, validate, headers, version_id)<br ALIGN="LEFT"/>set_website_config(main_page_suffix, error_key, validate, headers)<br ALIGN="LEFT"/>set_xml_acl(xmlstring, key_name, validate, headers, version_id, if_generation, if_metageneration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.bundleinstance.BundleInstanceTask" [color="black", fontcolor="black", label=<{BundleInstanceTask|bucket : NoneType<br ALIGN="LEFT"/>code : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>progress : NoneType<br ALIGN="LEFT"/>start_time : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>update_time : NoneType<br ALIGN="LEFT"/>upload_policy : NoneType<br ALIGN="LEFT"/>upload_policy_signature : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.server.Bundler" [color="black", fontcolor="black", label=<{Bundler|image_id<br ALIGN="LEFT"/>remote_cert_file<br ALIGN="LEFT"/>remote_key_file<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>ssh_client<br ALIGN="LEFT"/>uname : str<br ALIGN="LEFT"/>|bundle(bucket, prefix, key_file, cert_file, size, ssh_key, fp, clear_history)<br ALIGN="LEFT"/>bundle_image(prefix, size, ssh_key)<br ALIGN="LEFT"/>copy_x509(key_file, cert_file)<br ALIGN="LEFT"/>upload_bundle(bucket, prefix, ssh_key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.buyreservation.BuyReservation" [color="black", fontcolor="black", label=<{BuyReservation|ec2<br ALIGN="LEFT"/>|get(params)<br ALIGN="LEFT"/>get_instance_type(params)<br ALIGN="LEFT"/>get_quantity(params)<br ALIGN="LEFT"/>get_region(params)<br ALIGN="LEFT"/>get_zone(params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.resumable_download_handler.ByteTranslatingCallbackHandler" [color="black", fontcolor="black", label=<{ByteTranslatingCallbackHandler|download_start_point<br ALIGN="LEFT"/>proxied_cb<br ALIGN="LEFT"/>|call(total_bytes_uploaded, total_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.CONTAINS" [color="black", fontcolor="black", label=<{CONTAINS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.cors.CORSConfiguration" [color="black", fontcolor="black", label=<{CORSConfiguration|<br ALIGN="LEFT"/>|add_rule(allowed_method, allowed_origin, id, allowed_header, max_age_seconds, expose_header)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.cors.CORSRule" [color="black", fontcolor="black", label=<{CORSRule|allowed_header : NoneType, list<br ALIGN="LEFT"/>allowed_method : NoneType, list<br ALIGN="LEFT"/>allowed_origin : NoneType, list<br ALIGN="LEFT"/>expose_header : NoneType, list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>max_age_seconds : NoneType, int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.CalculatedProperty" [color="black", fontcolor="black", label=<{CalculatedProperty|calculated_type : int<br ALIGN="LEFT"/>use_method : bool<br ALIGN="LEFT"/>|get_value_for_datastore(model_instance)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.CancelFeedSubmissionsResult" [color="black", fontcolor="black", label=<{CancelFeedSubmissionsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CancelReportRequestsResult" [color="black", fontcolor="black", label=<{CancelReportRequestsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudformation.stack.Capability" [color="black", fontcolor="black", label=<{Capability|connection : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.CaptureDetails" [color="black", fontcolor="black", label=<{CaptureDetails|CaptureAmount<br ALIGN="LEFT"/>CaptureFee<br ALIGN="LEFT"/>CaptureStatus<br ALIGN="LEFT"/>RefundedAmount<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CaptureResult" [color="black", fontcolor="black", label=<{CaptureResult|CaptureDetails<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.Cart" [color="black", fontcolor="black", label=<{Cart|ActiveCartItemList<br ALIGN="LEFT"/>SavedCartItemList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CartItem" [color="black", fontcolor="black", label=<{CartItem|CurrentPrice<br ALIGN="LEFT"/>SalePrice<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.CaseCreationLimitExceeded" [color="black", fontcolor="red", label=<{CaseCreationLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.CaseIdNotFound" [color="black", fontcolor="red", label=<{CaseIdNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.https_connection.CertValidatingHTTPSConnection" [color="black", fontcolor="black", label=<{CertValidatingHTTPSConnection|ca_certs : NoneType<br ALIGN="LEFT"/>cert_file : NoneType<br ALIGN="LEFT"/>default_port<br ALIGN="LEFT"/>key_file : NoneType<br ALIGN="LEFT"/>response_class<br ALIGN="LEFT"/>sock<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.CheckDNSAvailabilityResponse" [color="black", fontcolor="black", label=<{CheckDNSAvailabilityResponse|available<br ALIGN="LEFT"/>fully_qualified_cname : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.CheckDnsAvailabilityResponse" [color="black", fontcolor="black", label=<{CheckDnsAvailabilityResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2containerservice.exceptions.ClientException" [color="black", fontcolor="red", label=<{ClientException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudformation.connection.CloudFormationConnection" [color="black", fontcolor="black", label=<{CloudFormationConnection|APIVersion : object<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>valid_states : tuple<br ALIGN="LEFT"/>|cancel_update_stack(stack_name_or_id)<br ALIGN="LEFT"/>create_stack(stack_name, template_body, template_url, parameters, notification_arns, disable_rollback, timeout_in_minutes, capabilities, tags, on_failure, stack_policy_body, stack_policy_url)<br ALIGN="LEFT"/>delete_stack(stack_name_or_id)<br ALIGN="LEFT"/>describe_stack_events(stack_name_or_id, next_token)<br ALIGN="LEFT"/>describe_stack_resource(stack_name_or_id, logical_resource_id)<br ALIGN="LEFT"/>describe_stack_resources(stack_name_or_id, logical_resource_id, physical_resource_id)<br ALIGN="LEFT"/>describe_stacks(stack_name_or_id, next_token)<br ALIGN="LEFT"/>encode_bool(v)<br ALIGN="LEFT"/>estimate_template_cost(template_body, template_url, parameters)<br ALIGN="LEFT"/>get_stack_policy(stack_name_or_id)<br ALIGN="LEFT"/>get_template(stack_name_or_id)<br ALIGN="LEFT"/>list_stack_resources(stack_name_or_id, next_token)<br ALIGN="LEFT"/>list_stacks(stack_status_filters, next_token)<br ALIGN="LEFT"/>set_stack_policy(stack_name_or_id, stack_policy_body, stack_policy_url)<br ALIGN="LEFT"/>update_stack(stack_name, template_body, template_url, parameters, notification_arns, disable_rollback, timeout_in_minutes, capabilities, tags, use_previous_template, stack_policy_during_update_body, stack_policy_during_update_url, stack_policy_body, stack_policy_url)<br ALIGN="LEFT"/>validate_template(template_body, template_url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.CloudFrontConnection" [color="black", fontcolor="black", label=<{CloudFrontConnection|DefaultHost : str<br ALIGN="LEFT"/>Version : str<br ALIGN="LEFT"/>|create_distribution(origin, enabled, caller_reference, cnames, comment, trusted_signers)<br ALIGN="LEFT"/>create_invalidation_request(distribution_id, paths, caller_reference)<br ALIGN="LEFT"/>create_origin_access_identity(caller_reference, comment)<br ALIGN="LEFT"/>create_streaming_distribution(origin, enabled, caller_reference, cnames, comment, trusted_signers)<br ALIGN="LEFT"/>delete_distribution(distribution_id, etag)<br ALIGN="LEFT"/>delete_origin_access_identity(access_id, etag)<br ALIGN="LEFT"/>delete_streaming_distribution(distribution_id, etag)<br ALIGN="LEFT"/>get_all_distributions()<br ALIGN="LEFT"/>get_all_origin_access_identity()<br ALIGN="LEFT"/>get_all_streaming_distributions()<br ALIGN="LEFT"/>get_distribution_config(distribution_id)<br ALIGN="LEFT"/>get_distribution_info(distribution_id)<br ALIGN="LEFT"/>get_etag(response)<br ALIGN="LEFT"/>get_invalidation_requests(distribution_id, marker, max_items)<br ALIGN="LEFT"/>get_origin_access_identity_config(access_id)<br ALIGN="LEFT"/>get_origin_access_identity_info(access_id)<br ALIGN="LEFT"/>get_streaming_distribution_config(distribution_id)<br ALIGN="LEFT"/>get_streaming_distribution_info(distribution_id)<br ALIGN="LEFT"/>invalidation_request_status(distribution_id, request_id, caller_reference)<br ALIGN="LEFT"/>set_distribution_config(distribution_id, etag, config)<br ALIGN="LEFT"/>set_origin_access_identity_config(access_id, etag, config)<br ALIGN="LEFT"/>set_streaming_distribution_config(distribution_id, etag, config)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.exception.CloudFrontServerError" [color="black", fontcolor="red", label=<{CloudFrontServerError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudhsm.layer1.CloudHSMConnection" [color="black", fontcolor="black", label=<{CloudHSMConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_hapg(label)<br ALIGN="LEFT"/>create_hsm(subnet_id, ssh_key, iam_role_arn, subscription_type, eni_ip, external_id, client_token, syslog_ip)<br ALIGN="LEFT"/>create_luna_client(certificate, label)<br ALIGN="LEFT"/>delete_hapg(hapg_arn)<br ALIGN="LEFT"/>delete_hsm(hsm_arn)<br ALIGN="LEFT"/>delete_luna_client(client_arn)<br ALIGN="LEFT"/>describe_hapg(hapg_arn)<br ALIGN="LEFT"/>describe_hsm(hsm_arn, hsm_serial_number)<br ALIGN="LEFT"/>describe_luna_client(client_arn, certificate_fingerprint)<br ALIGN="LEFT"/>get_config(client_arn, client_version, hapg_list)<br ALIGN="LEFT"/>list_available_zones()<br ALIGN="LEFT"/>list_hapgs(next_token)<br ALIGN="LEFT"/>list_hsms(next_token)<br ALIGN="LEFT"/>list_luna_clients(next_token)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>modify_hapg(hapg_arn, label, partition_serial_list)<br ALIGN="LEFT"/>modify_hsm(hsm_arn, subnet_id, eni_ip, iam_role_arn, external_id, syslog_ip)<br ALIGN="LEFT"/>modify_luna_client(client_arn, certificate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudhsm.exceptions.CloudHsmInternalException" [color="black", fontcolor="red", label=<{CloudHsmInternalException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudhsm.exceptions.CloudHsmServiceException" [color="black", fontcolor="red", label=<{CloudHsmServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.layer1.CloudSearchConnection" [color="black", fontcolor="black", label=<{CloudSearchConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>sign_request<br ALIGN="LEFT"/>|build_complex_param(params, label, value)<br ALIGN="LEFT"/>build_suggesters(domain_name)<br ALIGN="LEFT"/>create_domain(domain_name)<br ALIGN="LEFT"/>define_analysis_scheme(domain_name, analysis_scheme)<br ALIGN="LEFT"/>define_expression(domain_name, expression)<br ALIGN="LEFT"/>define_index_field(domain_name, index_field)<br ALIGN="LEFT"/>define_suggester(domain_name, suggester)<br ALIGN="LEFT"/>delete_analysis_scheme(domain_name, analysis_scheme_name)<br ALIGN="LEFT"/>delete_domain(domain_name)<br ALIGN="LEFT"/>delete_expression(domain_name, expression_name)<br ALIGN="LEFT"/>delete_index_field(domain_name, index_field_name)<br ALIGN="LEFT"/>delete_suggester(domain_name, suggester_name)<br ALIGN="LEFT"/>describe_analysis_schemes(domain_name, analysis_scheme_names, deployed)<br ALIGN="LEFT"/>describe_availability_options(domain_name, deployed)<br ALIGN="LEFT"/>describe_domains(domain_names)<br ALIGN="LEFT"/>describe_expressions(domain_name, expression_names, deployed)<br ALIGN="LEFT"/>describe_index_fields(domain_name, field_names, deployed)<br ALIGN="LEFT"/>describe_scaling_parameters(domain_name)<br ALIGN="LEFT"/>describe_service_access_policies(domain_name, deployed)<br ALIGN="LEFT"/>describe_suggesters(domain_name, suggester_names, deployed)<br ALIGN="LEFT"/>index_documents(domain_name)<br ALIGN="LEFT"/>list_domain_names()<br ALIGN="LEFT"/>update_availability_options(domain_name, multi_az)<br ALIGN="LEFT"/>update_scaling_parameters(domain_name, scaling_parameters)<br ALIGN="LEFT"/>update_service_access_policies(domain_name, access_policies)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearchdomain.layer1.CloudSearchDomainConnection" [color="black", fontcolor="black", label=<{CloudSearchDomainConnection|APIVersion : str<br ALIGN="LEFT"/>AuthServiceName : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|make_request(verb, resource, headers, data, expected_status, params)<br ALIGN="LEFT"/>search(query, cursor, expr, facet, filter_query, highlight, partial, query_options, query_parser, ret, size, sort, start)<br ALIGN="LEFT"/>suggest(query, suggester, size)<br ALIGN="LEFT"/>upload_documents(documents, content_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudtrail.layer1.CloudTrailConnection" [color="black", fontcolor="black", label=<{CloudTrailConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_trail(name, s3_bucket_name, s3_key_prefix, sns_topic_name, include_global_service_events, cloud_watch_logs_log_group_arn, cloud_watch_logs_role_arn)<br ALIGN="LEFT"/>delete_trail(name)<br ALIGN="LEFT"/>describe_trails(trail_name_list)<br ALIGN="LEFT"/>get_trail_status(name)<br ALIGN="LEFT"/>lookup_events(lookup_attributes, start_time, end_time, max_results, next_token)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>start_logging(name)<br ALIGN="LEFT"/>stop_logging(name)<br ALIGN="LEFT"/>update_trail(name, s3_bucket_name, s3_key_prefix, sns_topic_name, include_global_service_events, cloud_watch_logs_log_group_arn, cloud_watch_logs_role_arn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.CloudWatchConnection" [color="black", fontcolor="black", label=<{CloudWatchConnection|APIVersion : object<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>create_alarm<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>update_alarm<br ALIGN="LEFT"/>|build_dimension_param(dimension, params)<br ALIGN="LEFT"/>build_list_params(params, items, label)<br ALIGN="LEFT"/>build_put_params(params, name, value, timestamp, unit, dimensions, statistics)<br ALIGN="LEFT"/>delete_alarms(alarms)<br ALIGN="LEFT"/>describe_alarm_history(alarm_name, start_date, end_date, max_records, history_item_type, next_token)<br ALIGN="LEFT"/>describe_alarms(action_prefix, alarm_name_prefix, alarm_names, max_records, state_value, next_token)<br ALIGN="LEFT"/>describe_alarms_for_metric(metric_name, namespace, period, statistic, dimensions, unit)<br ALIGN="LEFT"/>disable_alarm_actions(alarm_names)<br ALIGN="LEFT"/>enable_alarm_actions(alarm_names)<br ALIGN="LEFT"/>get_metric_statistics(period, start_time, end_time, metric_name, namespace, statistics, dimensions, unit)<br ALIGN="LEFT"/>list_metrics(next_token, dimensions, metric_name, namespace)<br ALIGN="LEFT"/>put_metric_alarm(alarm)<br ALIGN="LEFT"/>put_metric_data(namespace, name, value, timestamp, unit, dimensions, statistics)<br ALIGN="LEFT"/>set_alarm_state(alarm_name, state_reason, state_value, state_reason_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.logs.layer1.CloudWatchLogsConnection" [color="black", fontcolor="black", label=<{CloudWatchLogsConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_log_group(log_group_name)<br ALIGN="LEFT"/>create_log_stream(log_group_name, log_stream_name)<br ALIGN="LEFT"/>delete_log_group(log_group_name)<br ALIGN="LEFT"/>delete_log_stream(log_group_name, log_stream_name)<br ALIGN="LEFT"/>delete_metric_filter(log_group_name, filter_name)<br ALIGN="LEFT"/>delete_retention_policy(log_group_name)<br ALIGN="LEFT"/>describe_log_groups(log_group_name_prefix, next_token, limit)<br ALIGN="LEFT"/>describe_log_streams(log_group_name, log_stream_name_prefix, next_token, limit)<br ALIGN="LEFT"/>describe_metric_filters(log_group_name, filter_name_prefix, next_token, limit)<br ALIGN="LEFT"/>get_log_events(log_group_name, log_stream_name, start_time, end_time, next_token, limit, start_from_head)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>put_log_events(log_group_name, log_stream_name, log_events, sequence_token)<br ALIGN="LEFT"/>put_metric_filter(log_group_name, filter_name, filter_pattern, metric_transformations)<br ALIGN="LEFT"/>put_retention_policy(log_group_name, retention_in_days)<br ALIGN="LEFT"/>set_retention(log_group_name, retention_in_days)<br ALIGN="LEFT"/>test_metric_filter(filter_pattern, log_event_messages)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.CloudWatchLogsDeliveryUnavailableException" [color="black", fontcolor="red", label=<{CloudWatchLogsDeliveryUnavailableException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.Cluster" [color="black", fontcolor="black", label=<{Cluster|Fields : set<br ALIGN="LEFT"/>applications : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>ec2instanceattributes : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>tags : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterAlreadyExists" [color="black", fontcolor="red", label=<{ClusterAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterAlreadyExistsFault" [color="black", fontcolor="red", label=<{ClusterAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterNotFound" [color="black", fontcolor="red", label=<{ClusterNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterNotFoundFault" [color="black", fontcolor="red", label=<{ClusterNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterParameterGroupAlreadyExists" [color="black", fontcolor="red", label=<{ClusterParameterGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterParameterGroupAlreadyExistsFault" [color="black", fontcolor="red", label=<{ClusterParameterGroupAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterParameterGroupNotFound" [color="black", fontcolor="red", label=<{ClusterParameterGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterParameterGroupNotFoundFault" [color="black", fontcolor="red", label=<{ClusterParameterGroupNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterParameterGroupQuotaExceeded" [color="black", fontcolor="red", label=<{ClusterParameterGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterParameterGroupQuotaExceededFault" [color="black", fontcolor="red", label=<{ClusterParameterGroupQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterQuotaExceeded" [color="black", fontcolor="red", label=<{ClusterQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterQuotaExceededFault" [color="black", fontcolor="red", label=<{ClusterQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSecurityGroupAlreadyExists" [color="black", fontcolor="red", label=<{ClusterSecurityGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSecurityGroupAlreadyExistsFault" [color="black", fontcolor="red", label=<{ClusterSecurityGroupAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSecurityGroupNotFound" [color="black", fontcolor="red", label=<{ClusterSecurityGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSecurityGroupNotFoundFault" [color="black", fontcolor="red", label=<{ClusterSecurityGroupNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSecurityGroupQuotaExceeded" [color="black", fontcolor="red", label=<{ClusterSecurityGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSecurityGroupQuotaExceededFault" [color="black", fontcolor="red", label=<{ClusterSecurityGroupQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSnapshotAlreadyExists" [color="black", fontcolor="red", label=<{ClusterSnapshotAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSnapshotAlreadyExistsFault" [color="black", fontcolor="red", label=<{ClusterSnapshotAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSnapshotNotFound" [color="black", fontcolor="red", label=<{ClusterSnapshotNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSnapshotNotFoundFault" [color="black", fontcolor="red", label=<{ClusterSnapshotNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSnapshotQuotaExceeded" [color="black", fontcolor="red", label=<{ClusterSnapshotQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSnapshotQuotaExceededFault" [color="black", fontcolor="red", label=<{ClusterSnapshotQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.ClusterStateChangeReason" [color="black", fontcolor="black", label=<{ClusterStateChangeReason|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.ClusterStatus" [color="black", fontcolor="black", label=<{ClusterStatus|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>statechangereason<br ALIGN="LEFT"/>timeline : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetGroupAlreadyExists" [color="black", fontcolor="red", label=<{ClusterSubnetGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetGroupAlreadyExistsFault" [color="black", fontcolor="red", label=<{ClusterSubnetGroupAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetGroupNotFound" [color="black", fontcolor="red", label=<{ClusterSubnetGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetGroupNotFoundFault" [color="black", fontcolor="red", label=<{ClusterSubnetGroupNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetGroupQuotaExceeded" [color="black", fontcolor="red", label=<{ClusterSubnetGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetGroupQuotaExceededFault" [color="black", fontcolor="red", label=<{ClusterSubnetGroupQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetQuotaExceeded" [color="black", fontcolor="red", label=<{ClusterSubnetQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ClusterSubnetQuotaExceededFault" [color="black", fontcolor="red", label=<{ClusterSubnetQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.ClusterSummary" [color="black", fontcolor="black", label=<{ClusterSummary|Fields : set<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.ClusterSummaryList" [color="black", fontcolor="black", label=<{ClusterSummaryList|Fields : set<br ALIGN="LEFT"/>clusters : NoneType<br ALIGN="LEFT"/>connection<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.ClusterTimeline" [color="black", fontcolor="black", label=<{ClusterTimeline|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.layer1.CodeDeployConnection" [color="black", fontcolor="black", label=<{CodeDeployConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|batch_get_applications(application_names)<br ALIGN="LEFT"/>batch_get_deployments(deployment_ids)<br ALIGN="LEFT"/>create_application(application_name)<br ALIGN="LEFT"/>create_deployment(application_name, deployment_group_name, revision, deployment_config_name, description, ignore_application_stop_failures)<br ALIGN="LEFT"/>create_deployment_config(deployment_config_name, minimum_healthy_hosts)<br ALIGN="LEFT"/>create_deployment_group(application_name, deployment_group_name, deployment_config_name, ec_2_tag_filters, auto_scaling_groups, service_role_arn)<br ALIGN="LEFT"/>delete_application(application_name)<br ALIGN="LEFT"/>delete_deployment_config(deployment_config_name)<br ALIGN="LEFT"/>delete_deployment_group(application_name, deployment_group_name)<br ALIGN="LEFT"/>get_application(application_name)<br ALIGN="LEFT"/>get_application_revision(application_name, revision)<br ALIGN="LEFT"/>get_deployment(deployment_id)<br ALIGN="LEFT"/>get_deployment_config(deployment_config_name)<br ALIGN="LEFT"/>get_deployment_group(application_name, deployment_group_name)<br ALIGN="LEFT"/>get_deployment_instance(deployment_id, instance_id)<br ALIGN="LEFT"/>list_application_revisions(application_name, sort_by, sort_order, s_3_bucket, s_3_key_prefix, deployed, next_token)<br ALIGN="LEFT"/>list_applications(next_token)<br ALIGN="LEFT"/>list_deployment_configs(next_token)<br ALIGN="LEFT"/>list_deployment_groups(application_name, next_token)<br ALIGN="LEFT"/>list_deployment_instances(deployment_id, next_token, instance_status_filter)<br ALIGN="LEFT"/>list_deployments(application_name, deployment_group_name, include_only_statuses, create_time_range, next_token)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>register_application_revision(application_name, revision, description)<br ALIGN="LEFT"/>stop_deployment(deployment_id)<br ALIGN="LEFT"/>update_application(application_name, new_application_name)<br ALIGN="LEFT"/>update_deployment_group(application_name, current_deployment_group_name, new_deployment_group_name, deployment_config_name, ec_2_tag_filters, auto_scaling_groups, service_role_arn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cognito.identity.layer1.CognitoIdentityConnection" [color="black", fontcolor="black", label=<{CognitoIdentityConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_identity_pool(identity_pool_name, allow_unauthenticated_identities, supported_login_providers, developer_provider_name, open_id_connect_provider_ar_ns)<br ALIGN="LEFT"/>delete_identity_pool(identity_pool_id)<br ALIGN="LEFT"/>describe_identity_pool(identity_pool_id)<br ALIGN="LEFT"/>get_id(account_id, identity_pool_id, logins)<br ALIGN="LEFT"/>get_open_id_token(identity_id, logins)<br ALIGN="LEFT"/>get_open_id_token_for_developer_identity(identity_pool_id, logins, identity_id, token_duration)<br ALIGN="LEFT"/>list_identities(identity_pool_id, max_results, next_token)<br ALIGN="LEFT"/>list_identity_pools(max_results, next_token)<br ALIGN="LEFT"/>lookup_developer_identity(identity_pool_id, identity_id, developer_user_identifier, max_results, next_token)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>merge_developer_identities(source_user_identifier, destination_user_identifier, developer_provider_name, identity_pool_id)<br ALIGN="LEFT"/>unlink_developer_identity(identity_id, identity_pool_id, developer_provider_name, developer_user_identifier)<br ALIGN="LEFT"/>unlink_identity(identity_id, logins, logins_to_remove)<br ALIGN="LEFT"/>update_identity_pool(identity_pool_id, identity_pool_name, allow_unauthenticated_identities, supported_login_providers, developer_provider_name, open_id_connect_provider_ar_ns)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cognito.sync.layer1.CognitoSyncConnection" [color="black", fontcolor="black", label=<{CognitoSyncConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|delete_dataset(identity_pool_id, identity_id, dataset_name)<br ALIGN="LEFT"/>describe_dataset(identity_pool_id, identity_id, dataset_name)<br ALIGN="LEFT"/>describe_identity_pool_usage(identity_pool_id)<br ALIGN="LEFT"/>describe_identity_usage(identity_pool_id, identity_id)<br ALIGN="LEFT"/>get_identity_pool_configuration(identity_pool_id)<br ALIGN="LEFT"/>list_datasets(identity_pool_id, identity_id, next_token, max_results)<br ALIGN="LEFT"/>list_identity_pool_usage(next_token, max_results)<br ALIGN="LEFT"/>list_records(identity_pool_id, identity_id, dataset_name, last_sync_count, next_token, max_results, sync_session_token)<br ALIGN="LEFT"/>make_request(verb, resource, headers, data, expected_status, params)<br ALIGN="LEFT"/>register_device(identity_pool_id, identity_id, platform, token)<br ALIGN="LEFT"/>set_identity_pool_configuration(identity_pool_id, push_sync)<br ALIGN="LEFT"/>subscribe_to_dataset(identity_pool_id, identity_id, dataset_name, device_id)<br ALIGN="LEFT"/>unsubscribe_from_dataset(identity_pool_id, identity_id, dataset_name, device_id)<br ALIGN="LEFT"/>update_records(identity_pool_id, identity_id, dataset_name, sync_session_token, device_id, record_patches, client_context)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.server.CommandLineGetter" [color="black", fontcolor="black", label=<{CommandLineGetter|cls<br ALIGN="LEFT"/>ec2<br ALIGN="LEFT"/>|get(cls, params)<br ALIGN="LEFT"/>get_ami_id(params)<br ALIGN="LEFT"/>get_ami_list()<br ALIGN="LEFT"/>get_description(params)<br ALIGN="LEFT"/>get_group(params)<br ALIGN="LEFT"/>get_instance_type(params)<br ALIGN="LEFT"/>get_key(params)<br ALIGN="LEFT"/>get_name(params)<br ALIGN="LEFT"/>get_quantity(params)<br ALIGN="LEFT"/>get_region(params)<br ALIGN="LEFT"/>get_zone(params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.volume.CommandLineGetter" [color="black", fontcolor="black", label=<{CommandLineGetter|cls<br ALIGN="LEFT"/>ec2<br ALIGN="LEFT"/>|get(cls, params)<br ALIGN="LEFT"/>get_device(params)<br ALIGN="LEFT"/>get_mount_point(params)<br ALIGN="LEFT"/>get_name(params)<br ALIGN="LEFT"/>get_region(params)<br ALIGN="LEFT"/>get_size(params)<br ALIGN="LEFT"/>get_zone(params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.document.CommitMismatchError" [color="black", fontcolor="red", label=<{CommitMismatchError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.search.CommitMismatchError" [color="black", fontcolor="red", label=<{CommitMismatchError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.document.CommitMismatchError" [color="black", fontcolor="red", label=<{CommitMismatchError|errors : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.document.CommitResponse" [color="black", fontcolor="black", label=<{CommitResponse|adds<br ALIGN="LEFT"/>content<br ALIGN="LEFT"/>deletes<br ALIGN="LEFT"/>doc_service<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>sdf<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.document.CommitResponse" [color="black", fontcolor="black", label=<{CommitResponse|adds<br ALIGN="LEFT"/>content<br ALIGN="LEFT"/>deletes<br ALIGN="LEFT"/>doc_service<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>sdf<br ALIGN="LEFT"/>signed_request : bool<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CompetitivePrice" [color="black", fontcolor="black", label=<{CompetitivePrice|Price<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CompetitivePriceList" [color="black", fontcolor="black", label=<{CompetitivePriceList|CompetitivePrice<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CompetitivePricing" [color="black", fontcolor="black", label=<{CompetitivePricing|CompetitivePrices<br ALIGN="LEFT"/>NumberOfOfferListings<br ALIGN="LEFT"/>TradeInValue<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.multipart.CompleteMultiPartUpload" [color="black", fontcolor="black", label=<{CompleteMultiPartUpload|bucket : NoneType<br ALIGN="LEFT"/>bucket_name : NoneType<br ALIGN="LEFT"/>encrypted : NoneType<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>key_name : NoneType<br ALIGN="LEFT"/>location : NoneType<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.ComplexAmount" [color="black", fontcolor="black", label=<{ComplexAmount|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ComplexAmount" [color="black", fontcolor="black", label=<{ComplexAmount|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ComplexDimensions" [color="black", fontcolor="black", label=<{ComplexDimensions|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ComplexMoney" [color="black", fontcolor="black", label=<{ComplexMoney|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ComplexType" [color="black", fontcolor="black", label=<{ComplexType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ComplexWeight" [color="black", fontcolor="black", label=<{ComplexWeight|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.concurrent.ConcurrentDownloader" [color="black", fontcolor="black", label=<{ConcurrentDownloader|<br ALIGN="LEFT"/>|download(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.ConcurrentModification" [color="black", fontcolor="red", label=<{ConcurrentModification|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.concurrent.ConcurrentTransferer" [color="black", fontcolor="black", label=<{ConcurrentTransferer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.concurrent.ConcurrentUploader" [color="black", fontcolor="black", label=<{ConcurrentUploader|<br ALIGN="LEFT"/>|upload(filename, description)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.Condition" [color="black", fontcolor="black", label=<{Condition|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.website.Condition" [color="black", fontcolor="black", label=<{Condition|TRANSLATOR : list<br ALIGN="LEFT"/>http_error_code : NoneType<br ALIGN="LEFT"/>key_prefix : NoneType<br ALIGN="LEFT"/>|to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.ConditionNoArgs" [color="black", fontcolor="black", label=<{ConditionNoArgs|<br ALIGN="LEFT"/>|to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.ConditionOneArg" [color="black", fontcolor="black", label=<{ConditionOneArg|v1<br ALIGN="LEFT"/>|to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.ConditionSeveralArgs" [color="black", fontcolor="black", label=<{ConditionSeveralArgs|values<br ALIGN="LEFT"/>|to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.ConditionTwoArgs" [color="black", fontcolor="black", label=<{ConditionTwoArgs|v1<br ALIGN="LEFT"/>v2<br ALIGN="LEFT"/>|to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ConditionalCheckFailedException" [color="black", fontcolor="red", label=<{ConditionalCheckFailedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.pyami.config.Config" [color="black", fontcolor="black", label=<{Config|<br ALIGN="LEFT"/>|dump()<br ALIGN="LEFT"/>dump_safe(fp)<br ALIGN="LEFT"/>dump_to_sdb(domain_name, item_name)<br ALIGN="LEFT"/>get(section, name, default)<br ALIGN="LEFT"/>get_instance(name, default)<br ALIGN="LEFT"/>get_user(name, default)<br ALIGN="LEFT"/>get_value(section, name, default)<br ALIGN="LEFT"/>getbool(section, name, default)<br ALIGN="LEFT"/>getfloat(section, name, default)<br ALIGN="LEFT"/>getint(section, name, default)<br ALIGN="LEFT"/>getint_user(name, default)<br ALIGN="LEFT"/>load_credential_file(path)<br ALIGN="LEFT"/>load_from_path(path)<br ALIGN="LEFT"/>load_from_sdb(domain_name, item_name)<br ALIGN="LEFT"/>save_option(path, section, option, value)<br ALIGN="LEFT"/>save_system_option(section, option, value)<br ALIGN="LEFT"/>save_user_option(section, option, value)<br ALIGN="LEFT"/>setbool(section, name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.configservice.layer1.ConfigServiceConnection" [color="black", fontcolor="black", label=<{ConfigServiceConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|delete_delivery_channel(delivery_channel_name)<br ALIGN="LEFT"/>deliver_config_snapshot(delivery_channel_name)<br ALIGN="LEFT"/>describe_configuration_recorder_status(configuration_recorder_names)<br ALIGN="LEFT"/>describe_configuration_recorders(configuration_recorder_names)<br ALIGN="LEFT"/>describe_delivery_channel_status(delivery_channel_names)<br ALIGN="LEFT"/>describe_delivery_channels(delivery_channel_names)<br ALIGN="LEFT"/>get_resource_config_history(resource_type, resource_id, later_time, earlier_time, chronological_order, limit, next_token)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>put_configuration_recorder(configuration_recorder)<br ALIGN="LEFT"/>put_delivery_channel(delivery_channel)<br ALIGN="LEFT"/>start_configuration_recorder(configuration_recorder_name)<br ALIGN="LEFT"/>stop_configuration_recorder(configuration_recorder_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.ConfigurationOptionDescription" [color="black", fontcolor="black", label=<{ConfigurationOptionDescription|change_severity : str<br ALIGN="LEFT"/>default_value : str<br ALIGN="LEFT"/>max_length : NoneType, int<br ALIGN="LEFT"/>max_value : NoneType, int<br ALIGN="LEFT"/>min_value : NoneType, int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>namespace : str<br ALIGN="LEFT"/>regex : NoneType<br ALIGN="LEFT"/>user_defined : str<br ALIGN="LEFT"/>value_options : list<br ALIGN="LEFT"/>value_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.ConfigurationOptionSetting" [color="black", fontcolor="black", label=<{ConfigurationOptionSetting|namespace : str<br ALIGN="LEFT"/>option_name : str<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.ConfigurationSettingsDescription" [color="black", fontcolor="black", label=<{ConfigurationSettingsDescription|application_name : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>deployment_status : str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>option_settings : list<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.attributes.ConnectionDrainingAttribute" [color="black", fontcolor="black", label=<{ConnectionDrainingAttribute|enabled : NoneType, bool<br ALIGN="LEFT"/>timeout : NoneType, int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.connection.ConnectionPool" [color="black", fontcolor="black", label=<{ConnectionPool|CLEAN_INTERVAL : float<br ALIGN="LEFT"/>STALE_DURATION : float<br ALIGN="LEFT"/>host_to_pool : dict<br ALIGN="LEFT"/>last_clean_time : float<br ALIGN="LEFT"/>mutex : lock<br ALIGN="LEFT"/>|clean()<br ALIGN="LEFT"/>get_http_connection(host, port, is_secure)<br ALIGN="LEFT"/>put_http_connection(host, port, is_secure, conn)<br ALIGN="LEFT"/>size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.attributes.ConnectionSettingAttribute" [color="black", fontcolor="black", label=<{ConnectionSettingAttribute|idle_timeout : NoneType, int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.ConsoleOutput" [color="black", fontcolor="black", label=<{ConsoleOutput|comment : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>output : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>timestamp : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instance.ConsoleOutput" [color="black", fontcolor="black", label=<{ConsoleOutput|instance_id : NoneType<br ALIGN="LEFT"/>output : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>timestamp : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.Constraint" [color="black", fontcolor="black", label=<{Constraint|<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>get_attributes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.Constraints" [color="black", fontcolor="black", label=<{Constraints|template : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.document.ContentTooLongError" [color="black", fontcolor="red", label=<{ContentTooLongError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.document.ContentTooLongError" [color="black", fontcolor="red", label=<{ContentTooLongError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.roboto.param.Converter" [color="black", fontcolor="black", label=<{Converter|<br ALIGN="LEFT"/>|convert(param, value)<br ALIGN="LEFT"/>convert_boolean(param, value)<br ALIGN="LEFT"/>convert_dir(param, value)<br ALIGN="LEFT"/>convert_file(param, value)<br ALIGN="LEFT"/>convert_integer(param, value)<br ALIGN="LEFT"/>convert_string(param, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.copybot.CopyBot" [color="black", fontcolor="black", label=<{CopyBot|dst : NoneType<br ALIGN="LEFT"/>dst_name : object<br ALIGN="LEFT"/>log_file<br ALIGN="LEFT"/>log_path<br ALIGN="LEFT"/>replace<br ALIGN="LEFT"/>src : NoneType<br ALIGN="LEFT"/>src_name : object<br ALIGN="LEFT"/>wdir : object<br ALIGN="LEFT"/>|copy_bucket_acl()<br ALIGN="LEFT"/>copy_key_acl(src, dst)<br ALIGN="LEFT"/>copy_keys()<br ALIGN="LEFT"/>copy_log()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.image.CopyImage" [color="black", fontcolor="black", label=<{CopyImage|image_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.CopyToRegionDisabled" [color="black", fontcolor="red", label=<{CopyToRegionDisabled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.gs.cors.Cors" [color="black", fontcolor="black", label=<{Cors|collection : NoneType<br ALIGN="LEFT"/>collections : list<br ALIGN="LEFT"/>cors : list<br ALIGN="LEFT"/>element : NoneType<br ALIGN="LEFT"/>elements : list<br ALIGN="LEFT"/>legal_collections : dict<br ALIGN="LEFT"/>legal_elements : list<br ALIGN="LEFT"/>parse_level : int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>validateParseLevel(tag, level)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.CreateApplicationResponse" [color="black", fontcolor="black", label=<{CreateApplicationResponse|application : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.CreateApplicationVersionResponse" [color="black", fontcolor="black", label=<{CreateApplicationVersionResponse|application_version : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.CreateConfigurationTemplateResponse" [color="black", fontcolor="black", label=<{CreateConfigurationTemplateResponse|application_name : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>deployment_status : str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>option_settings : list<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.CreateEnvironmentResponse" [color="black", fontcolor="black", label=<{CreateEnvironmentResponse|application_name : str<br ALIGN="LEFT"/>cname : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>endpoint_url : str<br ALIGN="LEFT"/>environment_id : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>health : str<br ALIGN="LEFT"/>resources : NoneType<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>version_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.CreateInboundShipmentPlanResult" [color="black", fontcolor="black", label=<{CreateInboundShipmentPlanResult|InboundShipmentPlans<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.CreateStorageLocationResponse" [color="black", fontcolor="black", label=<{CreateStorageLocationResponse|s3_bucket : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sts.credentials.Credentials" [color="black", fontcolor="black", label=<{Credentials|access_key : NoneType<br ALIGN="LEFT"/>expiration : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>secret_key : NoneType<br ALIGN="LEFT"/>session_token : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>from_json(json_doc)<br ALIGN="LEFT"/>is_expired(time_offset_seconds)<br ALIGN="LEFT"/>load(file_path)<br ALIGN="LEFT"/>save(file_path)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.attributes.CrossZoneLoadBalancingAttribute" [color="black", fontcolor="black", label=<{CrossZoneLoadBalancingAttribute|enabled : NoneType, bool<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.origin.CustomOrigin" [color="black", fontcolor="black", label=<{CustomOrigin|dns_name : NoneType<br ALIGN="LEFT"/>http_port : int<br ALIGN="LEFT"/>https_port : int<br ALIGN="LEFT"/>origin_protocol_policy : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Customer" [color="black", fontcolor="black", label=<{Customer|AssociatedMarketplaces<br ALIGN="LEFT"/>PrimaryContactInfo<br ALIGN="LEFT"/>ShippingAddressList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vpc.customergateway.CustomerGateway" [color="black", fontcolor="black", label=<{CustomerGateway|bgp_asn : NoneType, int<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>ip_address : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.dbinstance.DBInstance" [color="black", fontcolor="black", label=<{DBInstance|allocated_storage : NoneType, int<br ALIGN="LEFT"/>auto_minor_version_upgrade : NoneType<br ALIGN="LEFT"/>availability_zone : NoneType<br ALIGN="LEFT"/>backup_retention_period : NoneType, int<br ALIGN="LEFT"/>character_set_name : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>create_time : NoneType<br ALIGN="LEFT"/>endpoint : NoneType, tuple<br ALIGN="LEFT"/>engine : NoneType<br ALIGN="LEFT"/>engine_version : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_class : NoneType<br ALIGN="LEFT"/>iops : NoneType, int<br ALIGN="LEFT"/>latest_restorable_time : NoneType<br ALIGN="LEFT"/>license_model : NoneType<br ALIGN="LEFT"/>master_username : NoneType<br ALIGN="LEFT"/>multi_az : bool<br ALIGN="LEFT"/>parameter_group<br ALIGN="LEFT"/>parameter_groups : list<br ALIGN="LEFT"/>pending_modified_values : NoneType<br ALIGN="LEFT"/>preferred_backup_window : NoneType<br ALIGN="LEFT"/>preferred_maintenance_window : NoneType<br ALIGN="LEFT"/>read_replica_dbinstance_identifiers : list<br ALIGN="LEFT"/>security_group<br ALIGN="LEFT"/>security_groups : list<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>status_infos : NoneType<br ALIGN="LEFT"/>subnet_group : NoneType<br ALIGN="LEFT"/>vpc_security_groups : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>modify(param_group, security_groups, preferred_maintenance_window, master_password, allocated_storage, instance_class, backup_retention_period, preferred_backup_window, multi_az, iops, vpc_security_groups, apply_immediately, new_instance_id)<br ALIGN="LEFT"/>reboot()<br ALIGN="LEFT"/>snapshot(snapshot_id)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>stop(skip_final_snapshot, final_snapshot_id)<br ALIGN="LEFT"/>update(validate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBInstanceAlreadyExists" [color="black", fontcolor="red", label=<{DBInstanceAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBInstanceNotFound" [color="black", fontcolor="red", label=<{DBInstanceNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBParameterGroupAlreadyExists" [color="black", fontcolor="red", label=<{DBParameterGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBParameterGroupNotFound" [color="black", fontcolor="red", label=<{DBParameterGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBParameterGroupQuotaExceeded" [color="black", fontcolor="red", label=<{DBParameterGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.dbsecuritygroup.DBSecurityGroup" [color="black", fontcolor="black", label=<{DBSecurityGroup|connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>ec2_groups : list<br ALIGN="LEFT"/>ip_ranges : list<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>|authorize(cidr_ip, ec2_group)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>revoke(cidr_ip, ec2_group)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSecurityGroupAlreadyExists" [color="black", fontcolor="red", label=<{DBSecurityGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSecurityGroupNotFound" [color="black", fontcolor="red", label=<{DBSecurityGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSecurityGroupNotSupported" [color="black", fontcolor="red", label=<{DBSecurityGroupNotSupported|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSecurityGroupQuotaExceeded" [color="black", fontcolor="red", label=<{DBSecurityGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.dbsnapshot.DBSnapshot" [color="black", fontcolor="black", label=<{DBSnapshot|allocated_storage : NoneType, int<br ALIGN="LEFT"/>availability_zone : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>engine : NoneType<br ALIGN="LEFT"/>engine_version : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_create_time : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>iops : NoneType, int<br ALIGN="LEFT"/>license_model : NoneType<br ALIGN="LEFT"/>master_username : NoneType<br ALIGN="LEFT"/>option_group_name : NoneType<br ALIGN="LEFT"/>percent_progress : NoneType, int<br ALIGN="LEFT"/>port : NoneType, int<br ALIGN="LEFT"/>snapshot_create_time : NoneType<br ALIGN="LEFT"/>snapshot_type : NoneType<br ALIGN="LEFT"/>source_region : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>time<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>update(validate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSnapshotAlreadyExists" [color="black", fontcolor="red", label=<{DBSnapshotAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSnapshotNotFound" [color="black", fontcolor="red", label=<{DBSnapshotNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.dbsubnetgroup.DBSubnetGroup" [color="black", fontcolor="black", label=<{DBSubnetGroup|connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>subnet_ids : list<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSubnetGroupAlreadyExists" [color="black", fontcolor="red", label=<{DBSubnetGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSubnetGroupDoesNotCoverEnoughAZs" [color="black", fontcolor="red", label=<{DBSubnetGroupDoesNotCoverEnoughAZs|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSubnetGroupNotFound" [color="black", fontcolor="red", label=<{DBSubnetGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSubnetGroupQuotaExceeded" [color="black", fontcolor="red", label=<{DBSubnetGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBSubnetQuotaExceeded" [color="black", fontcolor="red", label=<{DBSubnetQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.DBUpgradeDependencyFailure" [color="black", fontcolor="red", label=<{DBUpgradeDependencyFailure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.exception.DNSServerError" [color="black", fontcolor="red", label=<{DNSServerError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.DataAlreadyAcceptedException" [color="black", fontcolor="red", label=<{DataAlreadyAcceptedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.datapipeline.layer1.DataPipelineConnection" [color="black", fontcolor="black", label=<{DataPipelineConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|activate_pipeline(pipeline_id)<br ALIGN="LEFT"/>create_pipeline(name, unique_id, description)<br ALIGN="LEFT"/>delete_pipeline(pipeline_id)<br ALIGN="LEFT"/>describe_objects(object_ids, pipeline_id, marker, evaluate_expressions)<br ALIGN="LEFT"/>describe_pipelines(pipeline_ids)<br ALIGN="LEFT"/>evaluate_expression(pipeline_id, expression, object_id)<br ALIGN="LEFT"/>get_pipeline_definition(pipeline_id, version)<br ALIGN="LEFT"/>list_pipelines(marker)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>poll_for_task(worker_group, hostname, instance_identity)<br ALIGN="LEFT"/>put_pipeline_definition(pipeline_objects, pipeline_id)<br ALIGN="LEFT"/>query_objects(pipeline_id, sphere, marker, query, limit)<br ALIGN="LEFT"/>report_task_progress(task_id)<br ALIGN="LEFT"/>report_task_runner_heartbeat(taskrunner_id, worker_group, hostname)<br ALIGN="LEFT"/>set_status(object_ids, status, pipeline_id)<br ALIGN="LEFT"/>set_task_status(task_id, task_status, error_id, error_message, error_stack_trace)<br ALIGN="LEFT"/>validate_pipeline_definition(pipeline_objects, pipeline_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.datapoint.Datapoint" [color="black", fontcolor="black", label=<{Datapoint|connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.DateProperty" [color="black", fontcolor="black", label=<{DateProperty|auto_now : bool<br ALIGN="LEFT"/>auto_now_add : bool<br ALIGN="LEFT"/>data_type : date<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|default_value()<br ALIGN="LEFT"/>get_value_for_datastore(model_instance)<br ALIGN="LEFT"/>now()<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.DateTimeProperty" [color="black", fontcolor="black", label=<{DateTimeProperty|auto_now : bool<br ALIGN="LEFT"/>auto_now_add : bool<br ALIGN="LEFT"/>data_type : datetime<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|default_value()<br ALIGN="LEFT"/>get_value_for_datastore(model_instance)<br ALIGN="LEFT"/>now()<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.Decider" [color="black", fontcolor="black", label=<{Decider|last_tasktoken<br ALIGN="LEFT"/>|complete(task_token, decisions)<br ALIGN="LEFT"/>poll()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.DeclarativeType" [color="black", fontcolor="black", label=<{DeclarativeType|<br ALIGN="LEFT"/>|<I>end</I>()<br ALIGN="LEFT"/>setup(parent, name)<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sts.credentials.DecodeAuthorizationMessage" [color="black", fontcolor="black", label=<{DecodeAuthorizationMessage|decoded_message : NoneType<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.DeleteApplicationResponse" [color="black", fontcolor="black", label=<{DeleteApplicationResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DeleteApplicationVersionResponse" [color="black", fontcolor="black", label=<{DeleteApplicationVersionResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DeleteConfigurationTemplateResponse" [color="black", fontcolor="black", label=<{DeleteConfigurationTemplateResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DeleteEnvironmentConfigurationResponse" [color="black", fontcolor="black", label=<{DeleteEnvironmentConfigurationResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.deletemarker.DeleteMarker" [color="black", fontcolor="black", label=<{DeleteMarker|bucket : NoneType<br ALIGN="LEFT"/>is_latest : bool<br ALIGN="LEFT"/>last_modified : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>owner : NoneType<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.multidelete.Deleted" [color="black", fontcolor="black", label=<{Deleted|delete_marker : bool<br ALIGN="LEFT"/>delete_marker_version_id : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.kms.exceptions.DependencyTimeoutException" [color="black", fontcolor="red", label=<{DependencyTimeoutException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentAlreadyCompletedException" [color="black", fontcolor="red", label=<{DeploymentAlreadyCompletedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentConfigAlreadyExistsException" [color="black", fontcolor="red", label=<{DeploymentConfigAlreadyExistsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentConfigDoesNotExistException" [color="black", fontcolor="red", label=<{DeploymentConfigDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentConfigInUseException" [color="black", fontcolor="red", label=<{DeploymentConfigInUseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentConfigLimitExceededException" [color="black", fontcolor="red", label=<{DeploymentConfigLimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentConfigNameRequiredException" [color="black", fontcolor="red", label=<{DeploymentConfigNameRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentDoesNotExistException" [color="black", fontcolor="red", label=<{DeploymentDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentGroupAlreadyExistsException" [color="black", fontcolor="red", label=<{DeploymentGroupAlreadyExistsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentGroupDoesNotExistException" [color="black", fontcolor="red", label=<{DeploymentGroupDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentGroupLimitExceededException" [color="black", fontcolor="red", label=<{DeploymentGroupLimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentGroupNameRequiredException" [color="black", fontcolor="red", label=<{DeploymentGroupNameRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentIdRequiredException" [color="black", fontcolor="red", label=<{DeploymentIdRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentLimitExceededException" [color="black", fontcolor="red", label=<{DeploymentLimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DeploymentNotStartedException" [color="black", fontcolor="red", label=<{DeploymentNotStartedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeApplicationVersionsResponse" [color="black", fontcolor="black", label=<{DescribeApplicationVersionsResponse|application_versions : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeApplicationsResponse" [color="black", fontcolor="black", label=<{DescribeApplicationsResponse|applications : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.DescribeAttachmentLimitExceeded" [color="black", fontcolor="red", label=<{DescribeAttachmentLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeConfigurationOptionsResponse" [color="black", fontcolor="black", label=<{DescribeConfigurationOptionsResponse|options : list<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeConfigurationSettingsResponse" [color="black", fontcolor="black", label=<{DescribeConfigurationSettingsResponse|configuration_settings : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeEnvironmentResourcesResponse" [color="black", fontcolor="black", label=<{DescribeEnvironmentResourcesResponse|environment_resources : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeEnvironmentsResponse" [color="black", fontcolor="black", label=<{DescribeEnvironmentsResponse|environments : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.DescribeEventsResponse" [color="black", fontcolor="black", label=<{DescribeEventsResponse|events : list<br ALIGN="LEFT"/>next_tokent : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.DescriptionTooLongException" [color="black", fontcolor="red", label=<{DescriptionTooLongException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.Destination" [color="black", fontcolor="black", label=<{Destination|AttributeList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.instancestatus.Details" [color="black", fontcolor="black", label=<{Details|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.DeveloperUserAlreadyRegisteredException" [color="black", fontcolor="red", label=<{DeveloperUserAlreadyRegisteredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vpc.dhcpoptions.DhcpConfigSet" [color="black", fontcolor="black", label=<{DhcpConfigSet|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.dhcpoptions.DhcpOptions" [color="black", fontcolor="black", label=<{DhcpOptions|id : NoneType<br ALIGN="LEFT"/>options : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.dhcpoptions.DhcpValueSet" [color="black", fontcolor="black", label=<{DhcpValueSet|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.dimension.Dimension" [color="black", fontcolor="black", label=<{Dimension|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Dimension" [color="black", fontcolor="black", label=<{Dimension|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.directconnect.exceptions.DirectConnectClientException" [color="black", fontcolor="red", label=<{DirectConnectClientException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.directconnect.layer1.DirectConnectConnection" [color="black", fontcolor="black", label=<{DirectConnectConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|allocate_connection_on_interconnect(bandwidth, connection_name, owner_account, interconnect_id, vlan)<br ALIGN="LEFT"/>allocate_private_virtual_interface(connection_id, owner_account, new_private_virtual_interface_allocation)<br ALIGN="LEFT"/>allocate_public_virtual_interface(connection_id, owner_account, new_public_virtual_interface_allocation)<br ALIGN="LEFT"/>confirm_connection(connection_id)<br ALIGN="LEFT"/>confirm_private_virtual_interface(virtual_interface_id, virtual_gateway_id)<br ALIGN="LEFT"/>confirm_public_virtual_interface(virtual_interface_id)<br ALIGN="LEFT"/>create_connection(location, bandwidth, connection_name)<br ALIGN="LEFT"/>create_interconnect(interconnect_name, bandwidth, location)<br ALIGN="LEFT"/>create_private_virtual_interface(connection_id, new_private_virtual_interface)<br ALIGN="LEFT"/>create_public_virtual_interface(connection_id, new_public_virtual_interface)<br ALIGN="LEFT"/>delete_connection(connection_id)<br ALIGN="LEFT"/>delete_interconnect(interconnect_id)<br ALIGN="LEFT"/>delete_virtual_interface(virtual_interface_id)<br ALIGN="LEFT"/>describe_connections(connection_id)<br ALIGN="LEFT"/>describe_connections_on_interconnect(interconnect_id)<br ALIGN="LEFT"/>describe_interconnects(interconnect_id)<br ALIGN="LEFT"/>describe_locations()<br ALIGN="LEFT"/>describe_virtual_gateways()<br ALIGN="LEFT"/>describe_virtual_interfaces(connection_id, virtual_interface_id)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.directconnect.exceptions.DirectConnectServerException" [color="black", fontcolor="red", label=<{DirectConnectServerException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.DisabledException" [color="black", fontcolor="red", label=<{DisabledException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.exceptions.DisabledOperationException" [color="black", fontcolor="red", label=<{DisabledOperationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudfront.distribution.Distribution" [color="black", fontcolor="black", label=<{Distribution|active_signers : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>domain_name : str<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>in_progress_invalidation_batches : int<br ALIGN="LEFT"/>last_modified_time : NoneType<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>|add_object(name, content, headers, replace)<br ALIGN="LEFT"/>create_signed_url(url, keypair_id, expire_time, valid_after_time, ip_address, policy_url, private_key_file, private_key_string)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>disable()<br ALIGN="LEFT"/>enable()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_objects()<br ALIGN="LEFT"/>set_permissions(object, replace)<br ALIGN="LEFT"/>set_permissions_all(replace)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(enabled, cnames, comment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.distribution.DistributionConfig" [color="black", fontcolor="black", label=<{DistributionConfig|caller_reference : str<br ALIGN="LEFT"/>cnames : NoneType, list<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>default_root_object : NoneType<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>logging : NoneType<br ALIGN="LEFT"/>origin : NoneType<br ALIGN="LEFT"/>trusted_signers : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.distribution.DistributionSummary" [color="black", fontcolor="black", label=<{DistributionSummary|cnames : list<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>domain_name : str<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>last_modified_time : NoneType<br ALIGN="LEFT"/>origin : NoneType<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>streaming : bool<br ALIGN="LEFT"/>trusted_signers : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_distribution()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.document.DocumentServiceConnection" [color="black", fontcolor="black", label=<{DocumentServiceConnection|documents_batch : list<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>endpoint : NoneType<br ALIGN="LEFT"/>|add(_id, version, fields, lang)<br ALIGN="LEFT"/>add_sdf_from_s3(key_obj)<br ALIGN="LEFT"/>clear_sdf()<br ALIGN="LEFT"/>commit()<br ALIGN="LEFT"/>delete(_id, version)<br ALIGN="LEFT"/>get_sdf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.document.DocumentServiceConnection" [color="black", fontcolor="black", label=<{DocumentServiceConnection|documents_batch : list<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>domain_connection<br ALIGN="LEFT"/>endpoint : NoneType<br ALIGN="LEFT"/>proxy : dict<br ALIGN="LEFT"/>sign_request : bool<br ALIGN="LEFT"/>|add(_id, fields)<br ALIGN="LEFT"/>add_sdf_from_s3(key_obj)<br ALIGN="LEFT"/>clear_sdf()<br ALIGN="LEFT"/>commit()<br ALIGN="LEFT"/>delete(_id)<br ALIGN="LEFT"/>get_sdf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearchdomain.exceptions.DocumentServiceException" [color="black", fontcolor="red", label=<{DocumentServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.domain.Domain" [color="black", fontcolor="black", label=<{Domain|created<br ALIGN="LEFT"/>deleted<br ALIGN="LEFT"/>doc_service_arn<br ALIGN="LEFT"/>doc_service_endpoint<br ALIGN="LEFT"/>domain_id<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>layer1<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>num_searchable_docs<br ALIGN="LEFT"/>processing<br ALIGN="LEFT"/>requires_index_documents<br ALIGN="LEFT"/>search_instance_count<br ALIGN="LEFT"/>search_instance_type<br ALIGN="LEFT"/>search_partition_count<br ALIGN="LEFT"/>search_service_arn<br ALIGN="LEFT"/>search_service_endpoint<br ALIGN="LEFT"/>|create_index_field(field_name, field_type, default, facet, result, searchable, source_attributes)<br ALIGN="LEFT"/>create_rank_expression(name, expression)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>get_access_policies()<br ALIGN="LEFT"/>get_document_service()<br ALIGN="LEFT"/>get_index_fields(field_names)<br ALIGN="LEFT"/>get_rank_expressions(rank_names)<br ALIGN="LEFT"/>get_search_service()<br ALIGN="LEFT"/>get_stemming()<br ALIGN="LEFT"/>get_stopwords()<br ALIGN="LEFT"/>get_synonyms()<br ALIGN="LEFT"/>index_documents()<br ALIGN="LEFT"/>update_from_data(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.domain.Domain" [color="black", fontcolor="black", label=<{Domain|created<br ALIGN="LEFT"/>deleted<br ALIGN="LEFT"/>doc_service_endpoint<br ALIGN="LEFT"/>domain_id<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>layer1<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>processing<br ALIGN="LEFT"/>requires_index_documents<br ALIGN="LEFT"/>search_instance_count<br ALIGN="LEFT"/>search_instance_type<br ALIGN="LEFT"/>search_partition_count<br ALIGN="LEFT"/>search_service_endpoint<br ALIGN="LEFT"/>service_arn<br ALIGN="LEFT"/>|create_expression(name, value)<br ALIGN="LEFT"/>create_index_field(field_name, field_type, default, facet, returnable, searchable, sortable, highlight, source_field, analysis_scheme)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>get_access_policies()<br ALIGN="LEFT"/>get_analysis_schemes()<br ALIGN="LEFT"/>get_availability_options()<br ALIGN="LEFT"/>get_document_service()<br ALIGN="LEFT"/>get_expressions(names)<br ALIGN="LEFT"/>get_index_fields(field_names)<br ALIGN="LEFT"/>get_scaling_options()<br ALIGN="LEFT"/>get_search_service()<br ALIGN="LEFT"/>index_documents()<br ALIGN="LEFT"/>update_from_data(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.domain.Domain" [color="black", fontcolor="black", label=<{Domain|connection : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|batch_delete_attributes(items)<br ALIGN="LEFT"/>batch_put_attributes(items, replace)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_attributes(item_name, attributes, expected_values)<br ALIGN="LEFT"/>delete_item(item)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>from_xml(doc)<br ALIGN="LEFT"/>get_attributes(item_name, attribute_name, consistent_read, item)<br ALIGN="LEFT"/>get_item(item_name, consistent_read)<br ALIGN="LEFT"/>get_metadata()<br ALIGN="LEFT"/>new_item(item_name)<br ALIGN="LEFT"/>put_attributes(item_name, attributes, replace, expected_value)<br ALIGN="LEFT"/>select(query, next_token, consistent_read, max_items)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml(f)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.Domain" [color="black", fontcolor="black", label=<{Domain|description : NoneType<br ALIGN="LEFT"/>retention : int<br ALIGN="LEFT"/>|activities(status)<br ALIGN="LEFT"/>count_pending_activity_tasks(task_list)<br ALIGN="LEFT"/>count_pending_decision_tasks(task_list)<br ALIGN="LEFT"/>deprecate()<br ALIGN="LEFT"/>describe()<br ALIGN="LEFT"/>executions(closed)<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>workflows(status)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.domain.DomainDumpParser" [color="black", fontcolor="black", label=<{DomainDumpParser|attribute : NoneType<br ALIGN="LEFT"/>attrs : dict<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>item_id : NoneType<br ALIGN="LEFT"/>uploader<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|characters(ch)<br ALIGN="LEFT"/>endElement(name)<br ALIGN="LEFT"/>startElement(name, attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.domains.exceptions.DomainLimitExceeded" [color="black", fontcolor="red", label=<{DomainLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.domain.DomainMetaData" [color="black", fontcolor="black", label=<{DomainMetaData|attr_name_count : NoneType, int<br ALIGN="LEFT"/>attr_names_size : NoneType, int<br ALIGN="LEFT"/>attr_value_count : NoneType, int<br ALIGN="LEFT"/>attr_values_size : NoneType, int<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>item_count : NoneType, int<br ALIGN="LEFT"/>item_names_size : NoneType, int<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.exceptions.DownloadArchiveError" [color="black", fontcolor="red", label=<{DownloadArchiveError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.concurrent.DownloadWorkerThread" [color="black", fontcolor="black", label=<{DownloadWorkerThread|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.DuplicateRequest" [color="black", fontcolor="red", label=<{DuplicateRequest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.domains.exceptions.DuplicateRequest" [color="black", fontcolor="red", label=<{DuplicateRequest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ResponseFactory.element_factory.DynamicElement" [color="black", fontcolor="black", label=<{DynamicElement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.types.Dynamizer" [color="black", fontcolor="black", label=<{Dynamizer|<br ALIGN="LEFT"/>|decode(attr)<br ALIGN="LEFT"/>encode(attr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBConditionalCheckFailedError" [color="black", fontcolor="red", label=<{DynamoDBConditionalCheckFailedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.layer1.DynamoDBConnection" [color="black", fontcolor="black", label=<{DynamoDBConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>NumberRetries : int<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>throughput_exceeded_events : int<br ALIGN="LEFT"/>|batch_get_item(request_items, return_consumed_capacity)<br ALIGN="LEFT"/>batch_write_item(request_items, return_consumed_capacity, return_item_collection_metrics)<br ALIGN="LEFT"/>create_table(attribute_definitions, table_name, key_schema, provisioned_throughput, local_secondary_indexes, global_secondary_indexes)<br ALIGN="LEFT"/>delete_item(table_name, key, expected, conditional_operator, return_values, return_consumed_capacity, return_item_collection_metrics, condition_expression, expression_attribute_names, expression_attribute_values)<br ALIGN="LEFT"/>delete_table(table_name)<br ALIGN="LEFT"/>describe_table(table_name)<br ALIGN="LEFT"/>get_item(table_name, key, attributes_to_get, consistent_read, return_consumed_capacity, projection_expression, expression_attribute_names)<br ALIGN="LEFT"/>list_tables(exclusive_start_table_name, limit)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>put_item(table_name, item, expected, return_values, return_consumed_capacity, return_item_collection_metrics, conditional_operator, condition_expression, expression_attribute_names, expression_attribute_values)<br ALIGN="LEFT"/>query(table_name, key_conditions, index_name, select, attributes_to_get, limit, consistent_read, query_filter, conditional_operator, scan_index_forward, exclusive_start_key, return_consumed_capacity, projection_expression, filter_expression, expression_attribute_names, expression_attribute_values)<br ALIGN="LEFT"/>scan(table_name, attributes_to_get, limit, select, scan_filter, conditional_operator, exclusive_start_key, return_consumed_capacity, total_segments, segment, projection_expression, filter_expression, expression_attribute_names, expression_attribute_values)<br ALIGN="LEFT"/>update_item(table_name, key, attribute_updates, expected, conditional_operator, return_values, return_consumed_capacity, return_item_collection_metrics, update_expression, condition_expression, expression_attribute_names, expression_attribute_values)<br ALIGN="LEFT"/>update_table(table_name, provisioned_throughput, global_secondary_index_updates, attribute_definitions)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.DynamoDBError" [color="black", fontcolor="red", label=<{DynamoDBError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBExpiredTokenError" [color="black", fontcolor="red", label=<{DynamoDBExpiredTokenError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBItemError" [color="black", fontcolor="red", label=<{DynamoDBItemError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBKeyNotFoundError" [color="black", fontcolor="red", label=<{DynamoDBKeyNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBNumberError" [color="black", fontcolor="red", label=<{DynamoDBNumberError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.DynamoDBResponseError" [color="black", fontcolor="red", label=<{DynamoDBResponseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBThroughputExceededError" [color="black", fontcolor="red", label=<{DynamoDBThroughputExceededError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.exceptions.DynamoDBValidationError" [color="black", fontcolor="red", label=<{DynamoDBValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.pyami.installers.ubuntu.ebs.EBSInstaller" [color="black", fontcolor="black", label=<{EBSInstaller|device : object<br ALIGN="LEFT"/>instance_id : object<br ALIGN="LEFT"/>logical_volume_name : object<br ALIGN="LEFT"/>mount_point : object<br ALIGN="LEFT"/>volume_id : object<br ALIGN="LEFT"/>|attach()<br ALIGN="LEFT"/>create_backup_cleanup_script(use_tag_based_cleanup)<br ALIGN="LEFT"/>create_backup_script()<br ALIGN="LEFT"/>handle_mount_point()<br ALIGN="LEFT"/>install()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>make_fs()<br ALIGN="LEFT"/>update_fstab()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.connection.EC2Connection" [color="black", fontcolor="black", label=<{EC2Connection|APIVersion : object<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|allocate_address(domain, dry_run)<br ALIGN="LEFT"/>assign_private_ip_addresses(network_interface_id, private_ip_addresses, secondary_private_ip_address_count, allow_reassignment, dry_run)<br ALIGN="LEFT"/>associate_address(instance_id, public_ip, allocation_id, network_interface_id, private_ip_address, allow_reassociation, dry_run)<br ALIGN="LEFT"/>associate_address_object(instance_id, public_ip, allocation_id, network_interface_id, private_ip_address, allow_reassociation, dry_run)<br ALIGN="LEFT"/>attach_network_interface(network_interface_id, instance_id, device_index, dry_run)<br ALIGN="LEFT"/>attach_volume(volume_id, instance_id, device, dry_run)<br ALIGN="LEFT"/>authorize_security_group(group_name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, group_id, src_security_group_group_id, dry_run)<br ALIGN="LEFT"/>authorize_security_group_deprecated(group_name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, dry_run)<br ALIGN="LEFT"/>authorize_security_group_egress(group_id, ip_protocol, from_port, to_port, src_group_id, cidr_ip, dry_run)<br ALIGN="LEFT"/>build_configurations_param_list(params, target_configurations)<br ALIGN="LEFT"/>build_filter_params(params, filters)<br ALIGN="LEFT"/>build_tag_param_list(params, tags)<br ALIGN="LEFT"/>bundle_instance(instance_id, s3_bucket, s3_prefix, s3_upload_policy, dry_run)<br ALIGN="LEFT"/>cancel_bundle_task(bundle_id, dry_run)<br ALIGN="LEFT"/>cancel_reserved_instances_listing(reserved_instances_listing_ids, dry_run)<br ALIGN="LEFT"/>cancel_spot_instance_requests(request_ids, dry_run)<br ALIGN="LEFT"/>confirm_product_instance(product_code, instance_id, dry_run)<br ALIGN="LEFT"/>copy_image(source_region, source_image_id, name, description, client_token, dry_run)<br ALIGN="LEFT"/>copy_snapshot(source_region, source_snapshot_id, description, dry_run)<br ALIGN="LEFT"/>create_image(instance_id, name, description, no_reboot, block_device_mapping, dry_run)<br ALIGN="LEFT"/>create_key_pair(key_name, dry_run)<br ALIGN="LEFT"/>create_network_interface(subnet_id, private_ip_address, description, groups, dry_run)<br ALIGN="LEFT"/>create_placement_group(name, strategy, dry_run)<br ALIGN="LEFT"/>create_reserved_instances_listing(reserved_instances_id, instance_count, price_schedules, client_token, dry_run)<br ALIGN="LEFT"/>create_security_group(name, description, vpc_id, dry_run)<br ALIGN="LEFT"/>create_snapshot(volume_id, description, dry_run)<br ALIGN="LEFT"/>create_spot_datafeed_subscription(bucket, prefix, dry_run)<br ALIGN="LEFT"/>create_tags(resource_ids, tags, dry_run)<br ALIGN="LEFT"/>create_volume(size, zone, snapshot, volume_type, iops, encrypted, dry_run)<br ALIGN="LEFT"/>delete_key_pair(key_name, dry_run)<br ALIGN="LEFT"/>delete_network_interface(network_interface_id, dry_run)<br ALIGN="LEFT"/>delete_placement_group(name, dry_run)<br ALIGN="LEFT"/>delete_security_group(name, group_id, dry_run)<br ALIGN="LEFT"/>delete_snapshot(snapshot_id, dry_run)<br ALIGN="LEFT"/>delete_spot_datafeed_subscription(dry_run)<br ALIGN="LEFT"/>delete_tags(resource_ids, tags, dry_run)<br ALIGN="LEFT"/>delete_volume(volume_id, dry_run)<br ALIGN="LEFT"/>deregister_image(image_id, delete_snapshot, dry_run)<br ALIGN="LEFT"/>describe_account_attributes(attribute_names, dry_run)<br ALIGN="LEFT"/>describe_reserved_instances_modifications(reserved_instances_modification_ids, next_token, filters)<br ALIGN="LEFT"/>describe_vpc_attribute(vpc_id, attribute, dry_run)<br ALIGN="LEFT"/>detach_network_interface(attachment_id, force, dry_run)<br ALIGN="LEFT"/>detach_volume(volume_id, instance_id, device, force, dry_run)<br ALIGN="LEFT"/>disassociate_address(public_ip, association_id, dry_run)<br ALIGN="LEFT"/>enable_volume_io(volume_id, dry_run)<br ALIGN="LEFT"/>get_all_addresses(addresses, filters, allocation_ids, dry_run)<br ALIGN="LEFT"/>get_all_bundle_tasks(bundle_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_classic_link_instances(instance_ids, filters, dry_run, max_results, next_token)<br ALIGN="LEFT"/>get_all_images(image_ids, owners, executable_by, filters, dry_run)<br ALIGN="LEFT"/>get_all_instance_status(instance_ids, max_results, next_token, filters, dry_run, include_all_instances)<br ALIGN="LEFT"/>get_all_instance_types()<br ALIGN="LEFT"/>get_all_instances(instance_ids, filters, dry_run, max_results)<br ALIGN="LEFT"/>get_all_kernels(kernel_ids, owners, dry_run)<br ALIGN="LEFT"/>get_all_key_pairs(keynames, filters, dry_run)<br ALIGN="LEFT"/>get_all_network_interfaces(network_interface_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_placement_groups(groupnames, filters, dry_run)<br ALIGN="LEFT"/>get_all_ramdisks(ramdisk_ids, owners, dry_run)<br ALIGN="LEFT"/>get_all_regions(region_names, filters, dry_run)<br ALIGN="LEFT"/>get_all_reservations(instance_ids, filters, dry_run, max_results, next_token)<br ALIGN="LEFT"/>get_all_reserved_instances(reserved_instances_id, filters, dry_run)<br ALIGN="LEFT"/>get_all_reserved_instances_offerings(reserved_instances_offering_ids, instance_type, availability_zone, product_description, filters, instance_tenancy, offering_type, include_marketplace, min_duration, max_duration, max_instance_count, next_token, max_results, dry_run)<br ALIGN="LEFT"/>get_all_security_groups(groupnames, group_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_snapshots(snapshot_ids, owner, restorable_by, filters, dry_run)<br ALIGN="LEFT"/>get_all_spot_instance_requests(request_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_tags(filters, dry_run, max_results)<br ALIGN="LEFT"/>get_all_volume_status(volume_ids, max_results, next_token, filters, dry_run)<br ALIGN="LEFT"/>get_all_volumes(volume_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_zones(zones, filters, dry_run)<br ALIGN="LEFT"/>get_console_output(instance_id, dry_run)<br ALIGN="LEFT"/>get_image(image_id, dry_run)<br ALIGN="LEFT"/>get_image_attribute(image_id, attribute, dry_run)<br ALIGN="LEFT"/>get_instance_attribute(instance_id, attribute, dry_run)<br ALIGN="LEFT"/>get_key_pair(keyname, dry_run)<br ALIGN="LEFT"/>get_only_instances(instance_ids, filters, dry_run, max_results)<br ALIGN="LEFT"/>get_params()<br ALIGN="LEFT"/>get_password_data(instance_id, dry_run)<br ALIGN="LEFT"/>get_snapshot_attribute(snapshot_id, attribute, dry_run)<br ALIGN="LEFT"/>get_spot_datafeed_subscription(dry_run)<br ALIGN="LEFT"/>get_spot_price_history(start_time, end_time, instance_type, product_description, availability_zone, dry_run, max_results, next_token, filters)<br ALIGN="LEFT"/>get_volume_attribute(volume_id, attribute, dry_run)<br ALIGN="LEFT"/>import_key_pair(key_name, public_key_material, dry_run)<br ALIGN="LEFT"/>modify_image_attribute(image_id, attribute, operation, user_ids, groups, product_codes, dry_run)<br ALIGN="LEFT"/>modify_instance_attribute(instance_id, attribute, value, dry_run)<br ALIGN="LEFT"/>modify_network_interface_attribute(interface_id, attr, value, attachment_id, dry_run)<br ALIGN="LEFT"/>modify_reserved_instances(client_token, reserved_instance_ids, target_configurations)<br ALIGN="LEFT"/>modify_snapshot_attribute(snapshot_id, attribute, operation, user_ids, groups, dry_run)<br ALIGN="LEFT"/>modify_volume_attribute(volume_id, attribute, new_value, dry_run)<br ALIGN="LEFT"/>modify_vpc_attribute(vpc_id, enable_dns_support, enable_dns_hostnames, dry_run)<br ALIGN="LEFT"/>monitor_instance(instance_id, dry_run)<br ALIGN="LEFT"/>monitor_instances(instance_ids, dry_run)<br ALIGN="LEFT"/>purchase_reserved_instance_offering(reserved_instances_offering_id, instance_count, limit_price, dry_run)<br ALIGN="LEFT"/>reboot_instances(instance_ids, dry_run)<br ALIGN="LEFT"/>register_image(name, description, image_location, architecture, kernel_id, ramdisk_id, root_device_name, block_device_map, dry_run, virtualization_type, sriov_net_support, snapshot_id, delete_root_volume_on_termination)<br ALIGN="LEFT"/>release_address(public_ip, allocation_id, dry_run)<br ALIGN="LEFT"/>request_spot_instances(price, image_id, count, type, valid_from, valid_until, launch_group, availability_zone_group, key_name, security_groups, user_data, addressing_type, instance_type, placement, kernel_id, ramdisk_id, monitoring_enabled, subnet_id, placement_group, block_device_map, instance_profile_arn, instance_profile_name, security_group_ids, ebs_optimized, network_interfaces, dry_run)<br ALIGN="LEFT"/>reset_image_attribute(image_id, attribute, dry_run)<br ALIGN="LEFT"/>reset_instance_attribute(instance_id, attribute, dry_run)<br ALIGN="LEFT"/>reset_snapshot_attribute(snapshot_id, attribute, dry_run)<br ALIGN="LEFT"/>revoke_security_group(group_name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, group_id, src_security_group_group_id, dry_run)<br ALIGN="LEFT"/>revoke_security_group_deprecated(group_name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, dry_run)<br ALIGN="LEFT"/>revoke_security_group_egress(group_id, ip_protocol, from_port, to_port, src_group_id, cidr_ip, dry_run)<br ALIGN="LEFT"/>run_instances(image_id, min_count, max_count, key_name, security_groups, user_data, addressing_type, instance_type, placement, kernel_id, ramdisk_id, monitoring_enabled, subnet_id, block_device_map, disable_api_termination, instance_initiated_shutdown_behavior, private_ip_address, placement_group, client_token, security_group_ids, additional_info, instance_profile_name, instance_profile_arn, tenancy, ebs_optimized, network_interfaces, dry_run)<br ALIGN="LEFT"/>start_instances(instance_ids, dry_run)<br ALIGN="LEFT"/>stop_instances(instance_ids, force, dry_run)<br ALIGN="LEFT"/>terminate_instances(instance_ids, dry_run)<br ALIGN="LEFT"/>trim_snapshots(hourly_backups, daily_backups, weekly_backups, monthly_backups)<br ALIGN="LEFT"/>unassign_private_ip_addresses(network_interface_id, private_ip_addresses, dry_run)<br ALIGN="LEFT"/>unmonitor_instance(instance_id, dry_run)<br ALIGN="LEFT"/>unmonitor_instances(instance_ids, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2containerservice.layer1.EC2ContainerServiceConnection" [color="black", fontcolor="black", label=<{EC2ContainerServiceConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_cluster(cluster_name)<br ALIGN="LEFT"/>delete_cluster(cluster)<br ALIGN="LEFT"/>deregister_container_instance(container_instance, cluster, force)<br ALIGN="LEFT"/>deregister_task_definition(task_definition)<br ALIGN="LEFT"/>describe_clusters(clusters)<br ALIGN="LEFT"/>describe_container_instances(container_instances, cluster)<br ALIGN="LEFT"/>describe_task_definition(task_definition)<br ALIGN="LEFT"/>describe_tasks(tasks, cluster)<br ALIGN="LEFT"/>discover_poll_endpoint(container_instance)<br ALIGN="LEFT"/>list_clusters(next_token, max_results)<br ALIGN="LEFT"/>list_container_instances(cluster, next_token, max_results)<br ALIGN="LEFT"/>list_task_definitions(family_prefix, next_token, max_results)<br ALIGN="LEFT"/>list_tasks(cluster, container_instance, family, next_token, max_results)<br ALIGN="LEFT"/>register_container_instance(cluster, instance_identity_document, instance_identity_document_signature, total_resources)<br ALIGN="LEFT"/>register_task_definition(family, container_definitions)<br ALIGN="LEFT"/>run_task(task_definition, cluster, overrides, count)<br ALIGN="LEFT"/>start_task(task_definition, container_instances, cluster, overrides)<br ALIGN="LEFT"/>stop_task(task, cluster)<br ALIGN="LEFT"/>submit_container_state_change(cluster, task, container_name, status, exit_code, reason, network_bindings)<br ALIGN="LEFT"/>submit_task_state_change(cluster, task, status, reason)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.ec2object.EC2Object" [color="black", fontcolor="black", label=<{EC2Object|connection : NoneType<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.regioninfo.EC2RegionInfo" [color="black", fontcolor="black", label=<{EC2RegionInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.EC2ResponseError" [color="black", fontcolor="red", label=<{EC2ResponseError|error_code<br ALIGN="LEFT"/>error_message<br ALIGN="LEFT"/>errors : NoneType<br ALIGN="LEFT"/>request_id<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.dbsecuritygroup.EC2SecurityGroup" [color="black", fontcolor="black", label=<{EC2SecurityGroup|name : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ecs.ECSConnection" [color="black", fontcolor="black", label=<{ECSConnection|APIVersion : str<br ALIGN="LEFT"/>|get_response(action, params, page, itemSet)<br ALIGN="LEFT"/>item_lookup()<br ALIGN="LEFT"/>item_search(search_index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.ELBConnection" [color="black", fontcolor="black", label=<{ELBConnection|APIVersion : object<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|apply_security_groups_to_lb(name, security_groups)<br ALIGN="LEFT"/>attach_lb_to_subnets(name, subnets)<br ALIGN="LEFT"/>build_list_params(params, items, label)<br ALIGN="LEFT"/>configure_health_check(name, health_check)<br ALIGN="LEFT"/>create_app_cookie_stickiness_policy(name, lb_name, policy_name)<br ALIGN="LEFT"/>create_lb_cookie_stickiness_policy(cookie_expiration_period, lb_name, policy_name)<br ALIGN="LEFT"/>create_lb_policy(lb_name, policy_name, policy_type, policy_attributes)<br ALIGN="LEFT"/>create_load_balancer(name, zones, listeners, subnets, security_groups, scheme, complex_listeners)<br ALIGN="LEFT"/>create_load_balancer_listeners(name, listeners, complex_listeners)<br ALIGN="LEFT"/>delete_lb_policy(lb_name, policy_name)<br ALIGN="LEFT"/>delete_load_balancer(name)<br ALIGN="LEFT"/>delete_load_balancer_listeners(name, ports)<br ALIGN="LEFT"/>deregister_instances(load_balancer_name, instances)<br ALIGN="LEFT"/>describe_instance_health(load_balancer_name, instances)<br ALIGN="LEFT"/>detach_lb_from_subnets(name, subnets)<br ALIGN="LEFT"/>disable_availability_zones(load_balancer_name, zones_to_remove)<br ALIGN="LEFT"/>enable_availability_zones(load_balancer_name, zones_to_add)<br ALIGN="LEFT"/>get_all_lb_attributes(load_balancer_name)<br ALIGN="LEFT"/>get_all_load_balancers(load_balancer_names, marker)<br ALIGN="LEFT"/>get_lb_attribute(load_balancer_name, attribute)<br ALIGN="LEFT"/>modify_lb_attribute(load_balancer_name, attribute, value)<br ALIGN="LEFT"/>register_instances(load_balancer_name, instances)<br ALIGN="LEFT"/>set_lb_listener_SSL_certificate(lb_name, lb_port, ssl_certificate_id)<br ALIGN="LEFT"/>set_lb_policies_of_backend_server(lb_name, instance_port, policies)<br ALIGN="LEFT"/>set_lb_policies_of_listener(lb_name, lb_port, policies)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.EQ" [color="black", fontcolor="black", label=<{EQ|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.launchconfig.Ebs" [color="black", fontcolor="black", label=<{Ebs|connection : NoneType<br ALIGN="LEFT"/>snapshot_id : NoneType<br ALIGN="LEFT"/>volume_size : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.Ec2InstanceAttributes" [color="black", fontcolor="black", label=<{Ec2InstanceAttributes|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elasticache.layer1.ElastiCacheConnection" [color="black", fontcolor="black", label=<{ElastiCacheConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|authorize_cache_security_group_ingress(cache_security_group_name, ec2_security_group_name, ec2_security_group_owner_id)<br ALIGN="LEFT"/>create_cache_cluster(cache_cluster_id, num_cache_nodes, cache_node_type, engine, replication_group_id, engine_version, cache_parameter_group_name, cache_subnet_group_name, cache_security_group_names, security_group_ids, snapshot_arns, preferred_availability_zone, preferred_maintenance_window, port, notification_topic_arn, auto_minor_version_upgrade)<br ALIGN="LEFT"/>create_cache_parameter_group(cache_parameter_group_name, cache_parameter_group_family, description)<br ALIGN="LEFT"/>create_cache_security_group(cache_security_group_name, description)<br ALIGN="LEFT"/>create_cache_subnet_group(cache_subnet_group_name, cache_subnet_group_description, subnet_ids)<br ALIGN="LEFT"/>create_replication_group(replication_group_id, primary_cluster_id, replication_group_description)<br ALIGN="LEFT"/>delete_cache_cluster(cache_cluster_id)<br ALIGN="LEFT"/>delete_cache_parameter_group(cache_parameter_group_name)<br ALIGN="LEFT"/>delete_cache_security_group(cache_security_group_name)<br ALIGN="LEFT"/>delete_cache_subnet_group(cache_subnet_group_name)<br ALIGN="LEFT"/>delete_replication_group(replication_group_id)<br ALIGN="LEFT"/>describe_cache_clusters(cache_cluster_id, max_records, marker, show_cache_node_info)<br ALIGN="LEFT"/>describe_cache_engine_versions(engine, engine_version, cache_parameter_group_family, max_records, marker, default_only)<br ALIGN="LEFT"/>describe_cache_parameter_groups(cache_parameter_group_name, max_records, marker)<br ALIGN="LEFT"/>describe_cache_parameters(cache_parameter_group_name, source, max_records, marker)<br ALIGN="LEFT"/>describe_cache_security_groups(cache_security_group_name, max_records, marker)<br ALIGN="LEFT"/>describe_cache_subnet_groups(cache_subnet_group_name, max_records, marker)<br ALIGN="LEFT"/>describe_engine_default_parameters(cache_parameter_group_family, max_records, marker)<br ALIGN="LEFT"/>describe_events(source_identifier, source_type, start_time, end_time, duration, max_records, marker)<br ALIGN="LEFT"/>describe_replication_groups(replication_group_id, max_records, marker)<br ALIGN="LEFT"/>describe_reserved_cache_nodes(reserved_cache_node_id, reserved_cache_nodes_offering_id, cache_node_type, duration, product_description, offering_type, max_records, marker)<br ALIGN="LEFT"/>describe_reserved_cache_nodes_offerings(reserved_cache_nodes_offering_id, cache_node_type, duration, product_description, offering_type, max_records, marker)<br ALIGN="LEFT"/>modify_cache_cluster(cache_cluster_id, num_cache_nodes, cache_node_ids_to_remove, cache_security_group_names, security_group_ids, preferred_maintenance_window, notification_topic_arn, cache_parameter_group_name, notification_topic_status, apply_immediately, engine_version, auto_minor_version_upgrade)<br ALIGN="LEFT"/>modify_cache_parameter_group(cache_parameter_group_name, parameter_name_values)<br ALIGN="LEFT"/>modify_cache_subnet_group(cache_subnet_group_name, cache_subnet_group_description, subnet_ids)<br ALIGN="LEFT"/>modify_replication_group(replication_group_id, replication_group_description, cache_security_group_names, security_group_ids, preferred_maintenance_window, notification_topic_arn, cache_parameter_group_name, notification_topic_status, apply_immediately, engine_version, auto_minor_version_upgrade, primary_cluster_id)<br ALIGN="LEFT"/>purchase_reserved_cache_nodes_offering(reserved_cache_nodes_offering_id, reserved_cache_node_id, cache_node_count)<br ALIGN="LEFT"/>reboot_cache_cluster(cache_cluster_id, cache_node_ids_to_reboot)<br ALIGN="LEFT"/>reset_cache_parameter_group(cache_parameter_group_name, parameter_name_values, reset_all_parameters)<br ALIGN="LEFT"/>revoke_cache_security_group_ingress(cache_security_group_name, ec2_security_group_name, ec2_security_group_owner_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.elastictranscoder.layer1.ElasticTranscoderConnection" [color="black", fontcolor="black", label=<{ElasticTranscoderConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|cancel_job(id)<br ALIGN="LEFT"/>create_job(pipeline_id, input_name, output, outputs, output_key_prefix, playlists)<br ALIGN="LEFT"/>create_pipeline(name, input_bucket, output_bucket, role, notifications, content_config, thumbnail_config)<br ALIGN="LEFT"/>create_preset(name, description, container, video, audio, thumbnails)<br ALIGN="LEFT"/>delete_pipeline(id)<br ALIGN="LEFT"/>delete_preset(id)<br ALIGN="LEFT"/>list_jobs_by_pipeline(pipeline_id, ascending, page_token)<br ALIGN="LEFT"/>list_jobs_by_status(status, ascending, page_token)<br ALIGN="LEFT"/>list_pipelines(ascending, page_token)<br ALIGN="LEFT"/>list_presets(ascending, page_token)<br ALIGN="LEFT"/>make_request(verb, resource, headers, data, expected_status, params)<br ALIGN="LEFT"/>read_job(id)<br ALIGN="LEFT"/>read_pipeline(id)<br ALIGN="LEFT"/>read_preset(id)<br ALIGN="LEFT"/>test_role(role, input_bucket, output_bucket, topics)<br ALIGN="LEFT"/>update_pipeline(id, name, input_bucket, role, notifications, content_config, thumbnail_config)<br ALIGN="LEFT"/>update_pipeline_notifications(id, notifications)<br ALIGN="LEFT"/>update_pipeline_status(id, status)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.jsonresponse.Element" [color="black", fontcolor="black", label=<{Element|connection : NoneType<br ALIGN="LEFT"/>element_name : NoneType<br ALIGN="LEFT"/>item_marker : list, tuple<br ALIGN="LEFT"/>list_marker : list, tuple<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>pythonize_name : bool<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_name(name)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Element" [color="black", fontcolor="black", label=<{Element|<br ALIGN="LEFT"/>|<I>end</I>()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ElementList" [color="black", fontcolor="black", label=<{ElementList|<br ALIGN="LEFT"/>|<I>end</I>()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.connection.EmrConnection" [color="black", fontcolor="black", label=<{EmrConnection|APIVersion : object<br ALIGN="LEFT"/>DebuggingArgs : str<br ALIGN="LEFT"/>DebuggingJar : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>auth_region_name : NoneType<br ALIGN="LEFT"/>auth_service_name : str<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|add_instance_groups(jobflow_id, instance_groups)<br ALIGN="LEFT"/>add_jobflow_steps(jobflow_id, steps)<br ALIGN="LEFT"/>add_tags(resource_id, tags)<br ALIGN="LEFT"/>describe_cluster(cluster_id)<br ALIGN="LEFT"/>describe_jobflow(jobflow_id)<br ALIGN="LEFT"/>describe_jobflows(states, jobflow_ids, created_after, created_before)<br ALIGN="LEFT"/>describe_step(cluster_id, step_id)<br ALIGN="LEFT"/>list_bootstrap_actions(cluster_id, marker)<br ALIGN="LEFT"/>list_clusters(created_after, created_before, cluster_states, marker)<br ALIGN="LEFT"/>list_instance_groups(cluster_id, marker)<br ALIGN="LEFT"/>list_instances(cluster_id, instance_group_id, instance_group_types, marker)<br ALIGN="LEFT"/>list_steps(cluster_id, step_states, marker)<br ALIGN="LEFT"/>modify_instance_groups(instance_group_ids, new_sizes)<br ALIGN="LEFT"/>remove_tags(resource_id, tags)<br ALIGN="LEFT"/>run_jobflow(name, log_uri, ec2_keyname, availability_zone, master_instance_type, slave_instance_type, num_instances, action_on_failure, keep_alive, enable_debugging, hadoop_version, steps, bootstrap_actions, instance_groups, additional_info, ami_version, api_params, visible_to_all_users, job_flow_role, service_role)<br ALIGN="LEFT"/>set_termination_protection(jobflow_id, termination_protection_status)<br ALIGN="LEFT"/>set_visible_to_all_users(jobflow_id, visibility)<br ALIGN="LEFT"/>terminate_jobflow(jobflow_id)<br ALIGN="LEFT"/>terminate_jobflows(jobflow_ids)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.EmrObject" [color="black", fontcolor="black", label=<{EmrObject|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.EmrResponseError" [color="black", fontcolor="red", label=<{EmrResponseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.group.EnabledMetric" [color="black", fontcolor="black", label=<{EnabledMetric|connection : NoneType<br ALIGN="LEFT"/>granularity : NoneType<br ALIGN="LEFT"/>metric : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.message.EncodedMHMessage" [color="black", fontcolor="black", label=<{EncodedMHMessage|<br ALIGN="LEFT"/>|decode(value)<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.roboto.awsqueryrequest.Encoder" [color="black", fontcolor="black", label=<{Encoder|encode_enum<br ALIGN="LEFT"/>encode_file<br ALIGN="LEFT"/>|encode(p, rp, v, label)<br ALIGN="LEFT"/>encode_array(p, rp, v, l)<br ALIGN="LEFT"/>encode_boolean(p, rp, v, l)<br ALIGN="LEFT"/>encode_datetime(p, rp, v, l)<br ALIGN="LEFT"/>encode_integer(p, rp, v, l)<br ALIGN="LEFT"/>encode_string(p, rp, v, l)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.roboto.awsqueryrequest.EncoderError" [color="black", fontcolor="red", label=<{EncoderError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.document.EncodingError" [color="black", fontcolor="red", label=<{EncodingError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.document.EncodingError" [color="black", fontcolor="red", label=<{EncodingError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.gs.acl.Entries" [color="black", fontcolor="black", label=<{Entries|entry_list : list<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.acl.Entry" [color="black", fontcolor="black", label=<{Entry|permission : NoneType<br ALIGN="LEFT"/>scope : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.EnvironmentDescription" [color="black", fontcolor="black", label=<{EnvironmentDescription|application_name : str<br ALIGN="LEFT"/>cname : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>endpoint_url : str<br ALIGN="LEFT"/>environment_id : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>health : str<br ALIGN="LEFT"/>resources : NoneType<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>version_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.EnvironmentInfoDescription" [color="black", fontcolor="black", label=<{EnvironmentInfoDescription|ec2_instance_id : str<br ALIGN="LEFT"/>info_type : str<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>sample_timestamp : datetime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.EnvironmentResourceDescription" [color="black", fontcolor="black", label=<{EnvironmentResourceDescription|auto_scaling_groups : list<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>instances : list<br ALIGN="LEFT"/>launch_configurations : list<br ALIGN="LEFT"/>load_balancers : list<br ALIGN="LEFT"/>triggers : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.EnvironmentResourcesDescription" [color="black", fontcolor="black", label=<{EnvironmentResourcesDescription|load_balancer : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.multidelete.Error" [color="black", fontcolor="black", label=<{Error|code : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instancestatus.Event" [color="black", fontcolor="black", label=<{Event|code : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>not_after : NoneType<br ALIGN="LEFT"/>not_before : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.volumestatus.Event" [color="black", fontcolor="black", label=<{Event|description : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>not_after : NoneType<br ALIGN="LEFT"/>not_before : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.notification.Event" [color="black", fontcolor="black", label=<{Event|assignment_id<br ALIGN="LEFT"/>event_time_str<br ALIGN="LEFT"/>event_type<br ALIGN="LEFT"/>hit_id<br ALIGN="LEFT"/>hit_type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.event.Event" [color="black", fontcolor="black", label=<{Event|connection : NoneType<br ALIGN="LEFT"/>date : NoneType<br ALIGN="LEFT"/>engine : NoneType<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>source_identifier : NoneType<br ALIGN="LEFT"/>source_type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.EventDescription" [color="black", fontcolor="black", label=<{EventDescription|application_name : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>event_date : datetime<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>request_id : str<br ALIGN="LEFT"/>severity : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>version_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.instancestatus.EventSet" [color="black", fontcolor="black", label=<{EventSet|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.volumestatus.EventSet" [color="black", fontcolor="black", label=<{EventSet|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.EventSubscriptionQuotaExceeded" [color="black", fontcolor="red", label=<{EventSubscriptionQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.EventSubscriptionQuotaExceeded" [color="black", fontcolor="red", label=<{EventSubscriptionQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.model.Expando" [color="black", fontcolor="black", label=<{Expando|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.lifecycle.Expiration" [color="black", fontcolor="black", label=<{Expiration|date : NoneType<br ALIGN="LEFT"/>days : NoneType, int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.kinesis.exceptions.ExpiredIteratorException" [color="black", fontcolor="red", label=<{ExpiredIteratorException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.optionstatus.ExpressionStatus" [color="black", fontcolor="black", label=<{ExpressionStatus|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.ExternalQuestion" [color="black", fontcolor="black", label=<{ExternalQuestion|external_url<br ALIGN="LEFT"/>frame_height<br ALIGN="LEFT"/>schema_url : str<br ALIGN="LEFT"/>template<br ALIGN="LEFT"/>|get_as_params(label)<br ALIGN="LEFT"/>get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.connection.FPSConnection" [color="black", fontcolor="black", label=<{FPSConnection|APIVersion : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>currencycode : str<br ALIGN="LEFT"/>|cancel(action, response)<br ALIGN="LEFT"/>cancel_subscription_and_refund(action, response)<br ALIGN="LEFT"/>cancel_token(action, response)<br ALIGN="LEFT"/>cbui_url()<br ALIGN="LEFT"/>fund_prepaid(action, response)<br ALIGN="LEFT"/>get_account_activity(action, response)<br ALIGN="LEFT"/>get_account_balance(action, response)<br ALIGN="LEFT"/>get_debt_balance(action, response)<br ALIGN="LEFT"/>get_outstanding_debt_balance(action, response)<br ALIGN="LEFT"/>get_payment_instruction(action, response)<br ALIGN="LEFT"/>get_prepaid_balance(action, response)<br ALIGN="LEFT"/>get_recipient_verification_status(action, response)<br ALIGN="LEFT"/>get_subscription_details(action, response)<br ALIGN="LEFT"/>get_token_by_caller(action, response)<br ALIGN="LEFT"/>get_token_usage(action, response)<br ALIGN="LEFT"/>get_tokens(action, response)<br ALIGN="LEFT"/>get_total_prepaid_liability(action, response)<br ALIGN="LEFT"/>get_transaction(action, response)<br ALIGN="LEFT"/>get_transaction_status(action, response)<br ALIGN="LEFT"/>get_transactions_for_subscription(action, response)<br ALIGN="LEFT"/>install_payment_instruction(action, response)<br ALIGN="LEFT"/>pay(action, response)<br ALIGN="LEFT"/>refund(action, response)<br ALIGN="LEFT"/>reserve(action, response)<br ALIGN="LEFT"/>settle(action, response)<br ALIGN="LEFT"/>settle_debt(action, response)<br ALIGN="LEFT"/>verify_signature(action, response)<br ALIGN="LEFT"/>write_off_debt(action, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.ResponseFactory.FPSResponse" [color="black", fontcolor="black", label=<{FPSResponse|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.cmdshell.FakeServer" [color="black", fontcolor="black", label=<{FakeServer|hostname<br ALIGN="LEFT"/>instance<br ALIGN="LEFT"/>instance_id<br ALIGN="LEFT"/>ssh_key_file<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sts.credentials.FederationToken" [color="black", fontcolor="black", label=<{FederationToken|credentials : NoneType<br ALIGN="LEFT"/>federated_user_arn : NoneType<br ALIGN="LEFT"/>federated_user_id : NoneType<br ALIGN="LEFT"/>packed_policy_size : NoneType, int<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.FeedSubmissionInfo" [color="black", fontcolor="black", label=<{FeedSubmissionInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.file.connection.FileConnection" [color="black", fontcolor="black", label=<{FileConnection|debug<br ALIGN="LEFT"/>file_storage_uri<br ALIGN="LEFT"/>|get_bucket(bucket_name, validate, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.storage_uri.FileStorageUri" [color="black", fontcolor="black", label=<{FileStorageUri|bucket_name : str<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>delim : str<br ALIGN="LEFT"/>object_name<br ALIGN="LEFT"/>scheme : str<br ALIGN="LEFT"/>stream : bool<br ALIGN="LEFT"/>uri<br ALIGN="LEFT"/>|clone_replace_name(new_name)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>exists(_headers_not_used)<br ALIGN="LEFT"/>is_cloud_uri()<br ALIGN="LEFT"/>is_file_uri()<br ALIGN="LEFT"/>is_stream()<br ALIGN="LEFT"/>names_bucket()<br ALIGN="LEFT"/>names_container()<br ALIGN="LEFT"/>names_directory()<br ALIGN="LEFT"/>names_file()<br ALIGN="LEFT"/>names_object()<br ALIGN="LEFT"/>names_provider()<br ALIGN="LEFT"/>names_singleton()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.FileUploadAnswer" [color="black", fontcolor="black", label=<{FileUploadAnswer|max_bytes<br ALIGN="LEFT"/>min_bytes<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.FileUploadURL" [color="black", fontcolor="black", label=<{FileUploadURL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.roboto.awsqueryrequest.FilterError" [color="black", fontcolor="red", label=<{FilterError|filters<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.Flash" [color="black", fontcolor="black", label=<{Flash|url<br ALIGN="LEFT"/>|get_inner_content(content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.FloatProperty" [color="black", fontcolor="black", label=<{FloatProperty|data_type : float<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|empty(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.FormattedContent" [color="black", fontcolor="black", label=<{FormattedContent|content<br ALIGN="LEFT"/>schema_url : str<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.FreeTextAnswer" [color="black", fontcolor="black", label=<{FreeTextAnswer|constraints<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>num_lines : NoneType<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.FulfillmentOrder" [color="black", fontcolor="black", label=<{FulfillmentOrder|DestinationAddress<br ALIGN="LEFT"/>NotificationEmailList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.FulfillmentPreview" [color="black", fontcolor="black", label=<{FulfillmentPreview|EstimatedFees<br ALIGN="LEFT"/>EstimatedShippingWeight<br ALIGN="LEFT"/>FulfillmentPreviewShipments<br ALIGN="LEFT"/>UnfulfillablePreviewItems<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.FulfillmentPreviewItem" [color="black", fontcolor="black", label=<{FulfillmentPreviewItem|EstimatedShippingWeight<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.GE" [color="black", fontcolor="black", label=<{GE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.gs.connection.GSConnection" [color="black", fontcolor="black", label=<{GSConnection|DefaultHost : str<br ALIGN="LEFT"/>QueryString : str<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>|create_bucket(bucket_name, headers, location, policy, storage_class)<br ALIGN="LEFT"/>get_bucket(bucket_name, validate, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.GSCopyError" [color="black", fontcolor="red", label=<{GSCopyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.GSCreateError" [color="black", fontcolor="red", label=<{GSCreateError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.GSDataError" [color="black", fontcolor="red", label=<{GSDataError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.GSPermissionsError" [color="black", fontcolor="red", label=<{GSPermissionsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.GSResponseError" [color="black", fontcolor="red", label=<{GSResponseError|reason<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.GT" [color="black", fontcolor="black", label=<{GT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.GetAccountActivityResult" [color="black", fontcolor="black", label=<{GetAccountActivityResult|Transaction : list<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.GetAccountBalanceResult" [color="black", fontcolor="black", label=<{GetAccountBalanceResult|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.GetAuthorizationDetailsResult" [color="black", fontcolor="black", label=<{GetAuthorizationDetailsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetCaptureDetailsResult" [color="black", fontcolor="black", label=<{GetCaptureDetailsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetCartsResult" [color="black", fontcolor="black", label=<{GetCartsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetCompetitivePricingForASINResponse" [color="black", fontcolor="black", label=<{GetCompetitivePricingForASINResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetCompetitivePricingForSKUResponse" [color="black", fontcolor="black", label=<{GetCompetitivePricingForSKUResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetCustomersForCustomerIdResult" [color="black", fontcolor="black", label=<{GetCustomersForCustomerIdResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetFeedSubmissionCountResult" [color="black", fontcolor="black", label=<{GetFeedSubmissionCountResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetFeedSubmissionListResult" [color="black", fontcolor="black", label=<{GetFeedSubmissionListResult|FeedSubmissionInfo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetFulfillmentOrderResult" [color="black", fontcolor="black", label=<{GetFulfillmentOrderResult|FulfillmentOrder<br ALIGN="LEFT"/>FulfillmentOrderItem<br ALIGN="LEFT"/>FulfillmentShipment<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetFulfillmentPreviewResult" [color="black", fontcolor="black", label=<{GetFulfillmentPreviewResult|FulfillmentPreviews<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetLowestOfferListingsForASINResponse" [color="black", fontcolor="black", label=<{GetLowestOfferListingsForASINResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetLowestOfferListingsForSKUResponse" [color="black", fontcolor="black", label=<{GetLowestOfferListingsForSKUResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetMatchingProductForIdResponse" [color="black", fontcolor="black", label=<{GetMatchingProductForIdResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetMatchingProductForIdResult" [color="black", fontcolor="black", label=<{GetMatchingProductForIdResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetMatchingProductResponse" [color="black", fontcolor="black", label=<{GetMatchingProductResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetMyPriceForASINResponse" [color="black", fontcolor="black", label=<{GetMyPriceForASINResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetMyPriceForSKUResponse" [color="black", fontcolor="black", label=<{GetMyPriceForSKUResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetOrderReferenceDetailsResult" [color="black", fontcolor="black", label=<{GetOrderReferenceDetailsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetOrderResult" [color="black", fontcolor="black", label=<{GetOrderResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.GetOutstandingDebtBalanceResult" [color="black", fontcolor="black", label=<{GetOutstandingDebtBalanceResult|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.GetPackageTrackingDetailsResult" [color="black", fontcolor="black", label=<{GetPackageTrackingDetailsResult|ShipToAddress<br ALIGN="LEFT"/>TrackingEvents<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.GetPrepaidBalanceResult" [color="black", fontcolor="black", label=<{GetPrepaidBalanceResult|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.GetProductCategoriesForASINResult" [color="black", fontcolor="black", label=<{GetProductCategoriesForASINResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetProductCategoriesForSKUResult" [color="black", fontcolor="black", label=<{GetProductCategoriesForSKUResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetProductCategoriesResult" [color="black", fontcolor="black", label=<{GetProductCategoriesResult|Self<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetRefundDetails" [color="black", fontcolor="black", label=<{GetRefundDetails|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetReportListResult" [color="black", fontcolor="black", label=<{GetReportListResult|ReportInfo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetReportRequestListResult" [color="black", fontcolor="black", label=<{GetReportRequestListResult|ReportRequestInfo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetReportScheduleListResult" [color="black", fontcolor="black", label=<{GetReportScheduleListResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetServiceStatusResult" [color="black", fontcolor="black", label=<{GetServiceStatusResult|Messages<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.GetSubscriptionResult" [color="black", fontcolor="black", label=<{GetSubscriptionResult|Subscription<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.GetTokensResult" [color="black", fontcolor="black", label=<{GetTokensResult|Token : list<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.GetTotalPrepaidLiabilityResult" [color="black", fontcolor="black", label=<{GetTotalPrepaidLiabilityResult|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.GetTransactionResult" [color="black", fontcolor="black", label=<{GetTransactionResult|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.response.GlacierResponse" [color="black", fontcolor="black", label=<{GlacierResponse|http_response<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|read(amt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.fields.GlobalAllIndex" [color="black", fontcolor="black", label=<{GlobalAllIndex|projection_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.fields.GlobalBaseIndexField" [color="black", fontcolor="black", label=<{GlobalBaseIndexField|throughput : dict<br ALIGN="LEFT"/>|schema()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.fields.GlobalIncludeIndex" [color="black", fontcolor="black", label=<{GlobalIncludeIndex|projection_type : str<br ALIGN="LEFT"/>|schema()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.fields.GlobalKeysOnlyIndex" [color="black", fontcolor="black", label=<{GlobalKeysOnlyIndex|projection_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.acl.Grant" [color="black", fontcolor="black", label=<{Grant|NameSpace : str<br ALIGN="LEFT"/>display_name : NoneType<br ALIGN="LEFT"/>email_address : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>permission : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>uri : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.MetricCollectionTypes.Granularity" [color="black", fontcolor="black", label=<{Granularity|arg : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.group.Group" [color="black", fontcolor="black", label=<{Group|id : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.launchspecification.GroupList" [color="black", fontcolor="black", label=<{GroupList|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.securitygroup.GroupOrCIDR" [color="black", fontcolor="black", label=<{GroupOrCIDR|cidr_ip : NoneType<br ALIGN="LEFT"/>group_id : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.HIT" [color="black", fontcolor="black", label=<{HIT|expired<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.connection.HITTypeId" [color="black", fontcolor="black", label=<{HITTypeId|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.HTMLQuestion" [color="black", fontcolor="black", label=<{HTMLQuestion|frame_height<br ALIGN="LEFT"/>html_form<br ALIGN="LEFT"/>schema_url : str<br ALIGN="LEFT"/>template<br ALIGN="LEFT"/>|get_as_params(label)<br ALIGN="LEFT"/>get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.connection.HTTPRequest" [color="black", fontcolor="black", label=<{HTTPRequest|auth_path<br ALIGN="LEFT"/>body<br ALIGN="LEFT"/>headers<br ALIGN="LEFT"/>host<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>protocol<br ALIGN="LEFT"/>|authorize(connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.connection.HTTPResponse" [color="black", fontcolor="black", label=<{HTTPResponse|<br ALIGN="LEFT"/>|read(amt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.HadoopStep" [color="black", fontcolor="black", label=<{HadoopStep|Fields : set<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.fields.HashKey" [color="black", fontcolor="black", label=<{HashKey|attr_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.healthcheck.HealthCheck" [color="black", fontcolor="black", label=<{HealthCheck|access_point : NoneType<br ALIGN="LEFT"/>healthy_threshold : int<br ALIGN="LEFT"/>interval : int<br ALIGN="LEFT"/>target : NoneType<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>unhealthy_threshold : int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.healthcheck.HealthCheck" [color="black", fontcolor="black", label=<{HealthCheck|POSTXMLBody : str<br ALIGN="LEFT"/>XMLFQDNPart : str<br ALIGN="LEFT"/>XMLIpAddrPart : str<br ALIGN="LEFT"/>XMLRequestIntervalPart : str<br ALIGN="LEFT"/>XMLStringMatchPart : str<br ALIGN="LEFT"/>failure_threshold : int<br ALIGN="LEFT"/>fqdn : NoneType<br ALIGN="LEFT"/>hc_type<br ALIGN="LEFT"/>ip_addr<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>request_interval : int<br ALIGN="LEFT"/>resource_path<br ALIGN="LEFT"/>string_match : NoneType<br ALIGN="LEFT"/>valid_request_intervals : tuple<br ALIGN="LEFT"/>|to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.helloworld.HelloWorld" [color="black", fontcolor="black", label=<{HelloWorld|<br ALIGN="LEFT"/>|main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.step.HiveBase" [color="black", fontcolor="black", label=<{HiveBase|BaseArgs : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.step.HiveStep" [color="black", fontcolor="black", label=<{HiveStep|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.HmacAuthV1Handler" [color="black", fontcolor="black", label=<{HmacAuthV1Handler|capability : list<br ALIGN="LEFT"/>|add_auth(http_request)<br ALIGN="LEFT"/>update_provider(provider)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.HmacAuthV2Handler" [color="black", fontcolor="black", label=<{HmacAuthV2Handler|capability : list<br ALIGN="LEFT"/>|add_auth(http_request)<br ALIGN="LEFT"/>update_provider(provider)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.HmacAuthV3HTTPHandler" [color="black", fontcolor="black", label=<{HmacAuthV3HTTPHandler|capability : list<br ALIGN="LEFT"/>|add_auth(req)<br ALIGN="LEFT"/>canonical_headers(headers_to_sign)<br ALIGN="LEFT"/>headers_to_sign(http_request)<br ALIGN="LEFT"/>string_to_sign(http_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.HmacAuthV3Handler" [color="black", fontcolor="black", label=<{HmacAuthV3Handler|capability : list<br ALIGN="LEFT"/>|add_auth(http_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.HmacAuthV4Handler" [color="black", fontcolor="black", label=<{HmacAuthV4Handler|capability : list<br ALIGN="LEFT"/>region_name : NoneType<br ALIGN="LEFT"/>service_name : NoneType<br ALIGN="LEFT"/>|add_auth(req)<br ALIGN="LEFT"/>canonical_headers(headers_to_sign)<br ALIGN="LEFT"/>canonical_query_string(http_request)<br ALIGN="LEFT"/>canonical_request(http_request)<br ALIGN="LEFT"/>canonical_uri(http_request)<br ALIGN="LEFT"/>credential_scope(http_request)<br ALIGN="LEFT"/>determine_region_name(host)<br ALIGN="LEFT"/>determine_service_name(host)<br ALIGN="LEFT"/>headers_to_sign(http_request)<br ALIGN="LEFT"/>host_header(host, http_request)<br ALIGN="LEFT"/>payload(http_request)<br ALIGN="LEFT"/>query_string(http_request)<br ALIGN="LEFT"/>scope(http_request)<br ALIGN="LEFT"/>signature(http_request, string_to_sign)<br ALIGN="LEFT"/>signed_headers(headers_to_sign)<br ALIGN="LEFT"/>split_host_parts(host)<br ALIGN="LEFT"/>string_to_sign(http_request, canonical_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.HmacKeys" [color="black", fontcolor="black", label=<{HmacKeys|host<br ALIGN="LEFT"/>|algorithm()<br ALIGN="LEFT"/>sign_string(string_to_sign)<br ALIGN="LEFT"/>update_provider(provider)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.connection.HostConnectionPool" [color="black", fontcolor="black", label=<{HostConnectionPool|queue : list<br ALIGN="LEFT"/>|clean()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>put(conn)<br ALIGN="LEFT"/>size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.connection.HostRequiredError" [color="black", fontcolor="red", label=<{HostRequiredError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.hostedzone.HostedZone" [color="black", fontcolor="black", label=<{HostedZone|caller_reference : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>owner : NoneType<br ALIGN="LEFT"/>version : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.HsmClientCertificateAlreadyExists" [color="black", fontcolor="red", label=<{HsmClientCertificateAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.HsmClientCertificateNotFound" [color="black", fontcolor="red", label=<{HsmClientCertificateNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.HsmClientCertificateQuotaExceeded" [color="black", fontcolor="red", label=<{HsmClientCertificateQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.HsmConfigurationAlreadyExists" [color="black", fontcolor="red", label=<{HsmConfigurationAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.HsmConfigurationNotFound" [color="black", fontcolor="red", label=<{HsmConfigurationNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.HsmConfigurationQuotaExceeded" [color="black", fontcolor="red", label=<{HsmConfigurationQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.iam.connection.IAMConnection" [color="black", fontcolor="black", label=<{IAMConnection|APIVersion : str<br ALIGN="LEFT"/>get_all_server_certs<br ALIGN="LEFT"/>|add_role_to_instance_profile(instance_profile_name, role_name)<br ALIGN="LEFT"/>add_user_to_group(group_name, user_name)<br ALIGN="LEFT"/>create_access_key(user_name)<br ALIGN="LEFT"/>create_account_alias(alias)<br ALIGN="LEFT"/>create_group(group_name, path)<br ALIGN="LEFT"/>create_instance_profile(instance_profile_name, path)<br ALIGN="LEFT"/>create_login_profile(user_name, password)<br ALIGN="LEFT"/>create_role(role_name, assume_role_policy_document, path)<br ALIGN="LEFT"/>create_saml_provider(saml_metadata_document, name)<br ALIGN="LEFT"/>create_user(user_name, path)<br ALIGN="LEFT"/>create_virtual_mfa_device(path, device_name)<br ALIGN="LEFT"/>deactivate_mfa_device(user_name, serial_number)<br ALIGN="LEFT"/>delete_access_key(access_key_id, user_name)<br ALIGN="LEFT"/>delete_account_alias(alias)<br ALIGN="LEFT"/>delete_account_password_policy()<br ALIGN="LEFT"/>delete_group(group_name)<br ALIGN="LEFT"/>delete_group_policy(group_name, policy_name)<br ALIGN="LEFT"/>delete_instance_profile(instance_profile_name)<br ALIGN="LEFT"/>delete_login_profile(user_name)<br ALIGN="LEFT"/>delete_role(role_name)<br ALIGN="LEFT"/>delete_role_policy(role_name, policy_name)<br ALIGN="LEFT"/>delete_saml_provider(saml_provider_arn)<br ALIGN="LEFT"/>delete_server_cert(cert_name)<br ALIGN="LEFT"/>delete_signing_cert(cert_id, user_name)<br ALIGN="LEFT"/>delete_user(user_name)<br ALIGN="LEFT"/>delete_user_policy(user_name, policy_name)<br ALIGN="LEFT"/>enable_mfa_device(user_name, serial_number, auth_code_1, auth_code_2)<br ALIGN="LEFT"/>generate_credential_report()<br ALIGN="LEFT"/>get_account_alias()<br ALIGN="LEFT"/>get_account_password_policy()<br ALIGN="LEFT"/>get_account_summary()<br ALIGN="LEFT"/>get_all_access_keys(user_name, marker, max_items)<br ALIGN="LEFT"/>get_all_group_policies(group_name, marker, max_items)<br ALIGN="LEFT"/>get_all_groups(path_prefix, marker, max_items)<br ALIGN="LEFT"/>get_all_mfa_devices(user_name, marker, max_items)<br ALIGN="LEFT"/>get_all_signing_certs(marker, max_items, user_name)<br ALIGN="LEFT"/>get_all_user_policies(user_name, marker, max_items)<br ALIGN="LEFT"/>get_all_users(path_prefix, marker, max_items)<br ALIGN="LEFT"/>get_credential_report()<br ALIGN="LEFT"/>get_group(group_name, marker, max_items)<br ALIGN="LEFT"/>get_group_policy(group_name, policy_name)<br ALIGN="LEFT"/>get_groups_for_user(user_name, marker, max_items)<br ALIGN="LEFT"/>get_instance_profile(instance_profile_name)<br ALIGN="LEFT"/>get_login_profiles(user_name)<br ALIGN="LEFT"/>get_response(action, params, path, parent, verb, list_marker)<br ALIGN="LEFT"/>get_role(role_name)<br ALIGN="LEFT"/>get_role_policy(role_name, policy_name)<br ALIGN="LEFT"/>get_saml_provider(saml_provider_arn)<br ALIGN="LEFT"/>get_server_certificate(cert_name)<br ALIGN="LEFT"/>get_signin_url(service)<br ALIGN="LEFT"/>get_user(user_name)<br ALIGN="LEFT"/>get_user_policy(user_name, policy_name)<br ALIGN="LEFT"/>list_instance_profiles(path_prefix, marker, max_items)<br ALIGN="LEFT"/>list_instance_profiles_for_role(role_name, marker, max_items)<br ALIGN="LEFT"/>list_role_policies(role_name, marker, max_items)<br ALIGN="LEFT"/>list_roles(path_prefix, marker, max_items)<br ALIGN="LEFT"/>list_saml_providers()<br ALIGN="LEFT"/>list_server_certs(path_prefix, marker, max_items)<br ALIGN="LEFT"/>put_group_policy(group_name, policy_name, policy_json)<br ALIGN="LEFT"/>put_role_policy(role_name, policy_name, policy_document)<br ALIGN="LEFT"/>put_user_policy(user_name, policy_name, policy_json)<br ALIGN="LEFT"/>remove_role_from_instance_profile(instance_profile_name, role_name)<br ALIGN="LEFT"/>remove_user_from_group(group_name, user_name)<br ALIGN="LEFT"/>resync_mfa_device(user_name, serial_number, auth_code_1, auth_code_2)<br ALIGN="LEFT"/>update_access_key(access_key_id, status, user_name)<br ALIGN="LEFT"/>update_account_password_policy(allow_users_to_change_password, hard_expiry, max_password_age, minimum_password_length, password_reuse_prevention, require_lowercase_characters, require_numbers, require_symbols, require_uppercase_characters)<br ALIGN="LEFT"/>update_assume_role_policy(role_name, policy_document)<br ALIGN="LEFT"/>update_group(group_name, new_group_name, new_path)<br ALIGN="LEFT"/>update_login_profile(user_name, password)<br ALIGN="LEFT"/>update_saml_provider(saml_provider_arn, saml_metadata_document)<br ALIGN="LEFT"/>update_server_cert(cert_name, new_cert_name, new_path)<br ALIGN="LEFT"/>update_signing_cert(cert_id, status, user_name)<br ALIGN="LEFT"/>update_user(user_name, new_user_name, new_path)<br ALIGN="LEFT"/>upload_server_cert(cert_name, cert_body, private_key, cert_chain, path)<br ALIGN="LEFT"/>upload_signing_cert(cert_body, user_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.iam.IAMRegionInfo" [color="black", fontcolor="black", label=<{IAMRegionInfo|<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.IN" [color="black", fontcolor="black", label=<{IN|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mashups.iobject.IObject" [color="black", fontcolor="black", label=<{IObject|<br ALIGN="LEFT"/>|choose_from_list(item_list, search_str, prompt)<br ALIGN="LEFT"/>get_filename(prompt)<br ALIGN="LEFT"/>get_int(prompt)<br ALIGN="LEFT"/>get_string(prompt, validation_fn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.securitygroup.IPPermissions" [color="black", fontcolor="black", label=<{IPPermissions|from_port : NoneType<br ALIGN="LEFT"/>grants : list<br ALIGN="LEFT"/>ip_protocol : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>to_port : NoneType<br ALIGN="LEFT"/>|add_grant(name, owner_id, cidr_ip, group_id, dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.securitygroup.IPPermissionsList" [color="black", fontcolor="black", label=<{IPPermissionsList|<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.dbsecuritygroup.IPRange" [color="black", fontcolor="black", label=<{IPRange|cidr_ip : NoneType<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.networkacl.Icmp" [color="black", fontcolor="black", label=<{Icmp|code : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.IdempotentParameterMismatchException" [color="black", fontcolor="red", label=<{IdempotentParameterMismatchException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.image.Image" [color="black", fontcolor="black", label=<{Image|architecture : NoneType<br ALIGN="LEFT"/>billing_products<br ALIGN="LEFT"/>block_device_mapping : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>hypervisor : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_lifecycle : NoneType<br ALIGN="LEFT"/>is_public : bool<br ALIGN="LEFT"/>kernel_id : NoneType<br ALIGN="LEFT"/>location : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>ownerId : NoneType<br ALIGN="LEFT"/>owner_alias : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>product_codes<br ALIGN="LEFT"/>ramdisk_id : NoneType<br ALIGN="LEFT"/>root_device_name : NoneType<br ALIGN="LEFT"/>root_device_type : NoneType<br ALIGN="LEFT"/>sriov_net_support : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>virtualization_type : NoneType<br ALIGN="LEFT"/>|deregister(delete_snapshot, dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_kernel(dry_run)<br ALIGN="LEFT"/>get_launch_permissions(dry_run)<br ALIGN="LEFT"/>get_ramdisk(dry_run)<br ALIGN="LEFT"/>remove_launch_permissions(user_ids, group_names, dry_run)<br ALIGN="LEFT"/>reset_launch_attributes(dry_run)<br ALIGN="LEFT"/>run(min_count, max_count, key_name, security_groups, user_data, addressing_type, instance_type, placement, kernel_id, ramdisk_id, monitoring_enabled, subnet_id, block_device_map, disable_api_termination, instance_initiated_shutdown_behavior, private_ip_address, placement_group, security_group_ids, additional_info, instance_profile_name, instance_profile_arn, tenancy, dry_run)<br ALIGN="LEFT"/>set_launch_permissions(user_ids, group_names, dry_run)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Image" [color="black", fontcolor="black", label=<{Image|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.image.ImageAttribute" [color="black", fontcolor="black", label=<{ImageAttribute|attrs : dict<br ALIGN="LEFT"/>image_id<br ALIGN="LEFT"/>kernel : NoneType<br ALIGN="LEFT"/>name : NoneType, str<br ALIGN="LEFT"/>ramdisk : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.InactiveInstrument" [color="black", fontcolor="red", label=<{InactiveInstrument|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.fields.IncludeIndex" [color="black", fontcolor="black", label=<{IncludeIndex|includes_fields<br ALIGN="LEFT"/>projection_type : str<br ALIGN="LEFT"/>|schema()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.IncompatibleOrderableOptions" [color="black", fontcolor="red", label=<{IncompatibleOrderableOptions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.IncompatibleTokens" [color="black", fontcolor="red", label=<{IncompatibleTokens|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.IncompatibleVersionException" [color="black", fontcolor="red", label=<{IncompatibleVersionException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.IncompleteSignature" [color="black", fontcolor="red", label=<{IncompleteSignature|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.optionstatus.IndexFieldStatus" [color="black", fontcolor="black", label=<{IndexFieldStatus|<br ALIGN="LEFT"/>|<I>save</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.optionstatus.IndexFieldStatus" [color="black", fontcolor="black", label=<{IndexFieldStatus|<br ALIGN="LEFT"/>|<I>save</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.step.InstallHiveStep" [color="black", fontcolor="black", label=<{InstallHiveStep|InstallHiveName : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.step.InstallPigStep" [color="black", fontcolor="black", label=<{InstallPigStep|InstallPigName : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.pyami.installers.Installer" [color="black", fontcolor="black", label=<{Installer|<br ALIGN="LEFT"/>|<I>add_cron</I>(name, minute, hour, mday, month, wday, who, command, env)<br ALIGN="LEFT"/><I>add_env</I>(key, value)<br ALIGN="LEFT"/><I>add_init_script</I>(file)<br ALIGN="LEFT"/><I>install</I>()<br ALIGN="LEFT"/><I>start</I>(service_name)<br ALIGN="LEFT"/><I>stop</I>(service_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.installers.ubuntu.installer.Installer" [color="black", fontcolor="black", label=<{Installer|<br ALIGN="LEFT"/>|add_cron(name, command, minute, hour, mday, month, wday, who, env)<br ALIGN="LEFT"/>add_env(key, value)<br ALIGN="LEFT"/>add_init_script(file, name)<br ALIGN="LEFT"/>create_user(user)<br ALIGN="LEFT"/><I>install</I>()<br ALIGN="LEFT"/>start(service_name)<br ALIGN="LEFT"/>stop(service_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.Instance" [color="black", fontcolor="black", label=<{Instance|id : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.instance.Instance" [color="black", fontcolor="black", label=<{Instance|ami_launch_index : NoneType<br ALIGN="LEFT"/>architecture : NoneType<br ALIGN="LEFT"/>block_device_mapping : NoneType<br ALIGN="LEFT"/>client_token : NoneType<br ALIGN="LEFT"/>dns_name : NoneType<br ALIGN="LEFT"/>ebs_optimized<br ALIGN="LEFT"/>events<br ALIGN="LEFT"/>eventsSet : NoneType<br ALIGN="LEFT"/>group_name : NoneType<br ALIGN="LEFT"/>groups : list<br ALIGN="LEFT"/>hypervisor : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>image_id : NoneType<br ALIGN="LEFT"/>instance_profile : NoneType<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>interfaces : list<br ALIGN="LEFT"/>ip_address : NoneType<br ALIGN="LEFT"/>kernel : NoneType<br ALIGN="LEFT"/>key_name : NoneType<br ALIGN="LEFT"/>launch_time : NoneType<br ALIGN="LEFT"/>monitored : bool<br ALIGN="LEFT"/>monitoring_state : NoneType<br ALIGN="LEFT"/>persistent : bool<br ALIGN="LEFT"/>placement<br ALIGN="LEFT"/>placement_group<br ALIGN="LEFT"/>placement_tenancy<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>previous_state<br ALIGN="LEFT"/>previous_state_code<br ALIGN="LEFT"/>private_dns_name : NoneType<br ALIGN="LEFT"/>private_ip_address : NoneType<br ALIGN="LEFT"/>product_codes<br ALIGN="LEFT"/>public_dns_name : NoneType<br ALIGN="LEFT"/>ramdisk : NoneType<br ALIGN="LEFT"/>requester_id : NoneType<br ALIGN="LEFT"/>root_device_name : NoneType<br ALIGN="LEFT"/>root_device_type : NoneType<br ALIGN="LEFT"/>spot_instance_request_id : NoneType<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>state_code<br ALIGN="LEFT"/>state_reason : NoneType<br ALIGN="LEFT"/>subnet_id : NoneType<br ALIGN="LEFT"/>virtualization_type : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|confirm_product(product_code, dry_run)<br ALIGN="LEFT"/>create_image(name, description, no_reboot, dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_attribute(attribute, dry_run)<br ALIGN="LEFT"/>get_console_output(dry_run)<br ALIGN="LEFT"/>modify_attribute(attribute, value, dry_run)<br ALIGN="LEFT"/>monitor(dry_run)<br ALIGN="LEFT"/>reboot(dry_run)<br ALIGN="LEFT"/>reset_attribute(attribute, dry_run)<br ALIGN="LEFT"/>start(dry_run)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>stop(force, dry_run)<br ALIGN="LEFT"/>terminate(dry_run)<br ALIGN="LEFT"/>unmonitor(dry_run)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>use_ip(ip_address, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.instance.Instance" [color="black", fontcolor="black", label=<{Instance|availability_zone : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>group_name : NoneType<br ALIGN="LEFT"/>health_status : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>launch_config_name : NoneType<br ALIGN="LEFT"/>lifecycle_state : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instance.InstanceAttribute" [color="black", fontcolor="black", label=<{InstanceAttribute|ValidValues : list<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.InstanceCount" [color="black", fontcolor="black", label=<{InstanceCount|instance_count : NoneType, int<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InstanceDoesNotExistException" [color="black", fontcolor="red", label=<{InstanceDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.InstanceGroup" [color="black", fontcolor="black", label=<{InstanceGroup|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.instance_group.InstanceGroup" [color="black", fontcolor="black", label=<{InstanceGroup|bidprice : str<br ALIGN="LEFT"/>market<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>num_instances<br ALIGN="LEFT"/>role<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.InstanceGroupInfo" [color="black", fontcolor="black", label=<{InstanceGroupInfo|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.InstanceGroupList" [color="black", fontcolor="black", label=<{InstanceGroupList|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>instancegroups : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InstanceIdRequiredException" [color="black", fontcolor="red", label=<{InstanceIdRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.instanceinfo.InstanceInfo" [color="black", fontcolor="black", label=<{InstanceInfo|connection : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.InstanceInfo" [color="black", fontcolor="black", label=<{InstanceInfo|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.InstanceList" [color="black", fontcolor="black", label=<{InstanceList|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>instances : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.launchconfig.InstanceMonitoring" [color="black", fontcolor="black", label=<{InstanceMonitoring|connection : NoneType<br ALIGN="LEFT"/>enabled : str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instance.InstancePlacement" [color="black", fontcolor="black", label=<{InstancePlacement|group_name : NoneType<br ALIGN="LEFT"/>tenancy : NoneType<br ALIGN="LEFT"/>zone : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.InstanceQuotaExceeded" [color="black", fontcolor="red", label=<{InstanceQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.instance.InstanceState" [color="black", fontcolor="black", label=<{InstanceState|code : int<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.instancestate.InstanceState" [color="black", fontcolor="black", label=<{InstanceState|description : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>load_balancer : NoneType<br ALIGN="LEFT"/>reason_code : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instancestatus.InstanceStatus" [color="black", fontcolor="black", label=<{InstanceStatus|events : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_status<br ALIGN="LEFT"/>state_code : NoneType, int<br ALIGN="LEFT"/>state_name : NoneType<br ALIGN="LEFT"/>system_status<br ALIGN="LEFT"/>zone : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instancestatus.InstanceStatusSet" [color="black", fontcolor="black", label=<{InstanceStatusSet|connection : NoneType<br ALIGN="LEFT"/>next_token : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instancetype.InstanceType" [color="black", fontcolor="black", label=<{InstanceType|connection : NoneType<br ALIGN="LEFT"/>cores : NoneType<br ALIGN="LEFT"/>disk : NoneType<br ALIGN="LEFT"/>memory : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.InstrumentAccessDenied" [color="black", fontcolor="red", label=<{InstrumentAccessDenied|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InstrumentExpired" [color="black", fontcolor="red", label=<{InstrumentExpired|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InsufficientBalance" [color="black", fontcolor="red", label=<{InsufficientBalance|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InsufficientClusterCapacity" [color="black", fontcolor="red", label=<{InsufficientClusterCapacity|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InsufficientClusterCapacityFault" [color="black", fontcolor="red", label=<{InsufficientClusterCapacityFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InsufficientDBInstanceCapacity" [color="black", fontcolor="red", label=<{InsufficientDBInstanceCapacity|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InsufficientDeliveryPolicyException" [color="black", fontcolor="red", label=<{InsufficientDeliveryPolicyException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InsufficientPrivileges" [color="black", fontcolor="red", label=<{InsufficientPrivileges|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InsufficientS3BucketPolicy" [color="black", fontcolor="red", label=<{InsufficientS3BucketPolicy|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InsufficientS3BucketPolicyException" [color="black", fontcolor="red", label=<{InsufficientS3BucketPolicyException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InsufficientSnsTopicPolicyException" [color="black", fontcolor="red", label=<{InsufficientSnsTopicPolicyException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.property.IntegerProperty" [color="black", fontcolor="black", label=<{IntegerProperty|data_type : int<br ALIGN="LEFT"/>max : int<br ALIGN="LEFT"/>min : int<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|empty(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.InternalError" [color="black", fontcolor="red", label=<{InternalError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InternalErrorException" [color="black", fontcolor="red", label=<{InternalErrorException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.InternalErrorException" [color="black", fontcolor="red", label=<{InternalErrorException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.InternalErrorException" [color="black", fontcolor="red", label=<{InternalErrorException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.exceptions.InternalException" [color="black", fontcolor="red", label=<{InternalException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InternalFailure" [color="black", fontcolor="red", label=<{InternalFailure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.InternalServerError" [color="black", fontcolor="red", label=<{InternalServerError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.support.exceptions.InternalServerError" [color="black", fontcolor="red", label=<{InternalServerError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.InternalServerException" [color="black", fontcolor="red", label=<{InternalServerException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.datapipeline.exceptions.InternalServiceError" [color="black", fontcolor="red", label=<{InternalServiceError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.InternalServiceException" [color="black", fontcolor="red", label=<{InternalServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vpc.internetgateway.InternetGateway" [color="black", fontcolor="black", label=<{InternetGateway|attachments : list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.internetgateway.InternetGatewayAttachment" [color="black", fontcolor="black", label=<{InternetGatewayAttachment|state : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.InvalidAccountState" [color="black", fontcolor="red", label=<{InvalidAccountState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidAccountState_Caller" [color="black", fontcolor="red", label=<{InvalidAccountState_Caller|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidAccountState_Recipient" [color="black", fontcolor="red", label=<{InvalidAccountState_Recipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidAccountState_Sender" [color="black", fontcolor="red", label=<{InvalidAccountState_Sender|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.InvalidAclError" [color="black", fontcolor="red", label=<{InvalidAclError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InvalidAction" [color="black", fontcolor="red", label=<{InvalidAction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.exception.InvalidAddress" [color="black", fontcolor="red", label=<{InvalidAddress|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.InvalidAliasNameException" [color="black", fontcolor="red", label=<{InvalidAliasNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidApplicationNameException" [color="black", fontcolor="red", label=<{InvalidApplicationNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.exceptions.InvalidArgumentException" [color="black", fontcolor="red", label=<{InvalidArgumentException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.InvalidArnException" [color="black", fontcolor="red", label=<{InvalidArnException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidAutoScalingGroupException" [color="black", fontcolor="red", label=<{InvalidAutoScalingGroupException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidBucketNameFilterException" [color="black", fontcolor="red", label=<{InvalidBucketNameFilterException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidCallerReference" [color="black", fontcolor="red", label=<{InvalidCallerReference|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.https_connection.InvalidCertificateException" [color="black", fontcolor="red", label=<{InvalidCertificateException|cert<br ALIGN="LEFT"/>host<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.InvalidCiphertextException" [color="black", fontcolor="red", label=<{InvalidCiphertextException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InvalidClientTokenId" [color="black", fontcolor="red", label=<{InvalidClientTokenId|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidClientTokenId" [color="black", fontcolor="red", label=<{InvalidClientTokenId|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidCloudWatchLogsLogGroupArnException" [color="black", fontcolor="red", label=<{InvalidCloudWatchLogsLogGroupArnException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidCloudWatchLogsRoleArnException" [color="black", fontcolor="red", label=<{InvalidCloudWatchLogsRoleArnException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterParameterGroupState" [color="black", fontcolor="red", label=<{InvalidClusterParameterGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterParameterGroupStateFault" [color="black", fontcolor="red", label=<{InvalidClusterParameterGroupStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSecurityGroupState" [color="black", fontcolor="red", label=<{InvalidClusterSecurityGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSecurityGroupStateFault" [color="black", fontcolor="red", label=<{InvalidClusterSecurityGroupStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSnapshotState" [color="black", fontcolor="red", label=<{InvalidClusterSnapshotState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSnapshotStateFault" [color="black", fontcolor="red", label=<{InvalidClusterSnapshotStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterState" [color="black", fontcolor="red", label=<{InvalidClusterState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterStateFault" [color="black", fontcolor="red", label=<{InvalidClusterStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSubnetGroupState" [color="black", fontcolor="red", label=<{InvalidClusterSubnetGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSubnetGroupStateFault" [color="black", fontcolor="red", label=<{InvalidClusterSubnetGroupStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSubnetState" [color="black", fontcolor="red", label=<{InvalidClusterSubnetState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidClusterSubnetStateFault" [color="black", fontcolor="red", label=<{InvalidClusterSubnetStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.InvalidConfigurationException" [color="black", fontcolor="red", label=<{InvalidConfigurationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidConfigurationRecorderNameException" [color="black", fontcolor="red", label=<{InvalidConfigurationRecorderNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.InvalidCorsError" [color="black", fontcolor="red", label=<{InvalidCorsError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidDBInstanceState" [color="black", fontcolor="red", label=<{InvalidDBInstanceState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidDBParameterGroupState" [color="black", fontcolor="red", label=<{InvalidDBParameterGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidDBSecurityGroupState" [color="black", fontcolor="red", label=<{InvalidDBSecurityGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidDBSnapshotState" [color="black", fontcolor="red", label=<{InvalidDBSnapshotState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidDBSubnetGroupState" [color="black", fontcolor="red", label=<{InvalidDBSubnetGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidDBSubnetState" [color="black", fontcolor="red", label=<{InvalidDBSubnetState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidDateRange" [color="black", fontcolor="red", label=<{InvalidDateRange|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidDeliveryChannelNameException" [color="black", fontcolor="red", label=<{InvalidDeliveryChannelNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidDeployedStateFilterException" [color="black", fontcolor="red", label=<{InvalidDeployedStateFilterException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidDeploymentConfigNameException" [color="black", fontcolor="red", label=<{InvalidDeploymentConfigNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidDeploymentGroupNameException" [color="black", fontcolor="red", label=<{InvalidDeploymentGroupNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidDeploymentIdException" [color="black", fontcolor="red", label=<{InvalidDeploymentIdException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidDeploymentStatusException" [color="black", fontcolor="red", label=<{InvalidDeploymentStatusException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidEC2TagException" [color="black", fontcolor="red", label=<{InvalidEC2TagException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidElasticIp" [color="black", fontcolor="red", label=<{InvalidElasticIp|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidEventSubscriptionState" [color="black", fontcolor="red", label=<{InvalidEventSubscriptionState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.InvalidGrantTokenException" [color="black", fontcolor="red", label=<{InvalidGrantTokenException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidHsmClientCertificateState" [color="black", fontcolor="red", label=<{InvalidHsmClientCertificateState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidHsmConfigurationState" [color="black", fontcolor="red", label=<{InvalidHsmConfigurationState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.domains.exceptions.InvalidInput" [color="black", fontcolor="red", label=<{InvalidInput|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.InvalidInputException" [color="black", fontcolor="red", label=<{InvalidInputException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidInstanceStatusException" [color="black", fontcolor="red", label=<{InvalidInstanceStatusException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidKeyPrefixFilterException" [color="black", fontcolor="red", label=<{InvalidKeyPrefixFilterException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.InvalidKeyUsageException" [color="black", fontcolor="red", label=<{InvalidKeyUsageException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.InvalidLifecycleConfigError" [color="black", fontcolor="red", label=<{InvalidLifecycleConfigError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidLimitException" [color="black", fontcolor="red", label=<{InvalidLimitException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidLookupAttributesException" [color="black", fontcolor="red", label=<{InvalidLookupAttributesException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.InvalidMarkerException" [color="black", fontcolor="red", label=<{InvalidMarkerException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidMaxResultsException" [color="black", fontcolor="red", label=<{InvalidMaxResultsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidMinimumHealthyHostValueException" [color="black", fontcolor="red", label=<{InvalidMinimumHealthyHostValueException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidNextTokenException" [color="black", fontcolor="red", label=<{InvalidNextTokenException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidNextTokenException" [color="black", fontcolor="red", label=<{InvalidNextTokenException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidNextTokenException" [color="black", fontcolor="red", label=<{InvalidNextTokenException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidOperationException" [color="black", fontcolor="red", label=<{InvalidOperationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidOptionGroupState" [color="black", fontcolor="red", label=<{InvalidOptionGroupState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.exception.InvalidParameter" [color="black", fontcolor="red", label=<{InvalidParameter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InvalidParameterCombination" [color="black", fontcolor="red", label=<{InvalidParameterCombination|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidParameterCombinationFault" [color="black", fontcolor="red", label=<{InvalidParameterCombinationFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.InvalidParameterException" [color="black", fontcolor="red", label=<{InvalidParameterException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.InvalidParameterException" [color="black", fontcolor="red", label=<{InvalidParameterException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.InvalidParameterException" [color="black", fontcolor="red", label=<{InvalidParameterException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InvalidParameterValue" [color="black", fontcolor="red", label=<{InvalidParameterValue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.exception.InvalidParameterValue" [color="black", fontcolor="red", label=<{InvalidParameterValue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.awslambda.exceptions.InvalidParameterValueException" [color="black", fontcolor="red", label=<{InvalidParameterValueException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidParams" [color="black", fontcolor="red", label=<{InvalidParams|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidPaymentInstrument" [color="black", fontcolor="red", label=<{InvalidPaymentInstrument|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidPaymentMethod" [color="black", fontcolor="red", label=<{InvalidPaymentMethod|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.InvalidQueryParameter" [color="black", fontcolor="red", label=<{InvalidQueryParameter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidRecipientForCCTransaction" [color="black", fontcolor="red", label=<{InvalidRecipientForCCTransaction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.awslambda.exceptions.InvalidRequestContentException" [color="black", fontcolor="red", label=<{InvalidRequestContentException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudhsm.exceptions.InvalidRequestException" [color="black", fontcolor="red", label=<{InvalidRequestException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.datapipeline.exceptions.InvalidRequestException" [color="black", fontcolor="red", label=<{InvalidRequestException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidRestore" [color="black", fontcolor="red", label=<{InvalidRestore|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidRestore" [color="black", fontcolor="red", label=<{InvalidRestore|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidRestoreFault" [color="black", fontcolor="red", label=<{InvalidRestoreFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidRevisionException" [color="black", fontcolor="red", label=<{InvalidRevisionException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidRoleException" [color="black", fontcolor="red", label=<{InvalidRoleException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidRoleException" [color="black", fontcolor="red", label=<{InvalidRoleException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidS3BucketName" [color="black", fontcolor="red", label=<{InvalidS3BucketName|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidS3BucketNameException" [color="black", fontcolor="red", label=<{InvalidS3BucketNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidS3KeyPrefix" [color="black", fontcolor="red", label=<{InvalidS3KeyPrefix|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidS3KeyPrefixException" [color="black", fontcolor="red", label=<{InvalidS3KeyPrefixException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidS3PrefixException" [color="black", fontcolor="red", label=<{InvalidS3PrefixException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidSNSTopicARNException" [color="black", fontcolor="red", label=<{InvalidSNSTopicARNException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidSenderRoleForAccountType" [color="black", fontcolor="red", label=<{InvalidSenderRoleForAccountType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.InvalidSequenceTokenException" [color="black", fontcolor="red", label=<{InvalidSequenceTokenException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidSnsTopicNameException" [color="black", fontcolor="red", label=<{InvalidSnsTopicNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidSortByException" [color="black", fontcolor="red", label=<{InvalidSortByException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidSortOrderException" [color="black", fontcolor="red", label=<{InvalidSortOrderException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidSubnet" [color="black", fontcolor="red", label=<{InvalidSubnet|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidSubnet" [color="black", fontcolor="red", label=<{InvalidSubnet|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidSubscriptionState" [color="black", fontcolor="red", label=<{InvalidSubscriptionState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidTimeRangeException" [color="black", fontcolor="red", label=<{InvalidTimeRangeException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.InvalidTimeRangeException" [color="black", fontcolor="red", label=<{InvalidTimeRangeException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.InvalidTimeRangeException" [color="black", fontcolor="red", label=<{InvalidTimeRangeException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidTokenId" [color="black", fontcolor="red", label=<{InvalidTokenId|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidTokenId_Recipient" [color="black", fontcolor="red", label=<{InvalidTokenId_Recipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidTokenId_Sender" [color="black", fontcolor="red", label=<{InvalidTokenId_Sender|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidTokenType" [color="black", fontcolor="red", label=<{InvalidTokenType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.InvalidTrailNameException" [color="black", fontcolor="red", label=<{InvalidTrailNameException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidTransactionId" [color="black", fontcolor="red", label=<{InvalidTransactionId|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.InvalidTransactionState" [color="black", fontcolor="red", label=<{InvalidTransactionState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.exceptions.InvalidTypeException" [color="black", fontcolor="red", label=<{InvalidTypeException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.InvalidUriError" [color="black", fontcolor="red", label=<{InvalidUriError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.InvalidVPCNetworkState" [color="black", fontcolor="red", label=<{InvalidVPCNetworkState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidVPCNetworkState" [color="black", fontcolor="red", label=<{InvalidVPCNetworkState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.InvalidVPCNetworkStateFault" [color="black", fontcolor="red", label=<{InvalidVPCNetworkStateFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudfront.invalidation.InvalidationBatch" [color="black", fontcolor="black", label=<{InvalidationBatch|caller_reference : str<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>create_time<br ALIGN="LEFT"/>distribution : NoneType<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>paths : list<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|add(path)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>escape(p)<br ALIGN="LEFT"/>remove(path)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.invalidation.InvalidationListResultSet" [color="black", fontcolor="black", label=<{InvalidationListResultSet|auto_paginate<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>distribution_id : NoneType<br ALIGN="LEFT"/>is_truncated : bool<br ALIGN="LEFT"/>marker : str<br ALIGN="LEFT"/>markers : list<br ALIGN="LEFT"/>max_items : NoneType, int<br ALIGN="LEFT"/>next_marker : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_boolean(value, true_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.invalidation.InvalidationSummary" [color="black", fontcolor="black", label=<{InvalidationSummary|connection : NoneType<br ALIGN="LEFT"/>distribution_id : NoneType<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_distribution()<br ALIGN="LEFT"/>get_invalidation_request()<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.item.Item" [color="black", fontcolor="black", label=<{Item|consumed_units : int<br ALIGN="LEFT"/>hash_key<br ALIGN="LEFT"/>hash_key_name<br ALIGN="LEFT"/>range_key<br ALIGN="LEFT"/>range_key_name<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|add_attribute(attr_name, attr_value)<br ALIGN="LEFT"/>delete(expected_value, return_values)<br ALIGN="LEFT"/>delete_attribute(attr_name, attr_value)<br ALIGN="LEFT"/>put(expected_value, return_values)<br ALIGN="LEFT"/>put_attribute(attr_name, attr_value)<br ALIGN="LEFT"/>save(expected_value, return_values)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.items.Item" [color="black", fontcolor="black", label=<{Item|table<br ALIGN="LEFT"/>|build_expects(fields)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>get_keys()<br ALIGN="LEFT"/>get_raw_keys()<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>load(data)<br ALIGN="LEFT"/>mark_clean()<br ALIGN="LEFT"/>mark_dirty()<br ALIGN="LEFT"/>needs_save(data)<br ALIGN="LEFT"/>partial_save()<br ALIGN="LEFT"/>prepare_full()<br ALIGN="LEFT"/>prepare_partial()<br ALIGN="LEFT"/>save(overwrite)<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ecs.item.Item" [color="black", fontcolor="black", label=<{Item|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mashups.order.Item" [color="black", fontcolor="black", label=<{Item|ami : NoneType<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>ec2 : NoneType<br ALIGN="LEFT"/>groups : list<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>quantity : int<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>zone : NoneType<br ALIGN="LEFT"/>|add_group(group)<br ALIGN="LEFT"/>enter()<br ALIGN="LEFT"/>get_userdata(key)<br ALIGN="LEFT"/>get_userdata_string()<br ALIGN="LEFT"/>set_ami(ami)<br ALIGN="LEFT"/>set_config(config_path)<br ALIGN="LEFT"/>set_instance_type(instance_type)<br ALIGN="LEFT"/>set_key(key)<br ALIGN="LEFT"/>set_name(name)<br ALIGN="LEFT"/>set_quantity(n)<br ALIGN="LEFT"/>set_region(region)<br ALIGN="LEFT"/>set_userdata(key, value)<br ALIGN="LEFT"/>set_zone(zone)<br ALIGN="LEFT"/>update_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.item.Item" [color="black", fontcolor="black", label=<{Item|active : bool<br ALIGN="LEFT"/>converter<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>encoding : NoneType<br ALIGN="LEFT"/>in_attribute : bool<br ALIGN="LEFT"/>last_key<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>request_id : NoneType<br ALIGN="LEFT"/>|add_value(key, value)<br ALIGN="LEFT"/>decode_value(value)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>save(replace)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ItemAttributes" [color="black", fontcolor="black", label=<{ItemAttributes|Languages<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ItemCollectionSizeLimitExceededException" [color="black", fontcolor="red", label=<{ItemCollectionSizeLimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ItemNotFound" [color="black", fontcolor="red", label=<{ItemNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ecs.item.ItemSet" [color="black", fontcolor="black", label=<{ItemSet|action<br ALIGN="LEFT"/>curItem : NoneType<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>is_valid : bool<br ALIGN="LEFT"/>iter : NoneType<br ALIGN="LEFT"/>next<br ALIGN="LEFT"/>objs : list<br ALIGN="LEFT"/>page : int<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>total_pages : int<br ALIGN="LEFT"/>total_results : int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.connection.ItemThread" [color="black", fontcolor="black", label=<{ItemThread|conn<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>item_names<br ALIGN="LEFT"/>items : list<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.DeclarativeType.__init__.JITResponse" [color="black", fontcolor="black", label=<{JITResponse|member : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sqs.jsonmessage.JSONMessage" [color="black", fontcolor="black", label=<{JSONMessage|<br ALIGN="LEFT"/>|decode(value)<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.JSONResponseError" [color="black", fontcolor="red", label=<{JSONResponseError|body : NoneType<br ALIGN="LEFT"/>error_code<br ALIGN="LEFT"/>error_message<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.step.JarStep" [color="black", fontcolor="black", label=<{JarStep|action_on_failure : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>step_args : NoneType, list<br ALIGN="LEFT"/>|args()<br ALIGN="LEFT"/>jar()<br ALIGN="LEFT"/>main_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.JavaApplet" [color="black", fontcolor="black", label=<{JavaApplet|filename<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>|get_inner_content(content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.job.Job" [color="black", fontcolor="black", label=<{Job|DefaultPartSize : int<br ALIGN="LEFT"/>ResponseDataElements : tuple<br ALIGN="LEFT"/>vault<br ALIGN="LEFT"/>|download_to_file(filename, chunk_size, verify_hashes, retry_exceptions)<br ALIGN="LEFT"/>download_to_fileobj(output_file, chunk_size, verify_hashes, retry_exceptions)<br ALIGN="LEFT"/>get_output(byte_range, validate_checksum)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.JobFlow" [color="black", fontcolor="black", label=<{JobFlow|Fields : set<br ALIGN="LEFT"/>bootstrapactions : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>instancegroups : NoneType<br ALIGN="LEFT"/>steps : NoneType<br ALIGN="LEFT"/>supported_products<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.JobFlowStepList" [color="black", fontcolor="black", label=<{JobFlowStepList|connection : NoneType<br ALIGN="LEFT"/>stepids : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.kms.layer1.KMSConnection" [color="black", fontcolor="black", label=<{KMSConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_alias(alias_name, target_key_id)<br ALIGN="LEFT"/>create_grant(key_id, grantee_principal, retiring_principal, operations, constraints, grant_tokens)<br ALIGN="LEFT"/>create_key(policy, description, key_usage)<br ALIGN="LEFT"/>decrypt(ciphertext_blob, encryption_context, grant_tokens)<br ALIGN="LEFT"/>delete_alias(alias_name)<br ALIGN="LEFT"/>describe_key(key_id)<br ALIGN="LEFT"/>disable_key(key_id)<br ALIGN="LEFT"/>disable_key_rotation(key_id)<br ALIGN="LEFT"/>enable_key(key_id)<br ALIGN="LEFT"/>enable_key_rotation(key_id)<br ALIGN="LEFT"/>encrypt(key_id, plaintext, encryption_context, grant_tokens)<br ALIGN="LEFT"/>generate_data_key(key_id, encryption_context, number_of_bytes, key_spec, grant_tokens)<br ALIGN="LEFT"/>generate_data_key_without_plaintext(key_id, encryption_context, key_spec, number_of_bytes, grant_tokens)<br ALIGN="LEFT"/>generate_random(number_of_bytes)<br ALIGN="LEFT"/>get_key_policy(key_id, policy_name)<br ALIGN="LEFT"/>get_key_rotation_status(key_id)<br ALIGN="LEFT"/>list_aliases(limit, marker)<br ALIGN="LEFT"/>list_grants(key_id, limit, marker)<br ALIGN="LEFT"/>list_key_policies(key_id, limit, marker)<br ALIGN="LEFT"/>list_keys(limit, marker)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>put_key_policy(key_id, policy_name, policy)<br ALIGN="LEFT"/>re_encrypt(ciphertext_blob, destination_key_id, source_encryption_context, destination_encryption_context, grant_tokens)<br ALIGN="LEFT"/>retire_grant(grant_token)<br ALIGN="LEFT"/>revoke_grant(key_id, grant_id)<br ALIGN="LEFT"/>update_key_description(key_id, description)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.kms.exceptions.KMSInternalException" [color="black", fontcolor="red", label=<{KMSInternalException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.file.key.Key" [color="black", fontcolor="black", label=<{Key|KEY_REGULAR_FILE : int<br ALIGN="LEFT"/>KEY_STREAM : int<br ALIGN="LEFT"/>KEY_STREAM_READABLE : int<br ALIGN="LEFT"/>KEY_STREAM_WRITABLE : int<br ALIGN="LEFT"/>bucket<br ALIGN="LEFT"/>fp : NoneType, TextIOWrapper<br ALIGN="LEFT"/>full_path : str<br ALIGN="LEFT"/>key_type : int<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_contents_as_string(headers, cb, num_cb, torrent)<br ALIGN="LEFT"/>get_contents_to_file(fp, headers, cb, num_cb, torrent, version_id, res_download_handler, response_headers)<br ALIGN="LEFT"/>get_file(fp, headers, cb, num_cb, torrent)<br ALIGN="LEFT"/>is_stream()<br ALIGN="LEFT"/>set_contents_from_file(fp, headers, replace, cb, num_cb, policy, md5)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.key.Key" [color="black", fontcolor="black", label=<{Key|base64md5 : NoneType<br ALIGN="LEFT"/>cloud_hashes : dict<br ALIGN="LEFT"/>component_count : NoneType, int<br ALIGN="LEFT"/>content_encoding<br ALIGN="LEFT"/>etag<br ALIGN="LEFT"/>generation : NoneType<br ALIGN="LEFT"/>is_latest : bool<br ALIGN="LEFT"/>last_modified<br ALIGN="LEFT"/>local_hashes : dict<br ALIGN="LEFT"/>md5 : NoneType<br ALIGN="LEFT"/>meta_generation : NoneType<br ALIGN="LEFT"/>metageneration<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>size : NoneType, int<br ALIGN="LEFT"/>storage_class<br ALIGN="LEFT"/>version_id<br ALIGN="LEFT"/>|add_email_grant(permission, email_address)<br ALIGN="LEFT"/>add_group_email_grant(permission, email_address, headers)<br ALIGN="LEFT"/>add_group_grant(permission, group_id)<br ALIGN="LEFT"/>add_user_grant(permission, user_id)<br ALIGN="LEFT"/>compose(components, content_type, headers)<br ALIGN="LEFT"/>compute_hash(fp, algorithm, size)<br ALIGN="LEFT"/>delete(headers)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_acl(headers, generation)<br ALIGN="LEFT"/>get_contents_to_file(fp, headers, cb, num_cb, torrent, version_id, res_download_handler, response_headers, hash_algs)<br ALIGN="LEFT"/>get_file(fp, headers, cb, num_cb, torrent, version_id, override_num_retries, response_headers, hash_algs)<br ALIGN="LEFT"/>get_xml_acl(headers, generation)<br ALIGN="LEFT"/>handle_addl_headers(headers)<br ALIGN="LEFT"/>handle_restore_headers(response)<br ALIGN="LEFT"/>handle_version_headers(resp, force)<br ALIGN="LEFT"/>open_read(headers, query_args, override_num_retries, response_headers)<br ALIGN="LEFT"/>send_file(fp, headers, cb, num_cb, query_args, chunked_transfer, size, hash_algs)<br ALIGN="LEFT"/>set_acl(acl_or_str, headers, generation, if_generation, if_metageneration)<br ALIGN="LEFT"/>set_canned_acl(acl_str, headers, generation, if_generation, if_metageneration)<br ALIGN="LEFT"/>set_contents_from_file(fp, headers, replace, cb, num_cb, policy, md5, res_upload_handler, size, rewind, if_generation)<br ALIGN="LEFT"/>set_contents_from_filename(filename, headers, replace, cb, num_cb, policy, md5, reduced_redundancy, res_upload_handler, if_generation)<br ALIGN="LEFT"/>set_contents_from_stream()<br ALIGN="LEFT"/>set_contents_from_string(s, headers, replace, cb, num_cb, policy, md5, if_generation)<br ALIGN="LEFT"/>set_xml_acl(acl_str, headers, generation, if_generation, if_metageneration)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.key.Key" [color="black", fontcolor="black", label=<{Key|BufferSize<br ALIGN="LEFT"/>DefaultContentType : str<br ALIGN="LEFT"/>RestoreBody : str<br ALIGN="LEFT"/>base64md5<br ALIGN="LEFT"/>base_fields<br ALIGN="LEFT"/>base_user_settable_fields : set<br ALIGN="LEFT"/>bucket : NoneType<br ALIGN="LEFT"/>cache_control : NoneType<br ALIGN="LEFT"/>closed : bool<br ALIGN="LEFT"/>content_disposition : NoneType<br ALIGN="LEFT"/>content_encoding : NoneType, str<br ALIGN="LEFT"/>content_language : NoneType, str<br ALIGN="LEFT"/>content_type : NoneType, str<br ALIGN="LEFT"/>delete_marker : bool<br ALIGN="LEFT"/>encrypted : NoneType<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>expiry_date : NoneType<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>filename : NoneType<br ALIGN="LEFT"/>is_latest : bool<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>last_modified : NoneType<br ALIGN="LEFT"/>local_hashes : dict<br ALIGN="LEFT"/>md5<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>mode : NoneType, str<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>ongoing_restore : NoneType, bool<br ALIGN="LEFT"/>owner : NoneType<br ALIGN="LEFT"/>path : NoneType<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>read_from_stream : bool<br ALIGN="LEFT"/>resp : NoneType<br ALIGN="LEFT"/>size : NoneType, int<br ALIGN="LEFT"/>source_version_id : NoneType<br ALIGN="LEFT"/>storage_class<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>|add_email_grant(permission, email_address, headers)<br ALIGN="LEFT"/>add_user_grant(permission, user_id, headers, display_name)<br ALIGN="LEFT"/>change_storage_class(new_storage_class, dst_bucket, validate_dst_bucket)<br ALIGN="LEFT"/>close(fast)<br ALIGN="LEFT"/>compute_md5(fp, size)<br ALIGN="LEFT"/>copy(dst_bucket, dst_key, metadata, reduced_redundancy, preserve_acl, encrypt_key, validate_dst_bucket)<br ALIGN="LEFT"/>delete(headers)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>exists(headers)<br ALIGN="LEFT"/>generate_url(expires_in, method, headers, query_auth, force_http, response_headers, expires_in_absolute, version_id, policy, reduced_redundancy, encrypt_key)<br ALIGN="LEFT"/>get_acl(headers)<br ALIGN="LEFT"/>get_contents_as_string(headers, cb, num_cb, torrent, version_id, response_headers, encoding)<br ALIGN="LEFT"/>get_contents_to_file(fp, headers, cb, num_cb, torrent, version_id, res_download_handler, response_headers)<br ALIGN="LEFT"/>get_contents_to_filename(filename, headers, cb, num_cb, torrent, version_id, res_download_handler, response_headers)<br ALIGN="LEFT"/>get_file(fp, headers, cb, num_cb, torrent, version_id, override_num_retries, response_headers)<br ALIGN="LEFT"/>get_md5_from_hexdigest(md5_hexdigest)<br ALIGN="LEFT"/>get_metadata(name)<br ALIGN="LEFT"/>get_redirect()<br ALIGN="LEFT"/>get_torrent_file(fp, headers, cb, num_cb)<br ALIGN="LEFT"/>get_xml_acl(headers)<br ALIGN="LEFT"/><I>handle_addl_headers</I>(headers)<br ALIGN="LEFT"/>handle_encryption_headers(resp)<br ALIGN="LEFT"/>handle_restore_headers(response)<br ALIGN="LEFT"/>handle_version_headers(resp, force)<br ALIGN="LEFT"/>make_public(headers)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>open(mode, headers, query_args, override_num_retries)<br ALIGN="LEFT"/>open_read(headers, query_args, override_num_retries, response_headers)<br ALIGN="LEFT"/>open_write(headers, override_num_retries)<br ALIGN="LEFT"/>read(size)<br ALIGN="LEFT"/>restore(days, headers)<br ALIGN="LEFT"/>send_file(fp, headers, cb, num_cb, query_args, chunked_transfer, size)<br ALIGN="LEFT"/>set_acl(acl_str, headers)<br ALIGN="LEFT"/>set_canned_acl(acl_str, headers)<br ALIGN="LEFT"/>set_contents_from_file(fp, headers, replace, cb, num_cb, policy, md5, reduced_redundancy, query_args, encrypt_key, size, rewind)<br ALIGN="LEFT"/>set_contents_from_filename(filename, headers, replace, cb, num_cb, policy, md5, reduced_redundancy, encrypt_key)<br ALIGN="LEFT"/>set_contents_from_stream(fp, headers, replace, cb, num_cb, policy, reduced_redundancy, query_args, size)<br ALIGN="LEFT"/>set_contents_from_string(string_data, headers, replace, cb, num_cb, policy, md5, reduced_redundancy, encrypt_key)<br ALIGN="LEFT"/>set_metadata(name, value)<br ALIGN="LEFT"/>set_redirect(redirect_location, headers)<br ALIGN="LEFT"/>set_remote_metadata(metadata_plus, metadata_minus, preserve_acl, headers)<br ALIGN="LEFT"/>set_xml_acl(acl_str, headers)<br ALIGN="LEFT"/>should_retry(response, chunked_transfer)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update_metadata(d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.key.Key" [color="black", fontcolor="black", label=<{Key|id : NoneType<br ALIGN="LEFT"/>kind : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|<I>app</I>()<br ALIGN="LEFT"/><I>from_path</I>()<br ALIGN="LEFT"/>has_id_or_name()<br ALIGN="LEFT"/>id()<br ALIGN="LEFT"/>id_or_name()<br ALIGN="LEFT"/>kind()<br ALIGN="LEFT"/><I>name</I>()<br ALIGN="LEFT"/><I>parent</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.keyfile.KeyFile" [color="black", fontcolor="black", label=<{KeyFile|closed : bool<br ALIGN="LEFT"/>encoding : str<br ALIGN="LEFT"/>errors : str<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>location : NoneType, int<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>newlines : str<br ALIGN="LEFT"/>softspace : int<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/><I>fileno</I>()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/>getkey()<br ALIGN="LEFT"/>isatty()<br ALIGN="LEFT"/><I>next</I>()<br ALIGN="LEFT"/>read(size)<br ALIGN="LEFT"/><I>readinto</I>()<br ALIGN="LEFT"/><I>readline</I>()<br ALIGN="LEFT"/><I>readlines</I>()<br ALIGN="LEFT"/>seek(pos, whence)<br ALIGN="LEFT"/>tell()<br ALIGN="LEFT"/><I>truncate</I>()<br ALIGN="LEFT"/><I>write</I>(buf)<br ALIGN="LEFT"/><I>writelines</I>()<br ALIGN="LEFT"/><I>xreadlines</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.keypair.KeyPair" [color="black", fontcolor="black", label=<{KeyPair|fingerprint : NoneType<br ALIGN="LEFT"/>material : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|copy_to_region(region, dry_run)<br ALIGN="LEFT"/>delete(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>save(directory_path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.kms.exceptions.KeyUnavailableException" [color="black", fontcolor="red", label=<{KeyUnavailableException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.KeyValue" [color="black", fontcolor="black", label=<{KeyValue|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.fields.KeysOnlyIndex" [color="black", fontcolor="black", label=<{KeysOnlyIndex|projection_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.layer1.KinesisConnection" [color="black", fontcolor="black", label=<{KinesisConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|add_tags_to_stream(stream_name, tags)<br ALIGN="LEFT"/>create_stream(stream_name, shard_count)<br ALIGN="LEFT"/>delete_stream(stream_name)<br ALIGN="LEFT"/>describe_stream(stream_name, limit, exclusive_start_shard_id)<br ALIGN="LEFT"/>get_records(shard_iterator, limit, b64_decode)<br ALIGN="LEFT"/>get_shard_iterator(stream_name, shard_id, shard_iterator_type, starting_sequence_number)<br ALIGN="LEFT"/>list_streams(limit, exclusive_start_stream_name)<br ALIGN="LEFT"/>list_tags_for_stream(stream_name, exclusive_start_tag_key, limit)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>merge_shards(stream_name, shard_to_merge, adjacent_shard_to_merge)<br ALIGN="LEFT"/>put_record(stream_name, data, partition_key, explicit_hash_key, sequence_number_for_ordering, exclusive_minimum_sequence_number, b64_encode)<br ALIGN="LEFT"/>put_records(records, stream_name, b64_encode)<br ALIGN="LEFT"/>remove_tags_from_stream(stream_name, tag_keys)<br ALIGN="LEFT"/>split_shard(stream_name, shard_to_split, new_starting_hash_key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.policies.LBCookieStickinessPolicy" [color="black", fontcolor="black", label=<{LBCookieStickinessPolicy|cookie_expiration_period : NoneType<br ALIGN="LEFT"/>policy_name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.LE" [color="black", fontcolor="black", label=<{LE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.utils.LRUCache" [color="black", fontcolor="black", label=<{LRUCache|capacity<br ALIGN="LEFT"/>head : NoneType<br ALIGN="LEFT"/>tail : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.LT" [color="black", fontcolor="black", label=<{LT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.LastDeliveryChannelDeleteFailedException" [color="black", fontcolor="red", label=<{LastDeliveryChannelDeleteFailedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.LaunchConfiguration" [color="black", fontcolor="black", label=<{LaunchConfiguration|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.launchconfig.LaunchConfiguration" [color="black", fontcolor="black", label=<{LaunchConfiguration|associate_public_ip_address : NoneType, bool<br ALIGN="LEFT"/>block_device_mappings : NoneType<br ALIGN="LEFT"/>classic_link_vpc_id : NoneType<br ALIGN="LEFT"/>classic_link_vpc_security_groups<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>created_time : NoneType, datetime<br ALIGN="LEFT"/>delete_on_termination : bool<br ALIGN="LEFT"/>ebs_optimized : bool<br ALIGN="LEFT"/>image_id : NoneType<br ALIGN="LEFT"/>instance_monitoring : bool<br ALIGN="LEFT"/>instance_profile_name : NoneType<br ALIGN="LEFT"/>instance_type : str<br ALIGN="LEFT"/>iops : NoneType, int<br ALIGN="LEFT"/>kernel_id : NoneType<br ALIGN="LEFT"/>key_name : NoneType<br ALIGN="LEFT"/>launch_configuration_arn : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>ramdisk_id : NoneType<br ALIGN="LEFT"/>security_groups<br ALIGN="LEFT"/>spot_price : NoneType, float<br ALIGN="LEFT"/>use_block_device_types : bool<br ALIGN="LEFT"/>user_data : NoneType<br ALIGN="LEFT"/>volume_type : NoneType<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.launchspecification.LaunchSpecification" [color="black", fontcolor="black", label=<{LaunchSpecification|block_device_mapping : NoneType<br ALIGN="LEFT"/>ebs_optimized : bool<br ALIGN="LEFT"/>groups : list<br ALIGN="LEFT"/>image_id : NoneType<br ALIGN="LEFT"/>instance_profile : NoneType<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>kernel : NoneType<br ALIGN="LEFT"/>key_name : NoneType<br ALIGN="LEFT"/>monitored : bool<br ALIGN="LEFT"/>placement : NoneType<br ALIGN="LEFT"/>ramdisk : NoneType<br ALIGN="LEFT"/>subnet_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.layer1.Layer1" [color="black", fontcolor="black", label=<{Layer1|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|check_dns_availability(cname_prefix)<br ALIGN="LEFT"/>create_application(application_name, description)<br ALIGN="LEFT"/>create_application_version(application_name, version_label, description, s3_bucket, s3_key, auto_create_application)<br ALIGN="LEFT"/>create_configuration_template(application_name, template_name, solution_stack_name, source_configuration_application_name, source_configuration_template_name, environment_id, description, option_settings)<br ALIGN="LEFT"/>create_environment(application_name, environment_name, version_label, template_name, solution_stack_name, cname_prefix, description, option_settings, options_to_remove, tier_name, tier_type, tier_version)<br ALIGN="LEFT"/>create_storage_location()<br ALIGN="LEFT"/>delete_application(application_name, terminate_env_by_force)<br ALIGN="LEFT"/>delete_application_version(application_name, version_label, delete_source_bundle)<br ALIGN="LEFT"/>delete_configuration_template(application_name, template_name)<br ALIGN="LEFT"/>delete_environment_configuration(application_name, environment_name)<br ALIGN="LEFT"/>describe_application_versions(application_name, version_labels)<br ALIGN="LEFT"/>describe_applications(application_names)<br ALIGN="LEFT"/>describe_configuration_options(application_name, template_name, environment_name, solution_stack_name, options)<br ALIGN="LEFT"/>describe_configuration_settings(application_name, template_name, environment_name)<br ALIGN="LEFT"/>describe_environment_resources(environment_id, environment_name)<br ALIGN="LEFT"/>describe_environments(application_name, version_label, environment_ids, environment_names, include_deleted, included_deleted_back_to)<br ALIGN="LEFT"/>describe_events(application_name, version_label, template_name, environment_id, environment_name, request_id, severity, start_time, end_time, max_records, next_token)<br ALIGN="LEFT"/>list_available_solution_stacks()<br ALIGN="LEFT"/>rebuild_environment(environment_id, environment_name)<br ALIGN="LEFT"/>request_environment_info(info_type, environment_id, environment_name)<br ALIGN="LEFT"/>restart_app_server(environment_id, environment_name)<br ALIGN="LEFT"/>retrieve_environment_info(info_type, environment_id, environment_name)<br ALIGN="LEFT"/>swap_environment_cnames(source_environment_id, source_environment_name, destination_environment_id, destination_environment_name)<br ALIGN="LEFT"/>terminate_environment(environment_id, environment_name, terminate_resources)<br ALIGN="LEFT"/>update_application(application_name, description)<br ALIGN="LEFT"/>update_application_version(application_name, version_label, description)<br ALIGN="LEFT"/>update_configuration_template(application_name, template_name, description, option_settings, options_to_remove)<br ALIGN="LEFT"/>update_environment(environment_id, environment_name, version_label, template_name, description, option_settings, options_to_remove, tier_name, tier_type, tier_version)<br ALIGN="LEFT"/>validate_configuration_settings(application_name, option_settings, template_name, environment_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.layer1.Layer1" [color="black", fontcolor="black", label=<{Layer1|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|create_domain(domain_name)<br ALIGN="LEFT"/>define_index_field(domain_name, field_name, field_type, default, facet, result, searchable, source_attributes)<br ALIGN="LEFT"/>define_rank_expression(domain_name, rank_name, rank_expression)<br ALIGN="LEFT"/>delete_domain(domain_name)<br ALIGN="LEFT"/>delete_index_field(domain_name, field_name)<br ALIGN="LEFT"/>delete_rank_expression(domain_name, rank_name)<br ALIGN="LEFT"/>describe_default_search_field(domain_name)<br ALIGN="LEFT"/>describe_domains(domain_names)<br ALIGN="LEFT"/>describe_index_fields(domain_name, field_names)<br ALIGN="LEFT"/>describe_rank_expressions(domain_name, rank_names)<br ALIGN="LEFT"/>describe_service_access_policies(domain_name)<br ALIGN="LEFT"/>describe_stemming_options(domain_name)<br ALIGN="LEFT"/>describe_stopword_options(domain_name)<br ALIGN="LEFT"/>describe_synonym_options(domain_name)<br ALIGN="LEFT"/>get_response(doc_path, action, params, path, parent, verb, list_marker)<br ALIGN="LEFT"/>index_documents(domain_name)<br ALIGN="LEFT"/>update_default_search_field(domain_name, default_search_field)<br ALIGN="LEFT"/>update_service_access_policies(domain_name, access_policies)<br ALIGN="LEFT"/>update_stemming_options(domain_name, stems)<br ALIGN="LEFT"/>update_stopword_options(domain_name, stopwords)<br ALIGN="LEFT"/>update_synonym_options(domain_name, synonyms)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.layer1.Layer1" [color="black", fontcolor="black", label=<{Layer1|ConditionalCheckFailedError : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>NumberRetries : int<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>SessionExpiredError : str<br ALIGN="LEFT"/>ThruputError : str<br ALIGN="LEFT"/>ValidationError : str<br ALIGN="LEFT"/>Version : str<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>throughput_exceeded_events : int<br ALIGN="LEFT"/>|batch_get_item(request_items, object_hook)<br ALIGN="LEFT"/>batch_write_item(request_items, object_hook)<br ALIGN="LEFT"/>create_table(table_name, schema, provisioned_throughput)<br ALIGN="LEFT"/>delete_item(table_name, key, expected, return_values, object_hook)<br ALIGN="LEFT"/>delete_table(table_name)<br ALIGN="LEFT"/>describe_table(table_name)<br ALIGN="LEFT"/>get_item(table_name, key, attributes_to_get, consistent_read, object_hook)<br ALIGN="LEFT"/>list_tables(limit, start_table)<br ALIGN="LEFT"/>make_request(action, body, object_hook)<br ALIGN="LEFT"/>put_item(table_name, item, expected, return_values, object_hook)<br ALIGN="LEFT"/>query(table_name, hash_key_value, range_key_conditions, attributes_to_get, limit, consistent_read, scan_index_forward, exclusive_start_key, object_hook, count)<br ALIGN="LEFT"/>scan(table_name, scan_filter, attributes_to_get, limit, exclusive_start_key, object_hook, count)<br ALIGN="LEFT"/>update_item(table_name, key, attribute_updates, expected, return_values, object_hook)<br ALIGN="LEFT"/>update_table(table_name, provisioned_throughput)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.layer1.Layer1" [color="black", fontcolor="black", label=<{Layer1|Version : str<br ALIGN="LEFT"/>account_id : str<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|abort_multipart_upload(vault_name, upload_id)<br ALIGN="LEFT"/>complete_multipart_upload(vault_name, upload_id, sha256_treehash, archive_size)<br ALIGN="LEFT"/>create_vault(vault_name)<br ALIGN="LEFT"/>delete_archive(vault_name, archive_id)<br ALIGN="LEFT"/>delete_vault(vault_name)<br ALIGN="LEFT"/>delete_vault_notifications(vault_name)<br ALIGN="LEFT"/>describe_job(vault_name, job_id)<br ALIGN="LEFT"/>describe_vault(vault_name)<br ALIGN="LEFT"/>get_job_output(vault_name, job_id, byte_range)<br ALIGN="LEFT"/>get_vault_notifications(vault_name)<br ALIGN="LEFT"/>initiate_job(vault_name, job_data)<br ALIGN="LEFT"/>initiate_multipart_upload(vault_name, part_size, description)<br ALIGN="LEFT"/>list_jobs(vault_name, completed, status_code, limit, marker)<br ALIGN="LEFT"/>list_multipart_uploads(vault_name, limit, marker)<br ALIGN="LEFT"/>list_parts(vault_name, upload_id, limit, marker)<br ALIGN="LEFT"/>list_vaults(limit, marker)<br ALIGN="LEFT"/>make_request(verb, resource, headers, data, ok_responses, params, sender, response_headers)<br ALIGN="LEFT"/>set_vault_notifications(vault_name, notification_config)<br ALIGN="LEFT"/>upload_archive(vault_name, archive, linear_hash, tree_hash, description)<br ALIGN="LEFT"/>upload_part(vault_name, upload_id, linear_hash, tree_hash, byte_range, part_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer1.Layer1" [color="black", fontcolor="black", label=<{Layer1|DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|count_closed_workflow_executions(domain, start_latest_date, start_oldest_date, close_latest_date, close_oldest_date, close_status, tag, workflow_id, workflow_name, workflow_version)<br ALIGN="LEFT"/>count_open_workflow_executions(domain, latest_date, oldest_date, tag, workflow_id, workflow_name, workflow_version)<br ALIGN="LEFT"/>count_pending_activity_tasks(domain, task_list)<br ALIGN="LEFT"/>count_pending_decision_tasks(domain, task_list)<br ALIGN="LEFT"/>deprecate_activity_type(domain, activity_name, activity_version)<br ALIGN="LEFT"/>deprecate_domain(name)<br ALIGN="LEFT"/>deprecate_workflow_type(domain, workflow_name, workflow_version)<br ALIGN="LEFT"/>describe_activity_type(domain, activity_name, activity_version)<br ALIGN="LEFT"/>describe_domain(name)<br ALIGN="LEFT"/>describe_workflow_execution(domain, run_id, workflow_id)<br ALIGN="LEFT"/>describe_workflow_type(domain, workflow_name, workflow_version)<br ALIGN="LEFT"/>get_workflow_execution_history(domain, run_id, workflow_id, maximum_page_size, next_page_token, reverse_order)<br ALIGN="LEFT"/>json_request(action, data, object_hook)<br ALIGN="LEFT"/>list_activity_types(domain, registration_status, name, maximum_page_size, next_page_token, reverse_order)<br ALIGN="LEFT"/>list_closed_workflow_executions(domain, start_latest_date, start_oldest_date, close_latest_date, close_oldest_date, close_status, tag, workflow_id, workflow_name, workflow_version, maximum_page_size, next_page_token, reverse_order)<br ALIGN="LEFT"/>list_domains(registration_status, maximum_page_size, next_page_token, reverse_order)<br ALIGN="LEFT"/>list_open_workflow_executions(domain, oldest_date, latest_date, tag, workflow_id, workflow_name, workflow_version, maximum_page_size, next_page_token, reverse_order)<br ALIGN="LEFT"/>list_workflow_types(domain, registration_status, maximum_page_size, name, next_page_token, reverse_order)<br ALIGN="LEFT"/>make_request(action, body, object_hook)<br ALIGN="LEFT"/>poll_for_activity_task(domain, task_list, identity)<br ALIGN="LEFT"/>poll_for_decision_task(domain, task_list, identity, maximum_page_size, next_page_token, reverse_order)<br ALIGN="LEFT"/>record_activity_task_heartbeat(task_token, details)<br ALIGN="LEFT"/>register_activity_type(domain, name, version, task_list, default_task_heartbeat_timeout, default_task_schedule_to_close_timeout, default_task_schedule_to_start_timeout, default_task_start_to_close_timeout, description)<br ALIGN="LEFT"/>register_domain(name, workflow_execution_retention_period_in_days, description)<br ALIGN="LEFT"/>register_workflow_type(domain, name, version, task_list, default_child_policy, default_execution_start_to_close_timeout, default_task_start_to_close_timeout, description)<br ALIGN="LEFT"/>request_cancel_workflow_execution(domain, workflow_id, run_id)<br ALIGN="LEFT"/>respond_activity_task_canceled(task_token, details)<br ALIGN="LEFT"/>respond_activity_task_completed(task_token, result)<br ALIGN="LEFT"/>respond_activity_task_failed(task_token, details, reason)<br ALIGN="LEFT"/>respond_decision_task_completed(task_token, decisions, execution_context)<br ALIGN="LEFT"/>signal_workflow_execution(domain, signal_name, workflow_id, input, run_id)<br ALIGN="LEFT"/>start_workflow_execution(domain, workflow_id, workflow_name, workflow_version, task_list, child_policy, execution_start_to_close_timeout, input, tag_list, task_start_to_close_timeout)<br ALIGN="LEFT"/>terminate_workflow_execution(domain, workflow_id, child_policy, details, reason, run_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer1_decisions.Layer1Decisions" [color="black", fontcolor="black", label=<{Layer1Decisions|<br ALIGN="LEFT"/>|cancel_timer(timer_id)<br ALIGN="LEFT"/>cancel_workflow_executions(details)<br ALIGN="LEFT"/>complete_workflow_execution(result)<br ALIGN="LEFT"/>continue_as_new_workflow_execution(child_policy, execution_start_to_close_timeout, input, tag_list, task_list, start_to_close_timeout, workflow_type_version)<br ALIGN="LEFT"/>fail_workflow_execution(reason, details)<br ALIGN="LEFT"/>record_marker(marker_name, details)<br ALIGN="LEFT"/>request_cancel_activity_task(activity_id)<br ALIGN="LEFT"/>request_cancel_external_workflow_execution(workflow_id, control, run_id)<br ALIGN="LEFT"/>schedule_activity_task(activity_id, activity_type_name, activity_type_version, task_list, control, heartbeat_timeout, schedule_to_close_timeout, schedule_to_start_timeout, start_to_close_timeout, input)<br ALIGN="LEFT"/>signal_external_workflow_execution(workflow_id, signal_name, run_id, control, input)<br ALIGN="LEFT"/>start_child_workflow_execution(workflow_type_name, workflow_type_version, workflow_id, child_policy, control, execution_start_to_close_timeout, input, tag_list, task_list, task_start_to_close_timeout)<br ALIGN="LEFT"/>start_timer(start_to_fire_timeout, timer_id, control)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.wrapper.Layer1Wrapper" [color="black", fontcolor="black", label=<{Layer1Wrapper|api<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.layer2.Layer2" [color="black", fontcolor="black", label=<{Layer2|layer1<br ALIGN="LEFT"/>|create_domain(domain_name)<br ALIGN="LEFT"/>list_domains(domain_names)<br ALIGN="LEFT"/>lookup(domain_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.layer2.Layer2" [color="black", fontcolor="black", label=<{Layer2|layer1<br ALIGN="LEFT"/>|create_domain(domain_name)<br ALIGN="LEFT"/>list_domains(domain_names)<br ALIGN="LEFT"/>lookup(domain_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.layer2.Layer2" [color="black", fontcolor="black", label=<{Layer2|dynamizer<br ALIGN="LEFT"/>layer1<br ALIGN="LEFT"/>lookup<br ALIGN="LEFT"/>|batch_get_item(batch_list)<br ALIGN="LEFT"/>batch_write_item(batch_list)<br ALIGN="LEFT"/>build_key_from_values(schema, hash_key, range_key)<br ALIGN="LEFT"/>create_schema(hash_key_name, hash_key_proto_value, range_key_name, range_key_proto_value)<br ALIGN="LEFT"/>create_table(name, schema, read_units, write_units)<br ALIGN="LEFT"/>delete_item(item, expected_value, return_values)<br ALIGN="LEFT"/>delete_table(table)<br ALIGN="LEFT"/>describe_table(name)<br ALIGN="LEFT"/>dynamize_attribute_updates(pending_updates)<br ALIGN="LEFT"/>dynamize_expected_value(expected_value)<br ALIGN="LEFT"/>dynamize_item(item)<br ALIGN="LEFT"/>dynamize_last_evaluated_key(last_evaluated_key)<br ALIGN="LEFT"/>dynamize_range_key_condition(range_key_condition)<br ALIGN="LEFT"/>dynamize_scan_filter(scan_filter)<br ALIGN="LEFT"/>get_item(table, hash_key, range_key, attributes_to_get, consistent_read, item_class)<br ALIGN="LEFT"/>get_table(name)<br ALIGN="LEFT"/>list_tables(limit)<br ALIGN="LEFT"/>new_batch_list()<br ALIGN="LEFT"/>new_batch_write_list()<br ALIGN="LEFT"/>put_item(item, expected_value, return_values)<br ALIGN="LEFT"/>query(table, hash_key, range_key_condition, attributes_to_get, request_limit, max_results, consistent_read, scan_index_forward, exclusive_start_key, item_class, count)<br ALIGN="LEFT"/>scan(table, scan_filter, attributes_to_get, request_limit, max_results, exclusive_start_key, item_class, count)<br ALIGN="LEFT"/>table_from_schema(name, schema)<br ALIGN="LEFT"/>update_item(item, expected_value, return_values)<br ALIGN="LEFT"/>update_throughput(table, read_units, write_units)<br ALIGN="LEFT"/>use_decimals(use_boolean)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.layer2.Layer2" [color="black", fontcolor="black", label=<{Layer2|layer1<br ALIGN="LEFT"/>|create_vault(name)<br ALIGN="LEFT"/>delete_vault(name)<br ALIGN="LEFT"/>get_vault(name)<br ALIGN="LEFT"/>list_vaults()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.layoutparam.LayoutParameter" [color="black", fontcolor="black", label=<{LayoutParameter|name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|get_as_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.layoutparam.LayoutParameters" [color="black", fontcolor="black", label=<{LayoutParameters|layoutParameters : NoneType, list<br ALIGN="LEFT"/>|add(req)<br ALIGN="LEFT"/>get_as_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.utils.LazyLoadMetadata" [color="black", fontcolor="black", label=<{LazyLoadMetadata|<br ALIGN="LEFT"/>|get(key, default)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.attributes.LbAttributes" [color="black", fontcolor="black", label=<{LbAttributes|access_log<br ALIGN="LEFT"/>connecting_settings<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>connection_draining<br ALIGN="LEFT"/>cross_zone_load_balancing<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.LengthConstraint" [color="black", fontcolor="black", label=<{LengthConstraint|attribute_names : tuple<br ALIGN="LEFT"/>attribute_values : tuple<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.lifecycle.Lifecycle" [color="black", fontcolor="black", label=<{Lifecycle|<br ALIGN="LEFT"/>|add_rule(id, prefix, status, expiration, transition)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.lifecycle.LifecycleConfig" [color="black", fontcolor="black", label=<{LifecycleConfig|has_root_tag : bool<br ALIGN="LEFT"/>|add_rule(action, action_params, conditions)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.LimitExceededException" [color="black", fontcolor="red", label=<{LimitExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.roboto.awsqueryrequest.Line" [color="black", fontcolor="black", label=<{Line|data<br ALIGN="LEFT"/>fmt<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>printed : bool<br ALIGN="LEFT"/>|append(datum)<br ALIGN="LEFT"/>print_it()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.List" [color="black", fontcolor="black", label=<{List|<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ListAllFulfillmentOrdersResult" [color="black", fontcolor="black", label=<{ListAllFulfillmentOrdersResult|FulfillmentOrders<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.ListAvailableSolutionStacksResponse" [color="black", fontcolor="black", label=<{ListAvailableSolutionStacksResponse|solution_stack_details : list<br ALIGN="LEFT"/>solution_stacks : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListCartsResult" [color="black", fontcolor="black", label=<{ListCartsResult|CartList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListCustomersResult" [color="black", fontcolor="black", label=<{ListCustomersResult|CustomerList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.jsonresponse.ListElement" [color="black", fontcolor="black", label=<{ListElement|connection : NoneType<br ALIGN="LEFT"/>element_name : NoneType<br ALIGN="LEFT"/>item_marker : tuple<br ALIGN="LEFT"/>list_marker : list<br ALIGN="LEFT"/>pythonize_name : bool<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_name(name)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.listelement.ListElement" [color="black", fontcolor="black", label=<{ListElement|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.listelement.ListElement" [color="black", fontcolor="black", label=<{ListElement|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ListInboundShipmentItemsResult" [color="black", fontcolor="black", label=<{ListInboundShipmentItemsResult|ItemData<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListInboundShipmentsResult" [color="black", fontcolor="black", label=<{ListInboundShipmentsResult|ShipmentData<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListInventorySupplyResult" [color="black", fontcolor="black", label=<{ListInventorySupplyResult|InventorySupplyList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListMarketplaceParticipationsResult" [color="black", fontcolor="black", label=<{ListMarketplaceParticipationsResult|ListMarketplaces<br ALIGN="LEFT"/>ListParticipations<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListMatchingProductsResult" [color="black", fontcolor="black", label=<{ListMatchingProductsResult|Products<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListOrderItemsResult" [color="black", fontcolor="black", label=<{ListOrderItemsResult|OrderItems<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListOrdersResult" [color="black", fontcolor="black", label=<{ListOrdersResult|Orders<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.property.ListProperty" [color="black", fontcolor="black", label=<{ListProperty|data_type : list<br ALIGN="LEFT"/>item_type<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|default_value()<br ALIGN="LEFT"/>empty(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ListRecommendationsResult" [color="black", fontcolor="black", label=<{ListRecommendationsResult|ListingQualityRecommendations<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListRegisteredDestinationsResult" [color="black", fontcolor="black", label=<{ListRegisteredDestinationsResult|DestinationList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ListSubscriptionsResult" [color="black", fontcolor="black", label=<{ListSubscriptionsResult|SubscriptionList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.Listener" [color="black", fontcolor="black", label=<{Listener|port : NoneType, int<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.listener.Listener" [color="black", fontcolor="black", label=<{Listener|instance_port : int<br ALIGN="LEFT"/>instance_protocol : NoneType<br ALIGN="LEFT"/>load_balancer : NoneType<br ALIGN="LEFT"/>load_balancer_port : int<br ALIGN="LEFT"/>policy_names<br ALIGN="LEFT"/>protocol : str<br ALIGN="LEFT"/>ssl_certificate_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_complex_tuple()<br ALIGN="LEFT"/>get_tuple()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.LoadBalancer" [color="black", fontcolor="black", label=<{LoadBalancer|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.loadbalancer.LoadBalancer" [color="black", fontcolor="black", label=<{LoadBalancer|availability_zones<br ALIGN="LEFT"/>backends : NoneType<br ALIGN="LEFT"/>canonical_hosted_zone_name : NoneType<br ALIGN="LEFT"/>canonical_hosted_zone_name_id : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>created_time : NoneType<br ALIGN="LEFT"/>dns_name : NoneType<br ALIGN="LEFT"/>health_check : NoneType<br ALIGN="LEFT"/>instances : NoneType<br ALIGN="LEFT"/>listeners : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>policies : NoneType<br ALIGN="LEFT"/>scheme : NoneType<br ALIGN="LEFT"/>security_groups : NoneType<br ALIGN="LEFT"/>source_security_group : NoneType<br ALIGN="LEFT"/>subnets : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|apply_security_groups(security_groups)<br ALIGN="LEFT"/>attach_subnets(subnets)<br ALIGN="LEFT"/>configure_health_check(health_check)<br ALIGN="LEFT"/>create_app_cookie_stickiness_policy(name, policy_name)<br ALIGN="LEFT"/>create_cookie_stickiness_policy(cookie_expiration_period, policy_name)<br ALIGN="LEFT"/>create_lb_policy(policy_name, policy_type, policy_attribute)<br ALIGN="LEFT"/>create_listener(inPort, outPort, proto)<br ALIGN="LEFT"/>create_listeners(listeners)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_listener(inPort)<br ALIGN="LEFT"/>delete_listeners(listeners)<br ALIGN="LEFT"/>delete_policy(policy_name)<br ALIGN="LEFT"/>deregister_instances(instances)<br ALIGN="LEFT"/>detach_subnets(subnets)<br ALIGN="LEFT"/>disable_cross_zone_load_balancing()<br ALIGN="LEFT"/>disable_zones(zones)<br ALIGN="LEFT"/>enable_cross_zone_load_balancing()<br ALIGN="LEFT"/>enable_zones(zones)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_attributes(force)<br ALIGN="LEFT"/>get_instance_health(instances)<br ALIGN="LEFT"/>is_cross_zone_load_balancing(force)<br ALIGN="LEFT"/>register_instances(instances)<br ALIGN="LEFT"/>set_listener_SSL_certificate(lb_port, ssl_certificate_id)<br ALIGN="LEFT"/>set_policies_of_backend_server(instance_port, policies)<br ALIGN="LEFT"/>set_policies_of_listener(lb_port, policies)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.LoadBalancerDescription" [color="black", fontcolor="black", label=<{LoadBalancerDescription|domain : str<br ALIGN="LEFT"/>listeners : list<br ALIGN="LEFT"/>load_balancer_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.loadbalancer.LoadBalancerZones" [color="black", fontcolor="black", label=<{LoadBalancerZones|connection : NoneType<br ALIGN="LEFT"/>zones<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.cmdshell.LocalClient" [color="black", fontcolor="black", label=<{LocalClient|host_key_file : NoneType<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>uname : str<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/>exists(path)<br ALIGN="LEFT"/>get_file(src, dst)<br ALIGN="LEFT"/>isdir(path)<br ALIGN="LEFT"/>listdir(path)<br ALIGN="LEFT"/>put_file(src, dst)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/><I>shell</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.qualification.LocaleRequirement" [color="black", fontcolor="black", label=<{LocaleRequirement|locale<br ALIGN="LEFT"/>|get_as_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.connection.Location" [color="black", fontcolor="black", label=<{Location|DEFAULT : str<br ALIGN="LEFT"/>EU : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.connection.Location" [color="black", fontcolor="black", label=<{Location|APNortheast : str<br ALIGN="LEFT"/>APSoutheast : str<br ALIGN="LEFT"/>APSoutheast2 : str<br ALIGN="LEFT"/>CNNorth1 : str<br ALIGN="LEFT"/>DEFAULT : str<br ALIGN="LEFT"/>EU : str<br ALIGN="LEFT"/>SAEast : str<br ALIGN="LEFT"/>USWest : str<br ALIGN="LEFT"/>USWest2 : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.logfile.LogFile" [color="black", fontcolor="black", label=<{LogFile|connection : NoneType<br ALIGN="LEFT"/>last_written : NoneType<br ALIGN="LEFT"/>log_filename : NoneType<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.logfile.LogFileObject" [color="black", fontcolor="black", label=<{LogFileObject|additional_data_pending<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>dbinstance_id<br ALIGN="LEFT"/>log_filename : NoneType<br ALIGN="LEFT"/>marker<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.logging.LoggingInfo" [color="black", fontcolor="black", label=<{LoggingInfo|bucket : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.LongProperty" [color="black", fontcolor="black", label=<{LongProperty|data_type : int<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|empty(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.types.LossyFloatDynamizer" [color="black", fontcolor="black", label=<{LossyFloatDynamizer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.LowestOfferListing" [color="black", fontcolor="black", label=<{LowestOfferListing|Price<br ALIGN="LEFT"/>Qualifiers<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sqs.message.MHMessage" [color="black", fontcolor="black", label=<{MHMessage|<br ALIGN="LEFT"/>|decode(value)<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>has_key(key)<br ALIGN="LEFT"/>items()<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>update(d)<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.MTurkConnection" [color="black", fontcolor="black", label=<{MTurkConnection|APIVersion : str<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>|approve_assignment(assignment_id, feedback)<br ALIGN="LEFT"/>approve_rejected_assignment(assignment_id, feedback)<br ALIGN="LEFT"/>assign_qualification(qualification_type_id, worker_id, value, send_notification)<br ALIGN="LEFT"/>block_worker(worker_id, reason)<br ALIGN="LEFT"/>change_hit_type_of_hit(hit_id, hit_type)<br ALIGN="LEFT"/>create_hit(hit_type, question, hit_layout, lifetime, max_assignments, title, description, keywords, reward, duration, approval_delay, annotation, questions, qualifications, layout_params, response_groups)<br ALIGN="LEFT"/>create_qualification_type(name, description, status, keywords, retry_delay, test, answer_key, answer_key_xml, test_duration, auto_granted, auto_granted_value)<br ALIGN="LEFT"/>disable_hit(hit_id, response_groups)<br ALIGN="LEFT"/>dispose_hit(hit_id)<br ALIGN="LEFT"/>dispose_qualification_type(qualification_type_id)<br ALIGN="LEFT"/>duration_as_seconds(duration)<br ALIGN="LEFT"/>expire_hit(hit_id)<br ALIGN="LEFT"/>extend_hit(hit_id, assignments_increment, expiration_increment)<br ALIGN="LEFT"/>get_account_balance()<br ALIGN="LEFT"/>get_all_hits()<br ALIGN="LEFT"/>get_all_qualifications_for_qual_type(qualification_type_id)<br ALIGN="LEFT"/>get_assignment(assignment_id, response_groups)<br ALIGN="LEFT"/>get_assignments(hit_id, status, sort_by, sort_direction, page_size, page_number, response_groups)<br ALIGN="LEFT"/>get_file_upload_url(assignment_id, question_identifier)<br ALIGN="LEFT"/>get_help(about, help_type)<br ALIGN="LEFT"/>get_hit(hit_id, response_groups)<br ALIGN="LEFT"/>get_keywords_as_string(keywords)<br ALIGN="LEFT"/>get_price_as_price(reward)<br ALIGN="LEFT"/>get_qualification_requests(qualification_type_id, sort_by, sort_direction, page_size, page_number)<br ALIGN="LEFT"/>get_qualification_score(qualification_type_id, worker_id)<br ALIGN="LEFT"/>get_qualification_type(qualification_type_id)<br ALIGN="LEFT"/>get_qualifications_for_qualification_type(qualification_type_id, page_size, page_number)<br ALIGN="LEFT"/>get_reviewable_hits(hit_type, status, sort_by, sort_direction, page_size, page_number)<br ALIGN="LEFT"/>grant_bonus(worker_id, assignment_id, bonus_price, reason)<br ALIGN="LEFT"/>grant_qualification(qualification_request_id, integer_value)<br ALIGN="LEFT"/>notify_workers(worker_ids, subject, message_text)<br ALIGN="LEFT"/>register_hit_type(title, description, reward, duration, keywords, approval_delay, qual_req)<br ALIGN="LEFT"/>reject_assignment(assignment_id, feedback)<br ALIGN="LEFT"/>revoke_qualification(subject_id, qualification_type_id, reason)<br ALIGN="LEFT"/>search_hits(sort_by, sort_direction, page_size, page_number, response_groups)<br ALIGN="LEFT"/>search_qualification_types(query, sort_by, sort_direction, page_size, page_number, must_be_requestable, must_be_owned_by_caller)<br ALIGN="LEFT"/>send_test_event_notification(hit_type, url, event_types, test_event_type)<br ALIGN="LEFT"/>set_email_notification(hit_type, email, event_types)<br ALIGN="LEFT"/>set_rest_notification(hit_type, url, event_types)<br ALIGN="LEFT"/>set_reviewing(hit_id, revert)<br ALIGN="LEFT"/>set_sqs_notification(hit_type, queue_url, event_types)<br ALIGN="LEFT"/>unblock_worker(worker_id, reason)<br ALIGN="LEFT"/>update_qualification_score(qualification_type_id, worker_id, value)<br ALIGN="LEFT"/>update_qualification_type(qualification_type_id, description, status, retry_delay, test, answer_key, test_duration, auto_granted, auto_granted_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.MTurkRequestError" [color="black", fontcolor="red", label=<{MTurkRequestError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.connection.MWSConnection" [color="black", fontcolor="black", label=<{MWSConnection|Merchant<br ALIGN="LEFT"/>ResponseErrorFactory<br ALIGN="LEFT"/>ResponseFactory<br ALIGN="LEFT"/>SellerId<br ALIGN="LEFT"/>|authorize(request, response)<br ALIGN="LEFT"/>cancel_feed_submissions(request, response)<br ALIGN="LEFT"/>cancel_fulfillment_order(request, response)<br ALIGN="LEFT"/>cancel_order_reference(request, response)<br ALIGN="LEFT"/>cancel_report_requests(request, response)<br ALIGN="LEFT"/>capture(request, response)<br ALIGN="LEFT"/>close_authorization(request, response)<br ALIGN="LEFT"/>close_order_reference(request, response)<br ALIGN="LEFT"/>confirm_order_reference(request, response)<br ALIGN="LEFT"/>create_fulfillment_order(request, response)<br ALIGN="LEFT"/>create_inbound_shipment(request, response)<br ALIGN="LEFT"/>create_inbound_shipment_plan(request, response)<br ALIGN="LEFT"/>create_subscription(request, response)<br ALIGN="LEFT"/>delete_subscription(request, response)<br ALIGN="LEFT"/>deregister_destination(request, response)<br ALIGN="LEFT"/>get_authorization_details(request, response)<br ALIGN="LEFT"/>get_capture_details(request, response)<br ALIGN="LEFT"/>get_cartinfo_service_status(request, response)<br ALIGN="LEFT"/>get_carts(request, response)<br ALIGN="LEFT"/>get_competitive_pricing_for_asin(request, response)<br ALIGN="LEFT"/>get_competitive_pricing_for_sku(request, response)<br ALIGN="LEFT"/>get_customerinfo_service_status(request, response)<br ALIGN="LEFT"/>get_customers_for_customer_id(request, response)<br ALIGN="LEFT"/>get_feed_submission_count(request, response)<br ALIGN="LEFT"/>get_feed_submission_list(request, response)<br ALIGN="LEFT"/>get_feed_submission_list_by_next_token(request, response)<br ALIGN="LEFT"/>get_feed_submission_result(request, response)<br ALIGN="LEFT"/>get_fulfillment_order(request, response)<br ALIGN="LEFT"/>get_fulfillment_preview(request, response)<br ALIGN="LEFT"/>get_inbound_service_status(request, response)<br ALIGN="LEFT"/>get_inventory_service_status(request, response)<br ALIGN="LEFT"/>get_last_updated_time_for_recommendations(request, response)<br ALIGN="LEFT"/>get_lowest_offer_listings_for_asin(request, response)<br ALIGN="LEFT"/>get_lowest_offer_listings_for_sku(request, response)<br ALIGN="LEFT"/>get_matching_product(request, response)<br ALIGN="LEFT"/>get_matching_product_for_id(request, response)<br ALIGN="LEFT"/>get_my_price_for_asin(request, response)<br ALIGN="LEFT"/>get_my_price_for_sku(request, response)<br ALIGN="LEFT"/>get_offamazonpayments_service_status(request, response)<br ALIGN="LEFT"/>get_order(request, response)<br ALIGN="LEFT"/>get_order_reference_details(request, response)<br ALIGN="LEFT"/>get_orders_service_status(request, response)<br ALIGN="LEFT"/>get_outbound_service_status(request, response)<br ALIGN="LEFT"/>get_package_tracking_details(request, response)<br ALIGN="LEFT"/>get_product_categories_for_asin(request, response)<br ALIGN="LEFT"/>get_product_categories_for_sku(request, response)<br ALIGN="LEFT"/>get_products_service_status(request, response)<br ALIGN="LEFT"/>get_recommendations_service_status(request, response)<br ALIGN="LEFT"/>get_refund_details(request, response)<br ALIGN="LEFT"/>get_report(request, response)<br ALIGN="LEFT"/>get_report_count(request, response)<br ALIGN="LEFT"/>get_report_list(request, response)<br ALIGN="LEFT"/>get_report_list_by_next_token(request, response)<br ALIGN="LEFT"/>get_report_request_count(request, response)<br ALIGN="LEFT"/>get_report_request_list(request, response)<br ALIGN="LEFT"/>get_report_request_list_by_next_token(request, response)<br ALIGN="LEFT"/>get_report_schedule_count(request, response)<br ALIGN="LEFT"/>get_report_schedule_list(request, response)<br ALIGN="LEFT"/>get_report_schedule_list_by_next_token(request, response)<br ALIGN="LEFT"/>get_service_status()<br ALIGN="LEFT"/>get_subscription(request, response)<br ALIGN="LEFT"/>get_subscriptions_service_status(request, response)<br ALIGN="LEFT"/>iter_call(call)<br ALIGN="LEFT"/>iter_response(response)<br ALIGN="LEFT"/>list_all_fulfillment_orders(request, response)<br ALIGN="LEFT"/>list_all_fulfillment_orders_by_next_token(request, response)<br ALIGN="LEFT"/>list_carts(request, response)<br ALIGN="LEFT"/>list_carts_by_next_token(request, response)<br ALIGN="LEFT"/>list_customers(request, response)<br ALIGN="LEFT"/>list_customers_by_next_token(request, response)<br ALIGN="LEFT"/>list_inbound_shipment_items(request, response)<br ALIGN="LEFT"/>list_inbound_shipment_items_by_next_token(request, response)<br ALIGN="LEFT"/>list_inbound_shipments(request, response)<br ALIGN="LEFT"/>list_inbound_shipments_by_next_token(request, response)<br ALIGN="LEFT"/>list_inventory_supply(request, response)<br ALIGN="LEFT"/>list_inventory_supply_by_next_token(request, response)<br ALIGN="LEFT"/>list_marketplace_participations(request, response)<br ALIGN="LEFT"/>list_marketplace_participations_by_next_token(request, response)<br ALIGN="LEFT"/>list_matching_products(request, response)<br ALIGN="LEFT"/>list_order_items(request, response)<br ALIGN="LEFT"/>list_order_items_by_next_token(request, response)<br ALIGN="LEFT"/>list_orders(request, response)<br ALIGN="LEFT"/>list_orders_by_next_token(request, response)<br ALIGN="LEFT"/>list_recommendations(request, response)<br ALIGN="LEFT"/>list_recommendations_by_next_token(request, response)<br ALIGN="LEFT"/>list_registered_destinations(request, response)<br ALIGN="LEFT"/>list_subscriptions(request, response)<br ALIGN="LEFT"/>manage_report_schedule(request, response)<br ALIGN="LEFT"/>method_for(name)<br ALIGN="LEFT"/>refund(request, response)<br ALIGN="LEFT"/>register_destination(request, response)<br ALIGN="LEFT"/>request_report(request, response)<br ALIGN="LEFT"/>send_test_notification_to_destination(request, response)<br ALIGN="LEFT"/>set_order_reference_details(request, response)<br ALIGN="LEFT"/>submit_feed(request, response, headers, body)<br ALIGN="LEFT"/>update_inbound_shipment(request, response)<br ALIGN="LEFT"/>update_report_acknowledgements(request, response)<br ALIGN="LEFT"/>update_subscription(request, response)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.machinelearning.layer1.MachineLearningConnection" [color="black", fontcolor="black", label=<{MachineLearningConnection|APIVersion : str<br ALIGN="LEFT"/>AuthServiceName : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>auth_region_name : NoneType<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|create_batch_prediction(batch_prediction_id, ml_model_id, batch_prediction_data_source_id, output_uri, batch_prediction_name)<br ALIGN="LEFT"/>create_data_source_from_rds(data_source_id, rds_data, role_arn, data_source_name, compute_statistics)<br ALIGN="LEFT"/>create_data_source_from_redshift(data_source_id, data_spec, role_arn, data_source_name, compute_statistics)<br ALIGN="LEFT"/>create_data_source_from_s3(data_source_id, data_spec, data_source_name, compute_statistics)<br ALIGN="LEFT"/>create_evaluation(evaluation_id, ml_model_id, evaluation_data_source_id, evaluation_name)<br ALIGN="LEFT"/>create_ml_model(ml_model_id, ml_model_type, training_data_source_id, ml_model_name, parameters, recipe, recipe_uri)<br ALIGN="LEFT"/>create_realtime_endpoint(ml_model_id)<br ALIGN="LEFT"/>delete_batch_prediction(batch_prediction_id)<br ALIGN="LEFT"/>delete_data_source(data_source_id)<br ALIGN="LEFT"/>delete_evaluation(evaluation_id)<br ALIGN="LEFT"/>delete_ml_model(ml_model_id)<br ALIGN="LEFT"/>delete_realtime_endpoint(ml_model_id)<br ALIGN="LEFT"/>describe_batch_predictions(filter_variable, eq, gt, lt, ge, le, ne, prefix, sort_order, next_token, limit)<br ALIGN="LEFT"/>describe_data_sources(filter_variable, eq, gt, lt, ge, le, ne, prefix, sort_order, next_token, limit)<br ALIGN="LEFT"/>describe_evaluations(filter_variable, eq, gt, lt, ge, le, ne, prefix, sort_order, next_token, limit)<br ALIGN="LEFT"/>describe_ml_models(filter_variable, eq, gt, lt, ge, le, ne, prefix, sort_order, next_token, limit)<br ALIGN="LEFT"/>get_batch_prediction(batch_prediction_id)<br ALIGN="LEFT"/>get_data_source(data_source_id, verbose)<br ALIGN="LEFT"/>get_evaluation(evaluation_id)<br ALIGN="LEFT"/>get_ml_model(ml_model_id, verbose)<br ALIGN="LEFT"/>make_request(action, body, host)<br ALIGN="LEFT"/>predict(ml_model_id, record, predict_endpoint)<br ALIGN="LEFT"/>update_batch_prediction(batch_prediction_id, batch_prediction_name)<br ALIGN="LEFT"/>update_data_source(data_source_id, data_source_name)<br ALIGN="LEFT"/>update_evaluation(evaluation_id, evaluation_name)<br ALIGN="LEFT"/>update_ml_model(ml_model_id, ml_model_name, score_threshold)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.kms.exceptions.MalformedPolicyDocumentException" [color="black", fontcolor="red", label=<{MalformedPolicyDocumentException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.MalformedQueryString" [color="black", fontcolor="red", label=<{MalformedQueryString|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ManageReportScheduleResult" [color="black", fontcolor="black", label=<{ManageReportScheduleResult|ReportSchedule<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.property.MapProperty" [color="black", fontcolor="black", label=<{MapProperty|data_type : dict<br ALIGN="LEFT"/>item_type : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|default_value()<br ALIGN="LEFT"/>empty(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.configservice.exceptions.MaxNumberOfConfigurationRecordersExceededException" [color="black", fontcolor="red", label=<{MaxNumberOfConfigurationRecordersExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.MaxNumberOfDeliveryChannelsExceededException" [color="black", fontcolor="red", label=<{MaxNumberOfDeliveryChannelsExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.MaximumNumberOfTrailsExceededException" [color="black", fontcolor="red", label=<{MaximumNumberOfTrailsExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.MemberList" [color="black", fontcolor="black", label=<{MemberList|<br ALIGN="LEFT"/>|teardown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.message.Message" [color="black", fontcolor="black", label=<{Message|queue<br ALIGN="LEFT"/>|decode(value)<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.messageattributes.MessageAttributeValue" [color="black", fontcolor="black", label=<{MessageAttributeValue|parent<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.messageattributes.MessageAttributes" [color="black", fontcolor="black", label=<{MessageAttributes|current_key : NoneType<br ALIGN="LEFT"/>current_value : NoneType<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.zone.MessageSet" [color="black", fontcolor="black", label=<{MessageSet|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.MetricCollectionTypes.Metric" [color="black", fontcolor="black", label=<{Metric|arg : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.metric.Metric" [color="black", fontcolor="black", label=<{Metric|Statistics : list<br ALIGN="LEFT"/>Units : list<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>dimensions : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>namespace : NoneType<br ALIGN="LEFT"/>|create_alarm(name, comparison, threshold, period, evaluation_periods, statistic, enabled, description, dimensions, alarm_actions, ok_actions, insufficient_data_actions, unit)<br ALIGN="LEFT"/>describe_alarms(period, statistic, dimensions, unit)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>query(start_time, end_time, statistics, unit, period)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.alarm.MetricAlarm" [color="black", fontcolor="black", label=<{MetricAlarm|ALARM : str<br ALIGN="LEFT"/>INSUFFICIENT_DATA : str<br ALIGN="LEFT"/>OK : str<br ALIGN="LEFT"/>actions_enabled : NoneType, str<br ALIGN="LEFT"/>alarm_actions : NoneType<br ALIGN="LEFT"/>alarm_arn : NoneType<br ALIGN="LEFT"/>comparison<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>dimensions : NoneType<br ALIGN="LEFT"/>evaluation_periods : NoneType, int<br ALIGN="LEFT"/>insufficient_data_actions : NoneType<br ALIGN="LEFT"/>last_updated : NoneType<br ALIGN="LEFT"/>metric : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>namespace : NoneType<br ALIGN="LEFT"/>ok_actions : NoneType<br ALIGN="LEFT"/>period : NoneType, int<br ALIGN="LEFT"/>state_reason : NoneType<br ALIGN="LEFT"/>state_value : NoneType<br ALIGN="LEFT"/>statistic : NoneType<br ALIGN="LEFT"/>threshold : NoneType, float<br ALIGN="LEFT"/>unit : NoneType<br ALIGN="LEFT"/>|add_alarm_action(action_arn)<br ALIGN="LEFT"/>add_insufficient_data_action(action_arn)<br ALIGN="LEFT"/>add_ok_action(action_arn)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>describe_history(start_date, end_date, max_records, history_item_type, next_token)<br ALIGN="LEFT"/>disable_actions()<br ALIGN="LEFT"/>enable_actions()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>set_state(value, reason, data)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.cloudwatch.alarm.MetricAlarms" [color="black", fontcolor="black", label=<{MetricAlarms|connection : NoneType<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.MetricCollectionTypes" [color="black", fontcolor="black", label=<{MetricCollectionTypes|connection : NoneType<br ALIGN="LEFT"/>granularities : list<br ALIGN="LEFT"/>metrics : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.exception.MissingAction" [color="black", fontcolor="red", label=<{MissingAction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.MissingAuthenticationToken" [color="black", fontcolor="red", label=<{MissingAuthenticationToken|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.MissingParameter" [color="black", fontcolor="red", label=<{MissingParameter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.model.Model" [color="black", fontcolor="black", label=<{Model|get_by_ids<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>save<br ALIGN="LEFT"/>save_attributes<br ALIGN="LEFT"/>|all(limit, next_token)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_attributes(attrs)<br ALIGN="LEFT"/>find(limit, next_token)<br ALIGN="LEFT"/>find_property(prop_name)<br ALIGN="LEFT"/>find_subclass(name)<br ALIGN="LEFT"/>from_xml(fp)<br ALIGN="LEFT"/>get_by_id(ids, parent)<br ALIGN="LEFT"/><I>get_by_key_name</I>(key_names, parent)<br ALIGN="LEFT"/>get_lineage()<br ALIGN="LEFT"/><I>get_or_insert</I>()<br ALIGN="LEFT"/>get_xmlmanager()<br ALIGN="LEFT"/>key()<br ALIGN="LEFT"/>kind()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>properties(hidden)<br ALIGN="LEFT"/>put(expected_value)<br ALIGN="LEFT"/>put_attributes(attrs)<br ALIGN="LEFT"/>reload()<br ALIGN="LEFT"/>set_manager(manager)<br ALIGN="LEFT"/>to_dict()<br ALIGN="LEFT"/>to_xml(doc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.model.ModelMeta" [color="black", fontcolor="black", label=<{ModelMeta|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ModificationResult" [color="black", fontcolor="black", label=<{ModificationResult|availability_zone : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>instance_count : NoneType, int<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>modification_id : NoneType<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.ModifyInstanceGroupsResponse" [color="black", fontcolor="black", label=<{ModifyInstanceGroupsResponse|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ModifyReservedInstancesResult" [color="black", fontcolor="black", label=<{ModifyReservedInstancesResult|connection : NoneType<br ALIGN="LEFT"/>modification_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vendored.six.Module_six_moves_urllib" [color="black", fontcolor="black", label=<{Module_six_moves_urllib|error<br ALIGN="LEFT"/>parse<br ALIGN="LEFT"/>request<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>robotparser<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.Module_six_moves_urllib_error" [color="black", fontcolor="black", label=<{Module_six_moves_urllib_error|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.Module_six_moves_urllib_parse" [color="black", fontcolor="black", label=<{Module_six_moves_urllib_parse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.Module_six_moves_urllib_request" [color="black", fontcolor="black", label=<{Module_six_moves_urllib_request|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.Module_six_moves_urllib_response" [color="black", fontcolor="black", label=<{Module_six_moves_urllib_response|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.Module_six_moves_urllib_robotparser" [color="black", fontcolor="black", label=<{Module_six_moves_urllib_robotparser|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.MovedAttribute" [color="black", fontcolor="black", label=<{MovedAttribute|attr : NoneType<br ALIGN="LEFT"/>mod<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six.MovedModule" [color="black", fontcolor="black", label=<{MovedModule|mod : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.multidelete.MultiDeleteResult" [color="black", fontcolor="black", label=<{MultiDeleteResult|bucket : NoneType<br ALIGN="LEFT"/>deleted : list<br ALIGN="LEFT"/>errors : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.multipart.MultiPartUpload" [color="black", fontcolor="black", label=<{MultiPartUpload|bucket : NoneType<br ALIGN="LEFT"/>bucket_name : NoneType<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>initiated : NoneType<br ALIGN="LEFT"/>initiator : NoneType<br ALIGN="LEFT"/>is_truncated : bool<br ALIGN="LEFT"/>key_name : NoneType<br ALIGN="LEFT"/>max_parts : NoneType, int<br ALIGN="LEFT"/>next_part_number_marker : NoneType<br ALIGN="LEFT"/>owner : NoneType<br ALIGN="LEFT"/>part_number_marker : NoneType<br ALIGN="LEFT"/>storage_class : NoneType<br ALIGN="LEFT"/>|cancel_upload()<br ALIGN="LEFT"/>complete_upload()<br ALIGN="LEFT"/>copy_part_from_key(src_bucket_name, src_key_name, part_num, start, end, src_version_id, headers)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_all_parts(max_parts, part_number_marker, encoding_type)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>upload_part_from_file(fp, part_num, headers, replace, cb, num_cb, md5, size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.bucketlistresultset.MultiPartUploadListResultSet" [color="black", fontcolor="black", label=<{MultiPartUploadListResultSet|bucket : NoneType<br ALIGN="LEFT"/>encoding_type : NoneType<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>key_marker : str<br ALIGN="LEFT"/>upload_id_marker : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.pyami.installers.ubuntu.mysql.MySQL" [color="black", fontcolor="black", label=<{MySQL|<br ALIGN="LEFT"/>|change_data_dir(password)<br ALIGN="LEFT"/>install()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.condition.NE" [color="black", fontcolor="black", label=<{NE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.items.NEWVALUE" [color="black", fontcolor="black", label=<{NEWVALUE|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.NOT_CONTAINS" [color="black", fontcolor="black", label=<{NOT_CONTAINS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.NOT_NULL" [color="black", fontcolor="black", label=<{NOT_NULL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.condition.NULL" [color="black", fontcolor="black", label=<{NULL|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vpc.networkacl.NetworkAcl" [color="black", fontcolor="black", label=<{NetworkAcl|associations : list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>network_acl_entries : list<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.networkacl.NetworkAclAssociation" [color="black", fontcolor="black", label=<{NetworkAclAssociation|id : NoneType<br ALIGN="LEFT"/>network_acl_id : NoneType<br ALIGN="LEFT"/>subnet_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.networkacl.NetworkAclEntry" [color="black", fontcolor="black", label=<{NetworkAclEntry|cidr_block : NoneType<br ALIGN="LEFT"/>egress : NoneType<br ALIGN="LEFT"/>icmp<br ALIGN="LEFT"/>port_range<br ALIGN="LEFT"/>protocol : NoneType<br ALIGN="LEFT"/>rule_action : NoneType<br ALIGN="LEFT"/>rule_number : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.networkinterface.NetworkInterface" [color="black", fontcolor="black", label=<{NetworkInterface|attachment : NoneType<br ALIGN="LEFT"/>availability_zone : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>groups : list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>mac_address : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>private_ip_address : NoneType<br ALIGN="LEFT"/>private_ip_addresses : list<br ALIGN="LEFT"/>requester_managed : bool<br ALIGN="LEFT"/>source_dest_check : NoneType, bool<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>subnet_id : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|attach(instance_id, device_index, dry_run)<br ALIGN="LEFT"/>delete(dry_run)<br ALIGN="LEFT"/>detach(force, dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.networkinterface.NetworkInterfaceCollection" [color="black", fontcolor="black", label=<{NetworkInterfaceCollection|<br ALIGN="LEFT"/>|build_list_params(params, prefix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.networkinterface.NetworkInterfaceSpecification" [color="black", fontcolor="black", label=<{NetworkInterfaceSpecification|associate_public_ip_address : NoneType<br ALIGN="LEFT"/>delete_on_termination : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>device_index : NoneType<br ALIGN="LEFT"/>groups : NoneType<br ALIGN="LEFT"/>network_interface_id : NoneType<br ALIGN="LEFT"/>private_ip_address : NoneType<br ALIGN="LEFT"/>private_ip_addresses : NoneType<br ALIGN="LEFT"/>secondary_private_ip_address_count : NoneType<br ALIGN="LEFT"/>subnet_id : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.NoAuthHandlerFound" [color="black", fontcolor="red", label=<{NoAuthHandlerFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.NoAvailableConfigurationRecorderException" [color="black", fontcolor="red", label=<{NoAvailableConfigurationRecorderException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.NoAvailableDeliveryChannelException" [color="black", fontcolor="red", label=<{NoAvailableDeliveryChannelException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.roboto.awsqueryservice.NoCredentialsError" [color="black", fontcolor="red", label=<{NoCredentialsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.connection.NoHostProvided" [color="black", fontcolor="black", label=<{NoHostProvided|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.NoRunningConfigurationRecorderException" [color="black", fontcolor="red", label=<{NoRunningConfigurationRecorderException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.NoSuchBucketException" [color="black", fontcolor="red", label=<{NoSuchBucketException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.NoSuchConfigurationRecorderException" [color="black", fontcolor="red", label=<{NoSuchConfigurationRecorderException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.NoSuchDeliveryChannelException" [color="black", fontcolor="red", label=<{NoSuchDeliveryChannelException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.types.NonBooleanDynamizer" [color="black", fontcolor="black", label=<{NonBooleanDynamizer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.NotAuthorizedException" [color="black", fontcolor="red", label=<{NotAuthorizedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.NotAuthorizedException" [color="black", fontcolor="red", label=<{NotAuthorizedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.NotFoundException" [color="black", fontcolor="red", label=<{NotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.NotMarketplaceApp" [color="black", fontcolor="red", label=<{NotMarketplaceApp|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth_handler.NotReadyToAuthenticate" [color="black", fontcolor="red", label=<{NotReadyToAuthenticate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudformation.stack.NotificationARN" [color="black", fontcolor="black", label=<{NotificationARN|connection : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.notification.NotificationMessage" [color="black", fontcolor="black", label=<{NotificationMessage|EVENT_PATTERN : str<br ALIGN="LEFT"/>EVENT_RE<br ALIGN="LEFT"/>NOTIFICATION_VERSION : str<br ALIGN="LEFT"/>NOTIFICATION_WSDL : str<br ALIGN="LEFT"/>OPERATION_NAME : str<br ALIGN="LEFT"/>SERVICE_NAME : str<br ALIGN="LEFT"/>events : list<br ALIGN="LEFT"/>signature<br ALIGN="LEFT"/>timestamp<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|verify(secret_key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.NullHandler" [color="black", fontcolor="black", label=<{NullHandler|<br ALIGN="LEFT"/>|<I>emit</I>(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.qualification.NumberHitsApprovedRequirement" [color="black", fontcolor="black", label=<{NumberHitsApprovedRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.NumberOfLinesSuggestion" [color="black", fontcolor="black", label=<{NumberOfLinesSuggestion|num_lines : int<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.NumberOfNodesPerClusterLimitExceeded" [color="black", fontcolor="red", label=<{NumberOfNodesPerClusterLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.NumberOfNodesPerClusterLimitExceededFault" [color="black", fontcolor="red", label=<{NumberOfNodesPerClusterLimitExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.NumberOfNodesQuotaExceeded" [color="black", fontcolor="red", label=<{NumberOfNodesQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.NumberOfNodesQuotaExceededFault" [color="black", fontcolor="red", label=<{NumberOfNodesQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.NumericConstraint" [color="black", fontcolor="black", label=<{NumericConstraint|attribute_names : tuple<br ALIGN="LEFT"/>attribute_values : tuple<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudfront.object.Object" [color="black", fontcolor="black", label=<{Object|distribution<br ALIGN="LEFT"/>|url(scheme)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Offer" [color="black", fontcolor="black", label=<{Offer|BuyingPrice<br ALIGN="LEFT"/>RegularPrice<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.OperationAbortedException" [color="black", fontcolor="red", label=<{OperationAbortedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.OperationInProgress" [color="black", fontcolor="red", label=<{OperationInProgress|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.domains.exceptions.OperationLimitExceeded" [color="black", fontcolor="red", label=<{OperationLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.opsworks.layer1.OpsWorksConnection" [color="black", fontcolor="black", label=<{OpsWorksConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|assign_instance(instance_id, layer_ids)<br ALIGN="LEFT"/>assign_volume(volume_id, instance_id)<br ALIGN="LEFT"/>associate_elastic_ip(elastic_ip, instance_id)<br ALIGN="LEFT"/>attach_elastic_load_balancer(elastic_load_balancer_name, layer_id)<br ALIGN="LEFT"/>clone_stack(source_stack_id, service_role_arn, name, region, vpc_id, attributes, default_instance_profile_arn, default_os, hostname_theme, default_availability_zone, default_subnet_id, custom_json, configuration_manager, chef_configuration, use_custom_cookbooks, use_opsworks_security_groups, custom_cookbooks_source, default_ssh_key_name, clone_permissions, clone_app_ids, default_root_device_type)<br ALIGN="LEFT"/>create_app(stack_id, name, type, shortname, description, data_sources, app_source, domains, enable_ssl, ssl_configuration, attributes, environment)<br ALIGN="LEFT"/>create_deployment(stack_id, command, app_id, instance_ids, comment, custom_json)<br ALIGN="LEFT"/>create_instance(stack_id, layer_ids, instance_type, auto_scaling_type, hostname, os, ami_id, ssh_key_name, availability_zone, virtualization_type, subnet_id, architecture, root_device_type, install_updates_on_boot, ebs_optimized)<br ALIGN="LEFT"/>create_layer(stack_id, type, name, shortname, attributes, custom_instance_profile_arn, custom_security_group_ids, packages, volume_configurations, enable_auto_healing, auto_assign_elastic_ips, auto_assign_public_ips, custom_recipes, install_updates_on_boot, use_ebs_optimized_instances, lifecycle_event_configuration)<br ALIGN="LEFT"/>create_stack(name, region, service_role_arn, default_instance_profile_arn, vpc_id, attributes, default_os, hostname_theme, default_availability_zone, default_subnet_id, custom_json, configuration_manager, chef_configuration, use_custom_cookbooks, use_opsworks_security_groups, custom_cookbooks_source, default_ssh_key_name, default_root_device_type)<br ALIGN="LEFT"/>create_user_profile(iam_user_arn, ssh_username, ssh_public_key, allow_self_management)<br ALIGN="LEFT"/>delete_app(app_id)<br ALIGN="LEFT"/>delete_instance(instance_id, delete_elastic_ip, delete_volumes)<br ALIGN="LEFT"/>delete_layer(layer_id)<br ALIGN="LEFT"/>delete_stack(stack_id)<br ALIGN="LEFT"/>delete_user_profile(iam_user_arn)<br ALIGN="LEFT"/>deregister_elastic_ip(elastic_ip)<br ALIGN="LEFT"/>deregister_instance(instance_id)<br ALIGN="LEFT"/>deregister_rds_db_instance(rds_db_instance_arn)<br ALIGN="LEFT"/>deregister_volume(volume_id)<br ALIGN="LEFT"/>describe_apps(stack_id, app_ids)<br ALIGN="LEFT"/>describe_commands(deployment_id, instance_id, command_ids)<br ALIGN="LEFT"/>describe_deployments(stack_id, app_id, deployment_ids)<br ALIGN="LEFT"/>describe_elastic_ips(instance_id, stack_id, ips)<br ALIGN="LEFT"/>describe_elastic_load_balancers(stack_id, layer_ids)<br ALIGN="LEFT"/>describe_instances(stack_id, layer_id, instance_ids)<br ALIGN="LEFT"/>describe_layers(stack_id, layer_ids)<br ALIGN="LEFT"/>describe_load_based_auto_scaling(layer_ids)<br ALIGN="LEFT"/>describe_my_user_profile()<br ALIGN="LEFT"/>describe_permissions(iam_user_arn, stack_id)<br ALIGN="LEFT"/>describe_raid_arrays(instance_id, stack_id, raid_array_ids)<br ALIGN="LEFT"/>describe_rds_db_instances(stack_id, rds_db_instance_arns)<br ALIGN="LEFT"/>describe_service_errors(stack_id, instance_id, service_error_ids)<br ALIGN="LEFT"/>describe_stack_provisioning_parameters(stack_id)<br ALIGN="LEFT"/>describe_stack_summary(stack_id)<br ALIGN="LEFT"/>describe_stacks(stack_ids)<br ALIGN="LEFT"/>describe_time_based_auto_scaling(instance_ids)<br ALIGN="LEFT"/>describe_user_profiles(iam_user_arns)<br ALIGN="LEFT"/>describe_volumes(instance_id, stack_id, raid_array_id, volume_ids)<br ALIGN="LEFT"/>detach_elastic_load_balancer(elastic_load_balancer_name, layer_id)<br ALIGN="LEFT"/>disassociate_elastic_ip(elastic_ip)<br ALIGN="LEFT"/>get_hostname_suggestion(layer_id)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>reboot_instance(instance_id)<br ALIGN="LEFT"/>register_elastic_ip(elastic_ip, stack_id)<br ALIGN="LEFT"/>register_instance(stack_id, hostname, public_ip, private_ip, rsa_public_key, rsa_public_key_fingerprint, instance_identity)<br ALIGN="LEFT"/>register_rds_db_instance(stack_id, rds_db_instance_arn, db_user, db_password)<br ALIGN="LEFT"/>register_volume(stack_id, ec_2_volume_id)<br ALIGN="LEFT"/>set_load_based_auto_scaling(layer_id, enable, up_scaling, down_scaling)<br ALIGN="LEFT"/>set_permission(stack_id, iam_user_arn, allow_ssh, allow_sudo, level)<br ALIGN="LEFT"/>set_time_based_auto_scaling(instance_id, auto_scaling_schedule)<br ALIGN="LEFT"/>start_instance(instance_id)<br ALIGN="LEFT"/>start_stack(stack_id)<br ALIGN="LEFT"/>stop_instance(instance_id)<br ALIGN="LEFT"/>stop_stack(stack_id)<br ALIGN="LEFT"/>unassign_instance(instance_id)<br ALIGN="LEFT"/>unassign_volume(volume_id)<br ALIGN="LEFT"/>update_app(app_id, name, description, data_sources, type, app_source, domains, enable_ssl, ssl_configuration, attributes, environment)<br ALIGN="LEFT"/>update_elastic_ip(elastic_ip, name)<br ALIGN="LEFT"/>update_instance(instance_id, layer_ids, instance_type, auto_scaling_type, hostname, os, ami_id, ssh_key_name, architecture, install_updates_on_boot, ebs_optimized)<br ALIGN="LEFT"/>update_layer(layer_id, name, shortname, attributes, custom_instance_profile_arn, custom_security_group_ids, packages, volume_configurations, enable_auto_healing, auto_assign_elastic_ips, auto_assign_public_ips, custom_recipes, install_updates_on_boot, use_ebs_optimized_instances, lifecycle_event_configuration)<br ALIGN="LEFT"/>update_my_user_profile(ssh_public_key)<br ALIGN="LEFT"/>update_rds_db_instance(rds_db_instance_arn, db_user, db_password)<br ALIGN="LEFT"/>update_stack(stack_id, name, attributes, service_role_arn, default_instance_profile_arn, default_os, hostname_theme, default_availability_zone, default_subnet_id, custom_json, configuration_manager, chef_configuration, use_custom_cookbooks, custom_cookbooks_source, default_ssh_key_name, default_root_device_type, use_opsworks_security_groups)<br ALIGN="LEFT"/>update_user_profile(iam_user_arn, ssh_username, ssh_public_key, allow_self_management)<br ALIGN="LEFT"/>update_volume(volume_id, name, mount_point)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.exception.OptInRequired" [color="black", fontcolor="red", label=<{OptInRequired|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.optiongroup.Option" [color="black", fontcolor="black", label=<{Option|db_security_groups : NoneType, list<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>permanent : bool<br ALIGN="LEFT"/>permenant : bool<br ALIGN="LEFT"/>persistent : bool<br ALIGN="LEFT"/>port : NoneType, int<br ALIGN="LEFT"/>settings : NoneType, list<br ALIGN="LEFT"/>vpc_security_groups : NoneType, list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.optiongroup.OptionGroup" [color="black", fontcolor="black", label=<{OptionGroup|allow_both_vpc_and_nonvpc : bool<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>engine_name : NoneType<br ALIGN="LEFT"/>major_engine_version : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>options : list<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.OptionGroupAlreadyExists" [color="black", fontcolor="red", label=<{OptionGroupAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.OptionGroupNotFound" [color="black", fontcolor="red", label=<{OptionGroupNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.optiongroup.OptionGroupOption" [color="black", fontcolor="black", label=<{OptionGroupOption|default_port : NoneType, int<br ALIGN="LEFT"/>depends_on : NoneType, list<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>engine_name : NoneType<br ALIGN="LEFT"/>major_engine_version : NoneType<br ALIGN="LEFT"/>min_minor_engine_version : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>permanent : bool<br ALIGN="LEFT"/>permenant : bool<br ALIGN="LEFT"/>persistent : bool<br ALIGN="LEFT"/>port_required : bool<br ALIGN="LEFT"/>settings : NoneType, list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.optiongroup.OptionGroupOptionSetting" [color="black", fontcolor="black", label=<{OptionGroupOptionSetting|allowed_values : NoneType<br ALIGN="LEFT"/>apply_type : NoneType<br ALIGN="LEFT"/>default_value : bool<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>is_modifiable : bool<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.OptionGroupQuotaExceeded" [color="black", fontcolor="red", label=<{OptionGroupQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.OptionRestrictionRegex" [color="black", fontcolor="black", label=<{OptionRestrictionRegex|label<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.optiongroup.OptionSetting" [color="black", fontcolor="black", label=<{OptionSetting|allowed_values : NoneType<br ALIGN="LEFT"/>apply_type : NoneType<br ALIGN="LEFT"/>data_type : NoneType<br ALIGN="LEFT"/>default_value : bool<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>is_collection : bool<br ALIGN="LEFT"/>is_modifiable : bool<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.optionstatus.OptionStatus" [color="black", fontcolor="black", label=<{OptionStatus|created<br ALIGN="LEFT"/>creation_date<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>refresh_fn : NoneType<br ALIGN="LEFT"/>save_fn : NoneType<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>update_date<br ALIGN="LEFT"/>update_version : int<br ALIGN="LEFT"/>updated<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>refresh(data)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>wait_for_state(state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.optionstatus.OptionStatus" [color="black", fontcolor="black", label=<{OptionStatus|creation_date<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>refresh_fn : NoneType<br ALIGN="LEFT"/>refresh_key : NoneType<br ALIGN="LEFT"/>save_fn : NoneType<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>update_date<br ALIGN="LEFT"/>update_version : int<br ALIGN="LEFT"/>|refresh(data)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mashups.order.Order" [color="black", fontcolor="black", label=<{Order|items : list<br ALIGN="LEFT"/>reservation : NoneType<br ALIGN="LEFT"/>|add_item()<br ALIGN="LEFT"/>display()<br ALIGN="LEFT"/>place(block)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Order" [color="black", fontcolor="black", label=<{Order|OrderTotal<br ALIGN="LEFT"/>PaymentExecutionDetail<br ALIGN="LEFT"/>ShippingAddress<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.OrderItem" [color="black", fontcolor="black", label=<{OrderItem|CODFee<br ALIGN="LEFT"/>CODFeeDiscount<br ALIGN="LEFT"/>GiftWrapPrice<br ALIGN="LEFT"/>GiftWrapTax<br ALIGN="LEFT"/>ItemPrice<br ALIGN="LEFT"/>ItemTax<br ALIGN="LEFT"/>PromotionDiscount<br ALIGN="LEFT"/>PromotionIds<br ALIGN="LEFT"/>ShippingDiscount<br ALIGN="LEFT"/>ShippingPrice<br ALIGN="LEFT"/>ShippingTax<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.OrderReferenceDetails" [color="black", fontcolor="black", label=<{OrderReferenceDetails|Buyer<br ALIGN="LEFT"/>Constraints<br ALIGN="LEFT"/>Destination<br ALIGN="LEFT"/>OrderReferenceStatus<br ALIGN="LEFT"/>OrderTotal<br ALIGN="LEFT"/>SellerOrderAttributes<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.OrderedContent" [color="black", fontcolor="black", label=<{OrderedContent|<br ALIGN="LEFT"/>|append_field(field, value)<br ALIGN="LEFT"/>get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.connection.OrdinaryCallingFormat" [color="black", fontcolor="black", label=<{OrdinaryCallingFormat|<br ALIGN="LEFT"/>|build_path_base(bucket, key)<br ALIGN="LEFT"/>get_bucket_server(server, bucket)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.identity.OriginAccessIdentity" [color="black", fontcolor="black", label=<{OriginAccessIdentity|comment : str<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>s3_user_id : str<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(comment)<br ALIGN="LEFT"/>uri()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.identity.OriginAccessIdentityConfig" [color="black", fontcolor="black", label=<{OriginAccessIdentityConfig|caller_reference : str<br ALIGN="LEFT"/>comment : str<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.identity.OriginAccessIdentitySummary" [color="black", fontcolor="black", label=<{OriginAccessIdentitySummary|comment : str<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>s3_user_id : str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_origin_access_identity()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.OriginalTransactionFailed" [color="black", fontcolor="red", label=<{OriginalTransactionFailed|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.OriginalTransactionIncomplete" [color="black", fontcolor="red", label=<{OriginalTransactionIncomplete|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.policies.OtherPolicy" [color="black", fontcolor="black", label=<{OtherPolicy|policy_name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.Output" [color="black", fontcolor="black", label=<{Output|connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.Overview" [color="black", fontcolor="black", label=<{Overview|template : str<br ALIGN="LEFT"/>|get_as_params(label)<br ALIGN="LEFT"/>get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.POSTPathQSV2AuthHandler" [color="black", fontcolor="black", label=<{POSTPathQSV2AuthHandler|capability : list<br ALIGN="LEFT"/>|add_auth(req)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.roboto.param.Param" [color="black", fontcolor="black", label=<{Param|cardinality : int<br ALIGN="LEFT"/>choices : NoneType<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>doc : str<br ALIGN="LEFT"/>encoder : NoneType<br ALIGN="LEFT"/>getopt_long_name<br ALIGN="LEFT"/>getopt_short_name<br ALIGN="LEFT"/>long_name : NoneType<br ALIGN="LEFT"/>metavar : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>optional : bool<br ALIGN="LEFT"/>optparse_long_name<br ALIGN="LEFT"/>optparse_short_name<br ALIGN="LEFT"/>ptype : str<br ALIGN="LEFT"/>request_param : bool<br ALIGN="LEFT"/>short_name : NoneType<br ALIGN="LEFT"/>synopsis_long_name<br ALIGN="LEFT"/>synopsis_short_name<br ALIGN="LEFT"/>|convert(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.Parameter" [color="black", fontcolor="black", label=<{Parameter|connection : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.parametergroup.Parameter" [color="black", fontcolor="black", label=<{Parameter|ValidApplyMethods : list<br ALIGN="LEFT"/>ValidApplyTypes : list<br ALIGN="LEFT"/>ValidSources : list<br ALIGN="LEFT"/>ValidTypes : dict<br ALIGN="LEFT"/>allowed_values : NoneType<br ALIGN="LEFT"/>apply_method : NoneType, str<br ALIGN="LEFT"/>apply_type<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>group : NoneType<br ALIGN="LEFT"/>is_modifiable : bool<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>source : NoneType<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|apply(immediate)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_value()<br ALIGN="LEFT"/>merge(d, i)<br ALIGN="LEFT"/>set_value(value)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.parametergroup.ParameterGroup" [color="black", fontcolor="black", label=<{ParameterGroup|connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>engine : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|add_param(name, value, apply_method)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_params()<br ALIGN="LEFT"/>modifiable()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.multipart.Part" [color="black", fontcolor="black", label=<{Part|bucket : NoneType<br ALIGN="LEFT"/>etag : NoneType<br ALIGN="LEFT"/>last_modified : NoneType<br ALIGN="LEFT"/>part_number : NoneType, int<br ALIGN="LEFT"/>size : NoneType, int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.utils.Password" [color="black", fontcolor="black", label=<{Password|hashfunc : sha512<br ALIGN="LEFT"/>str : NoneType<br ALIGN="LEFT"/>|set(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.PasswordProperty" [color="black", fontcolor="black", label=<{PasswordProperty|data_type<br ALIGN="LEFT"/>hashfunc : NoneType<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|get_value_for_datastore(model_instance)<br ALIGN="LEFT"/>make_value_from_datastore(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.PaymentInstrumentNotCC" [color="black", fontcolor="red", label=<{PaymentInstrumentNotCC|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.PaymentMethodNotDefined" [color="black", fontcolor="red", label=<{PaymentMethodNotDefined|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds.dbinstance.PendingModifiedValues" [color="black", fontcolor="black", label=<{PendingModifiedValues|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.qualification.PercentAssignmentsAbandonedRequirement" [color="black", fontcolor="black", label=<{PercentAssignmentsAbandonedRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.qualification.PercentAssignmentsApprovedRequirement" [color="black", fontcolor="black", label=<{PercentAssignmentsApprovedRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.qualification.PercentAssignmentsRejectedRequirement" [color="black", fontcolor="black", label=<{PercentAssignmentsRejectedRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.qualification.PercentAssignmentsReturnedRequirement" [color="black", fontcolor="black", label=<{PercentAssignmentsReturnedRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.qualification.PercentAssignmentsSubmittedRequirement" [color="black", fontcolor="black", label=<{PercentAssignmentsSubmittedRequirement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.step.PigBase" [color="black", fontcolor="black", label=<{PigBase|BaseArgs : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.step.PigStep" [color="black", fontcolor="black", label=<{PigStep|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.datapipeline.exceptions.PipelineDeletedException" [color="black", fontcolor="red", label=<{PipelineDeletedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.datapipeline.exceptions.PipelineNotFoundException" [color="black", fontcolor="red", label=<{PipelineNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.placementgroup.PlacementGroup" [color="black", fontcolor="black", label=<{PlacementGroup|name : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>strategy : NoneType<br ALIGN="LEFT"/>|delete(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.PleaseRetryException" [color="black", fontcolor="red", label=<{PleaseRetryException|message<br ALIGN="LEFT"/>response : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.plugin.Plugin" [color="black", fontcolor="black", label=<{Plugin|capability : list<br ALIGN="LEFT"/>|is_capable(requested_capability)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.PointInTimeRestoreNotEnabled" [color="black", fontcolor="red", label=<{PointInTimeRestoreNotEnabled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.elb.policies.Policies" [color="black", fontcolor="black", label=<{Policies|app_cookie_stickiness_policies : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>lb_cookie_stickiness_policies : NoneType<br ALIGN="LEFT"/>other_policies : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.acl.Policy" [color="black", fontcolor="black", label=<{Policy|acl : NoneType<br ALIGN="LEFT"/>namespace : NoneType<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.networkacl.PortRange" [color="black", fontcolor="black", label=<{PortRange|from_port : NoneType<br ALIGN="LEFT"/>to_port : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.PredictorNotMountedException" [color="black", fontcolor="red", label=<{PredictorNotMountedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.prefix.Prefix" [color="black", fontcolor="black", label=<{Prefix|bucket : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.PrepaidFundingLimitExceeded" [color="black", fontcolor="red", label=<{PrepaidFundingLimitExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.price.Price" [color="black", fontcolor="black", label=<{Price|amount : float<br ALIGN="LEFT"/>currency_code : str<br ALIGN="LEFT"/>formatted_price : str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get_as_params(label, ord)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Price" [color="black", fontcolor="black", label=<{Price|LandedPrice<br ALIGN="LEFT"/>ListingPrice<br ALIGN="LEFT"/>Shipping<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.PriceSchedule" [color="black", fontcolor="black", label=<{PriceSchedule|active : NoneType, bool<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>currency_code : NoneType<br ALIGN="LEFT"/>price : NoneType<br ALIGN="LEFT"/>term : NoneType, int<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.PricingDetail" [color="black", fontcolor="black", label=<{PricingDetail|count : NoneType<br ALIGN="LEFT"/>price : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.networkinterface.PrivateIPAddress" [color="black", fontcolor="black", label=<{PrivateIPAddress|connection : NoneType<br ALIGN="LEFT"/>primary : NoneType, bool<br ALIGN="LEFT"/>private_ip_address : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.group.ProcessType" [color="black", fontcolor="black", label=<{ProcessType|connection : NoneType<br ALIGN="LEFT"/>process_name : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Product" [color="black", fontcolor="black", label=<{Product|AttributeSets<br ALIGN="LEFT"/>CompetitivePricing<br ALIGN="LEFT"/>Identifiers<br ALIGN="LEFT"/>LowestOfferListings<br ALIGN="LEFT"/>Offers<br ALIGN="LEFT"/>Relationships<br ALIGN="LEFT"/>SalesRankings<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ProductCategory" [color="black", fontcolor="black", label=<{ProductCategory|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.image.ProductCodes" [color="black", fontcolor="black", label=<{ProductCodes|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ProductsBulkOperationResponse" [color="black", fontcolor="black", label=<{ProductsBulkOperationResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ProductsBulkOperationResult" [color="black", fontcolor="black", label=<{ProductsBulkOperationResult|Error<br ALIGN="LEFT"/>Product<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.provider.ProfileNotFoundError" [color="black", fontcolor="red", label=<{ProfileNotFoundError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.property.Property" [color="black", fontcolor="black", label=<{Property|choices : NoneType<br ALIGN="LEFT"/>data_type : str<br ALIGN="LEFT"/>default : NoneType<br ALIGN="LEFT"/>model_class<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>required : bool<br ALIGN="LEFT"/>slot_name : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>unique : bool<br ALIGN="LEFT"/>validator : NoneType<br ALIGN="LEFT"/>verbose_name : str<br ALIGN="LEFT"/>|default_validator(value)<br ALIGN="LEFT"/>default_value()<br ALIGN="LEFT"/>empty(value)<br ALIGN="LEFT"/>get_choices()<br ALIGN="LEFT"/>get_value_for_datastore(model_instance)<br ALIGN="LEFT"/>make_value_from_datastore(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.connection.ProtocolIndependentOrdinaryCallingFormat" [color="black", fontcolor="black", label=<{ProtocolIndependentOrdinaryCallingFormat|<br ALIGN="LEFT"/>|build_url_base(connection, protocol, server, bucket, key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.provider.Provider" [color="black", fontcolor="black", label=<{Provider|AclClassMap : dict<br ALIGN="LEFT"/>CannedAclsMap : dict<br ALIGN="LEFT"/>ChunkedTransferSupport : dict<br ALIGN="LEFT"/>CredentialMap : dict<br ALIGN="LEFT"/>ErrorMap : dict<br ALIGN="LEFT"/>HeaderInfoMap : dict<br ALIGN="LEFT"/>HostKeyMap : dict<br ALIGN="LEFT"/>MetadataServiceSupport : dict<br ALIGN="LEFT"/>access_key<br ALIGN="LEFT"/>acl_class<br ALIGN="LEFT"/>acl_header<br ALIGN="LEFT"/>auth_header<br ALIGN="LEFT"/>canned_acls<br ALIGN="LEFT"/>copy_source_header<br ALIGN="LEFT"/>copy_source_range_header<br ALIGN="LEFT"/>copy_source_version_id<br ALIGN="LEFT"/>date_header<br ALIGN="LEFT"/>delete_marker<br ALIGN="LEFT"/>header_prefix<br ALIGN="LEFT"/>host : NoneType, object<br ALIGN="LEFT"/>host_header : NoneType, object<br ALIGN="LEFT"/>metadata_directive_header<br ALIGN="LEFT"/>metadata_prefix<br ALIGN="LEFT"/>mfa_header<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>port : NoneType<br ALIGN="LEFT"/>profile_name : NoneType<br ALIGN="LEFT"/>restore_header<br ALIGN="LEFT"/>resumable_upload_header<br ALIGN="LEFT"/>secret_key<br ALIGN="LEFT"/>security_token<br ALIGN="LEFT"/>security_token_header<br ALIGN="LEFT"/>server_side_encryption_header<br ALIGN="LEFT"/>shared_credentials<br ALIGN="LEFT"/>storage_class_header<br ALIGN="LEFT"/>storage_copy_error<br ALIGN="LEFT"/>storage_create_error<br ALIGN="LEFT"/>storage_data_error<br ALIGN="LEFT"/>storage_permissions_error<br ALIGN="LEFT"/>storage_response_error<br ALIGN="LEFT"/>version_id<br ALIGN="LEFT"/>|configure_errors()<br ALIGN="LEFT"/>configure_headers()<br ALIGN="LEFT"/>get_access_key()<br ALIGN="LEFT"/>get_credentials(access_key, secret_key, security_token, profile_name)<br ALIGN="LEFT"/>get_provider_name()<br ALIGN="LEFT"/>get_secret_key()<br ALIGN="LEFT"/>get_security_token()<br ALIGN="LEFT"/>set_access_key(value)<br ALIGN="LEFT"/>set_secret_key(value)<br ALIGN="LEFT"/>set_security_token(value)<br ALIGN="LEFT"/>supports_chunked_transfer()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.ProvisionedIopsNotAvailableInAZ" [color="black", fontcolor="red", label=<{ProvisionedIopsNotAvailableInAZ|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ProvisionedThroughputExceededException" [color="black", fontcolor="red", label=<{ProvisionedThroughputExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.exceptions.ProvisionedThroughputExceededException" [color="black", fontcolor="red", label=<{ProvisionedThroughputExceededException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.connection.Qualification" [color="black", fontcolor="black", label=<{Qualification|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.connection.QualificationRequest" [color="black", fontcolor="black", label=<{QualificationRequest|answers : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.QualificationType" [color="black", fontcolor="black", label=<{QualificationType|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.qualification.Qualifications" [color="black", fontcolor="black", label=<{Qualifications|requirements : NoneType, list<br ALIGN="LEFT"/>|add(req)<br ALIGN="LEFT"/>get_as_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.search.Query" [color="black", fontcolor="black", label=<{Query|RESULTS_PER_PAGE : int<br ALIGN="LEFT"/>bq : NoneType<br ALIGN="LEFT"/>facet : list<br ALIGN="LEFT"/>facet_constraints : dict<br ALIGN="LEFT"/>facet_sort : dict<br ALIGN="LEFT"/>facet_top_n : dict<br ALIGN="LEFT"/>page : int<br ALIGN="LEFT"/>q : NoneType<br ALIGN="LEFT"/>rank : list<br ALIGN="LEFT"/>real_size : int<br ALIGN="LEFT"/>return_fields : list<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>start : int<br ALIGN="LEFT"/>t : dict<br ALIGN="LEFT"/>|to_params()<br ALIGN="LEFT"/>update_size(new_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.search.Query" [color="black", fontcolor="black", label=<{Query|RESULTS_PER_PAGE : int<br ALIGN="LEFT"/>expr : dict<br ALIGN="LEFT"/>facet : dict<br ALIGN="LEFT"/>fq : NoneType<br ALIGN="LEFT"/>highlight : dict<br ALIGN="LEFT"/>options : NoneType<br ALIGN="LEFT"/>page : int<br ALIGN="LEFT"/>parser : NoneType<br ALIGN="LEFT"/>partial : NoneType<br ALIGN="LEFT"/>q : NoneType<br ALIGN="LEFT"/>real_size : int<br ALIGN="LEFT"/>return_fields : list<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>sort : list<br ALIGN="LEFT"/>start : int<br ALIGN="LEFT"/>|to_domain_connection_params()<br ALIGN="LEFT"/>to_params()<br ALIGN="LEFT"/>update_size(new_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.query.Query" [color="black", fontcolor="black", label=<{Query|filters : list<br ALIGN="LEFT"/>limit : NoneType<br ALIGN="LEFT"/>manager : NoneType<br ALIGN="LEFT"/>model_class<br ALIGN="LEFT"/>next_token<br ALIGN="LEFT"/>offset : int<br ALIGN="LEFT"/>rs : NoneType<br ALIGN="LEFT"/>select : NoneType<br ALIGN="LEFT"/>sort_by : NoneType<br ALIGN="LEFT"/>|count(quick)<br ALIGN="LEFT"/>fetch(limit, offset)<br ALIGN="LEFT"/>filter(property_operator, value)<br ALIGN="LEFT"/>get_next_token()<br ALIGN="LEFT"/>get_query()<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>order(key)<br ALIGN="LEFT"/>set_next_token(token)<br ALIGN="LEFT"/>to_xml(doc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.QueryError" [color="black", fontcolor="red", label=<{QueryError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.queryresultset.QueryResultSet" [color="black", fontcolor="black", label=<{QueryResultSet|attr_names : NoneType<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>max_items : NoneType<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.QuerySignatureHelper" [color="black", fontcolor="black", label=<{QuerySignatureHelper|<br ALIGN="LEFT"/>|add_auth(http_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.QuerySignatureV0AuthHandler" [color="black", fontcolor="black", label=<{QuerySignatureV0AuthHandler|SignatureVersion : int<br ALIGN="LEFT"/>capability : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.QuerySignatureV1AuthHandler" [color="black", fontcolor="black", label=<{QuerySignatureV1AuthHandler|SignatureVersion : int<br ALIGN="LEFT"/>capability : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.QuerySignatureV2AuthHandler" [color="black", fontcolor="black", label=<{QuerySignatureV2AuthHandler|SignatureVersion : int<br ALIGN="LEFT"/>capability : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.Question" [color="black", fontcolor="black", label=<{Question|template : str<br ALIGN="LEFT"/>|get_as_params(label)<br ALIGN="LEFT"/>get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.QuestionContent" [color="black", fontcolor="black", label=<{QuestionContent|template : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.QuestionForm" [color="black", fontcolor="black", label=<{QuestionForm|schema_url : str<br ALIGN="LEFT"/>xml_template<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>is_valid()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.connection.QuestionFormAnswer" [color="black", fontcolor="black", label=<{QuestionFormAnswer|fields : list<br ALIGN="LEFT"/>qid : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.queue.Queue" [color="black", fontcolor="black", label=<{Queue|arn<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>load<br ALIGN="LEFT"/>message_class<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>save<br ALIGN="LEFT"/>url : NoneType<br ALIGN="LEFT"/>visibility_timeout : NoneType, int<br ALIGN="LEFT"/>|add_permission(label, aws_account_id, action_name)<br ALIGN="LEFT"/>change_message_visibility_batch(messages)<br ALIGN="LEFT"/>clear(page_size, vtimeout)<br ALIGN="LEFT"/>count(page_size, vtimeout)<br ALIGN="LEFT"/>count_slow(page_size, vtimeout)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_message(message)<br ALIGN="LEFT"/>delete_message_batch(messages)<br ALIGN="LEFT"/>dump(file_name, page_size, vtimeout, sep)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_attributes(attributes)<br ALIGN="LEFT"/>get_messages(num_messages, visibility_timeout, attributes, wait_time_seconds, message_attributes)<br ALIGN="LEFT"/>get_timeout()<br ALIGN="LEFT"/>load_from_file(fp, sep)<br ALIGN="LEFT"/>load_from_filename(file_name, sep)<br ALIGN="LEFT"/>load_from_s3(bucket, prefix)<br ALIGN="LEFT"/>new_message(body)<br ALIGN="LEFT"/>purge()<br ALIGN="LEFT"/>read(visibility_timeout, wait_time_seconds, message_attributes)<br ALIGN="LEFT"/>remove_permission(label)<br ALIGN="LEFT"/>save_to_file(fp, sep)<br ALIGN="LEFT"/>save_to_filename(file_name, sep)<br ALIGN="LEFT"/>save_to_s3(bucket)<br ALIGN="LEFT"/>set_attribute(attribute, value)<br ALIGN="LEFT"/>set_message_class(message_class)<br ALIGN="LEFT"/>set_timeout(visibility_timeout)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>write(message, delay_seconds)<br ALIGN="LEFT"/>write_batch(messages)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.RDSConnection" [color="black", fontcolor="black", label=<{RDSConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>revoke_security_group<br ALIGN="LEFT"/>|authorize_dbsecurity_group(group_name, cidr_ip, ec2_security_group_name, ec2_security_group_owner_id)<br ALIGN="LEFT"/>copy_dbsnapshot(source_snapshot_id, target_snapshot_id)<br ALIGN="LEFT"/>create_db_subnet_group(name, desc, subnet_ids)<br ALIGN="LEFT"/>create_dbinstance(id, allocated_storage, instance_class, master_username, master_password, port, engine, db_name, param_group, security_groups, availability_zone, preferred_maintenance_window, backup_retention_period, preferred_backup_window, multi_az, engine_version, auto_minor_version_upgrade, character_set_name, db_subnet_group_name, license_model, option_group_name, iops, vpc_security_groups)<br ALIGN="LEFT"/>create_dbinstance_read_replica(id, source_id, instance_class, port, availability_zone, auto_minor_version_upgrade)<br ALIGN="LEFT"/>create_dbsecurity_group(name, description)<br ALIGN="LEFT"/>create_dbsnapshot(snapshot_id, dbinstance_id)<br ALIGN="LEFT"/>create_option_group(name, engine_name, major_engine_version, description)<br ALIGN="LEFT"/>create_parameter_group(name, engine, description)<br ALIGN="LEFT"/>delete_db_subnet_group(name)<br ALIGN="LEFT"/>delete_dbinstance(id, skip_final_snapshot, final_snapshot_id)<br ALIGN="LEFT"/>delete_dbsecurity_group(name)<br ALIGN="LEFT"/>delete_dbsnapshot(identifier)<br ALIGN="LEFT"/>delete_option_group(name)<br ALIGN="LEFT"/>delete_parameter_group(name)<br ALIGN="LEFT"/>describe_option_group_options(engine_name, major_engine_version, max_records, marker)<br ALIGN="LEFT"/>describe_option_groups(name, engine_name, major_engine_version, max_records, marker)<br ALIGN="LEFT"/>get_all_db_subnet_groups(name, max_records, marker)<br ALIGN="LEFT"/>get_all_dbinstances(instance_id, max_records, marker)<br ALIGN="LEFT"/>get_all_dbparameter_groups(groupname, max_records, marker)<br ALIGN="LEFT"/>get_all_dbparameters(groupname, source, max_records, marker)<br ALIGN="LEFT"/>get_all_dbsecurity_groups(groupname, max_records, marker)<br ALIGN="LEFT"/>get_all_dbsnapshots(snapshot_id, instance_id, max_records, marker)<br ALIGN="LEFT"/>get_all_events(source_identifier, source_type, start_time, end_time, max_records, marker)<br ALIGN="LEFT"/>get_all_logs(dbinstance_id, max_records, marker, file_size, filename_contains, file_last_written)<br ALIGN="LEFT"/>get_log_file(dbinstance_id, log_file_name, marker, number_of_lines, max_records)<br ALIGN="LEFT"/>modify_db_subnet_group(name, description, subnet_ids)<br ALIGN="LEFT"/>modify_dbinstance(id, param_group, security_groups, preferred_maintenance_window, master_password, allocated_storage, instance_class, backup_retention_period, preferred_backup_window, multi_az, apply_immediately, iops, vpc_security_groups, new_instance_id)<br ALIGN="LEFT"/>modify_parameter_group(name, parameters)<br ALIGN="LEFT"/>promote_read_replica(id, backup_retention_period, preferred_backup_window)<br ALIGN="LEFT"/>reboot_dbinstance(id)<br ALIGN="LEFT"/>reset_parameter_group(name, reset_all_params, parameters)<br ALIGN="LEFT"/>restore_dbinstance_from_dbsnapshot(identifier, instance_id, instance_class, port, availability_zone, multi_az, auto_minor_version_upgrade, db_subnet_group_name)<br ALIGN="LEFT"/>restore_dbinstance_from_point_in_time(source_instance_id, target_instance_id, use_latest, restore_time, dbinstance_class, port, availability_zone, db_subnet_group_name)<br ALIGN="LEFT"/>revoke_dbsecurity_group(group_name, ec2_security_group_name, ec2_security_group_owner_id, cidr_ip)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.layer1.RDSConnection" [color="black", fontcolor="black", label=<{RDSConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|add_source_identifier_to_subscription(subscription_name, source_identifier)<br ALIGN="LEFT"/>add_tags_to_resource(resource_name, tags)<br ALIGN="LEFT"/>authorize_db_security_group_ingress(db_security_group_name, cidrip, ec2_security_group_name, ec2_security_group_id, ec2_security_group_owner_id)<br ALIGN="LEFT"/>copy_db_snapshot(source_db_snapshot_identifier, target_db_snapshot_identifier, tags)<br ALIGN="LEFT"/>create_db_instance(db_instance_identifier, allocated_storage, db_instance_class, engine, master_username, master_user_password, db_name, db_security_groups, vpc_security_group_ids, availability_zone, db_subnet_group_name, preferred_maintenance_window, db_parameter_group_name, backup_retention_period, preferred_backup_window, port, multi_az, engine_version, auto_minor_version_upgrade, license_model, iops, option_group_name, character_set_name, publicly_accessible, tags)<br ALIGN="LEFT"/>create_db_instance_read_replica(db_instance_identifier, source_db_instance_identifier, db_instance_class, availability_zone, port, auto_minor_version_upgrade, iops, option_group_name, publicly_accessible, tags)<br ALIGN="LEFT"/>create_db_parameter_group(db_parameter_group_name, db_parameter_group_family, description, tags)<br ALIGN="LEFT"/>create_db_security_group(db_security_group_name, db_security_group_description, tags)<br ALIGN="LEFT"/>create_db_snapshot(db_snapshot_identifier, db_instance_identifier, tags)<br ALIGN="LEFT"/>create_db_subnet_group(db_subnet_group_name, db_subnet_group_description, subnet_ids, tags)<br ALIGN="LEFT"/>create_event_subscription(subscription_name, sns_topic_arn, source_type, event_categories, source_ids, enabled, tags)<br ALIGN="LEFT"/>create_option_group(option_group_name, engine_name, major_engine_version, option_group_description, tags)<br ALIGN="LEFT"/>delete_db_instance(db_instance_identifier, skip_final_snapshot, final_db_snapshot_identifier)<br ALIGN="LEFT"/>delete_db_parameter_group(db_parameter_group_name)<br ALIGN="LEFT"/>delete_db_security_group(db_security_group_name)<br ALIGN="LEFT"/>delete_db_snapshot(db_snapshot_identifier)<br ALIGN="LEFT"/>delete_db_subnet_group(db_subnet_group_name)<br ALIGN="LEFT"/>delete_event_subscription(subscription_name)<br ALIGN="LEFT"/>delete_option_group(option_group_name)<br ALIGN="LEFT"/>describe_db_engine_versions(engine, engine_version, db_parameter_group_family, max_records, marker, default_only, list_supported_character_sets)<br ALIGN="LEFT"/>describe_db_instances(db_instance_identifier, filters, max_records, marker)<br ALIGN="LEFT"/>describe_db_log_files(db_instance_identifier, filename_contains, file_last_written, file_size, max_records, marker)<br ALIGN="LEFT"/>describe_db_parameter_groups(db_parameter_group_name, filters, max_records, marker)<br ALIGN="LEFT"/>describe_db_parameters(db_parameter_group_name, source, max_records, marker)<br ALIGN="LEFT"/>describe_db_security_groups(db_security_group_name, filters, max_records, marker)<br ALIGN="LEFT"/>describe_db_snapshots(db_instance_identifier, db_snapshot_identifier, snapshot_type, filters, max_records, marker)<br ALIGN="LEFT"/>describe_db_subnet_groups(db_subnet_group_name, filters, max_records, marker)<br ALIGN="LEFT"/>describe_engine_default_parameters(db_parameter_group_family, max_records, marker)<br ALIGN="LEFT"/>describe_event_categories(source_type)<br ALIGN="LEFT"/>describe_event_subscriptions(subscription_name, filters, max_records, marker)<br ALIGN="LEFT"/>describe_events(source_identifier, source_type, start_time, end_time, duration, event_categories, max_records, marker)<br ALIGN="LEFT"/>describe_option_group_options(engine_name, major_engine_version, max_records, marker)<br ALIGN="LEFT"/>describe_option_groups(option_group_name, filters, marker, max_records, engine_name, major_engine_version)<br ALIGN="LEFT"/>describe_orderable_db_instance_options(engine, engine_version, db_instance_class, license_model, vpc, max_records, marker)<br ALIGN="LEFT"/>describe_reserved_db_instances(reserved_db_instance_id, reserved_db_instances_offering_id, db_instance_class, duration, product_description, offering_type, multi_az, filters, max_records, marker)<br ALIGN="LEFT"/>describe_reserved_db_instances_offerings(reserved_db_instances_offering_id, db_instance_class, duration, product_description, offering_type, multi_az, max_records, marker)<br ALIGN="LEFT"/>download_db_log_file_portion(db_instance_identifier, log_file_name, marker, number_of_lines)<br ALIGN="LEFT"/>list_tags_for_resource(resource_name)<br ALIGN="LEFT"/>modify_db_instance(db_instance_identifier, allocated_storage, db_instance_class, db_security_groups, vpc_security_group_ids, apply_immediately, master_user_password, db_parameter_group_name, backup_retention_period, preferred_backup_window, preferred_maintenance_window, multi_az, engine_version, allow_major_version_upgrade, auto_minor_version_upgrade, iops, option_group_name, new_db_instance_identifier)<br ALIGN="LEFT"/>modify_db_parameter_group(db_parameter_group_name, parameters)<br ALIGN="LEFT"/>modify_db_subnet_group(db_subnet_group_name, subnet_ids, db_subnet_group_description)<br ALIGN="LEFT"/>modify_event_subscription(subscription_name, sns_topic_arn, source_type, event_categories, enabled)<br ALIGN="LEFT"/>modify_option_group(option_group_name, options_to_include, options_to_remove, apply_immediately)<br ALIGN="LEFT"/>promote_read_replica(db_instance_identifier, backup_retention_period, preferred_backup_window)<br ALIGN="LEFT"/>purchase_reserved_db_instances_offering(reserved_db_instances_offering_id, reserved_db_instance_id, db_instance_count, tags)<br ALIGN="LEFT"/>reboot_db_instance(db_instance_identifier, force_failover)<br ALIGN="LEFT"/>remove_source_identifier_from_subscription(subscription_name, source_identifier)<br ALIGN="LEFT"/>remove_tags_from_resource(resource_name, tag_keys)<br ALIGN="LEFT"/>reset_db_parameter_group(db_parameter_group_name, reset_all_parameters, parameters)<br ALIGN="LEFT"/>restore_db_instance_from_db_snapshot(db_instance_identifier, db_snapshot_identifier, db_instance_class, port, availability_zone, db_subnet_group_name, multi_az, publicly_accessible, auto_minor_version_upgrade, license_model, db_name, engine, iops, option_group_name, tags)<br ALIGN="LEFT"/>restore_db_instance_to_point_in_time(source_db_instance_identifier, target_db_instance_identifier, restore_time, use_latest_restorable_time, db_instance_class, port, availability_zone, db_subnet_group_name, multi_az, publicly_accessible, auto_minor_version_upgrade, license_model, db_name, engine, iops, option_group_name, tags)<br ALIGN="LEFT"/>revoke_db_security_group_ingress(db_security_group_name, cidrip, ec2_security_group_name, ec2_security_group_id, ec2_security_group_owner_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.regioninfo.RDSRegionInfo" [color="black", fontcolor="black", label=<{RDSRegionInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.fields.RangeKey" [color="black", fontcolor="black", label=<{RangeKey|attr_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.optionstatus.RankExpressionStatus" [color="black", fontcolor="black", label=<{RankExpressionStatus|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sqs.message.RawMessage" [color="black", fontcolor="black", label=<{RawMessage|attributes<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>md5 : NoneType<br ALIGN="LEFT"/>md5_message_attributes : NoneType<br ALIGN="LEFT"/>message_attributes<br ALIGN="LEFT"/>queue : NoneType<br ALIGN="LEFT"/>receipt_handle : NoneType<br ALIGN="LEFT"/>|change_visibility(visibility_timeout)<br ALIGN="LEFT"/>decode(value)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>encode(value)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>endNode(connection)<br ALIGN="LEFT"/>get_body()<br ALIGN="LEFT"/>get_body_encoded()<br ALIGN="LEFT"/>set_body(body)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.dbinstance.ReadReplicaDBInstanceIdentifiers" [color="black", fontcolor="black", label=<{ReadReplicaDBInstanceIdentifiers|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.RebuildEnvironmentResponse" [color="black", fontcolor="black", label=<{RebuildEnvironmentResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.record.Record" [color="black", fontcolor="black", label=<{Record|AliasBody : str<br ALIGN="LEFT"/>EvaluateTargetHealth : str<br ALIGN="LEFT"/>FailoverBody : str<br ALIGN="LEFT"/>HealthCheckBody : str<br ALIGN="LEFT"/>RRRBody : str<br ALIGN="LEFT"/>ResourceRecordBody : str<br ALIGN="LEFT"/>ResourceRecordsBody : str<br ALIGN="LEFT"/>WRRBody : str<br ALIGN="LEFT"/>XMLBody : str<br ALIGN="LEFT"/>alias_dns_name : NoneType<br ALIGN="LEFT"/>alias_evaluate_target_health : NoneType, bool<br ALIGN="LEFT"/>alias_hosted_zone_id : NoneType<br ALIGN="LEFT"/>failover : NoneType<br ALIGN="LEFT"/>health_check : NoneType<br ALIGN="LEFT"/>identifier : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>resource_records : NoneType, list<br ALIGN="LEFT"/>ttl : int<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>weight : NoneType<br ALIGN="LEFT"/>|add_value(value)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>set_alias(alias_hosted_zone_id, alias_dns_name, alias_evaluate_target_health)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_print()<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.RecurringCharge" [color="black", fontcolor="black", label=<{RecurringCharge|amount : NoneType<br ALIGN="LEFT"/>frequency : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.website.Redirect" [color="black", fontcolor="black", label=<{Redirect|TRANSLATOR : list<br ALIGN="LEFT"/>hostname : NoneType<br ALIGN="LEFT"/>http_redirect_code : NoneType<br ALIGN="LEFT"/>protocol : NoneType<br ALIGN="LEFT"/>replace_key : NoneType<br ALIGN="LEFT"/>replace_key_prefix : NoneType<br ALIGN="LEFT"/>|to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.website.RedirectLocation" [color="black", fontcolor="black", label=<{RedirectLocation|TRANSLATOR : list<br ALIGN="LEFT"/>hostname : NoneType<br ALIGN="LEFT"/>protocol : NoneType<br ALIGN="LEFT"/>|to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.layer1.RedshiftConnection" [color="black", fontcolor="black", label=<{RedshiftConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|authorize_cluster_security_group_ingress(cluster_security_group_name, cidrip, ec2_security_group_name, ec2_security_group_owner_id)<br ALIGN="LEFT"/>authorize_snapshot_access(snapshot_identifier, account_with_restore_access, snapshot_cluster_identifier)<br ALIGN="LEFT"/>copy_cluster_snapshot(source_snapshot_identifier, target_snapshot_identifier, source_snapshot_cluster_identifier)<br ALIGN="LEFT"/>create_cluster(cluster_identifier, node_type, master_username, master_user_password, db_name, cluster_type, cluster_security_groups, vpc_security_group_ids, cluster_subnet_group_name, availability_zone, preferred_maintenance_window, cluster_parameter_group_name, automated_snapshot_retention_period, port, cluster_version, allow_version_upgrade, number_of_nodes, publicly_accessible, encrypted, hsm_client_certificate_identifier, hsm_configuration_identifier, elastic_ip)<br ALIGN="LEFT"/>create_cluster_parameter_group(parameter_group_name, parameter_group_family, description)<br ALIGN="LEFT"/>create_cluster_security_group(cluster_security_group_name, description)<br ALIGN="LEFT"/>create_cluster_snapshot(snapshot_identifier, cluster_identifier)<br ALIGN="LEFT"/>create_cluster_subnet_group(cluster_subnet_group_name, description, subnet_ids)<br ALIGN="LEFT"/>create_event_subscription(subscription_name, sns_topic_arn, source_type, source_ids, event_categories, severity, enabled)<br ALIGN="LEFT"/>create_hsm_client_certificate(hsm_client_certificate_identifier)<br ALIGN="LEFT"/>create_hsm_configuration(hsm_configuration_identifier, description, hsm_ip_address, hsm_partition_name, hsm_partition_password, hsm_server_public_certificate)<br ALIGN="LEFT"/>delete_cluster(cluster_identifier, skip_final_cluster_snapshot, final_cluster_snapshot_identifier)<br ALIGN="LEFT"/>delete_cluster_parameter_group(parameter_group_name)<br ALIGN="LEFT"/>delete_cluster_security_group(cluster_security_group_name)<br ALIGN="LEFT"/>delete_cluster_snapshot(snapshot_identifier, snapshot_cluster_identifier)<br ALIGN="LEFT"/>delete_cluster_subnet_group(cluster_subnet_group_name)<br ALIGN="LEFT"/>delete_event_subscription(subscription_name)<br ALIGN="LEFT"/>delete_hsm_client_certificate(hsm_client_certificate_identifier)<br ALIGN="LEFT"/>delete_hsm_configuration(hsm_configuration_identifier)<br ALIGN="LEFT"/>describe_cluster_parameter_groups(parameter_group_name, max_records, marker)<br ALIGN="LEFT"/>describe_cluster_parameters(parameter_group_name, source, max_records, marker)<br ALIGN="LEFT"/>describe_cluster_security_groups(cluster_security_group_name, max_records, marker)<br ALIGN="LEFT"/>describe_cluster_snapshots(cluster_identifier, snapshot_identifier, snapshot_type, start_time, end_time, max_records, marker, owner_account)<br ALIGN="LEFT"/>describe_cluster_subnet_groups(cluster_subnet_group_name, max_records, marker)<br ALIGN="LEFT"/>describe_cluster_versions(cluster_version, cluster_parameter_group_family, max_records, marker)<br ALIGN="LEFT"/>describe_clusters(cluster_identifier, max_records, marker)<br ALIGN="LEFT"/>describe_default_cluster_parameters(parameter_group_family, max_records, marker)<br ALIGN="LEFT"/>describe_event_categories(source_type)<br ALIGN="LEFT"/>describe_event_subscriptions(subscription_name, max_records, marker)<br ALIGN="LEFT"/>describe_events(source_identifier, source_type, start_time, end_time, duration, max_records, marker)<br ALIGN="LEFT"/>describe_hsm_client_certificates(hsm_client_certificate_identifier, max_records, marker)<br ALIGN="LEFT"/>describe_hsm_configurations(hsm_configuration_identifier, max_records, marker)<br ALIGN="LEFT"/>describe_logging_status(cluster_identifier)<br ALIGN="LEFT"/>describe_orderable_cluster_options(cluster_version, node_type, max_records, marker)<br ALIGN="LEFT"/>describe_reserved_node_offerings(reserved_node_offering_id, max_records, marker)<br ALIGN="LEFT"/>describe_reserved_nodes(reserved_node_id, max_records, marker)<br ALIGN="LEFT"/>describe_resize(cluster_identifier)<br ALIGN="LEFT"/>disable_logging(cluster_identifier)<br ALIGN="LEFT"/>disable_snapshot_copy(cluster_identifier)<br ALIGN="LEFT"/>enable_logging(cluster_identifier, bucket_name, s3_key_prefix)<br ALIGN="LEFT"/>enable_snapshot_copy(cluster_identifier, destination_region, retention_period)<br ALIGN="LEFT"/>modify_cluster(cluster_identifier, cluster_type, node_type, number_of_nodes, cluster_security_groups, vpc_security_group_ids, master_user_password, cluster_parameter_group_name, automated_snapshot_retention_period, preferred_maintenance_window, cluster_version, allow_version_upgrade, hsm_client_certificate_identifier, hsm_configuration_identifier, new_cluster_identifier)<br ALIGN="LEFT"/>modify_cluster_parameter_group(parameter_group_name, parameters)<br ALIGN="LEFT"/>modify_cluster_subnet_group(cluster_subnet_group_name, subnet_ids, description)<br ALIGN="LEFT"/>modify_event_subscription(subscription_name, sns_topic_arn, source_type, source_ids, event_categories, severity, enabled)<br ALIGN="LEFT"/>modify_snapshot_copy_retention_period(cluster_identifier, retention_period)<br ALIGN="LEFT"/>purchase_reserved_node_offering(reserved_node_offering_id, node_count)<br ALIGN="LEFT"/>reboot_cluster(cluster_identifier)<br ALIGN="LEFT"/>reset_cluster_parameter_group(parameter_group_name, reset_all_parameters, parameters)<br ALIGN="LEFT"/>restore_from_cluster_snapshot(cluster_identifier, snapshot_identifier, snapshot_cluster_identifier, port, availability_zone, allow_version_upgrade, cluster_subnet_group_name, publicly_accessible, owner_account, hsm_client_certificate_identifier, hsm_configuration_identifier, elastic_ip, cluster_parameter_group_name, cluster_security_groups, vpc_security_group_ids, preferred_maintenance_window, automated_snapshot_retention_period)<br ALIGN="LEFT"/>revoke_cluster_security_group_ingress(cluster_security_group_name, cidrip, ec2_security_group_name, ec2_security_group_owner_id)<br ALIGN="LEFT"/>revoke_snapshot_access(snapshot_identifier, account_with_restore_access, snapshot_cluster_identifier)<br ALIGN="LEFT"/>rotate_encryption_key(cluster_identifier)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.ReferenceProperty" [color="black", fontcolor="black", label=<{ReferenceProperty|collection_name : NoneType<br ALIGN="LEFT"/>data_type<br ALIGN="LEFT"/>reference_class : NoneType<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|check_instance(value)<br ALIGN="LEFT"/>check_uuid(value)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.RefundAmountExceeded" [color="black", fontcolor="red", label=<{RefundAmountExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.RefundDetails" [color="black", fontcolor="black", label=<{RefundDetails|FeeRefunded<br ALIGN="LEFT"/>RefundAmount<br ALIGN="LEFT"/>RefundStatus<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.RefundResult" [color="black", fontcolor="black", label=<{RefundResult|RefundDetails<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.RegExConstraint" [color="black", fontcolor="black", label=<{RegExConstraint|attribute_names : tuple<br ALIGN="LEFT"/>attribute_values : tuple<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>|get_attributes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.regioninfo.RegionInfo" [color="black", fontcolor="black", label=<{RegionInfo|connection : NoneType<br ALIGN="LEFT"/>connection_cls : NoneType<br ALIGN="LEFT"/>endpoint : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ReportRequestInfo" [color="black", fontcolor="black", label=<{ReportRequestInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.request.Request" [color="black", fontcolor="black", label=<{Request|connection : NoneType<br ALIGN="LEFT"/>request_id : str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.RequestEnvironmentInfoResponse" [color="black", fontcolor="black", label=<{RequestEnvironmentInfoResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.RequestExpired" [color="black", fontcolor="red", label=<{RequestExpired|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.utils.RequestHook" [color="black", fontcolor="black", label=<{RequestHook|<br ALIGN="LEFT"/>|<I>handle_request_data</I>(request, response, error)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.requestlog.RequestLogger" [color="black", fontcolor="black", label=<{RequestLogger|request_log_file<br ALIGN="LEFT"/>request_log_queue : Queue<br ALIGN="LEFT"/>|handle_request_data(request, response, error)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.RequestReportResult" [color="black", fontcolor="black", label=<{RequestReportResult|ReportRequestInfo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.roboto.awsqueryrequest.RequiredParamError" [color="black", fontcolor="red", label=<{RequiredParamError|required<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.qualification.Requirement" [color="black", fontcolor="black", label=<{Requirement|comparator<br ALIGN="LEFT"/>integer_value : NoneType<br ALIGN="LEFT"/>qualification_type_id<br ALIGN="LEFT"/>required_to_preview : bool<br ALIGN="LEFT"/>|get_as_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instance.Reservation" [color="black", fontcolor="black", label=<{Reservation|groups : list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instances : list<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>stop_all(dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.ReservedDBInstanceAlreadyExists" [color="black", fontcolor="red", label=<{ReservedDBInstanceAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.ReservedDBInstanceNotFound" [color="black", fontcolor="red", label=<{ReservedDBInstanceNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.ReservedDBInstanceQuotaExceeded" [color="black", fontcolor="red", label=<{ReservedDBInstanceQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.ReservedDBInstancesOfferingNotFound" [color="black", fontcolor="red", label=<{ReservedDBInstancesOfferingNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ReservedInstance" [color="black", fontcolor="black", label=<{ReservedInstance|end : NoneType<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>instance_count : NoneType, int<br ALIGN="LEFT"/>start : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ReservedInstanceListing" [color="black", fontcolor="black", label=<{ReservedInstanceListing|client_token : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>create_date : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_counts<br ALIGN="LEFT"/>listing_id : NoneType<br ALIGN="LEFT"/>price_schedules<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>status_message : NoneType<br ALIGN="LEFT"/>update_date : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ReservedInstancesConfiguration" [color="black", fontcolor="black", label=<{ReservedInstancesConfiguration|availability_zone : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>instance_count : NoneType, int<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ReservedInstancesModification" [color="black", fontcolor="black", label=<{ReservedInstancesModification|client_token : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>create_date : NoneType, datetime<br ALIGN="LEFT"/>effective_date : NoneType, datetime<br ALIGN="LEFT"/>modification_id : NoneType<br ALIGN="LEFT"/>modification_results : NoneType<br ALIGN="LEFT"/>reserved_instances : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>status_message : NoneType<br ALIGN="LEFT"/>update_date : NoneType, datetime<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.reservedinstance.ReservedInstancesOffering" [color="black", fontcolor="black", label=<{ReservedInstancesOffering|availability_zone : NoneType<br ALIGN="LEFT"/>currency_code : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>duration : NoneType, int<br ALIGN="LEFT"/>fixed_price : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_tenancy : NoneType<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>marketplace : bool<br ALIGN="LEFT"/>offering_type : NoneType<br ALIGN="LEFT"/>pricing_details : NoneType<br ALIGN="LEFT"/>recurring_charges : NoneType<br ALIGN="LEFT"/>usage_price : NoneType<br ALIGN="LEFT"/>|describe()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>purchase(instance_count, dry_run)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeAlreadyExists" [color="black", fontcolor="red", label=<{ReservedNodeAlreadyExists|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeAlreadyExistsFault" [color="black", fontcolor="red", label=<{ReservedNodeAlreadyExistsFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeNotFound" [color="black", fontcolor="red", label=<{ReservedNodeNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeNotFoundFault" [color="black", fontcolor="red", label=<{ReservedNodeNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeOfferingNotFound" [color="black", fontcolor="red", label=<{ReservedNodeOfferingNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeOfferingNotFoundFault" [color="black", fontcolor="red", label=<{ReservedNodeOfferingNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeQuotaExceeded" [color="black", fontcolor="red", label=<{ReservedNodeQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ReservedNodeQuotaExceededFault" [color="black", fontcolor="red", label=<{ReservedNodeQuotaExceededFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.utils.ResettingFileSender" [color="black", fontcolor="black", label=<{ResettingFileSender|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ResizeNotFound" [color="black", fontcolor="red", label=<{ResizeNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.ResizeNotFoundFault" [color="black", fontcolor="red", label=<{ResizeNotFoundFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.ResourceAlreadyExistsException" [color="black", fontcolor="red", label=<{ResourceAlreadyExistsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.ResourceConflictException" [color="black", fontcolor="red", label=<{ResourceConflictException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.ResourceConflictException" [color="black", fontcolor="red", label=<{ResourceConflictException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ResourceInUseException" [color="black", fontcolor="red", label=<{ResourceInUseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.ResourceInUseException" [color="black", fontcolor="red", label=<{ResourceInUseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.exceptions.ResourceInUseException" [color="black", fontcolor="red", label=<{ResourceInUseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.ResourceInUseException" [color="black", fontcolor="red", label=<{ResourceInUseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.ResourceInUseException" [color="black", fontcolor="red", label=<{ResourceInUseException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.ResourceNotDiscoveredException" [color="black", fontcolor="red", label=<{ResourceNotDiscoveredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.awslambda.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.machinelearning.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.opsworks.exceptions.ResourceNotFoundException" [color="black", fontcolor="red", label=<{ResourceNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.record.ResourceRecordSets" [color="black", fontcolor="black", label=<{ResourceRecordSets|ChangeResourceRecordSetsBody : str<br ALIGN="LEFT"/>ChangeXML : str<br ALIGN="LEFT"/>changes : list<br ALIGN="LEFT"/>comment : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>hosted_zone_id : NoneType<br ALIGN="LEFT"/>is_truncated : bool<br ALIGN="LEFT"/>next_record_identifier : NoneType<br ALIGN="LEFT"/>next_record_name : NoneType<br ALIGN="LEFT"/>next_record_type : NoneType<br ALIGN="LEFT"/>|add_change(action, name, type, ttl, alias_hosted_zone_id, alias_dns_name, identifier, weight, region, alias_evaluate_target_health, health_check, failover)<br ALIGN="LEFT"/>add_change_record(action, change)<br ALIGN="LEFT"/>commit()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.Response" [color="black", fontcolor="black", label=<{Response|response_metadata : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.Response" [color="black", fontcolor="black", label=<{Response|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.Response" [color="black", fontcolor="black", label=<{Response|ResponseMetadata<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.response.ResponseElement" [color="black", fontcolor="black", label=<{ResponseElement|connection<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.ResponseElement" [color="black", fontcolor="black", label=<{ResponseElement|connection<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.ResponseError" [color="black", fontcolor="red", label=<{ResponseError|retry : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.exception.ResponseError" [color="black", fontcolor="red", label=<{ResponseError|retry : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.ResponseErrorFactory" [color="black", fontcolor="red", label=<{ResponseErrorFactory|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.exception.ResponseErrorFactory" [color="black", fontcolor="black", label=<{ResponseErrorFactory|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ResponseFactory" [color="black", fontcolor="black", label=<{ResponseFactory|scopes : NoneType, list<br ALIGN="LEFT"/>|element_factory(name, parent)<br ALIGN="LEFT"/>find_element(action, suffix, parent)<br ALIGN="LEFT"/>search_scopes(key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ecs.item.ResponseGroup" [color="black", fontcolor="black", label=<{ResponseGroup|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>get(name)<br ALIGN="LEFT"/>set(name, value)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.ResponseMetadata" [color="black", fontcolor="black", label=<{ResponseMetadata|request_id : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.ResponseResultList" [color="black", fontcolor="black", label=<{ResponseResultList|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.RestartAppServerResponse" [color="black", fontcolor="black", label=<{RestartAppServerResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sqs.batchresults.ResultEntry" [color="black", fontcolor="black", label=<{ResultEntry|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.services.result.ResultProcessor" [color="black", fontcolor="black", label=<{ResultProcessor|LogFileName : str<br ALIGN="LEFT"/>avg_time<br ALIGN="LEFT"/>batch<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>earliest_time : datetime<br ALIGN="LEFT"/>elapsed_time<br ALIGN="LEFT"/>latest_time : datetime<br ALIGN="LEFT"/>log_fp : NoneType<br ALIGN="LEFT"/>max_time : timedelta<br ALIGN="LEFT"/>min_time : timedelta<br ALIGN="LEFT"/>num_files : int<br ALIGN="LEFT"/>queue<br ALIGN="LEFT"/>sd<br ALIGN="LEFT"/>total_time : int<br ALIGN="LEFT"/>|calculate_stats(msg)<br ALIGN="LEFT"/>get_results(path, get_file, delete_msg)<br ALIGN="LEFT"/>get_results_from_bucket(path)<br ALIGN="LEFT"/>get_results_from_domain(path, get_file)<br ALIGN="LEFT"/>get_results_from_queue(path, get_file, delete_msg)<br ALIGN="LEFT"/>log_message(msg, path)<br ALIGN="LEFT"/>process_record(record, path, get_file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.resultset.ResultSet" [color="black", fontcolor="black", label=<{ResultSet|bucket<br ALIGN="LEFT"/>is_truncated : bool<br ALIGN="LEFT"/>key_marker : NoneType<br ALIGN="LEFT"/>marker : NoneType<br ALIGN="LEFT"/>markers : NoneType, list<br ALIGN="LEFT"/>max_items : int<br ALIGN="LEFT"/>max_uploads : int<br ALIGN="LEFT"/>nextToken<br ALIGN="LEFT"/>next_generation_marker : NoneType<br ALIGN="LEFT"/>next_key_marker : NoneType<br ALIGN="LEFT"/>next_marker : NoneType<br ALIGN="LEFT"/>next_token : NoneType<br ALIGN="LEFT"/>next_upload_id_marker : NoneType<br ALIGN="LEFT"/>next_version_id_marker : NoneType<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>prefix<br ALIGN="LEFT"/>status : bool<br ALIGN="LEFT"/>upload_id_marker<br ALIGN="LEFT"/>version_id_marker : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_boolean(value, true_value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.results.ResultSet" [color="black", fontcolor="black", label=<{ResultSet|call_args : list, tuple<br ALIGN="LEFT"/>call_kwargs : dict<br ALIGN="LEFT"/>first_key<br ALIGN="LEFT"/>next<br ALIGN="LEFT"/>the_callable : NoneType<br ALIGN="LEFT"/>|fetch_more()<br ALIGN="LEFT"/>to_call(the_callable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.ResumableDownloadException" [color="black", fontcolor="red", label=<{ResumableDownloadException|disposition<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.resumable_download_handler.ResumableDownloadHandler" [color="black", fontcolor="black", label=<{ResumableDownloadHandler|MIN_ETAG_LEN : int<br ALIGN="LEFT"/>RETRYABLE_EXCEPTIONS : tuple<br ALIGN="LEFT"/>download_start_point : NoneType, int<br ALIGN="LEFT"/>etag_value_for_current_download : NoneType<br ALIGN="LEFT"/>num_retries : NoneType<br ALIGN="LEFT"/>tracker_file_name : NoneType<br ALIGN="LEFT"/>|get_file(key, fp, headers, cb, num_cb, torrent, version_id, hash_algs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.ResumableTransferDisposition" [color="black", fontcolor="black", label=<{ResumableTransferDisposition|ABORT : str<br ALIGN="LEFT"/>ABORT_CUR_PROCESS : str<br ALIGN="LEFT"/>START_OVER : str<br ALIGN="LEFT"/>WAIT_BEFORE_RETRY : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.ResumableUploadException" [color="black", fontcolor="red", label=<{ResumableUploadException|disposition<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.gs.resumable_upload_handler.ResumableUploadHandler" [color="black", fontcolor="black", label=<{ResumableUploadHandler|BUFFER_SIZE : int<br ALIGN="LEFT"/>RETRYABLE_EXCEPTIONS : tuple<br ALIGN="LEFT"/>SERVER_HAS_NOTHING : tuple<br ALIGN="LEFT"/>digesters : dict<br ALIGN="LEFT"/>digesters_before_attempt : dict<br ALIGN="LEFT"/>generation<br ALIGN="LEFT"/>metageneration<br ALIGN="LEFT"/>num_retries : NoneType<br ALIGN="LEFT"/>progress_less_iterations : int<br ALIGN="LEFT"/>server_has_bytes : int<br ALIGN="LEFT"/>tracker_file_name : NoneType<br ALIGN="LEFT"/>tracker_uri : NoneType<br ALIGN="LEFT"/>tracker_uri_host<br ALIGN="LEFT"/>tracker_uri_path<br ALIGN="LEFT"/>upload_start_point : NoneType, int<br ALIGN="LEFT"/>|get_tracker_uri()<br ALIGN="LEFT"/>get_upload_id()<br ALIGN="LEFT"/>handle_resumable_upload_exception(e, debug)<br ALIGN="LEFT"/>send_file(key, fp, headers, cb, num_cb, hash_algs)<br ALIGN="LEFT"/>track_progress_less_iterations(server_had_bytes_before_attempt, roll_back_md5, debug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.RetriableResponseError" [color="black", fontcolor="red", label=<{RetriableResponseError|retry : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.exception.RetriableResponseError" [color="black", fontcolor="red", label=<{RetriableResponseError|retry : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.RetrieveEnvironmentInfoResponse" [color="black", fontcolor="black", label=<{RetrieveEnvironmentInfoResponse|environment_info : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.RevisionDoesNotExistException" [color="black", fontcolor="red", label=<{RevisionDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.RevisionRequiredException" [color="black", fontcolor="red", label=<{RevisionRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.codedeploy.exceptions.RoleRequiredException" [color="black", fontcolor="red", label=<{RoleRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vpc.routetable.Route" [color="black", fontcolor="black", label=<{Route|destination_cidr_block : NoneType<br ALIGN="LEFT"/>gateway_id : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>interface_id : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>vpc_peering_connection_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.connection.Route53Connection" [color="black", fontcolor="black", label=<{Route53Connection|DefaultHost : str<br ALIGN="LEFT"/>POSTHCXMLBody : str<br ALIGN="LEFT"/>Version : str<br ALIGN="LEFT"/>XMLNameSpace : str<br ALIGN="LEFT"/>|change_rrsets(hosted_zone_id, xml_body)<br ALIGN="LEFT"/>create_health_check(health_check, caller_ref)<br ALIGN="LEFT"/>create_hosted_zone(domain_name, caller_ref, comment, private_zone, vpc_id, vpc_region)<br ALIGN="LEFT"/>create_zone(name, private_zone, vpc_id, vpc_region)<br ALIGN="LEFT"/>delete_health_check(health_check_id)<br ALIGN="LEFT"/>delete_hosted_zone(hosted_zone_id)<br ALIGN="LEFT"/>get_all_hosted_zones(start_marker, zone_list)<br ALIGN="LEFT"/>get_all_rrsets(hosted_zone_id, type, name, identifier, maxitems)<br ALIGN="LEFT"/>get_change(change_id)<br ALIGN="LEFT"/>get_checker_ip_ranges()<br ALIGN="LEFT"/>get_hosted_zone(hosted_zone_id)<br ALIGN="LEFT"/>get_hosted_zone_by_name(hosted_zone_name)<br ALIGN="LEFT"/>get_list_health_checks(maxitems, marker)<br ALIGN="LEFT"/>get_zone(name)<br ALIGN="LEFT"/>get_zones()<br ALIGN="LEFT"/>make_request(action, path, headers, data, params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.domains.layer1.Route53DomainsConnection" [color="black", fontcolor="black", label=<{Route53DomainsConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|check_domain_availability(domain_name, idn_lang_code)<br ALIGN="LEFT"/>disable_domain_transfer_lock(domain_name)<br ALIGN="LEFT"/>enable_domain_transfer_lock(domain_name)<br ALIGN="LEFT"/>get_domain_detail(domain_name)<br ALIGN="LEFT"/>get_operation_detail(operation_id)<br ALIGN="LEFT"/>list_domains(marker, max_items)<br ALIGN="LEFT"/>list_operations(marker, max_items)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>register_domain(domain_name, duration_in_years, admin_contact, registrant_contact, tech_contact, idn_lang_code, auto_renew, privacy_protect_admin_contact, privacy_protect_registrant_contact, privacy_protect_tech_contact)<br ALIGN="LEFT"/>retrieve_domain_auth_code(domain_name)<br ALIGN="LEFT"/>transfer_domain(domain_name, duration_in_years, nameservers, admin_contact, registrant_contact, tech_contact, idn_lang_code, auth_code, auto_renew, privacy_protect_admin_contact, privacy_protect_registrant_contact, privacy_protect_tech_contact)<br ALIGN="LEFT"/>update_domain_contact(domain_name, admin_contact, registrant_contact, tech_contact)<br ALIGN="LEFT"/>update_domain_contact_privacy(domain_name, admin_privacy, registrant_privacy, tech_privacy)<br ALIGN="LEFT"/>update_domain_nameservers(domain_name, nameservers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.Route53RegionInfo" [color="black", fontcolor="black", label=<{Route53RegionInfo|<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.routetable.RouteAssociation" [color="black", fontcolor="black", label=<{RouteAssociation|id : NoneType<br ALIGN="LEFT"/>main : bool<br ALIGN="LEFT"/>route_table_id : NoneType<br ALIGN="LEFT"/>subnet_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.routetable.RouteTable" [color="black", fontcolor="black", label=<{RouteTable|associations : list<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>routes : list<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.website.RoutingRule" [color="black", fontcolor="black", label=<{RoutingRule|condition : NoneType<br ALIGN="LEFT"/>redirect : NoneType<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>then_redirect(hostname, protocol, replace_key, replace_key_prefix, http_redirect_code)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>when(key_prefix, http_error_code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.website.RoutingRules" [color="black", fontcolor="black", label=<{RoutingRules|<br ALIGN="LEFT"/>|add_rule(rule)<br ALIGN="LEFT"/><I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.lifecycle.Rule" [color="black", fontcolor="black", label=<{Rule|action : NoneType<br ALIGN="LEFT"/>action_params : dict<br ALIGN="LEFT"/>conditions : dict<br ALIGN="LEFT"/>current_tag : NoneType, str<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>validateEndTag(tag)<br ALIGN="LEFT"/>validateStartTag(tag, parent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.lifecycle.Rule" [color="black", fontcolor="black", label=<{Rule|expiration : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>prefix : NoneType, str<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>transition : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.RunJobFlowResponse" [color="black", fontcolor="black", label=<{RunJobFlowResponse|Fields : set<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.S3BucketDoesNotExistException" [color="black", fontcolor="red", label=<{S3BucketDoesNotExistException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.connection.S3Connection" [color="black", fontcolor="black", label=<{S3Connection|DefaultCallingFormat : object<br ALIGN="LEFT"/>DefaultHost : object<br ALIGN="LEFT"/>QueryString : str<br ALIGN="LEFT"/>anon : bool<br ALIGN="LEFT"/>bucket_class<br ALIGN="LEFT"/>calling_format<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>|build_post_form_args(bucket_name, key, expires_in, acl, success_action_redirect, max_content_length, http_method, fields, conditions, storage_class, server_side_encryption)<br ALIGN="LEFT"/>build_post_policy(expiration_time, conditions)<br ALIGN="LEFT"/>create_bucket(bucket_name, headers, location, policy)<br ALIGN="LEFT"/>delete_bucket(bucket, headers)<br ALIGN="LEFT"/>generate_url(expires_in, method, bucket, key, headers, query_auth, force_http, response_headers, expires_in_absolute, version_id)<br ALIGN="LEFT"/>generate_url_sigv4(expires_in, method, bucket, key, headers, force_http, response_headers, version_id, iso_date)<br ALIGN="LEFT"/>get_all_buckets(headers)<br ALIGN="LEFT"/>get_bucket(bucket_name, validate, headers)<br ALIGN="LEFT"/>get_canonical_user_id(headers)<br ALIGN="LEFT"/>head_bucket(bucket_name, headers)<br ALIGN="LEFT"/>lookup(bucket_name, validate, headers)<br ALIGN="LEFT"/>make_request(method, bucket, key, headers, data, query_args, sender, override_num_retries, retry_handler)<br ALIGN="LEFT"/>set_bucket_class(bucket_class)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.S3CopyError" [color="black", fontcolor="red", label=<{S3CopyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.S3CreateError" [color="black", fontcolor="red", label=<{S3CreateError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.S3DataError" [color="black", fontcolor="red", label=<{S3DataError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.S3HmacAuthV4Handler" [color="black", fontcolor="black", label=<{S3HmacAuthV4Handler|capability : list<br ALIGN="LEFT"/>region_name : NoneType<br ALIGN="LEFT"/>|add_auth(req)<br ALIGN="LEFT"/>canonical_query_string(http_request)<br ALIGN="LEFT"/>canonical_uri(http_request)<br ALIGN="LEFT"/>clean_region_name(region_name)<br ALIGN="LEFT"/>determine_region_name(host)<br ALIGN="LEFT"/>determine_service_name(host)<br ALIGN="LEFT"/>headers_to_sign(http_request)<br ALIGN="LEFT"/>host_header(host, http_request)<br ALIGN="LEFT"/>mangle_path_and_params(req)<br ALIGN="LEFT"/>payload(http_request)<br ALIGN="LEFT"/>presign(req, expires, iso_date)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.S3KeyProperty" [color="black", fontcolor="black", label=<{S3KeyProperty|data_type<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>validate_regex : str<br ALIGN="LEFT"/>|get_value_for_datastore(model_instance)<br ALIGN="LEFT"/>validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.S3Location" [color="black", fontcolor="black", label=<{S3Location|s3_bucket : str<br ALIGN="LEFT"/>s3_key : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.S3LocationNotInServiceRegion" [color="black", fontcolor="red", label=<{S3LocationNotInServiceRegion|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudfront.origin.S3Origin" [color="black", fontcolor="black", label=<{S3Origin|dns_name : NoneType<br ALIGN="LEFT"/>origin_access_identity : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.S3PermissionsError" [color="black", fontcolor="red", label=<{S3PermissionsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.S3RegionInfo" [color="black", fontcolor="black", label=<{S3RegionInfo|<br ALIGN="LEFT"/>|connect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.S3ResponseError" [color="black", fontcolor="red", label=<{S3ResponseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.S3SubscriptionRequired" [color="black", fontcolor="red", label=<{S3SubscriptionRequired|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.bucket.S3WebsiteEndpointTranslate" [color="black", fontcolor="black", label=<{S3WebsiteEndpointTranslate|trans_region : defaultdict<br ALIGN="LEFT"/>|translate_region(reg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.connection.SDBConnection" [color="black", fontcolor="black", label=<{SDBConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>box_usage : float<br ALIGN="LEFT"/>converter : NoneType<br ALIGN="LEFT"/>item_cls<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|batch_delete_attributes(domain_or_name, items)<br ALIGN="LEFT"/>batch_put_attributes(domain_or_name, items, replace)<br ALIGN="LEFT"/>create_domain(domain_name)<br ALIGN="LEFT"/>delete_attributes(domain_or_name, item_name, attr_names, expected_value)<br ALIGN="LEFT"/>delete_domain(domain_or_name)<br ALIGN="LEFT"/>domain_metadata(domain_or_name)<br ALIGN="LEFT"/>get_all_domains(max_domains, next_token)<br ALIGN="LEFT"/>get_attributes(domain_or_name, item_name, attribute_names, consistent_read, item)<br ALIGN="LEFT"/>get_domain(domain_name, validate)<br ALIGN="LEFT"/>get_domain_and_name(domain_or_name)<br ALIGN="LEFT"/>get_usage()<br ALIGN="LEFT"/>lookup(domain_name, validate)<br ALIGN="LEFT"/>print_usage()<br ALIGN="LEFT"/>put_attributes(domain_or_name, item_name, attributes, replace, expected_value)<br ALIGN="LEFT"/>select(domain_or_name, query, next_token, consistent_read)<br ALIGN="LEFT"/>set_item_cls(cls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.manager.sdbmanager.SDBConverter" [color="black", fontcolor="black", label=<{SDBConverter|encode_time<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>model_class<br ALIGN="LEFT"/>type_map : dict<br ALIGN="LEFT"/>|decode(item_type, value)<br ALIGN="LEFT"/>decode_blob(value)<br ALIGN="LEFT"/>decode_bool(value)<br ALIGN="LEFT"/>decode_date(value)<br ALIGN="LEFT"/>decode_datetime(value)<br ALIGN="LEFT"/>decode_float(value)<br ALIGN="LEFT"/>decode_int(value)<br ALIGN="LEFT"/>decode_list(prop, value)<br ALIGN="LEFT"/>decode_long(value)<br ALIGN="LEFT"/>decode_map(prop, value)<br ALIGN="LEFT"/>decode_map_element(item_type, value)<br ALIGN="LEFT"/>decode_prop(prop, value)<br ALIGN="LEFT"/>decode_reference(value)<br ALIGN="LEFT"/>decode_string(value)<br ALIGN="LEFT"/>decode_time(value)<br ALIGN="LEFT"/>encode(item_type, value)<br ALIGN="LEFT"/>encode_blob(value)<br ALIGN="LEFT"/>encode_bool(value)<br ALIGN="LEFT"/>encode_date(value)<br ALIGN="LEFT"/>encode_datetime(value)<br ALIGN="LEFT"/>encode_float(value)<br ALIGN="LEFT"/>encode_int(value)<br ALIGN="LEFT"/>encode_list(prop, value)<br ALIGN="LEFT"/>encode_long(value)<br ALIGN="LEFT"/>encode_map(prop, value)<br ALIGN="LEFT"/>encode_prop(prop, value)<br ALIGN="LEFT"/>encode_reference(value)<br ALIGN="LEFT"/>encode_string(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.manager.sdbmanager.SDBManager" [color="black", fontcolor="black", label=<{SDBManager|bucket : NoneType<br ALIGN="LEFT"/>cls<br ALIGN="LEFT"/>consistent : NoneType<br ALIGN="LEFT"/>converter<br ALIGN="LEFT"/>db_host<br ALIGN="LEFT"/>db_name<br ALIGN="LEFT"/>db_passwd<br ALIGN="LEFT"/>db_port<br ALIGN="LEFT"/>db_table<br ALIGN="LEFT"/>db_user<br ALIGN="LEFT"/>ddl_dir<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>enable_ssl<br ALIGN="LEFT"/>s3 : NoneType<br ALIGN="LEFT"/>sdb<br ALIGN="LEFT"/>|count(cls, filters, quick, sort_by, select)<br ALIGN="LEFT"/>decode_value(prop, value)<br ALIGN="LEFT"/>delete_key_value(obj, name)<br ALIGN="LEFT"/>delete_object(obj)<br ALIGN="LEFT"/>encode_value(prop, value)<br ALIGN="LEFT"/>get_blob_bucket(bucket_name)<br ALIGN="LEFT"/>get_key_value(obj, name)<br ALIGN="LEFT"/>get_object(cls, id, a)<br ALIGN="LEFT"/>get_object_from_id(id)<br ALIGN="LEFT"/>get_property(prop, obj, name)<br ALIGN="LEFT"/>get_raw_item(obj)<br ALIGN="LEFT"/>get_s3_connection()<br ALIGN="LEFT"/>load_object(obj)<br ALIGN="LEFT"/>query(query)<br ALIGN="LEFT"/><I>query_gql</I>(query_string)<br ALIGN="LEFT"/>save_object(obj, expected_value)<br ALIGN="LEFT"/>set_key_value(obj, name, value)<br ALIGN="LEFT"/>set_property(prop, obj, name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.SDBPersistenceError" [color="black", fontcolor="red", label=<{SDBPersistenceError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.regioninfo.SDBRegionInfo" [color="black", fontcolor="black", label=<{SDBRegionInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.SDBResponseError" [color="black", fontcolor="red", label=<{SDBResponseError|body<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESAddressBlacklistedError" [color="black", fontcolor="red", label=<{SESAddressBlacklistedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESAddressNotVerifiedError" [color="black", fontcolor="red", label=<{SESAddressNotVerifiedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.connection.SESConnection" [color="black", fontcolor="black", label=<{SESConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|delete_identity(identity)<br ALIGN="LEFT"/>delete_verified_email_address(email_address)<br ALIGN="LEFT"/>get_identity_dkim_attributes(identities)<br ALIGN="LEFT"/>get_identity_verification_attributes(identities)<br ALIGN="LEFT"/>get_send_quota()<br ALIGN="LEFT"/>get_send_statistics()<br ALIGN="LEFT"/>list_identities()<br ALIGN="LEFT"/>list_verified_email_addresses()<br ALIGN="LEFT"/>send_email(source, subject, body, to_addresses, cc_addresses, bcc_addresses, format, reply_addresses, return_path, text_body, html_body)<br ALIGN="LEFT"/>send_raw_email(raw_message, source, destinations)<br ALIGN="LEFT"/>set_identity_dkim_enabled(identity, dkim_enabled)<br ALIGN="LEFT"/>set_identity_feedback_forwarding_enabled(identity, forwarding_enabled)<br ALIGN="LEFT"/>set_identity_notification_topic(identity, notification_type, sns_topic)<br ALIGN="LEFT"/>verify_domain_dkim(domain)<br ALIGN="LEFT"/>verify_domain_identity(domain)<br ALIGN="LEFT"/>verify_email_address(email_address)<br ALIGN="LEFT"/>verify_email_identity(email_address)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ses.exceptions.SESDailyQuotaExceededError" [color="black", fontcolor="red", label=<{SESDailyQuotaExceededError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESDomainEndsWithDotError" [color="black", fontcolor="red", label=<{SESDomainEndsWithDotError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESDomainNotConfirmedError" [color="black", fontcolor="red", label=<{SESDomainNotConfirmedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESError" [color="black", fontcolor="red", label=<{SESError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESIdentityNotVerifiedError" [color="black", fontcolor="red", label=<{SESIdentityNotVerifiedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESIllegalAddressError" [color="black", fontcolor="red", label=<{SESIllegalAddressError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESLocalAddressCharacterError" [color="black", fontcolor="red", label=<{SESLocalAddressCharacterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ses.exceptions.SESMaxSendingRateExceededError" [color="black", fontcolor="red", label=<{SESMaxSendingRateExceededError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sns.connection.SNSConnection" [color="black", fontcolor="black", label=<{SNSConnection|APIVersion : object<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|add_permission(topic, label, account_ids, actions)<br ALIGN="LEFT"/>confirm_subscription(topic, token, authenticate_on_unsubscribe)<br ALIGN="LEFT"/>create_platform_application(name, platform, attributes)<br ALIGN="LEFT"/>create_platform_endpoint(platform_application_arn, token, custom_user_data, attributes)<br ALIGN="LEFT"/>create_topic(topic)<br ALIGN="LEFT"/>delete_endpoint(endpoint_arn)<br ALIGN="LEFT"/>delete_platform_application(platform_application_arn)<br ALIGN="LEFT"/>delete_topic(topic)<br ALIGN="LEFT"/>get_all_subscriptions(next_token)<br ALIGN="LEFT"/>get_all_subscriptions_by_topic(topic, next_token)<br ALIGN="LEFT"/>get_all_topics(next_token)<br ALIGN="LEFT"/>get_endpoint_attributes(endpoint_arn)<br ALIGN="LEFT"/>get_platform_application_attributes(platform_application_arn)<br ALIGN="LEFT"/>get_topic_attributes(topic)<br ALIGN="LEFT"/>list_endpoints_by_platform_application(platform_application_arn, next_token)<br ALIGN="LEFT"/>list_platform_applications(next_token)<br ALIGN="LEFT"/>publish(topic, message, subject, target_arn, message_structure, message_attributes)<br ALIGN="LEFT"/>remove_permission(topic, label)<br ALIGN="LEFT"/>set_endpoint_attributes(endpoint_arn, attributes)<br ALIGN="LEFT"/>set_platform_application_attributes(platform_application_arn, attributes)<br ALIGN="LEFT"/>set_topic_attributes(topic, attr_name, attr_value)<br ALIGN="LEFT"/>subscribe(topic, protocol, endpoint)<br ALIGN="LEFT"/>subscribe_sqs_queue(topic, queue)<br ALIGN="LEFT"/>unsubscribe(subscription)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.SNSInvalidTopic" [color="black", fontcolor="red", label=<{SNSInvalidTopic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SNSInvalidTopic" [color="black", fontcolor="red", label=<{SNSInvalidTopic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SNSNoAuthorization" [color="black", fontcolor="red", label=<{SNSNoAuthorization|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SNSNoAuthorization" [color="black", fontcolor="red", label=<{SNSNoAuthorization|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SNSTopicArnNotFound" [color="black", fontcolor="red", label=<{SNSTopicArnNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SNSTopicArnNotFound" [color="black", fontcolor="red", label=<{SNSTopicArnNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sqs.connection.SQSConnection" [color="black", fontcolor="black", label=<{SQSConnection|APIVersion : object<br ALIGN="LEFT"/>AuthServiceName : str<br ALIGN="LEFT"/>DefaultContentType : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : object<br ALIGN="LEFT"/>DefaultRegionName : object<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>auth_region_name : NoneType<br ALIGN="LEFT"/>lookup<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|add_permission(queue, label, aws_account_id, action_name)<br ALIGN="LEFT"/>change_message_visibility(queue, receipt_handle, visibility_timeout)<br ALIGN="LEFT"/>change_message_visibility_batch(queue, messages)<br ALIGN="LEFT"/>create_queue(queue_name, visibility_timeout)<br ALIGN="LEFT"/>delete_message(queue, message)<br ALIGN="LEFT"/>delete_message_batch(queue, messages)<br ALIGN="LEFT"/>delete_message_from_handle(queue, receipt_handle)<br ALIGN="LEFT"/>delete_queue(queue, force_deletion)<br ALIGN="LEFT"/>get_all_queues(prefix)<br ALIGN="LEFT"/>get_dead_letter_source_queues(queue)<br ALIGN="LEFT"/>get_queue(queue_name, owner_acct_id)<br ALIGN="LEFT"/>get_queue_attributes(queue, attribute)<br ALIGN="LEFT"/>purge_queue(queue)<br ALIGN="LEFT"/>receive_message(queue, number_messages, visibility_timeout, attributes, wait_time_seconds, message_attributes)<br ALIGN="LEFT"/>remove_permission(queue, label)<br ALIGN="LEFT"/>send_message(queue, message_content, delay_seconds, message_attributes)<br ALIGN="LEFT"/>send_message_batch(queue, messages)<br ALIGN="LEFT"/>set_queue_attribute(queue, attribute, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.SQSDecodeError" [color="black", fontcolor="red", label=<{SQSDecodeError|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.SQSError" [color="black", fontcolor="red", label=<{SQSError|detail : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sqs.regioninfo.SQSRegionInfo" [color="black", fontcolor="black", label=<{SQSRegionInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.manage.cmdshell.SSHClient" [color="black", fontcolor="black", label=<{SSHClient|host_key_file : str<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>uname : str<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>connect(num_retries)<br ALIGN="LEFT"/>exists(path)<br ALIGN="LEFT"/>get_file(src, dst)<br ALIGN="LEFT"/>isdir(path)<br ALIGN="LEFT"/>listdir(path)<br ALIGN="LEFT"/>open(filename, mode, bufsize)<br ALIGN="LEFT"/>open_sftp()<br ALIGN="LEFT"/>put_file(src, dst)<br ALIGN="LEFT"/>run(command)<br ALIGN="LEFT"/>run_pty(command)<br ALIGN="LEFT"/>shell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.auth.STSAnonHandler" [color="black", fontcolor="black", label=<{STSAnonHandler|capability : list<br ALIGN="LEFT"/>|add_auth(http_request)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sts.connection.STSConnection" [color="black", fontcolor="black", label=<{STSConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>anon : bool<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|assume_role(role_arn, role_session_name, policy, duration_seconds, external_id, mfa_serial_number, mfa_token)<br ALIGN="LEFT"/>assume_role_with_saml(role_arn, principal_arn, saml_assertion, policy, duration_seconds)<br ALIGN="LEFT"/>assume_role_with_web_identity(role_arn, role_session_name, web_identity_token, provider_id, policy, duration_seconds)<br ALIGN="LEFT"/>decode_authorization_message(encoded_message)<br ALIGN="LEFT"/>get_federation_token(name, duration, policy)<br ALIGN="LEFT"/>get_session_token(duration, force_new, mfa_serial_number, mfa_token)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.SWFBase" [color="black", fontcolor="black", label=<{SWFBase|aws_access_key_id : NoneType<br ALIGN="LEFT"/>aws_secret_access_key : NoneType<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.swf.exceptions.SWFDomainAlreadyExistsError" [color="black", fontcolor="red", label=<{SWFDomainAlreadyExistsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.swf.exceptions.SWFLimitExceededError" [color="black", fontcolor="red", label=<{SWFLimitExceededError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.swf.exceptions.SWFOperationNotPermittedError" [color="black", fontcolor="red", label=<{SWFOperationNotPermittedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.SWFResponseError" [color="black", fontcolor="red", label=<{SWFResponseError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.swf.exceptions.SWFTypeAlreadyExistsError" [color="black", fontcolor="red", label=<{SWFTypeAlreadyExistsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.swf.exceptions.SWFWorkflowExecutionAlreadyStartedError" [color="black", fontcolor="red", label=<{SWFWorkflowExecutionAlreadyStartedError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.SalesRank" [color="black", fontcolor="black", label=<{SalesRank|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.SameSenderAndRecipient" [color="black", fontcolor="red", label=<{SameSenderAndRecipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.SameTokenIdUsedMultipleTimes" [color="black", fontcolor="red", label=<{SameTokenIdUsedMultipleTimes|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.optionstatus.ScalingParametersStatus" [color="black", fontcolor="black", label=<{ScalingParametersStatus|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.ScalingPolicy" [color="black", fontcolor="black", label=<{ScalingPolicy|adjustment_type<br ALIGN="LEFT"/>alarms<br ALIGN="LEFT"/>as_name<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>cooldown : int<br ALIGN="LEFT"/>min_adjustment_step : int<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>policy_arn<br ALIGN="LEFT"/>scaling_adjustment : int<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.scheduled.ScheduledUpdateGroupAction" [color="black", fontcolor="black", label=<{ScheduledUpdateGroupAction|action_arn : NoneType<br ALIGN="LEFT"/>as_group : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>desired_capacity : NoneType<br ALIGN="LEFT"/>end_time : NoneType, datetime<br ALIGN="LEFT"/>max_size : NoneType, int<br ALIGN="LEFT"/>min_size : NoneType, int<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>recurrence : NoneType<br ALIGN="LEFT"/>start_time : NoneType, datetime<br ALIGN="LEFT"/>time : NoneType, datetime<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.schema.Schema" [color="black", fontcolor="black", label=<{Schema|dict<br ALIGN="LEFT"/>hash_key_name<br ALIGN="LEFT"/>hash_key_type<br ALIGN="LEFT"/>range_key_name<br ALIGN="LEFT"/>range_key_type<br ALIGN="LEFT"/>|create(hash_key, range_key)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.acl.Scope" [color="black", fontcolor="black", label=<{Scope|ALLOWED_SCOPE_TYPE_SUB_ELEMS : dict<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>email_address : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.scriptbase.ScriptBase" [color="black", fontcolor="black", label=<{ScriptBase|instance_id : object<br ALIGN="LEFT"/>last_command<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>ts<br ALIGN="LEFT"/>|<I>main</I>()<br ALIGN="LEFT"/>mkdir(path)<br ALIGN="LEFT"/>notify(subject, body)<br ALIGN="LEFT"/>run(command, notify, exit_on_error, cwd)<br ALIGN="LEFT"/>umount(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.step.ScriptRunnerStep" [color="black", fontcolor="black", label=<{ScriptRunnerStep|ScriptRunnerJar : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.search.SearchConnection" [color="black", fontcolor="black", label=<{SearchConnection|domain : NoneType<br ALIGN="LEFT"/>endpoint : NoneType<br ALIGN="LEFT"/>|build_query(q, bq, rank, return_fields, size, start, facet, facet_constraints, facet_sort, facet_top_n, t)<br ALIGN="LEFT"/>get_all_hits(query)<br ALIGN="LEFT"/>get_all_paged(query, per_page)<br ALIGN="LEFT"/>get_num_hits(query)<br ALIGN="LEFT"/>search(q, bq, rank, return_fields, size, start, facet, facet_constraints, facet_sort, facet_top_n, t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.search.SearchConnection" [color="black", fontcolor="black", label=<{SearchConnection|domain : NoneType<br ALIGN="LEFT"/>domain_connection<br ALIGN="LEFT"/>endpoint : NoneType<br ALIGN="LEFT"/>session<br ALIGN="LEFT"/>sign_request : bool<br ALIGN="LEFT"/>|build_query(q, parser, fq, rank, return_fields, size, start, facet, highlight, sort, partial, options)<br ALIGN="LEFT"/>get_all_hits(query)<br ALIGN="LEFT"/>get_all_paged(query, per_page)<br ALIGN="LEFT"/>get_num_hits(query)<br ALIGN="LEFT"/>search(q, parser, fq, rank, return_fields, size, start, facet, highlight, sort, partial, options)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearchdomain.exceptions.SearchException" [color="black", fontcolor="red", label=<{SearchException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.search.SearchResults" [color="black", fontcolor="black", label=<{SearchResults|cpu_time_ms<br ALIGN="LEFT"/>docs<br ALIGN="LEFT"/>facets : dict<br ALIGN="LEFT"/>hits<br ALIGN="LEFT"/>match_expression<br ALIGN="LEFT"/>num_pages_needed<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>rank<br ALIGN="LEFT"/>rid<br ALIGN="LEFT"/>search_service<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>time_ms<br ALIGN="LEFT"/>|next_page()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.search.SearchResults" [color="black", fontcolor="black", label=<{SearchResults|docs<br ALIGN="LEFT"/>facets : dict<br ALIGN="LEFT"/>hits<br ALIGN="LEFT"/>num_pages_needed<br ALIGN="LEFT"/>query<br ALIGN="LEFT"/>rid<br ALIGN="LEFT"/>search_service<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>time_ms<br ALIGN="LEFT"/>|next_page()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.document.SearchServiceException" [color="black", fontcolor="red", label=<{SearchServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch.search.SearchServiceException" [color="black", fontcolor="red", label=<{SearchServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.document.SearchServiceException" [color="black", fontcolor="red", label=<{SearchServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudsearch2.search.SearchServiceException" [color="black", fontcolor="red", label=<{SearchServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.securitygroup.SecurityGroup" [color="black", fontcolor="black", label=<{SecurityGroup|description : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>rules<br ALIGN="LEFT"/>rules_egress<br ALIGN="LEFT"/>status : bool<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|add_rule(ip_protocol, from_port, to_port, src_group_name, src_group_owner_id, cidr_ip, src_group_group_id, dry_run)<br ALIGN="LEFT"/>authorize(ip_protocol, from_port, to_port, cidr_ip, src_group, dry_run)<br ALIGN="LEFT"/>copy_to_region(region, name, dry_run)<br ALIGN="LEFT"/>delete(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>instances(dry_run)<br ALIGN="LEFT"/>remove_rule(ip_protocol, from_port, to_port, src_group_name, src_group_owner_id, cidr_ip, src_group_group_id, dry_run)<br ALIGN="LEFT"/>revoke(ip_protocol, from_port, to_port, cidr_ip, src_group, dry_run)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.elb.securitygroup.SecurityGroup" [color="black", fontcolor="black", label=<{SecurityGroup|name : NoneType<br ALIGN="LEFT"/>owner_alias : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.queryresultset.SelectResultSet" [color="black", fontcolor="black", label=<{SelectResultSet|consistent_read : bool<br ALIGN="LEFT"/>domain : NoneType<br ALIGN="LEFT"/>max_items : NoneType<br ALIGN="LEFT"/>next_token : NoneType<br ALIGN="LEFT"/>query : str<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.SelectionAnswer" [color="black", fontcolor="black", label=<{SelectionAnswer|ACCEPTED_STYLES : list<br ALIGN="LEFT"/>MAX_SELECTION_COUNT_XML_TEMPLATE : str<br ALIGN="LEFT"/>MIN_SELECTION_COUNT_XML_TEMPLATE : str<br ALIGN="LEFT"/>OTHER_SELECTION_ELEMENT_NAME : str<br ALIGN="LEFT"/>SELECTIONANSWER_XML_TEMPLATE : str<br ALIGN="LEFT"/>SELECTION_VALUE_XML_TEMPLATE : str<br ALIGN="LEFT"/>SELECTION_XML_TEMPLATE : str<br ALIGN="LEFT"/>STYLE_XML_TEMPLATE : str<br ALIGN="LEFT"/>max_selections : int<br ALIGN="LEFT"/>min_selections : int<br ALIGN="LEFT"/>other : bool<br ALIGN="LEFT"/>selections<br ALIGN="LEFT"/>style_suggestion : NoneType<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.SenderNotOriginalRecipient" [color="black", fontcolor="red", label=<{SenderNotOriginalRecipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.sequence.Sequence" [color="black", fontcolor="black", label=<{Sequence|db<br ALIGN="LEFT"/>domain_name : NoneType, object<br ALIGN="LEFT"/>fnc : NoneType<br ALIGN="LEFT"/>id : NoneType, str<br ALIGN="LEFT"/>item_type<br ALIGN="LEFT"/>last_value : NoneType<br ALIGN="LEFT"/>timestamp : NoneType<br ALIGN="LEFT"/>val<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>set(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.sequence.SequenceGenerator" [color="black", fontcolor="black", label=<{SequenceGenerator|last_item<br ALIGN="LEFT"/>rollover : bool<br ALIGN="LEFT"/>sequence_length<br ALIGN="LEFT"/>sequence_string<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.manage.server.Server" [color="black", fontcolor="black", label=<{Server|ami_id<br ALIGN="LEFT"/>console_output<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>ec2 : NoneType<br ALIGN="LEFT"/>elastic_ip<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>hostname<br ALIGN="LEFT"/>instance_id<br ALIGN="LEFT"/>instance_type<br ALIGN="LEFT"/>key_name<br ALIGN="LEFT"/>launch_time<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>packages : list<br ALIGN="LEFT"/>plugins : list<br ALIGN="LEFT"/>private_hostname<br ALIGN="LEFT"/>production<br ALIGN="LEFT"/>region_name<br ALIGN="LEFT"/>security_group<br ALIGN="LEFT"/>ssh_key_file : NoneType, str<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>zone<br ALIGN="LEFT"/>|add_credentials(cfg, aws_access_key_id, aws_secret_access_key)<br ALIGN="LEFT"/>create(config_file, logical_volume, cfg)<br ALIGN="LEFT"/>create_from_current_instances()<br ALIGN="LEFT"/>create_from_instance_id(instance_id, name, description)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>get_bundler(uname)<br ALIGN="LEFT"/>get_cmdshell()<br ALIGN="LEFT"/>get_ssh_client(uname, ssh_pwd)<br ALIGN="LEFT"/>get_ssh_key_file()<br ALIGN="LEFT"/>install(pkg)<br ALIGN="LEFT"/>put()<br ALIGN="LEFT"/>reboot()<br ALIGN="LEFT"/>reset_cmdshell()<br ALIGN="LEFT"/>run(command)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>terminate()<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mashups.server.Server" [color="black", fontcolor="black", label=<{Server|ami<br ALIGN="LEFT"/>ami_id<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>config_uri<br ALIGN="LEFT"/>console_output<br ALIGN="LEFT"/>description<br ALIGN="LEFT"/>ec2<br ALIGN="LEFT"/>elastic_ip<br ALIGN="LEFT"/>groups<br ALIGN="LEFT"/>hostname<br ALIGN="LEFT"/>image_id : NoneType<br ALIGN="LEFT"/>instance<br ALIGN="LEFT"/>instance_id<br ALIGN="LEFT"/>instance_type<br ALIGN="LEFT"/>key_name<br ALIGN="LEFT"/>launch_time<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>private_hostname<br ALIGN="LEFT"/>reservation<br ALIGN="LEFT"/>security_group<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>zone<br ALIGN="LEFT"/>|Inventory()<br ALIGN="LEFT"/>Register(name, instance_id, description)<br ALIGN="LEFT"/>attach_volume(volume, device)<br ALIGN="LEFT"/>bundle_image(prefix, key_file, cert_file, size)<br ALIGN="LEFT"/>create_image(bucket, prefix, key_file, cert_file, size)<br ALIGN="LEFT"/>detach_volume(volume)<br ALIGN="LEFT"/>getAMI()<br ALIGN="LEFT"/>getConfig()<br ALIGN="LEFT"/>getConsoleOutput()<br ALIGN="LEFT"/>getGroups()<br ALIGN="LEFT"/>getHostname()<br ALIGN="LEFT"/>getInstance()<br ALIGN="LEFT"/>getLaunchTime()<br ALIGN="LEFT"/>getPrivateHostname()<br ALIGN="LEFT"/>getStatus()<br ALIGN="LEFT"/>get_file(remotepath, localpath)<br ALIGN="LEFT"/>get_ssh_client(key_file, host_key_file, uname)<br ALIGN="LEFT"/>install_package(package_name)<br ALIGN="LEFT"/>listdir(remotepath)<br ALIGN="LEFT"/>load_config()<br ALIGN="LEFT"/>put_file(localpath, remotepath)<br ALIGN="LEFT"/>reboot()<br ALIGN="LEFT"/>setConfig(config)<br ALIGN="LEFT"/>setReadOnly(value)<br ALIGN="LEFT"/>set_config(config)<br ALIGN="LEFT"/>shell(key_file)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>upload_bundle(bucket, prefix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2containerservice.exceptions.ServerException" [color="black", fontcolor="red", label=<{ServerException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mashups.server.ServerSet" [color="black", fontcolor="black", label=<{ServerSet|map_list : list<br ALIGN="LEFT"/>|map()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.services.service.Service" [color="black", fontcolor="black", label=<{Service|ProcessingTime : int<br ALIGN="LEFT"/>input_queue : NoneType<br ALIGN="LEFT"/>loop_delay : int<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>output_domain : NoneType<br ALIGN="LEFT"/>output_queue : NoneType<br ALIGN="LEFT"/>processing_time : int<br ALIGN="LEFT"/>retry_count : int<br ALIGN="LEFT"/>sd<br ALIGN="LEFT"/>working_dir : object<br ALIGN="LEFT"/>|<I>cleanup</I>()<br ALIGN="LEFT"/>delete_message(message)<br ALIGN="LEFT"/>get_file(message)<br ALIGN="LEFT"/>main(notify)<br ALIGN="LEFT"/>process_file(in_file_name, msg)<br ALIGN="LEFT"/>put_file(bucket_name, file_path, key_name)<br ALIGN="LEFT"/>read_message()<br ALIGN="LEFT"/>save_results(results, input_message, output_message)<br ALIGN="LEFT"/>shutdown()<br ALIGN="LEFT"/>split_key()<br ALIGN="LEFT"/>write_message(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.services.servicedef.ServiceDef" [color="black", fontcolor="black", label=<{ServiceDef|aws_access_key_id : NoneType<br ALIGN="LEFT"/>aws_secret_access_key : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|get(name, default)<br ALIGN="LEFT"/>get_obj(name)<br ALIGN="LEFT"/>getbool(option, default)<br ALIGN="LEFT"/>getint(option, default)<br ALIGN="LEFT"/>has_option(option)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.awslambda.exceptions.ServiceException" [color="black", fontcolor="red", label=<{ServiceException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.services.message.ServiceMessage" [color="black", fontcolor="black", label=<{ServiceMessage|<br ALIGN="LEFT"/>|for_key(key, params, bucket_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.optionstatus.ServicePoliciesStatus" [color="black", fontcolor="black", label=<{ServicePoliciesStatus|<br ALIGN="LEFT"/>|allow_doc_ip(ip)<br ALIGN="LEFT"/>allow_search_ip(ip)<br ALIGN="LEFT"/>disallow_doc_ip(ip)<br ALIGN="LEFT"/>disallow_search_ip(ip)<br ALIGN="LEFT"/>new_statement(arn, ip)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch2.optionstatus.ServicePoliciesStatus" [color="black", fontcolor="black", label=<{ServicePoliciesStatus|<br ALIGN="LEFT"/>|allow_doc_ip(ip)<br ALIGN="LEFT"/>allow_search_ip(ip)<br ALIGN="LEFT"/>disallow_doc_ip(ip)<br ALIGN="LEFT"/>disallow_search_ip(ip)<br ALIGN="LEFT"/>new_statement(arn, ip)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.exception.ServiceUnavailable" [color="black", fontcolor="red", label=<{ServiceUnavailable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.logs.exceptions.ServiceUnavailableException" [color="black", fontcolor="red", label=<{ServiceUnavailableException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.SetOrderReferenceDetailsResult" [color="black", fontcolor="black", label=<{SetOrderReferenceDetailsResult|OrderReferenceDetails<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.SettleAmountGreaterThanDebt" [color="black", fontcolor="red", label=<{SettleAmountGreaterThanDebt|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.SettleAmountGreaterThanReserveAmount" [color="black", fontcolor="red", label=<{SettleAmountGreaterThanReserveAmount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.utils.ShellCommand" [color="black", fontcolor="black", label=<{ShellCommand|command<br ALIGN="LEFT"/>exit_code : int<br ALIGN="LEFT"/>fail_fast : bool<br ALIGN="LEFT"/>log_fp : StringIO<br ALIGN="LEFT"/>output<br ALIGN="LEFT"/>process : Popen<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>wait : bool<br ALIGN="LEFT"/>|getOutput()<br ALIGN="LEFT"/>getStatus()<br ALIGN="LEFT"/>run(cwd)<br ALIGN="LEFT"/>setReadOnly(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.SignatureDoesNotMatch" [color="black", fontcolor="red", label=<{SignatureDoesNotMatch|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudfront.signers.Signer" [color="black", fontcolor="black", label=<{Signer|id : NoneType, str<br ALIGN="LEFT"/>key_pair_ids : list<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.exception.SimpleException" [color="black", fontcolor="red", label=<{SimpleException|error_message : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.SimpleField" [color="black", fontcolor="black", label=<{SimpleField|field<br ALIGN="LEFT"/>template : str<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.SimpleList" [color="black", fontcolor="black", label=<{SimpleList|<br ALIGN="LEFT"/>|end(name, value)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.file.simpleresultset.SimpleResultSet" [color="black", fontcolor="black", label=<{SimpleResultSet|is_truncated : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.snapshot.Snapshot" [color="black", fontcolor="black", label=<{Snapshot|AttrName : str<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>encrypted : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>owner_alias : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>progress : NoneType<br ALIGN="LEFT"/>start_time : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>volume_id : NoneType<br ALIGN="LEFT"/>volume_size : NoneType, int<br ALIGN="LEFT"/>|create_volume(zone, size, volume_type, iops, dry_run)<br ALIGN="LEFT"/>delete(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_permissions(dry_run)<br ALIGN="LEFT"/>reset_permissions(dry_run)<br ALIGN="LEFT"/>share(user_ids, groups, dry_run)<br ALIGN="LEFT"/>unshare(user_ids, groups, dry_run)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.snapshot.SnapshotAttribute" [color="black", fontcolor="black", label=<{SnapshotAttribute|attrs : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>snapshot_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.SnapshotCopyAlreadyDisabled" [color="black", fontcolor="red", label=<{SnapshotCopyAlreadyDisabled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SnapshotCopyAlreadyEnabled" [color="black", fontcolor="red", label=<{SnapshotCopyAlreadyEnabled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SnapshotCopyDisabled" [color="black", fontcolor="red", label=<{SnapshotCopyDisabled|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SnapshotQuotaExceeded" [color="black", fontcolor="red", label=<{SnapshotQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.SolutionStackDescription" [color="black", fontcolor="black", label=<{SolutionStackDescription|permitted_file_types : list<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.services.sonofmmm.SonOfMMM" [color="black", fontcolor="black", label=<{SonOfMMM|command : str<br ALIGN="LEFT"/>input_bucket : NoneType<br ALIGN="LEFT"/>log_file<br ALIGN="LEFT"/>log_path<br ALIGN="LEFT"/>output_bucket : NoneType<br ALIGN="LEFT"/>output_ext : NoneType, object<br ALIGN="LEFT"/>output_mimetype : object<br ALIGN="LEFT"/>|process_file(in_file_name, msg)<br ALIGN="LEFT"/>queue_files()<br ALIGN="LEFT"/>shutdown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudsearch.sourceattribute.SourceAttribute" [color="black", fontcolor="black", label=<{SourceAttribute|ValidDataFunctions : tuple<br ALIGN="LEFT"/>data_copy : dict<br ALIGN="LEFT"/>data_function<br ALIGN="LEFT"/>data_map : dict<br ALIGN="LEFT"/>data_trim_title : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.SourceBundleDeletion" [color="black", fontcolor="red", label=<{SourceBundleDeletion|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SourceNotFound" [color="black", fontcolor="red", label=<{SourceNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SourceNotFound" [color="black", fontcolor="red", label=<{SourceNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription" [color="black", fontcolor="black", label=<{SpotDatafeedSubscription|bucket : NoneType<br ALIGN="LEFT"/>fault : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>prefix : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|delete(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.spotinstancerequest.SpotInstanceRequest" [color="black", fontcolor="black", label=<{SpotInstanceRequest|availability_zone_group : NoneType<br ALIGN="LEFT"/>create_time : NoneType<br ALIGN="LEFT"/>fault : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_id : NoneType<br ALIGN="LEFT"/>launch_group : NoneType<br ALIGN="LEFT"/>launch_specification : NoneType<br ALIGN="LEFT"/>launched_availability_zone : NoneType<br ALIGN="LEFT"/>price : NoneType, float<br ALIGN="LEFT"/>product_description : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>valid_from : NoneType<br ALIGN="LEFT"/>valid_until : NoneType<br ALIGN="LEFT"/>|cancel(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.spotinstancerequest.SpotInstanceStateFault" [color="black", fontcolor="black", label=<{SpotInstanceStateFault|code : NoneType<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.spotinstancerequest.SpotInstanceStatus" [color="black", fontcolor="black", label=<{SpotInstanceStatus|code : NoneType<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>update_time : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.spotpricehistory.SpotPriceHistory" [color="black", fontcolor="black", label=<{SpotPriceHistory|availability_zone : NoneType<br ALIGN="LEFT"/>instance_type : NoneType<br ALIGN="LEFT"/>price : float<br ALIGN="LEFT"/>product_description : NoneType<br ALIGN="LEFT"/>timestamp : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.Stack" [color="black", fontcolor="black", label=<{Stack|capabilities : list<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>creation_time : NoneType, datetime<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>disable_rollback : NoneType, bool<br ALIGN="LEFT"/>notification_arns : list<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>parameters : list<br ALIGN="LEFT"/>stack_id : NoneType<br ALIGN="LEFT"/>stack_name : NoneType<br ALIGN="LEFT"/>stack_name_reason : NoneType<br ALIGN="LEFT"/>stack_status : NoneType<br ALIGN="LEFT"/>stack_status_reason<br ALIGN="LEFT"/>tags : list<br ALIGN="LEFT"/>timeout_in_minutes : NoneType, int<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>describe_events(next_token)<br ALIGN="LEFT"/>describe_resource(logical_resource_id)<br ALIGN="LEFT"/>describe_resources(logical_resource_id, physical_resource_id)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>get_policy()<br ALIGN="LEFT"/>get_template()<br ALIGN="LEFT"/>list_resources(next_token)<br ALIGN="LEFT"/>set_policy(stack_policy_body, stack_policy_url)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.StackEvent" [color="black", fontcolor="black", label=<{StackEvent|connection : NoneType<br ALIGN="LEFT"/>event_id : NoneType<br ALIGN="LEFT"/>logical_resource_id : NoneType<br ALIGN="LEFT"/>physical_resource_id : NoneType<br ALIGN="LEFT"/>resource_properties : NoneType<br ALIGN="LEFT"/>resource_status : NoneType<br ALIGN="LEFT"/>resource_status_reason : NoneType<br ALIGN="LEFT"/>resource_type : NoneType<br ALIGN="LEFT"/>stack_id : NoneType<br ALIGN="LEFT"/>stack_name : NoneType<br ALIGN="LEFT"/>timestamp : NoneType, datetime<br ALIGN="LEFT"/>valid_states : tuple<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.StackResource" [color="black", fontcolor="black", label=<{StackResource|connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>logical_resource_id : NoneType<br ALIGN="LEFT"/>physical_resource_id : NoneType<br ALIGN="LEFT"/>resource_status : NoneType<br ALIGN="LEFT"/>resource_status_reason : NoneType<br ALIGN="LEFT"/>resource_type : NoneType<br ALIGN="LEFT"/>stack_id : NoneType<br ALIGN="LEFT"/>stack_name : NoneType<br ALIGN="LEFT"/>timestamp : NoneType, datetime<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.StackResourceSummary" [color="black", fontcolor="black", label=<{StackResourceSummary|connection : NoneType<br ALIGN="LEFT"/>last_updated_time : NoneType, datetime<br ALIGN="LEFT"/>logical_resource_id : NoneType<br ALIGN="LEFT"/>physical_resource_id : NoneType<br ALIGN="LEFT"/>resource_status : NoneType<br ALIGN="LEFT"/>resource_status_reason : NoneType<br ALIGN="LEFT"/>resource_type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.StackSummary" [color="black", fontcolor="black", label=<{StackSummary|connection : NoneType<br ALIGN="LEFT"/>creation_time : NoneType, datetime<br ALIGN="LEFT"/>deletion_time : NoneType, datetime<br ALIGN="LEFT"/>stack_id : NoneType<br ALIGN="LEFT"/>stack_name : NoneType<br ALIGN="LEFT"/>stack_status : NoneType<br ALIGN="LEFT"/>template_description : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.pyami.startup.Startup" [color="black", fontcolor="black", label=<{Startup|<br ALIGN="LEFT"/>|main()<br ALIGN="LEFT"/>run_scripts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.instancestatus.Status" [color="black", fontcolor="black", label=<{Status|details : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.status.Status" [color="black", fontcolor="black", label=<{Status|route53connection<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.statusinfo.StatusInfo" [color="black", fontcolor="black", label=<{StatusInfo|message : NoneType<br ALIGN="LEFT"/>normal : NoneType, bool<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>status_type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.Step" [color="black", fontcolor="black", label=<{Step|Fields : set<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>properties<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.step.Step" [color="black", fontcolor="black", label=<{Step|<br ALIGN="LEFT"/>|args()<br ALIGN="LEFT"/>jar()<br ALIGN="LEFT"/>main_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.StepConfig" [color="black", fontcolor="black", label=<{StepConfig|Fields : set<br ALIGN="LEFT"/>args : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>properties : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.StepId" [color="black", fontcolor="black", label=<{StepId|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.emr.emrobject.StepSummary" [color="black", fontcolor="black", label=<{StepSummary|Fields : set<br ALIGN="LEFT"/>config : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.StepSummaryList" [color="black", fontcolor="black", label=<{StepSummaryList|Fields : set<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>steps : NoneType<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.StorageCopyError" [color="black", fontcolor="red", label=<{StorageCopyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.StorageCreateError" [color="black", fontcolor="red", label=<{StorageCreateError|bucket : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception.StorageDataError" [color="black", fontcolor="red", label=<{StorageDataError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.StoragePermissionsError" [color="black", fontcolor="red", label=<{StoragePermissionsError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.StorageQuotaExceeded" [color="black", fontcolor="red", label=<{StorageQuotaExceeded|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.StorageResponseError" [color="black", fontcolor="red", label=<{StorageResponseError|resource : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.storage_uri.StorageUri" [color="black", fontcolor="black", label=<{StorageUri|connection : NoneType<br ALIGN="LEFT"/>connection_args : NoneType<br ALIGN="LEFT"/>provider_pool : dict<br ALIGN="LEFT"/>|acl_class()<br ALIGN="LEFT"/>canned_acls()<br ALIGN="LEFT"/>check_response(resp, level, uri)<br ALIGN="LEFT"/>connect(access_key_id, secret_access_key)<br ALIGN="LEFT"/>delete_key(validate, headers, version_id, mfa_token)<br ALIGN="LEFT"/>equals(uri)<br ALIGN="LEFT"/>get_all_keys(validate, headers, prefix)<br ALIGN="LEFT"/>get_bucket(validate, headers)<br ALIGN="LEFT"/>get_contents_as_string(validate, headers, cb, num_cb, torrent, version_id)<br ALIGN="LEFT"/>get_contents_to_file(fp, headers, cb, num_cb, torrent, version_id, res_download_handler, response_headers, hash_algs)<br ALIGN="LEFT"/>get_contents_to_stream(fp, headers, version_id)<br ALIGN="LEFT"/>get_key(validate, headers, version_id)<br ALIGN="LEFT"/>has_version()<br ALIGN="LEFT"/>list_bucket(prefix, delimiter, headers, all_versions)<br ALIGN="LEFT"/>new_key(validate, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.distribution.StreamingDistribution" [color="black", fontcolor="black", label=<{StreamingDistribution|config<br ALIGN="LEFT"/>etag<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(enabled, cnames, comment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.distribution.StreamingDistributionConfig" [color="black", fontcolor="black", label=<{StreamingDistributionConfig|cnames<br ALIGN="LEFT"/>comment<br ALIGN="LEFT"/>enabled<br ALIGN="LEFT"/>|to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.distribution.StreamingDistributionSummary" [color="black", fontcolor="black", label=<{StreamingDistributionSummary|<br ALIGN="LEFT"/>|get_distribution()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudfront.object.StreamingObject" [color="black", fontcolor="black", label=<{StreamingObject|<br ALIGN="LEFT"/>|url(scheme)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.step.StreamingStep" [color="black", fontcolor="black", label=<{StreamingStep|action_on_failure : str<br ALIGN="LEFT"/>cache_archives : NoneType<br ALIGN="LEFT"/>cache_files : NoneType<br ALIGN="LEFT"/>combiner : NoneType<br ALIGN="LEFT"/>input : NoneType<br ALIGN="LEFT"/>mapper<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>output : NoneType<br ALIGN="LEFT"/>reducer : NoneType<br ALIGN="LEFT"/>step_args : NoneType, list<br ALIGN="LEFT"/>|args()<br ALIGN="LEFT"/>jar()<br ALIGN="LEFT"/>main_class()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property.StringProperty" [color="black", fontcolor="black", label=<{StringProperty|type_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.instance.SubParse" [color="black", fontcolor="black", label=<{SubParse|section<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.connection.SubdomainCallingFormat" [color="black", fontcolor="black", label=<{SubdomainCallingFormat|<br ALIGN="LEFT"/>|get_bucket_server(server, bucket)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mws.response.SubmitFeedResult" [color="black", fontcolor="black", label=<{SubmitFeedResult|FeedSubmissionInfo<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.services.submit.Submitter" [color="black", fontcolor="black", label=<{Submitter|input_bucket<br ALIGN="LEFT"/>output_bucket<br ALIGN="LEFT"/>output_domain<br ALIGN="LEFT"/>queue<br ALIGN="LEFT"/>sd<br ALIGN="LEFT"/>|get_key_name(fullpath, prefix)<br ALIGN="LEFT"/>submit_file(path, metadata, cb, num_cb, prefix)<br ALIGN="LEFT"/>submit_path(path, tags, ignore_dirs, cb, num_cb, status, prefix)<br ALIGN="LEFT"/>write_message(key, metadata)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.subnet.Subnet" [color="black", fontcolor="black", label=<{Subnet|availability_zone : NoneType<br ALIGN="LEFT"/>available_ip_address_count : int<br ALIGN="LEFT"/>cidr_block : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds2.exceptions.SubnetAlreadyInUse" [color="black", fontcolor="red", label=<{SubnetAlreadyInUse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SubnetAlreadyInUse" [color="black", fontcolor="red", label=<{SubnetAlreadyInUse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.Subscription" [color="black", fontcolor="black", label=<{Subscription|Destination<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SubscriptionAlreadyExist" [color="black", fontcolor="red", label=<{SubscriptionAlreadyExist|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SubscriptionAlreadyExist" [color="black", fontcolor="red", label=<{SubscriptionAlreadyExist|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SubscriptionCategoryNotFound" [color="black", fontcolor="red", label=<{SubscriptionCategoryNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SubscriptionCategoryNotFound" [color="black", fontcolor="red", label=<{SubscriptionCategoryNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SubscriptionEventIdNotFound" [color="black", fontcolor="red", label=<{SubscriptionEventIdNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.rds2.exceptions.SubscriptionNotFound" [color="black", fontcolor="red", label=<{SubscriptionNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SubscriptionNotFound" [color="black", fontcolor="red", label=<{SubscriptionNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kinesis.exceptions.SubscriptionRequiredException" [color="black", fontcolor="red", label=<{SubscriptionRequiredException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.SubscriptionSeverityNotFound" [color="black", fontcolor="red", label=<{SubscriptionSeverityNotFound|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.iam.summarymap.SummaryMap" [color="black", fontcolor="black", label=<{SummaryMap|parent : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.support.layer1.SupportConnection" [color="black", fontcolor="black", label=<{SupportConnection|APIVersion : str<br ALIGN="LEFT"/>DefaultRegionEndpoint : str<br ALIGN="LEFT"/>DefaultRegionName : str<br ALIGN="LEFT"/>ResponseError<br ALIGN="LEFT"/>ServiceName : str<br ALIGN="LEFT"/>TargetPrefix : str<br ALIGN="LEFT"/>region<br ALIGN="LEFT"/>|add_attachments_to_set(attachments, attachment_set_id)<br ALIGN="LEFT"/>add_communication_to_case(communication_body, case_id, cc_email_addresses, attachment_set_id)<br ALIGN="LEFT"/>create_case(subject, communication_body, service_code, severity_code, category_code, cc_email_addresses, language, issue_type, attachment_set_id)<br ALIGN="LEFT"/>describe_attachment(attachment_id)<br ALIGN="LEFT"/>describe_cases(case_id_list, display_id, after_time, before_time, include_resolved_cases, next_token, max_results, language, include_communications)<br ALIGN="LEFT"/>describe_communications(case_id, before_time, after_time, next_token, max_results)<br ALIGN="LEFT"/>describe_services(service_code_list, language)<br ALIGN="LEFT"/>describe_severity_levels(language)<br ALIGN="LEFT"/>describe_trusted_advisor_check_refresh_statuses(check_ids)<br ALIGN="LEFT"/>describe_trusted_advisor_check_result(check_id, language)<br ALIGN="LEFT"/>describe_trusted_advisor_check_summaries(check_ids)<br ALIGN="LEFT"/>describe_trusted_advisor_checks(language)<br ALIGN="LEFT"/>make_request(action, body)<br ALIGN="LEFT"/>refresh_trusted_advisor_check(check_id)<br ALIGN="LEFT"/>resolve_case(case_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.emr.emrobject.SupportedProduct" [color="black", fontcolor="black", label=<{SupportedProduct|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.group.SuspendedProcess" [color="black", fontcolor="black", label=<{SuspendedProcess|connection : NoneType<br ALIGN="LEFT"/>process_name : NoneType<br ALIGN="LEFT"/>reason : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.SwapEnvironmentCNAMEsResponse" [color="black", fontcolor="black", label=<{SwapEnvironmentCNAMEsResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.SwapEnvironmentCnamesResponse" [color="black", fontcolor="black", label=<{SwapEnvironmentCnamesResponse|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.domains.exceptions.TLDRulesViolation" [color="black", fontcolor="red", label=<{TLDRulesViolation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.table.Table" [color="black", fontcolor="black", label=<{Table|create_time<br ALIGN="LEFT"/>item_count<br ALIGN="LEFT"/>layer2<br ALIGN="LEFT"/>lookup<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>read_units<br ALIGN="LEFT"/>schema<br ALIGN="LEFT"/>size_bytes<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>write_units<br ALIGN="LEFT"/>|batch_get_item(keys, attributes_to_get)<br ALIGN="LEFT"/>create_from_schema(layer2, name, schema)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>get_item(hash_key, range_key, attributes_to_get, consistent_read, item_class)<br ALIGN="LEFT"/>has_item(hash_key, range_key, consistent_read)<br ALIGN="LEFT"/>new_item(hash_key, range_key, attrs, item_class)<br ALIGN="LEFT"/>query(hash_key)<br ALIGN="LEFT"/>refresh(wait_for_active, retry_seconds)<br ALIGN="LEFT"/>scan()<br ALIGN="LEFT"/>update_from_response(response)<br ALIGN="LEFT"/>update_throughput(read_units, write_units)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb2.table.Table" [color="black", fontcolor="black", label=<{Table|connection : NoneType<br ALIGN="LEFT"/>global_indexes : NoneType, list<br ALIGN="LEFT"/>indexes : NoneType, list<br ALIGN="LEFT"/>max_batch_get : int<br ALIGN="LEFT"/>schema : NoneType, list<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>throughput : NoneType, dict<br ALIGN="LEFT"/>|batch_get(keys, consistent, attributes)<br ALIGN="LEFT"/>batch_write()<br ALIGN="LEFT"/>count()<br ALIGN="LEFT"/>create(table_name, schema, throughput, indexes, global_indexes, connection)<br ALIGN="LEFT"/>create_global_secondary_index(global_index)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_global_secondary_index(global_index_name)<br ALIGN="LEFT"/>delete_item(expected, conditional_operator)<br ALIGN="LEFT"/>describe()<br ALIGN="LEFT"/>get_item(consistent, attributes)<br ALIGN="LEFT"/>get_key_fields()<br ALIGN="LEFT"/>has_item()<br ALIGN="LEFT"/>lookup()<br ALIGN="LEFT"/>new_item()<br ALIGN="LEFT"/>put_item(data, overwrite)<br ALIGN="LEFT"/>query(limit, index, reverse, consistent, attributes, max_page_size)<br ALIGN="LEFT"/>query_2(limit, index, reverse, consistent, attributes, max_page_size, query_filter, conditional_operator)<br ALIGN="LEFT"/>query_count(index, consistent, conditional_operator, query_filter, scan_index_forward, limit, exclusive_start_key)<br ALIGN="LEFT"/>scan(limit, segment, total_segments, max_page_size, attributes, conditional_operator)<br ALIGN="LEFT"/>update(throughput, global_indexes)<br ALIGN="LEFT"/>update_global_secondary_index(global_indexes)<br ALIGN="LEFT"/>use_boolean()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.dynamodb.table.TableBatchGenerator" [color="black", fontcolor="black", label=<{TableBatchGenerator|attributes_to_get : NoneType<br ALIGN="LEFT"/>consistent_read : bool<br ALIGN="LEFT"/>consumed_units : int<br ALIGN="LEFT"/>keys<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb.layer2.TableGenerator" [color="black", fontcolor="black", label=<{TableGenerator|callable<br ALIGN="LEFT"/>consumed_units<br ALIGN="LEFT"/>count<br ALIGN="LEFT"/>item_class<br ALIGN="LEFT"/>kwargs<br ALIGN="LEFT"/>last_evaluated_key : NoneType, tuple<br ALIGN="LEFT"/>remaining : int<br ALIGN="LEFT"/>response<br ALIGN="LEFT"/>scanned_count<br ALIGN="LEFT"/>table<br ALIGN="LEFT"/>|next_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.stack.Tag" [color="black", fontcolor="black", label=<{Tag|connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.tag.Tag" [color="black", fontcolor="black", label=<{Tag|connection : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>res_id : NoneType<br ALIGN="LEFT"/>res_type : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.tag.Tag" [color="black", fontcolor="black", label=<{Tag|connection : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>propagate_at_launch : bool<br ALIGN="LEFT"/>resource_id : NoneType<br ALIGN="LEFT"/>resource_type : str<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|build_params(params, i)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.tagging.Tag" [color="black", fontcolor="black", label=<{Tag|key : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.tag.TagSet" [color="black", fontcolor="black", label=<{TagSet|connection : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.tagging.TagSet" [color="black", fontcolor="black", label=<{TagSet|<br ALIGN="LEFT"/>|add_tag(key, value)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.ec2object.TaggedEC2Object" [color="black", fontcolor="black", label=<{TaggedEC2Object|tags<br ALIGN="LEFT"/>|add_tag(key, value, dry_run)<br ALIGN="LEFT"/>add_tags(tags, dry_run)<br ALIGN="LEFT"/>remove_tag(key, value, dry_run)<br ALIGN="LEFT"/>remove_tags(tags, dry_run)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.tagging.Tags" [color="black", fontcolor="black", label=<{Tags|<br ALIGN="LEFT"/>|add_tag_set(tag_set)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.task.Task" [color="black", fontcolor="black", label=<{Task|command<br ALIGN="LEFT"/>daily<br ALIGN="LEFT"/>hour<br ALIGN="LEFT"/>hourly<br ALIGN="LEFT"/>last_executed<br ALIGN="LEFT"/>last_output<br ALIGN="LEFT"/>last_status<br ALIGN="LEFT"/>message_id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>now : datetime<br ALIGN="LEFT"/>|check()<br ALIGN="LEFT"/>run(msg, vtimeout)<br ALIGN="LEFT"/>start(queue_name)<br ALIGN="LEFT"/>start_all(queue_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.datapipeline.exceptions.TaskNotFoundException" [color="black", fontcolor="red", label=<{TaskNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.manage.task.TaskPoller" [color="black", fontcolor="black", label=<{TaskPoller|queue : NoneType<br ALIGN="LEFT"/>sqs<br ALIGN="LEFT"/>|poll(wait, vtimeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.template.Template" [color="black", fontcolor="black", label=<{Template|capabilities : NoneType<br ALIGN="LEFT"/>capabilities_reason : NoneType<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>template_parameters : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudformation.template.TemplateParameter" [color="black", fontcolor="black", label=<{TemplateParameter|default_value : NoneType<br ALIGN="LEFT"/>description : NoneType<br ALIGN="LEFT"/>no_echo : NoneType<br ALIGN="LEFT"/>parameter_key : NoneType<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.TerminateEnvironmentResponse" [color="black", fontcolor="black", label=<{TerminateEnvironmentResponse|application_name : str<br ALIGN="LEFT"/>cname : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>endpoint_url : str<br ALIGN="LEFT"/>environment_id : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>health : str<br ALIGN="LEFT"/>resources : NoneType<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>version_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.autoscale.group.TerminationPolicies" [color="black", fontcolor="black", label=<{TerminationPolicies|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.autoscale.policy.TerminationPolicies" [color="black", fontcolor="black", label=<{TerminationPolicies|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestAutoNow" [color="black", fontcolor="black", label=<{TestAutoNow|create_date<br ALIGN="LEFT"/>modified_date<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestBasic" [color="black", fontcolor="black", label=<{TestBasic|date<br ALIGN="LEFT"/>foo<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestFloat" [color="black", fontcolor="black", label=<{TestFloat|name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestList" [color="black", fontcolor="black", label=<{TestList|name<br ALIGN="LEFT"/>nums<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestListReference" [color="black", fontcolor="black", label=<{TestListReference|basics<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestMap" [color="black", fontcolor="black", label=<{TestMap|map<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestPassword" [color="black", fontcolor="black", label=<{TestPassword|password<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestReference" [color="black", fontcolor="black", label=<{TestReference|ref<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestRequired" [color="black", fontcolor="black", label=<{TestRequired|req<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestSubClass" [color="black", fontcolor="black", label=<{TestSubClass|answer<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.test_db.TestUnique" [color="black", fontcolor="black", label=<{TestUnique|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.property.TextProperty" [color="black", fontcolor="black", label=<{TextProperty|max_length : NoneType<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.exception.Throttling" [color="black", fontcolor="red", label=<{Throttling|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.manager.sdbmanager.TimeDecodeError" [color="black", fontcolor="red", label=<{TimeDecodeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.property.TimeProperty" [color="black", fontcolor="black", label=<{TimeProperty|data_type : time<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|validate(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.TokenAccessDenied" [color="black", fontcolor="red", label=<{TokenAccessDenied|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.TokenNotActive" [color="black", fontcolor="red", label=<{TokenNotActive|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.TokenNotActive_Recipient" [color="black", fontcolor="red", label=<{TokenNotActive_Recipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.TokenNotActive_Sender" [color="black", fontcolor="red", label=<{TokenNotActive_Sender|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.TokenUsageError" [color="black", fontcolor="red", label=<{TokenUsageError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.TooManyApplicationVersions" [color="black", fontcolor="red", label=<{TooManyApplicationVersions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.TooManyApplications" [color="black", fontcolor="red", label=<{TooManyApplications|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.TooManyBuckets" [color="black", fontcolor="red", label=<{TooManyBuckets|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.TooManyConfigurationTemplates" [color="black", fontcolor="red", label=<{TooManyConfigurationTemplates|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.exception.TooManyEnvironments" [color="black", fontcolor="red", label=<{TooManyEnvironments|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.exception.TooManyRecordsException" [color="black", fontcolor="red", label=<{TooManyRecordsException|message<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.identity.exceptions.TooManyRequestsException" [color="black", fontcolor="red", label=<{TooManyRequestsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cognito.sync.exceptions.TooManyRequestsException" [color="black", fontcolor="red", label=<{TooManyRequestsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.pyami.installers.ubuntu.trac.Trac" [color="black", fontcolor="black", label=<{Trac|<br ALIGN="LEFT"/>|install()<br ALIGN="LEFT"/>main()<br ALIGN="LEFT"/>setup_vhost()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.TrailAlreadyExistsException" [color="black", fontcolor="red", label=<{TrailAlreadyExistsException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.TrailNotFoundException" [color="black", fontcolor="red", label=<{TrailNotFoundException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudtrail.exceptions.TrailNotProvidedException" [color="black", fontcolor="red", label=<{TrailNotProvidedException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.Transaction" [color="black", fontcolor="black", label=<{Transaction|TransactionPart : list<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.TransactionDenied" [color="black", fontcolor="red", label=<{TransactionDenied|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.TransactionFullyRefundedAlready" [color="black", fontcolor="red", label=<{TransactionFullyRefundedAlready|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.response.TransactionPart" [color="black", fontcolor="black", label=<{TransactionPart|<br ALIGN="LEFT"/>|startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.fps.exception.TransactionTypeNotRefundable" [color="black", fontcolor="red", label=<{TransactionTypeNotRefundable|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.concurrent.TransferThread" [color="black", fontcolor="black", label=<{TransferThread|should_continue : bool<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.lifecycle.Transition" [color="black", fontcolor="black", label=<{Transition|date : NoneType<br ALIGN="LEFT"/>days : NoneType, int<br ALIGN="LEFT"/>storage_class : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.exceptions.TreeHashDoesNotMatchError" [color="black", fontcolor="red", label=<{TreeHashDoesNotMatchError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.Trigger" [color="black", fontcolor="black", label=<{Trigger|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.cloudfront.signers.TrustedSigners" [color="black", fontcolor="black", label=<{TrustedSigners|<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.redshift.exceptions.UnauthorizedOperation" [color="black", fontcolor="red", label=<{UnauthorizedOperation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.UnauthorizedOperationFault" [color="black", fontcolor="red", label=<{UnauthorizedOperationFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.exceptions.UnexpectedHTTPResponseError" [color="black", fontcolor="red", label=<{UnexpectedHTTPResponseError|body<br ALIGN="LEFT"/>code : NoneType<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.UnknownFilterTypeError" [color="black", fontcolor="red", label=<{UnknownFilterTypeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.UnknownIndexFieldError" [color="black", fontcolor="red", label=<{UnknownIndexFieldError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.UnknownSchemaFieldError" [color="black", fontcolor="red", label=<{UnknownSchemaFieldError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.UnknownSnapshotCopyRegion" [color="black", fontcolor="red", label=<{UnknownSnapshotCopyRegion|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.kms.exceptions.UnsupportedOperationException" [color="black", fontcolor="red", label=<{UnsupportedOperationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.UnsupportedOption" [color="black", fontcolor="red", label=<{UnsupportedOption|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.redshift.exceptions.UnsupportedOptionFault" [color="black", fontcolor="red", label=<{UnsupportedOptionFault|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.route53.domains.exceptions.UnsupportedTLD" [color="black", fontcolor="red", label=<{UnsupportedTLD|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.UnverifiedAccount_Recipient" [color="black", fontcolor="red", label=<{UnverifiedAccount_Recipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.UnverifiedAccount_Sender" [color="black", fontcolor="red", label=<{UnverifiedAccount_Sender|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.UnverifiedBankAccount" [color="black", fontcolor="red", label=<{UnverifiedBankAccount|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.UnverifiedEmailAddress_Caller" [color="black", fontcolor="red", label=<{UnverifiedEmailAddress_Caller|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.UnverifiedEmailAddress_Recipient" [color="black", fontcolor="red", label=<{UnverifiedEmailAddress_Recipient|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.fps.exception.UnverifiedEmailAddress_Sender" [color="black", fontcolor="red", label=<{UnverifiedEmailAddress_Sender|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.UpdateApplicationResponse" [color="black", fontcolor="black", label=<{UpdateApplicationResponse|application : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.UpdateApplicationVersionResponse" [color="black", fontcolor="black", label=<{UpdateApplicationVersionResponse|application_version : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.UpdateConfigurationTemplateResponse" [color="black", fontcolor="black", label=<{UpdateConfigurationTemplateResponse|application_name : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>deployment_status : str<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>option_settings : list<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.UpdateEnvironmentResponse" [color="black", fontcolor="black", label=<{UpdateEnvironmentResponse|application_name : str<br ALIGN="LEFT"/>cname : str<br ALIGN="LEFT"/>date_created : datetime<br ALIGN="LEFT"/>date_updated : datetime<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>endpoint_url : str<br ALIGN="LEFT"/>environment_id : str<br ALIGN="LEFT"/>environment_name : str<br ALIGN="LEFT"/>health : str<br ALIGN="LEFT"/>resources : NoneType<br ALIGN="LEFT"/>solution_stack_name : str<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>template_name : str<br ALIGN="LEFT"/>version_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.UpdateReportAcknowledgementsResult" [color="black", fontcolor="black", label=<{UpdateReportAcknowledgementsResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.exceptions.UploadArchiveError" [color="black", fontcolor="red", label=<{UploadArchiveError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.concurrent.UploadWorkerThread" [color="black", fontcolor="black", label=<{UploadWorkerThread|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.domain.UploaderThread" [color="black", fontcolor="black", label=<{UploaderThread|db<br ALIGN="LEFT"/>items : dict<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.user.User" [color="black", fontcolor="black", label=<{User|id : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml(element_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.user.User" [color="black", fontcolor="black", label=<{User|display_name : str<br ALIGN="LEFT"/>id : str<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml(element_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sts.credentials.User" [color="black", fontcolor="black", label=<{User|arn : NoneType<br ALIGN="LEFT"/>assume_role_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.connection.VHostCallingFormat" [color="black", fontcolor="black", label=<{VHostCallingFormat|<br ALIGN="LEFT"/>|get_bucket_server(server, bucket)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpc.VPC" [color="black", fontcolor="black", label=<{VPC|cidr_block : NoneType<br ALIGN="LEFT"/>classic_link_enabled : NoneType<br ALIGN="LEFT"/>dhcp_options_id : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>instance_tenancy : NoneType<br ALIGN="LEFT"/>is_default : NoneType, bool<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|attach_classic_instance(instance_id, groups, dry_run)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>detach_classic_instance(instance_id, dry_run)<br ALIGN="LEFT"/>disable_classic_link(dry_run)<br ALIGN="LEFT"/>enable_classic_link(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>update_classic_link_enabled(validate, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.attributes.VPCAttribute" [color="black", fontcolor="black", label=<{VPCAttribute|connection : NoneType<br ALIGN="LEFT"/>enable_dns_hostnames : NoneType, bool<br ALIGN="LEFT"/>enable_dns_support : NoneType, bool<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.VPCConnection" [color="black", fontcolor="black", label=<{VPCConnection|<br ALIGN="LEFT"/>|accept_vpc_peering_connection(vpc_peering_connection_id, dry_run)<br ALIGN="LEFT"/>associate_dhcp_options(dhcp_options_id, vpc_id, dry_run)<br ALIGN="LEFT"/>associate_network_acl(network_acl_id, subnet_id)<br ALIGN="LEFT"/>associate_route_table(route_table_id, subnet_id, dry_run)<br ALIGN="LEFT"/>attach_classic_link_vpc(vpc_id, instance_id, groups, dry_run)<br ALIGN="LEFT"/>attach_internet_gateway(internet_gateway_id, vpc_id, dry_run)<br ALIGN="LEFT"/>attach_vpn_gateway(vpn_gateway_id, vpc_id, dry_run)<br ALIGN="LEFT"/>create_customer_gateway(type, ip_address, bgp_asn, dry_run)<br ALIGN="LEFT"/>create_dhcp_options(domain_name, domain_name_servers, ntp_servers, netbios_name_servers, netbios_node_type, dry_run)<br ALIGN="LEFT"/>create_internet_gateway(dry_run)<br ALIGN="LEFT"/>create_network_acl(vpc_id)<br ALIGN="LEFT"/>create_network_acl_entry(network_acl_id, rule_number, protocol, rule_action, cidr_block, egress, icmp_code, icmp_type, port_range_from, port_range_to)<br ALIGN="LEFT"/>create_route(route_table_id, destination_cidr_block, gateway_id, instance_id, interface_id, vpc_peering_connection_id, dry_run)<br ALIGN="LEFT"/>create_route_table(vpc_id, dry_run)<br ALIGN="LEFT"/>create_subnet(vpc_id, cidr_block, availability_zone, dry_run)<br ALIGN="LEFT"/>create_vpc(cidr_block, instance_tenancy, dry_run)<br ALIGN="LEFT"/>create_vpc_peering_connection(vpc_id, peer_vpc_id, peer_owner_id, dry_run)<br ALIGN="LEFT"/>create_vpn_connection(type, customer_gateway_id, vpn_gateway_id, static_routes_only, dry_run)<br ALIGN="LEFT"/>create_vpn_connection_route(destination_cidr_block, vpn_connection_id, dry_run)<br ALIGN="LEFT"/>create_vpn_gateway(type, availability_zone, dry_run)<br ALIGN="LEFT"/>delete_customer_gateway(customer_gateway_id, dry_run)<br ALIGN="LEFT"/>delete_dhcp_options(dhcp_options_id, dry_run)<br ALIGN="LEFT"/>delete_internet_gateway(internet_gateway_id, dry_run)<br ALIGN="LEFT"/>delete_network_acl(network_acl_id)<br ALIGN="LEFT"/>delete_network_acl_entry(network_acl_id, rule_number, egress)<br ALIGN="LEFT"/>delete_route(route_table_id, destination_cidr_block, dry_run)<br ALIGN="LEFT"/>delete_route_table(route_table_id, dry_run)<br ALIGN="LEFT"/>delete_subnet(subnet_id, dry_run)<br ALIGN="LEFT"/>delete_vpc(vpc_id, dry_run)<br ALIGN="LEFT"/>delete_vpc_peering_connection(vpc_peering_connection_id, dry_run)<br ALIGN="LEFT"/>delete_vpn_connection(vpn_connection_id, dry_run)<br ALIGN="LEFT"/>delete_vpn_connection_route(destination_cidr_block, vpn_connection_id, dry_run)<br ALIGN="LEFT"/>delete_vpn_gateway(vpn_gateway_id, dry_run)<br ALIGN="LEFT"/>detach_classic_link_vpc(vpc_id, instance_id, dry_run)<br ALIGN="LEFT"/>detach_internet_gateway(internet_gateway_id, vpc_id, dry_run)<br ALIGN="LEFT"/>detach_vpn_gateway(vpn_gateway_id, vpc_id, dry_run)<br ALIGN="LEFT"/>disable_vgw_route_propagation(route_table_id, gateway_id, dry_run)<br ALIGN="LEFT"/>disable_vpc_classic_link(vpc_id, dry_run)<br ALIGN="LEFT"/>disassociate_network_acl(subnet_id, vpc_id)<br ALIGN="LEFT"/>disassociate_route_table(association_id, dry_run)<br ALIGN="LEFT"/>enable_vgw_route_propagation(route_table_id, gateway_id, dry_run)<br ALIGN="LEFT"/>enable_vpc_classic_link(vpc_id, dry_run)<br ALIGN="LEFT"/>get_all_classic_link_vpcs(vpc_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_customer_gateways(customer_gateway_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_dhcp_options(dhcp_options_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_internet_gateways(internet_gateway_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_network_acls(network_acl_ids, filters)<br ALIGN="LEFT"/>get_all_route_tables(route_table_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_subnets(subnet_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_vpc_peering_connections(vpc_peering_connection_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_vpcs(vpc_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_vpn_connections(vpn_connection_ids, filters, dry_run)<br ALIGN="LEFT"/>get_all_vpn_gateways(vpn_gateway_ids, filters, dry_run)<br ALIGN="LEFT"/>modify_vpc_attribute(vpc_id, enable_dns_support, enable_dns_hostnames, dry_run)<br ALIGN="LEFT"/>reject_vpc_peering_connection(vpc_peering_connection_id, dry_run)<br ALIGN="LEFT"/>replace_network_acl_entry(network_acl_id, rule_number, protocol, rule_action, cidr_block, egress, icmp_code, icmp_type, port_range_from, port_range_to)<br ALIGN="LEFT"/>replace_route(route_table_id, destination_cidr_block, gateway_id, instance_id, interface_id, vpc_peering_connection_id, dry_run)<br ALIGN="LEFT"/>replace_route_table_assocation(association_id, route_table_id, dry_run)<br ALIGN="LEFT"/>replace_route_table_association_with_assoc(association_id, route_table_id, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.vpcsecuritygroupmembership.VPCSecurityGroupMembership" [color="black", fontcolor="black", label=<{VPCSecurityGroupMembership|connection : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>vpc_group : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.response.ValidateConfigurationSettingsResponse" [color="black", fontcolor="black", label=<{ValidateConfigurationSettingsResponse|messages : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mturk.question.ValidatingXML" [color="black", fontcolor="black", label=<{ValidatingXML|<br ALIGN="LEFT"/>|validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.beanstalk.exception.ValidationError" [color="black", fontcolor="red", label=<{ValidationError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.configservice.exceptions.ValidationException" [color="black", fontcolor="red", label=<{ValidationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.dynamodb2.exceptions.ValidationException" [color="black", fontcolor="red", label=<{ValidationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.elastictranscoder.exceptions.ValidationException" [color="black", fontcolor="red", label=<{ValidationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.opsworks.exceptions.ValidationException" [color="black", fontcolor="red", label=<{ValidationException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.beanstalk.response.ValidationMessage" [color="black", fontcolor="black", label=<{ValidationMessage|message : str<br ALIGN="LEFT"/>namespace : str<br ALIGN="LEFT"/>option_name : str<br ALIGN="LEFT"/>severity : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.mws.response.VariationRelationship" [color="black", fontcolor="black", label=<{VariationRelationship|GemType<br ALIGN="LEFT"/>Identifiers<br ALIGN="LEFT"/>MaterialType<br ALIGN="LEFT"/>OperatingSystem<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.vault.Vault" [color="black", fontcolor="black", label=<{Vault|DefaultPartSize : int<br ALIGN="LEFT"/>ResponseDataElements : tuple<br ALIGN="LEFT"/>SingleOperationThreshold : int<br ALIGN="LEFT"/>layer1<br ALIGN="LEFT"/>|concurrent_create_archive_from_file(filename, description)<br ALIGN="LEFT"/>create_archive_from_file(filename, file_obj, description, upload_id_callback)<br ALIGN="LEFT"/>create_archive_writer(part_size, description)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_archive(archive_id)<br ALIGN="LEFT"/>get_job(job_id)<br ALIGN="LEFT"/>list_all_parts(upload_id)<br ALIGN="LEFT"/>list_jobs(completed, status_code)<br ALIGN="LEFT"/>resume_archive_from_file(upload_id, filename, file_obj)<br ALIGN="LEFT"/>retrieve_archive(archive_id, sns_topic, description)<br ALIGN="LEFT"/>retrieve_inventory(sns_topic, description, byte_range, start_date, end_date, limit)<br ALIGN="LEFT"/>retrieve_inventory_job()<br ALIGN="LEFT"/>upload_archive(filename, description)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.gs.bucketlistresultset.VersionedBucketListResultSet" [color="black", fontcolor="black", label=<{VersionedBucketListResultSet|bucket : NoneType<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>generation_marker : str<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>marker : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.s3.bucketlistresultset.VersionedBucketListResultSet" [color="black", fontcolor="black", label=<{VersionedBucketListResultSet|bucket : NoneType<br ALIGN="LEFT"/>delimiter : str<br ALIGN="LEFT"/>encoding_type : NoneType<br ALIGN="LEFT"/>headers : NoneType<br ALIGN="LEFT"/>key_marker : str<br ALIGN="LEFT"/>prefix : str<br ALIGN="LEFT"/>version_id_marker : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.ec2.volume.Volume" [color="black", fontcolor="black", label=<{Volume|attach_data : NoneType<br ALIGN="LEFT"/>create_time : NoneType<br ALIGN="LEFT"/>encrypted : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>iops : NoneType, int<br ALIGN="LEFT"/>size : NoneType, int<br ALIGN="LEFT"/>snapshot_id : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>tags<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>zone : NoneType<br ALIGN="LEFT"/>|attach(instance_id, device, dry_run)<br ALIGN="LEFT"/>attachment_state()<br ALIGN="LEFT"/>create_snapshot(description, dry_run)<br ALIGN="LEFT"/>delete(dry_run)<br ALIGN="LEFT"/>detach(force, dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>snapshots(owner, restorable_by, dry_run)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>volume_state()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.manage.volume.Volume" [color="black", fontcolor="black", label=<{Volume|attachment_state<br ALIGN="LEFT"/>device<br ALIGN="LEFT"/>ec2 : NoneType<br ALIGN="LEFT"/>mount_point<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>past_volume_ids<br ALIGN="LEFT"/>region_name<br ALIGN="LEFT"/>server<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>volume_id<br ALIGN="LEFT"/>volume_state<br ALIGN="LEFT"/>zone_name<br ALIGN="LEFT"/>|<I>archive</I>()<br ALIGN="LEFT"/>attach(server)<br ALIGN="LEFT"/>checkfs(use_cmd)<br ALIGN="LEFT"/><I>copy</I>(snapshot)<br ALIGN="LEFT"/>create()<br ALIGN="LEFT"/>create_from_latest_snapshot(name, size)<br ALIGN="LEFT"/>create_from_snapshot(name, snapshot, size)<br ALIGN="LEFT"/>create_from_volume_id(region_name, volume_id, name)<br ALIGN="LEFT"/>delete(delete_ebs_volume)<br ALIGN="LEFT"/>detach(force)<br ALIGN="LEFT"/>format()<br ALIGN="LEFT"/>freeze()<br ALIGN="LEFT"/>get_ec2_connection()<br ALIGN="LEFT"/><I>get_snapshot_from_date</I>(date)<br ALIGN="LEFT"/>get_snapshot_range(snaps, start_date, end_date)<br ALIGN="LEFT"/>get_snapshots()<br ALIGN="LEFT"/><I>grow</I>(size)<br ALIGN="LEFT"/>install_xfs()<br ALIGN="LEFT"/>make_ready(server)<br ALIGN="LEFT"/>mount()<br ALIGN="LEFT"/>snapshot()<br ALIGN="LEFT"/>trim_snapshots(delete)<br ALIGN="LEFT"/>unfreeze()<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.volume.VolumeAttribute" [color="black", fontcolor="black", label=<{VolumeAttribute|attrs : dict<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.volumestatus.VolumeStatus" [color="black", fontcolor="black", label=<{VolumeStatus|actions : NoneType<br ALIGN="LEFT"/>events : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>volume_status<br ALIGN="LEFT"/>zone : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.volumestatus.VolumeStatusSet" [color="black", fontcolor="black", label=<{VolumeStatusSet|connection : NoneType<br ALIGN="LEFT"/>next_token : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpc_peering_connection.VpcInfo" [color="black", fontcolor="black", label=<{VpcInfo|cidr_block : NoneType<br ALIGN="LEFT"/>owner_id : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpc_peering_connection.VpcPeeringConnection" [color="black", fontcolor="black", label=<{VpcPeeringConnection|accepter_vpc_info<br ALIGN="LEFT"/>expiration_time : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>requester_vpc_info<br ALIGN="LEFT"/>status_code<br ALIGN="LEFT"/>status_message<br ALIGN="LEFT"/>|delete()<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>update(validate, dry_run)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpc_peering_connection.VpcPeeringConnectionStatus" [color="black", fontcolor="black", label=<{VpcPeeringConnectionStatus|code : int<br ALIGN="LEFT"/>message : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.rds.optiongroup.VpcSecurityGroup" [color="black", fontcolor="black", label=<{VpcSecurityGroup|status : NoneType<br ALIGN="LEFT"/>vpc_id : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpnconnection.VpnConnection" [color="black", fontcolor="black", label=<{VpnConnection|customer_gateway_configuration : NoneType<br ALIGN="LEFT"/>customer_gateway_id : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>options : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>static_routes : list<br ALIGN="LEFT"/>tunnels : list<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>vpn_gateway_id : NoneType<br ALIGN="LEFT"/>|delete(dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpnconnection.VpnConnectionOptions" [color="black", fontcolor="black", label=<{VpnConnectionOptions|static_routes_only : NoneType, bool<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpngateway.VpnGateway" [color="black", fontcolor="black", label=<{VpnGateway|attachments : list<br ALIGN="LEFT"/>availability_zone : NoneType<br ALIGN="LEFT"/>id : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>type : NoneType<br ALIGN="LEFT"/>|attach(vpc_id, dry_run)<br ALIGN="LEFT"/>endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpnconnection.VpnStaticRoute" [color="black", fontcolor="black", label=<{VpnStaticRoute|available : NoneType<br ALIGN="LEFT"/>destination_cidr_block : NoneType<br ALIGN="LEFT"/>source : NoneType<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vpc.vpnconnection.VpnTunnel" [color="black", fontcolor="black", label=<{VpnTunnel|accepted_route_count : NoneType, int<br ALIGN="LEFT"/>last_status_change : NoneType, datetime<br ALIGN="LEFT"/>outside_ip_address : NoneType<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>status_message : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.website.WebsiteConfiguration" [color="black", fontcolor="black", label=<{WebsiteConfiguration|error_key : NoneType<br ALIGN="LEFT"/>redirect_all_requests_to : NoneType<br ALIGN="LEFT"/>routing_rules<br ALIGN="LEFT"/>suffix : NoneType<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.WorkflowExecution" [color="black", fontcolor="black", label=<{WorkflowExecution|runId : NoneType<br ALIGN="LEFT"/>workflowId : NoneType<br ALIGN="LEFT"/>|describe()<br ALIGN="LEFT"/>history()<br ALIGN="LEFT"/>request_cancel()<br ALIGN="LEFT"/>signal(signame)<br ALIGN="LEFT"/>terminate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.swf.layer2.WorkflowType" [color="black", fontcolor="black", label=<{WorkflowType|child_policy : str<br ALIGN="LEFT"/>task_list : NoneType<br ALIGN="LEFT"/>version : NoneType<br ALIGN="LEFT"/>|deprecate()<br ALIGN="LEFT"/>describe()<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.writer.Writer" [color="black", fontcolor="black", label=<{Writer|closed : bool<br ALIGN="LEFT"/>current_tree_hash<br ALIGN="LEFT"/>current_uploaded_size<br ALIGN="LEFT"/>next_part_index : int<br ALIGN="LEFT"/>partitioner<br ALIGN="LEFT"/>upload_id<br ALIGN="LEFT"/>uploader<br ALIGN="LEFT"/>vault<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_archive_id()<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vendored.six.X" [color="black", fontcolor="black", label=<{X|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.sdb.db.manager.xmlmanager.XMLConverter" [color="black", fontcolor="black", label=<{XMLConverter|manager<br ALIGN="LEFT"/>type_map : dict<br ALIGN="LEFT"/>|decode(item_type, value)<br ALIGN="LEFT"/>decode_bool(value)<br ALIGN="LEFT"/>decode_datetime(value)<br ALIGN="LEFT"/>decode_int(value)<br ALIGN="LEFT"/>decode_long(value)<br ALIGN="LEFT"/>decode_password(value)<br ALIGN="LEFT"/>decode_prop(prop, value)<br ALIGN="LEFT"/>decode_reference(value)<br ALIGN="LEFT"/>encode(item_type, value)<br ALIGN="LEFT"/>encode_bool(value)<br ALIGN="LEFT"/>encode_datetime(value)<br ALIGN="LEFT"/>encode_int(value)<br ALIGN="LEFT"/>encode_long(value)<br ALIGN="LEFT"/>encode_password(value)<br ALIGN="LEFT"/>encode_prop(prop, value)<br ALIGN="LEFT"/>encode_reference(value)<br ALIGN="LEFT"/>get_text_value(parent_node)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.manager.xmlmanager.XMLManager" [color="black", fontcolor="black", label=<{XMLManager|auth_header : NoneType, str<br ALIGN="LEFT"/>cls<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>converter<br ALIGN="LEFT"/>db_host<br ALIGN="LEFT"/>db_name<br ALIGN="LEFT"/>db_passwd<br ALIGN="LEFT"/>db_port<br ALIGN="LEFT"/>db_table<br ALIGN="LEFT"/>db_user<br ALIGN="LEFT"/>ddl_dir<br ALIGN="LEFT"/>doc : Document<br ALIGN="LEFT"/>enable_ssl<br ALIGN="LEFT"/>impl : DOMImplementation, NoneType<br ALIGN="LEFT"/>s3 : NoneType<br ALIGN="LEFT"/>|decode_value(prop, value)<br ALIGN="LEFT"/>delete_key_value(obj, name)<br ALIGN="LEFT"/>delete_object(obj)<br ALIGN="LEFT"/>encode_value(prop, value)<br ALIGN="LEFT"/>get_doc()<br ALIGN="LEFT"/>get_key_value(obj, name)<br ALIGN="LEFT"/>get_list(prop_node, item_type)<br ALIGN="LEFT"/>get_object(cls, id)<br ALIGN="LEFT"/>get_object_from_doc(cls, id, doc)<br ALIGN="LEFT"/><I>get_property</I>(prop, obj, name)<br ALIGN="LEFT"/>get_props_from_doc(cls, id, doc)<br ALIGN="LEFT"/>get_raw_item(obj)<br ALIGN="LEFT"/>get_s3_connection()<br ALIGN="LEFT"/>load_object(obj)<br ALIGN="LEFT"/>marshal_object(obj, doc)<br ALIGN="LEFT"/>new_doc()<br ALIGN="LEFT"/>query(cls, filters, limit, order_by)<br ALIGN="LEFT"/><I>query_gql</I>(query_string)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>save_list(doc, items, prop_node)<br ALIGN="LEFT"/>save_object(obj, expected_value)<br ALIGN="LEFT"/>set_key_value(obj, name, value)<br ALIGN="LEFT"/><I>set_property</I>(prop, obj, name, value)<br ALIGN="LEFT"/>unmarshal_object(fp, cls, id)<br ALIGN="LEFT"/>unmarshal_props(fp, cls, id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.mturk.question.XMLTemplate" [color="black", fontcolor="black", label=<{XMLTemplate|<br ALIGN="LEFT"/>|get_as_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.handler.XmlHandler" [color="black", fontcolor="black", label=<{XmlHandler|connection<br ALIGN="LEFT"/>current_text : str<br ALIGN="LEFT"/>nodes : list<br ALIGN="LEFT"/>|characters(content)<br ALIGN="LEFT"/>endElement(name)<br ALIGN="LEFT"/>startElement(name, attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.jsonresponse.XmlHandler" [color="black", fontcolor="black", label=<{XmlHandler|connection<br ALIGN="LEFT"/>current_text : str<br ALIGN="LEFT"/>nodes : list<br ALIGN="LEFT"/>|characters(content)<br ALIGN="LEFT"/>endElement(name)<br ALIGN="LEFT"/>parse(s)<br ALIGN="LEFT"/>startElement(name, attrs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.handler.XmlHandlerWrapper" [color="black", fontcolor="black", label=<{XmlHandlerWrapper|handler<br ALIGN="LEFT"/>parser<br ALIGN="LEFT"/>|parseString(content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.contrib.ymlmessage.YAMLMessage" [color="black", fontcolor="black", label=<{YAMLMessage|data : NoneType<br ALIGN="LEFT"/>|get_body()<br ALIGN="LEFT"/>set_body(body)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.ec2.zone.Zone" [color="black", fontcolor="black", label=<{Zone|messages : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>region_name : NoneType<br ALIGN="LEFT"/>state : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.route53.zone.Zone" [color="black", fontcolor="black", label=<{Zone|id<br ALIGN="LEFT"/>route53connection<br ALIGN="LEFT"/>|add_a(name, value, ttl, identifier, comment)<br ALIGN="LEFT"/>add_cname(name, value, ttl, identifier, comment)<br ALIGN="LEFT"/>add_mx(name, records, ttl, identifier, comment)<br ALIGN="LEFT"/>add_record(resource_type, name, value, ttl, identifier, comment)<br ALIGN="LEFT"/>delete()<br ALIGN="LEFT"/>delete_a(name, identifier, all)<br ALIGN="LEFT"/>delete_cname(name, identifier, all)<br ALIGN="LEFT"/>delete_mx(name, identifier, all)<br ALIGN="LEFT"/>delete_record(record, comment)<br ALIGN="LEFT"/>find_records(name, type, desired, all, identifier)<br ALIGN="LEFT"/>get_a(name, all)<br ALIGN="LEFT"/>get_cname(name, all)<br ALIGN="LEFT"/>get_mx(name, all)<br ALIGN="LEFT"/>get_nameservers()<br ALIGN="LEFT"/>get_records()<br ALIGN="LEFT"/>update_a(name, value, ttl, identifier, comment)<br ALIGN="LEFT"/>update_cname(name, value, ttl, identifier, comment)<br ALIGN="LEFT"/>update_mx(name, value, ttl, identifier, comment)<br ALIGN="LEFT"/>update_record(old_record, new_value, new_ttl, new_identifier, comment)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.connection._CallingFormat" [color="black", fontcolor="black", label=<{_CallingFormat|<br ALIGN="LEFT"/>|build_auth_path(bucket, key)<br ALIGN="LEFT"/>build_host(server, bucket)<br ALIGN="LEFT"/>build_path_base(bucket, key)<br ALIGN="LEFT"/>build_url_base(connection, protocol, server, bucket, key)<br ALIGN="LEFT"/>get_bucket_server(server, bucket)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.exception._EC2Error" [color="black", fontcolor="black", label=<{_EC2Error|connection : NoneType<br ALIGN="LEFT"/>error_code : NoneType<br ALIGN="LEFT"/>error_message : NoneType<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/>startElement(name, attrs, connection)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.utils.LRUCache._Item" [color="black", fontcolor="black", label=<{_Item|key<br ALIGN="LEFT"/>next : NoneType<br ALIGN="LEFT"/>previous : NoneType<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six._LazyDescr" [color="black", fontcolor="black", label=<{_LazyDescr|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six._LazyModule" [color="black", fontcolor="black", label=<{_LazyModule|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six._MovedItems" [color="black", fontcolor="black", label=<{_MovedItems|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.glacier.writer._Partitioner" [color="black", fontcolor="black", label=<{_Partitioner|part_size<br ALIGN="LEFT"/>send_fn<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.sdb.db.property._ReverseReferenceProperty" [color="black", fontcolor="black", label=<{_ReverseReferenceProperty|collection_name<br ALIGN="LEFT"/>data_type<br ALIGN="LEFT"/>item_type<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.vendored.six._SixMetaPathImporter" [color="black", fontcolor="black", label=<{_SixMetaPathImporter|get_source<br ALIGN="LEFT"/>known_modules : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|find_module(fullname, path)<br ALIGN="LEFT"/>get_code(fullname)<br ALIGN="LEFT"/>is_package(fullname)<br ALIGN="LEFT"/>load_module(fullname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.glacier.writer._Uploader" [color="black", fontcolor="black", label=<{_Uploader|archive_id : NoneType<br ALIGN="LEFT"/>chunk_size : int<br ALIGN="LEFT"/>closed : bool<br ALIGN="LEFT"/>part_size<br ALIGN="LEFT"/>upload_id<br ALIGN="LEFT"/>vault<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>skip_part(part_index, part_tree_hash, part_length)<br ALIGN="LEFT"/>upload_part(part_index, part_data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.s3.website._XMLKeyValue" [color="black", fontcolor="black", label=<{_XMLKeyValue|container : NoneType<br ALIGN="LEFT"/>translator<br ALIGN="LEFT"/>|endElement(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"boto.vendored.six.with_metaclass.metaclass" [color="black", fontcolor="black", label=<{metaclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"boto.auth.AnonAuthHandler" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.AnonAuthHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV1Handler" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV1Handler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV2Handler" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV2Handler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV3HTTPHandler" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV3HTTPHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV3Handler" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV3Handler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV4Handler" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.HmacAuthV4Handler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.POSTPathQSV2AuthHandler" -> "boto.auth.QuerySignatureV2AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.POSTPathQSV2AuthHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureHelper" -> "boto.auth.HmacKeys" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureV0AuthHandler" -> "boto.auth.QuerySignatureHelper" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureV0AuthHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureV1AuthHandler" -> "boto.auth.QuerySignatureHelper" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureV1AuthHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureV2AuthHandler" -> "boto.auth.QuerySignatureHelper" [arrowhead="empty", arrowtail="none"];
"boto.auth.QuerySignatureV2AuthHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.S3HmacAuthV4Handler" -> "boto.auth.HmacAuthV4Handler" [arrowhead="empty", arrowtail="none"];
"boto.auth.S3HmacAuthV4Handler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth.STSAnonHandler" -> "boto.auth_handler.AuthHandler" [arrowhead="empty", arrowtail="none"];
"boto.auth_handler.AuthHandler" -> "boto.plugin.Plugin" [arrowhead="empty", arrowtail="none"];
"boto.awslambda.exceptions.InvalidParameterValueException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.awslambda.exceptions.InvalidRequestContentException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.awslambda.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.awslambda.exceptions.ServiceException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.awslambda.layer1.AWSLambdaConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.IncompleteSignature" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InsufficientPrivileges" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InternalFailure" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InvalidAction" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InvalidClientTokenId" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InvalidParameterCombination" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InvalidParameterValue" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.InvalidQueryParameter" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.MalformedQueryString" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.MissingAction" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.MissingAuthenticationToken" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.MissingParameter" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.OperationInProgress" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.OptInRequired" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.RequestExpired" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.S3LocationNotInServiceRegion" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.S3SubscriptionRequired" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.ServiceUnavailable" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.SimpleException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.SourceBundleDeletion" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.Throttling" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.TooManyApplicationVersions" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.TooManyApplications" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.TooManyBuckets" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.TooManyConfigurationTemplates" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.TooManyEnvironments" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.exception.ValidationError" -> "boto.beanstalk.exception.SimpleException" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.layer1.Layer1" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ApplicationDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ApplicationVersionDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.AutoScalingGroup" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CheckDNSAvailabilityResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CheckDnsAvailabilityResponse" -> "boto.beanstalk.response.CheckDNSAvailabilityResponse" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ConfigurationOptionDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ConfigurationOptionSetting" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ConfigurationSettingsDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CreateApplicationResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CreateApplicationVersionResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CreateConfigurationTemplateResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CreateEnvironmentResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.CreateStorageLocationResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DeleteApplicationResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DeleteApplicationVersionResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DeleteConfigurationTemplateResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DeleteEnvironmentConfigurationResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeApplicationVersionsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeApplicationsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeConfigurationOptionsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeConfigurationSettingsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeEnvironmentResourcesResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeEnvironmentsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.DescribeEventsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.EnvironmentDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.EnvironmentInfoDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.EnvironmentResourceDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.EnvironmentResourcesDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.EventDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.Instance" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.LaunchConfiguration" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ListAvailableSolutionStacksResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.Listener" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.LoadBalancer" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.LoadBalancerDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.OptionRestrictionRegex" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.RebuildEnvironmentResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.RequestEnvironmentInfoResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.Response" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ResponseMetadata" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.RestartAppServerResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.RetrieveEnvironmentInfoResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.S3Location" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.SolutionStackDescription" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.SwapEnvironmentCNAMEsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.SwapEnvironmentCnamesResponse" -> "boto.beanstalk.response.SwapEnvironmentCNAMEsResponse" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.TerminateEnvironmentResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.Trigger" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.UpdateApplicationResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.UpdateApplicationVersionResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.UpdateConfigurationTemplateResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.UpdateEnvironmentResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ValidateConfigurationSettingsResponse" -> "boto.beanstalk.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.response.ValidationMessage" -> "boto.beanstalk.response.BaseObject" [arrowhead="empty", arrowtail="none"];
"boto.cloudformation.connection.CloudFormationConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.CloudFrontConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.distribution.StreamingDistribution" -> "boto.cloudfront.distribution.Distribution" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.distribution.StreamingDistributionConfig" -> "boto.cloudfront.distribution.DistributionConfig" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.distribution.StreamingDistributionSummary" -> "boto.cloudfront.distribution.DistributionSummary" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.exception.CloudFrontServerError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.object.Object" -> "boto.s3.key.Key" [arrowhead="empty", arrowtail="none"];
"boto.cloudfront.object.StreamingObject" -> "boto.cloudfront.object.Object" [arrowhead="empty", arrowtail="none"];
"boto.cloudhsm.exceptions.CloudHsmInternalException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudhsm.exceptions.CloudHsmServiceException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudhsm.exceptions.InvalidRequestException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudhsm.layer1.CloudHSMConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch.layer1.Layer1" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch.optionstatus.IndexFieldStatus" -> "boto.cloudsearch.optionstatus.OptionStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch.optionstatus.RankExpressionStatus" -> "boto.cloudsearch.optionstatus.IndexFieldStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch.optionstatus.ServicePoliciesStatus" -> "boto.cloudsearch.optionstatus.OptionStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.exceptions.BaseException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.exceptions.DisabledOperationException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.exceptions.InternalException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.exceptions.InvalidTypeException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.layer1.CloudSearchConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.optionstatus.AvailabilityOptionsStatus" -> "boto.cloudsearch2.optionstatus.OptionStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.optionstatus.ExpressionStatus" -> "boto.cloudsearch2.optionstatus.IndexFieldStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.optionstatus.IndexFieldStatus" -> "boto.cloudsearch2.optionstatus.OptionStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.optionstatus.ScalingParametersStatus" -> "boto.cloudsearch2.optionstatus.IndexFieldStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearch2.optionstatus.ServicePoliciesStatus" -> "boto.cloudsearch2.optionstatus.OptionStatus" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearchdomain.exceptions.DocumentServiceException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearchdomain.exceptions.SearchException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudsearchdomain.layer1.CloudSearchDomainConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.CloudWatchLogsDeliveryUnavailableException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InsufficientS3BucketPolicyException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InsufficientSnsTopicPolicyException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InternalErrorException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidCloudWatchLogsLogGroupArnException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidCloudWatchLogsRoleArnException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidLookupAttributesException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidMaxResultsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidNextTokenException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidS3BucketNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidS3PrefixException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidSnsTopicNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidTimeRangeException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.InvalidTrailNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.MaximumNumberOfTrailsExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.S3BucketDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.TrailAlreadyExistsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.TrailNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.exceptions.TrailNotProvidedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cloudtrail.layer1.CloudTrailConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.ApplicationAlreadyExistsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.ApplicationDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.ApplicationLimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.ApplicationNameRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.BucketNameFilterRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentAlreadyCompletedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentConfigAlreadyExistsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentConfigDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentConfigInUseException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentConfigLimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentConfigNameRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentGroupAlreadyExistsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentGroupDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentGroupLimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentGroupNameRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentIdRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentLimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DeploymentNotStartedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.DescriptionTooLongException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InstanceDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InstanceIdRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidApplicationNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidAutoScalingGroupException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidBucketNameFilterException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidDeployedStateFilterException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidDeploymentConfigNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidDeploymentGroupNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidDeploymentIdException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidDeploymentStatusException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidEC2TagException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidInstanceStatusException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidKeyPrefixFilterException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidMinimumHealthyHostValueException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidNextTokenException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidOperationException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidRevisionException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidRoleException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidSortByException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidSortOrderException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.InvalidTimeRangeException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.RevisionDoesNotExistException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.RevisionRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.exceptions.RoleRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.codedeploy.layer1.CodeDeployConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.DeveloperUserAlreadyRegisteredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.InternalErrorException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.InvalidParameterException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.NotAuthorizedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.ResourceConflictException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.exceptions.TooManyRequestsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.identity.layer1.CognitoIdentityConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.InternalErrorException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.InvalidConfigurationException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.InvalidParameterException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.NotAuthorizedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.ResourceConflictException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.exceptions.TooManyRequestsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.cognito.sync.layer1.CognitoSyncConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InsufficientDeliveryPolicyException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidConfigurationRecorderNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidDeliveryChannelNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidLimitException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidNextTokenException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidRoleException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidS3KeyPrefixException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidSNSTopicARNException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.InvalidTimeRangeException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.LastDeliveryChannelDeleteFailedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.MaxNumberOfConfigurationRecordersExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.MaxNumberOfDeliveryChannelsExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.NoAvailableConfigurationRecorderException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.NoAvailableDeliveryChannelException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.NoRunningConfigurationRecorderException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.NoSuchBucketException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.NoSuchConfigurationRecorderException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.NoSuchDeliveryChannelException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.ResourceNotDiscoveredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.exceptions.ValidationException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.configservice.layer1.ConfigServiceConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.connection.AWSQueryConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.contrib.ymlmessage.YAMLMessage" -> "boto.sqs.message.Message" [arrowhead="empty", arrowtail="none"];
"boto.datapipeline.exceptions.InternalServiceError" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.datapipeline.exceptions.InvalidRequestException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.datapipeline.exceptions.PipelineDeletedException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.datapipeline.exceptions.PipelineNotFoundException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.datapipeline.exceptions.TaskNotFoundException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.datapipeline.layer1.DataPipelineConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.directconnect.layer1.DirectConnectConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.BEGINS_WITH" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.BETWEEN" -> "boto.dynamodb.condition.ConditionTwoArgs" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.CONTAINS" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.ConditionNoArgs" -> "boto.dynamodb.condition.Condition" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.ConditionOneArg" -> "boto.dynamodb.condition.Condition" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.ConditionSeveralArgs" -> "boto.dynamodb.condition.Condition" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.ConditionTwoArgs" -> "boto.dynamodb.condition.Condition" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.EQ" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.GE" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.GT" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.IN" -> "boto.dynamodb.condition.ConditionSeveralArgs" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.LE" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.LT" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.NE" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.NOT_CONTAINS" -> "boto.dynamodb.condition.ConditionOneArg" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.NOT_NULL" -> "boto.dynamodb.condition.ConditionNoArgs" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.condition.NULL" -> "boto.dynamodb.condition.ConditionNoArgs" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBConditionalCheckFailedError" -> "boto.exception.DynamoDBResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBExpiredTokenError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBItemError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBKeyNotFoundError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBNumberError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBThroughputExceededError" -> "boto.exception.DynamoDBResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.exceptions.DynamoDBValidationError" -> "boto.exception.DynamoDBResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.layer1.Layer1" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.types.LossyFloatDynamizer" -> "boto.dynamodb.types.NonBooleanDynamizer" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb.types.NonBooleanDynamizer" -> "boto.dynamodb.types.Dynamizer" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ConditionalCheckFailedException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.InternalServerError" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ItemCollectionSizeLimitExceededException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ItemNotFound" -> "boto.dynamodb2.exceptions.DynamoDBError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.LimitExceededException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ProvisionedThroughputExceededException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.QueryError" -> "boto.dynamodb2.exceptions.DynamoDBError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ResourceInUseException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ResourceNotFoundException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.UnknownFilterTypeError" -> "boto.dynamodb2.exceptions.DynamoDBError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.UnknownIndexFieldError" -> "boto.dynamodb2.exceptions.DynamoDBError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.UnknownSchemaFieldError" -> "boto.dynamodb2.exceptions.DynamoDBError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.exceptions.ValidationException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.AllIndex" -> "boto.dynamodb2.fields.BaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.GlobalAllIndex" -> "boto.dynamodb2.fields.GlobalBaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.GlobalBaseIndexField" -> "boto.dynamodb2.fields.BaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.GlobalIncludeIndex" -> "boto.dynamodb2.fields.GlobalBaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.GlobalIncludeIndex" -> "boto.dynamodb2.fields.IncludeIndex" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.GlobalKeysOnlyIndex" -> "boto.dynamodb2.fields.GlobalBaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.HashKey" -> "boto.dynamodb2.fields.BaseSchemaField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.IncludeIndex" -> "boto.dynamodb2.fields.BaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.KeysOnlyIndex" -> "boto.dynamodb2.fields.BaseIndexField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.fields.RangeKey" -> "boto.dynamodb2.fields.BaseSchemaField" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.layer1.DynamoDBConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.dynamodb2.results.BatchGetResultSet" -> "boto.dynamodb2.results.ResultSet" [arrowhead="empty", arrowtail="none"];
"boto.ec2.address.Address" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.autoscale.AutoScaleConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.ec2.autoscale.policy.MetricCollectionTypes.Granularity" -> "boto.ec2.autoscale.policy.MetricCollectionTypes.BaseType" [arrowhead="empty", arrowtail="none"];
"boto.ec2.autoscale.policy.MetricCollectionTypes.Metric" -> "boto.ec2.autoscale.policy.MetricCollectionTypes.BaseType" [arrowhead="empty", arrowtail="none"];
"boto.ec2.bundleinstance.BundleInstanceTask" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.cloudwatch.CloudWatchConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.ec2.connection.EC2Connection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.ec2.ec2object.TaggedEC2Object" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.elb.ELBConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.ec2.image.Image" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.instance.Instance" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.instance.Reservation" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.instancetype.InstanceType" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.keypair.KeyPair" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.launchspecification.LaunchSpecification" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.networkinterface.NetworkInterface" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.placementgroup.PlacementGroup" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.regioninfo.EC2RegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.ec2.reservedinstance.ReservedInstance" -> "boto.ec2.reservedinstance.ReservedInstancesOffering" [arrowhead="empty", arrowtail="none"];
"boto.ec2.reservedinstance.ReservedInstanceListing" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.reservedinstance.ReservedInstancesOffering" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.securitygroup.SecurityGroup" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.snapshot.Snapshot" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.spotinstancerequest.SpotInstanceRequest" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.spotpricehistory.SpotPriceHistory" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.volume.Volume" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2.zone.Zone" -> "boto.ec2.ec2object.EC2Object" [arrowhead="empty", arrowtail="none"];
"boto.ec2containerservice.exceptions.ClientException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.ec2containerservice.exceptions.ServerException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.ec2containerservice.layer1.EC2ContainerServiceConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.ecs.ECSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.ecs.item.Item" -> "boto.ecs.item.ResponseGroup" [arrowhead="empty", arrowtail="none"];
"boto.ecs.item.ItemSet" -> "boto.ecs.item.ResponseGroup" [arrowhead="empty", arrowtail="none"];
"boto.elasticache.layer1.ElastiCacheConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.AccessDeniedException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.IncompatibleVersionException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.InternalServiceException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.LimitExceededException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.ResourceInUseException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.ResourceNotFoundException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.exceptions.ValidationException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.elastictranscoder.layer1.ElasticTranscoderConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.emr.connection.EmrConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.AddInstanceGroupsResponse" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.Application" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.Arg" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.BootstrapAction" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.BootstrapActionList" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.Cluster" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.ClusterStateChangeReason" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.ClusterSummary" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.ClusterSummaryList" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.ClusterTimeline" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.Ec2InstanceAttributes" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.HadoopStep" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.InstanceGroup" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.InstanceGroupInfo" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.InstanceGroupList" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.InstanceInfo" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.InstanceList" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.JobFlow" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.JobFlowStepList" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.KeyValue" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.ModifyInstanceGroupsResponse" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.RunJobFlowResponse" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.Step" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.StepConfig" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.StepId" -> "boto.emr.emrobject.Arg" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.StepSummary" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.StepSummaryList" -> "boto.emr.emrobject.EmrObject" [arrowhead="empty", arrowtail="none"];
"boto.emr.emrobject.SupportedProduct" -> "boto.emr.emrobject.Arg" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.HiveBase" -> "boto.emr.step.ScriptRunnerStep" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.HiveStep" -> "boto.emr.step.HiveBase" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.InstallHiveStep" -> "boto.emr.step.HiveBase" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.InstallPigStep" -> "boto.emr.step.PigBase" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.JarStep" -> "boto.emr.step.Step" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.PigBase" -> "boto.emr.step.ScriptRunnerStep" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.PigStep" -> "boto.emr.step.PigBase" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.ScriptRunnerStep" -> "boto.emr.step.JarStep" [arrowhead="empty", arrowtail="none"];
"boto.emr.step.StreamingStep" -> "boto.emr.step.Step" [arrowhead="empty", arrowtail="none"];
"boto.exception.AWSConnectionError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.exception.DynamoDBResponseError" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.exception.EC2ResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.EmrResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.GSCopyError" -> "boto.exception.StorageCopyError" [arrowhead="empty", arrowtail="none"];
"boto.exception.GSCreateError" -> "boto.exception.StorageCreateError" [arrowhead="empty", arrowtail="none"];
"boto.exception.GSDataError" -> "boto.exception.StorageDataError" [arrowhead="empty", arrowtail="none"];
"boto.exception.GSPermissionsError" -> "boto.exception.StoragePermissionsError" [arrowhead="empty", arrowtail="none"];
"boto.exception.GSResponseError" -> "boto.exception.StorageResponseError" [arrowhead="empty", arrowtail="none"];
"boto.exception.JSONResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.S3CopyError" -> "boto.exception.StorageCopyError" [arrowhead="empty", arrowtail="none"];
"boto.exception.S3CreateError" -> "boto.exception.StorageCreateError" [arrowhead="empty", arrowtail="none"];
"boto.exception.S3DataError" -> "boto.exception.StorageDataError" [arrowhead="empty", arrowtail="none"];
"boto.exception.S3PermissionsError" -> "boto.exception.StoragePermissionsError" [arrowhead="empty", arrowtail="none"];
"boto.exception.S3ResponseError" -> "boto.exception.StorageResponseError" [arrowhead="empty", arrowtail="none"];
"boto.exception.SDBResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.SQSDecodeError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.exception.SQSError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.SWFResponseError" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.exception.StorageCopyError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.StorageCreateError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.exception.StorageDataError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.exception.StoragePermissionsError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.exception.StorageResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.fps.connection.FPSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.AccessFailure" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.AccountClosed" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.AccountLimitsExceeded" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.AmountOutOfRange" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.AuthFailure" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.ConcurrentModification" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.DuplicateRequest" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InactiveInstrument" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.IncompatibleTokens" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InstrumentAccessDenied" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InstrumentExpired" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InsufficientBalance" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InternalError" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidAccountState" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidAccountState_Caller" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidAccountState_Recipient" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidAccountState_Sender" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidCallerReference" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidClientTokenId" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidDateRange" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidParams" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidPaymentInstrument" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidPaymentMethod" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidRecipientForCCTransaction" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidSenderRoleForAccountType" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidTokenId" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidTokenId_Recipient" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidTokenId_Sender" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidTokenType" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidTransactionId" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.InvalidTransactionState" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.NotMarketplaceApp" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.OriginalTransactionFailed" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.OriginalTransactionIncomplete" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.PaymentInstrumentNotCC" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.PaymentMethodNotDefined" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.PrepaidFundingLimitExceeded" -> "boto.fps.exception.RetriableResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.RefundAmountExceeded" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.ResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.ResponseErrorFactory" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.RetriableResponseError" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.SameSenderAndRecipient" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.SameTokenIdUsedMultipleTimes" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.SenderNotOriginalRecipient" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.SettleAmountGreaterThanDebt" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.SettleAmountGreaterThanReserveAmount" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.SignatureDoesNotMatch" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TokenAccessDenied" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TokenNotActive" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TokenNotActive_Recipient" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TokenNotActive_Sender" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TokenUsageError" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TransactionDenied" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TransactionFullyRefundedAlready" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.TransactionTypeNotRefundable" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.UnverifiedAccount_Recipient" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.UnverifiedAccount_Sender" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.UnverifiedBankAccount" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.UnverifiedEmailAddress_Caller" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.UnverifiedEmailAddress_Recipient" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.exception.UnverifiedEmailAddress_Sender" -> "boto.fps.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.AccountBalance" -> "boto.fps.response.AmountCollection" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.AmountCollection" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.ComplexAmount" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetAccountActivityResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetAccountBalanceResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetOutstandingDebtBalanceResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetPrepaidBalanceResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetTokensResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetTotalPrepaidLiabilityResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.GetTransactionResult" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.Response" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.ResponseFactory.FPSResponse" -> "boto.fps.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.Transaction" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.fps.response.TransactionPart" -> "boto.fps.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.glacier.concurrent.ConcurrentDownloader" -> "boto.glacier.concurrent.ConcurrentTransferer" [arrowhead="empty", arrowtail="none"];
"boto.glacier.concurrent.ConcurrentUploader" -> "boto.glacier.concurrent.ConcurrentTransferer" [arrowhead="empty", arrowtail="none"];
"boto.glacier.concurrent.DownloadWorkerThread" -> "boto.glacier.concurrent.TransferThread" [arrowhead="empty", arrowtail="none"];
"boto.glacier.concurrent.UploadWorkerThread" -> "boto.glacier.concurrent.TransferThread" [arrowhead="empty", arrowtail="none"];
"boto.glacier.exceptions.DownloadArchiveError" -> "boto.glacier.exceptions.ArchiveError" [arrowhead="empty", arrowtail="none"];
"boto.glacier.exceptions.TreeHashDoesNotMatchError" -> "boto.glacier.exceptions.ArchiveError" [arrowhead="empty", arrowtail="none"];
"boto.glacier.exceptions.UploadArchiveError" -> "boto.glacier.exceptions.ArchiveError" [arrowhead="empty", arrowtail="none"];
"boto.glacier.layer1.Layer1" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.gs.bucket.Bucket" -> "boto.s3.bucket.Bucket" [arrowhead="empty", arrowtail="none"];
"boto.gs.connection.GSConnection" -> "boto.s3.connection.S3Connection" [arrowhead="empty", arrowtail="none"];
"boto.gs.key.Key" -> "boto.s3.key.Key" [arrowhead="empty", arrowtail="none"];
"boto.iam.IAMRegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.iam.connection.IAMConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.ExpiredIteratorException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.InvalidArgumentException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.ProvisionedThroughputExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.ResourceInUseException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.exceptions.SubscriptionRequiredException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kinesis.layer1.KinesisConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.AlreadyExistsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.DependencyTimeoutException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.DisabledException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.InvalidAliasNameException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.InvalidArnException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.InvalidCiphertextException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.InvalidGrantTokenException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.InvalidKeyUsageException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.InvalidMarkerException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.KMSInternalException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.KeyUnavailableException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.MalformedPolicyDocumentException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.NotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.exceptions.UnsupportedOperationException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.kms.layer1.KMSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.DataAlreadyAcceptedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.InvalidParameterException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.InvalidSequenceTokenException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.OperationAbortedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.ResourceAlreadyExistsException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.ResourceInUseException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.exceptions.ServiceUnavailableException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.logs.layer1.CloudWatchLogsConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.IdempotentParameterMismatchException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.InternalServerException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.InvalidInputException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.LimitExceededException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.PredictorNotMountedException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.ResourceInUseException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.exceptions.ResourceNotFoundException" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.machinelearning.layer1.MachineLearningConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.manage.server.Server" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.manage.task.Task" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.manage.volume.Volume" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.mashups.order.Item" -> "boto.mashups.iobject.IObject" [arrowhead="empty", arrowtail="none"];
"boto.mashups.order.Order" -> "boto.mashups.iobject.IObject" [arrowhead="empty", arrowtail="none"];
"boto.mashups.server.Server" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.Assignment" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.FileUploadURL" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.HIT" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.HITTypeId" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.MTurkConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.MTurkRequestError" -> "boto.exception.EC2ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.Qualification" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.QualificationRequest" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.QualificationType" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.connection.QuestionFormAnswer" -> "boto.mturk.connection.BaseAutoResultElement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.AdultRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.LocaleRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.NumberHitsApprovedRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.PercentAssignmentsAbandonedRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.PercentAssignmentsApprovedRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.PercentAssignmentsRejectedRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.PercentAssignmentsReturnedRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.qualification.PercentAssignmentsSubmittedRequirement" -> "boto.mturk.qualification.Requirement" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.Binary" -> "boto.mturk.question.XMLTemplate" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.Constraints" -> "boto.mturk.question.OrderedContent" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.ExternalQuestion" -> "boto.mturk.question.ValidatingXML" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.Flash" -> "boto.mturk.question.Application" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.FormattedContent" -> "boto.mturk.question.XMLTemplate" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.HTMLQuestion" -> "boto.mturk.question.ValidatingXML" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.JavaApplet" -> "boto.mturk.question.Application" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.LengthConstraint" -> "boto.mturk.question.Constraint" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.NumericConstraint" -> "boto.mturk.question.Constraint" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.Overview" -> "boto.mturk.question.OrderedContent" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.QuestionContent" -> "boto.mturk.question.OrderedContent" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.QuestionForm" -> "boto.mturk.question.ValidatingXML" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.RegExConstraint" -> "boto.mturk.question.Constraint" [arrowhead="empty", arrowtail="none"];
"boto.mturk.question.SimpleField" -> "boto.mturk.question.XMLTemplate" [arrowhead="empty", arrowtail="none"];
"boto.mws.connection.MWSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.mws.exception.InvalidAddress" -> "boto.mws.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.mws.exception.InvalidParameter" -> "boto.mws.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.mws.exception.InvalidParameterValue" -> "boto.mws.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.mws.exception.ResponseError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.mws.exception.ResponseErrorFactory" -> "boto.mws.response.ResponseFactory" [arrowhead="empty", arrowtail="none"];
"boto.mws.exception.RetriableResponseError" -> "boto.mws.exception.ResponseError" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.AttributeSet" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.AuthorizationDetails" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.AuthorizeResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CancelFeedSubmissionsResult" -> "boto.mws.response.GetFeedSubmissionListResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CancelReportRequestsResult" -> "boto.mws.response.RequestReportResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CaptureDetails" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CaptureResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Cart" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CartItem" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CompetitivePrice" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CompetitivePriceList" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CompetitivePricing" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ComplexAmount" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ComplexDimensions" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ComplexMoney" -> "boto.mws.response.ComplexAmount" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ComplexWeight" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.CreateInboundShipmentPlanResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Customer" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.DeclarativeType.__init__.JITResponse" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Destination" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Dimension" -> "boto.mws.response.ComplexType" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Element" -> "boto.mws.response.DeclarativeType" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ElementList" -> "boto.mws.response.SimpleList" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.FeedSubmissionInfo" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.FulfillmentOrder" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.FulfillmentPreview" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.FulfillmentPreviewItem" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetAuthorizationDetailsResult" -> "boto.mws.response.AuthorizeResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetCaptureDetailsResult" -> "boto.mws.response.CaptureResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetCartsResult" -> "boto.mws.response.ListCartsResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetCompetitivePricingForASINResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetCompetitivePricingForSKUResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetCustomersForCustomerIdResult" -> "boto.mws.response.ListCustomersResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetFeedSubmissionCountResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetFeedSubmissionListResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetFulfillmentOrderResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetFulfillmentPreviewResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetLowestOfferListingsForASINResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetLowestOfferListingsForSKUResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetMatchingProductForIdResponse" -> "boto.mws.response.ResponseResultList" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetMatchingProductForIdResult" -> "boto.mws.response.ListMatchingProductsResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetMatchingProductResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetMyPriceForASINResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetMyPriceForSKUResponse" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetOrderReferenceDetailsResult" -> "boto.mws.response.SetOrderReferenceDetailsResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetOrderResult" -> "boto.mws.response.ListOrdersResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetPackageTrackingDetailsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetProductCategoriesForASINResult" -> "boto.mws.response.GetProductCategoriesResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetProductCategoriesForSKUResult" -> "boto.mws.response.GetProductCategoriesResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetProductCategoriesResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetRefundDetails" -> "boto.mws.response.RefundResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetReportListResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetReportRequestListResult" -> "boto.mws.response.RequestReportResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetReportScheduleListResult" -> "boto.mws.response.ManageReportScheduleResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetServiceStatusResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.GetSubscriptionResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Image" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ItemAttributes" -> "boto.mws.response.AttributeSet" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListAllFulfillmentOrdersResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListCartsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListCustomersResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListInboundShipmentItemsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListInboundShipmentsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListInventorySupplyResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListMarketplaceParticipationsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListMatchingProductsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListOrderItemsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListOrdersResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListRecommendationsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListRegisteredDestinationsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ListSubscriptionsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.LowestOfferListing" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ManageReportScheduleResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.MemberList" -> "boto.mws.response.Element" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Offer" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Order" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.OrderItem" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.OrderReferenceDetails" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Price" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Product" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ProductCategory" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ProductsBulkOperationResponse" -> "boto.mws.response.ResponseResultList" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ProductsBulkOperationResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.RefundDetails" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.RefundResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ReportRequestInfo" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.RequestReportResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Response" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.ResponseResultList" -> "boto.mws.response.Response" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.SalesRank" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.SetOrderReferenceDetailsResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.SimpleList" -> "boto.mws.response.DeclarativeType" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.SubmitFeedResult" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.Subscription" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.UpdateReportAcknowledgementsResult" -> "boto.mws.response.GetReportListResult" [arrowhead="empty", arrowtail="none"];
"boto.mws.response.VariationRelationship" -> "boto.mws.response.ResponseElement" [arrowhead="empty", arrowtail="none"];
"boto.opsworks.exceptions.ResourceNotFoundException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.opsworks.exceptions.ValidationException" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.opsworks.layer1.OpsWorksConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.pyami.bootstrap.Bootstrap" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="empty", arrowtail="none"];
"boto.pyami.copybot.CopyBot" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="empty", arrowtail="none"];
"boto.pyami.helloworld.HelloWorld" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="empty", arrowtail="none"];
"boto.pyami.installers.Installer" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="empty", arrowtail="none"];
"boto.pyami.installers.ubuntu.apache.Apache" -> "boto.pyami.installers.ubuntu.installer.Installer" [arrowhead="empty", arrowtail="none"];
"boto.pyami.installers.ubuntu.ebs.EBSInstaller" -> "boto.pyami.installers.ubuntu.installer.Installer" [arrowhead="empty", arrowtail="none"];
"boto.pyami.installers.ubuntu.installer.Installer" -> "boto.pyami.installers.Installer" [arrowhead="empty", arrowtail="none"];
"boto.pyami.installers.ubuntu.mysql.MySQL" -> "boto.pyami.installers.ubuntu.installer.Installer" [arrowhead="empty", arrowtail="none"];
"boto.pyami.installers.ubuntu.trac.Trac" -> "boto.pyami.installers.ubuntu.installer.Installer" [arrowhead="empty", arrowtail="none"];
"boto.pyami.startup.Startup" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="empty", arrowtail="none"];
"boto.rds.RDSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.rds.regioninfo.RDSRegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.AuthorizationAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.AuthorizationNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.AuthorizationQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBInstanceAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBInstanceNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBParameterGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBParameterGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBParameterGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSecurityGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSecurityGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSecurityGroupNotSupported" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSecurityGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSnapshotAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSnapshotNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSubnetGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSubnetGroupDoesNotCoverEnoughAZs" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSubnetGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSubnetGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBSubnetQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.DBUpgradeDependencyFailure" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.EventSubscriptionQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InstanceQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InsufficientDBInstanceCapacity" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidDBInstanceState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidDBParameterGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidDBSecurityGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidDBSnapshotState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidDBSubnetGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidDBSubnetState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidEventSubscriptionState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidOptionGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidRestore" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidSubnet" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.InvalidVPCNetworkState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.OptionGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.OptionGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.OptionGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.PointInTimeRestoreNotEnabled" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.ProvisionedIopsNotAvailableInAZ" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.ReservedDBInstanceAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.ReservedDBInstanceNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.ReservedDBInstanceQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.ReservedDBInstancesOfferingNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SNSInvalidTopic" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SNSNoAuthorization" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SNSTopicArnNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SnapshotQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SourceNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.StorageQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SubnetAlreadyInUse" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SubscriptionAlreadyExist" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SubscriptionCategoryNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.exceptions.SubscriptionNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.rds2.layer1.RDSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AccessToSnapshotDenied" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AccessToSnapshotDeniedFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AuthorizationAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AuthorizationAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AuthorizationNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AuthorizationNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AuthorizationQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.AuthorizationQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.BucketNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterParameterGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterParameterGroupAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterParameterGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterParameterGroupNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterParameterGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterParameterGroupQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSecurityGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSecurityGroupAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSecurityGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSecurityGroupNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSecurityGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSecurityGroupQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSnapshotAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSnapshotAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSnapshotNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSnapshotNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSnapshotQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSnapshotQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetGroupAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetGroupAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetGroupNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetGroupNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetGroupQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetGroupQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ClusterSubnetQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.CopyToRegionDisabled" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.EventSubscriptionQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.HsmClientCertificateAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.HsmClientCertificateNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.HsmClientCertificateQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.HsmConfigurationAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.HsmConfigurationNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.HsmConfigurationQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.IncompatibleOrderableOptions" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InsufficientClusterCapacity" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InsufficientClusterCapacityFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InsufficientS3BucketPolicy" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterParameterGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterParameterGroupStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSecurityGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSecurityGroupStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSnapshotState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSnapshotStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSubnetGroupState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSubnetGroupStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSubnetState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidClusterSubnetStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidElasticIp" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidHsmClientCertificateState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidHsmConfigurationState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidParameterCombinationFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidRestore" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidRestoreFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidS3BucketName" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidS3KeyPrefix" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidSubnet" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidSubscriptionState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidVPCNetworkState" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.InvalidVPCNetworkStateFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.NumberOfNodesPerClusterLimitExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.NumberOfNodesPerClusterLimitExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.NumberOfNodesQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.NumberOfNodesQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeAlreadyExists" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeAlreadyExistsFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeOfferingNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeOfferingNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeQuotaExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ReservedNodeQuotaExceededFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ResizeNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.ResizeNotFoundFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SNSInvalidTopic" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SNSNoAuthorization" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SNSTopicArnNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SnapshotCopyAlreadyDisabled" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SnapshotCopyAlreadyEnabled" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SnapshotCopyDisabled" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SourceNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SubnetAlreadyInUse" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SubscriptionAlreadyExist" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SubscriptionCategoryNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SubscriptionEventIdNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SubscriptionNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.SubscriptionSeverityNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.UnauthorizedOperation" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.UnauthorizedOperationFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.UnknownSnapshotCopyRegion" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.UnsupportedOption" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.exceptions.UnsupportedOptionFault" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.redshift.layer1.RedshiftConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.requestlog.RequestLogger" -> "boto.utils.RequestHook" [arrowhead="empty", arrowtail="none"];
"boto.roboto.awsqueryrequest.EncoderError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.roboto.awsqueryrequest.FilterError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.roboto.awsqueryrequest.RequiredParamError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.roboto.awsqueryservice.AWSQueryService" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.roboto.awsqueryservice.NoCredentialsError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.roboto.param.Param" -> "boto.roboto.param.Converter" [arrowhead="empty", arrowtail="none"];
"boto.route53.Route53RegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.route53.connection.Route53Connection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.exceptions.DomainLimitExceeded" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.exceptions.DuplicateRequest" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.exceptions.InvalidInput" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.exceptions.OperationLimitExceeded" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.exceptions.TLDRulesViolation" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.exceptions.UnsupportedTLD" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.domains.layer1.Route53DomainsConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.route53.exception.DNSServerError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.route53.record.ResourceRecordSets" -> "boto.resultset.ResultSet" [arrowhead="empty", arrowtail="none"];
"boto.s3.S3RegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.s3.connection.HostRequiredError" -> "boto.exception.BotoClientError" [arrowhead="empty", arrowtail="none"];
"boto.s3.connection.OrdinaryCallingFormat" -> "boto.s3.connection._CallingFormat" [arrowhead="empty", arrowtail="none"];
"boto.s3.connection.ProtocolIndependentOrdinaryCallingFormat" -> "boto.s3.connection.OrdinaryCallingFormat" [arrowhead="empty", arrowtail="none"];
"boto.s3.connection.S3Connection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.s3.connection.SubdomainCallingFormat" -> "boto.s3.connection._CallingFormat" [arrowhead="empty", arrowtail="none"];
"boto.s3.connection.VHostCallingFormat" -> "boto.s3.connection._CallingFormat" [arrowhead="empty", arrowtail="none"];
"boto.s3.website.Condition" -> "boto.s3.website._XMLKeyValue" [arrowhead="empty", arrowtail="none"];
"boto.s3.website.Redirect" -> "boto.s3.website._XMLKeyValue" [arrowhead="empty", arrowtail="none"];
"boto.s3.website.RedirectLocation" -> "boto.s3.website._XMLKeyValue" [arrowhead="empty", arrowtail="none"];
"boto.sdb.connection.SDBConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.model.Expando" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.BlobProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.BooleanProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.DateProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.DateTimeProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.FloatProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.IntegerProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.ListProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.LongProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.MapProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.PasswordProperty" -> "boto.sdb.db.property.StringProperty" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.ReferenceProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.S3KeyProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.StringProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.TextProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property.TimeProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.property._ReverseReferenceProperty" -> "boto.sdb.db.property.Property" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestAutoNow" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestBasic" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestFloat" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestList" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestListReference" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestMap" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestPassword" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestReference" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestRequired" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestSubClass" -> "boto.sdb.db.test_db.TestBasic" [arrowhead="empty", arrowtail="none"];
"boto.sdb.db.test_db.TestUnique" -> "boto.sdb.db.model.Model" [arrowhead="empty", arrowtail="none"];
"boto.sdb.regioninfo.SDBRegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.services.message.ServiceMessage" -> "boto.sqs.message.MHMessage" [arrowhead="empty", arrowtail="none"];
"boto.services.service.Service" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="empty", arrowtail="none"];
"boto.services.servicedef.ServiceDef" -> "boto.pyami.config.Config" [arrowhead="empty", arrowtail="none"];
"boto.services.sonofmmm.SonOfMMM" -> "boto.services.service.Service" [arrowhead="empty", arrowtail="none"];
"boto.ses.connection.SESConnection" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESAddressBlacklistedError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESAddressNotVerifiedError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESDailyQuotaExceededError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESDomainEndsWithDotError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESDomainNotConfirmedError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESError" -> "boto.exception.BotoServerError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESIdentityNotVerifiedError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESIllegalAddressError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESLocalAddressCharacterError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.ses.exceptions.SESMaxSendingRateExceededError" -> "boto.ses.exceptions.SESError" [arrowhead="empty", arrowtail="none"];
"boto.sns.connection.SNSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.sqs.bigmessage.BigMessage" -> "boto.sqs.message.RawMessage" [arrowhead="empty", arrowtail="none"];
"boto.sqs.connection.SQSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.sqs.jsonmessage.JSONMessage" -> "boto.sqs.message.MHMessage" [arrowhead="empty", arrowtail="none"];
"boto.sqs.message.EncodedMHMessage" -> "boto.sqs.message.MHMessage" [arrowhead="empty", arrowtail="none"];
"boto.sqs.message.MHMessage" -> "boto.sqs.message.Message" [arrowhead="empty", arrowtail="none"];
"boto.sqs.message.Message" -> "boto.sqs.message.RawMessage" [arrowhead="empty", arrowtail="none"];
"boto.sqs.regioninfo.SQSRegionInfo" -> "boto.regioninfo.RegionInfo" [arrowhead="empty", arrowtail="none"];
"boto.storage_uri.BucketStorageUri" -> "boto.storage_uri.StorageUri" [arrowhead="empty", arrowtail="none"];
"boto.storage_uri.FileStorageUri" -> "boto.storage_uri.StorageUri" [arrowhead="empty", arrowtail="none"];
"boto.sts.connection.STSConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.AttachmentIdNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.AttachmentLimitExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.AttachmentSetExpired" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.AttachmentSetIdNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.AttachmentSetSizeLimitExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.CaseCreationLimitExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.CaseIdNotFound" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.DescribeAttachmentLimitExceeded" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.exceptions.InternalServerError" -> "boto.exception.JSONResponseError" [arrowhead="empty", arrowtail="none"];
"boto.support.layer1.SupportConnection" -> "boto.connection.AWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"boto.swf.exceptions.SWFDomainAlreadyExistsError" -> "boto.exception.SWFResponseError" [arrowhead="empty", arrowtail="none"];
"boto.swf.exceptions.SWFLimitExceededError" -> "boto.exception.SWFResponseError" [arrowhead="empty", arrowtail="none"];
"boto.swf.exceptions.SWFOperationNotPermittedError" -> "boto.exception.SWFResponseError" [arrowhead="empty", arrowtail="none"];
"boto.swf.exceptions.SWFTypeAlreadyExistsError" -> "boto.exception.SWFResponseError" [arrowhead="empty", arrowtail="none"];
"boto.swf.exceptions.SWFWorkflowExecutionAlreadyStartedError" -> "boto.exception.SWFResponseError" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer1.Layer1" -> "boto.connection.AWSAuthConnection" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.ActivityType" -> "boto.swf.layer2.SWFBase" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.ActivityWorker" -> "boto.swf.layer2.Actor" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.Actor" -> "boto.swf.layer2.SWFBase" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.Decider" -> "boto.swf.layer2.Actor" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.Domain" -> "boto.swf.layer2.SWFBase" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.WorkflowExecution" -> "boto.swf.layer2.SWFBase" [arrowhead="empty", arrowtail="none"];
"boto.swf.layer2.WorkflowType" -> "boto.swf.layer2.SWFBase" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.Module_six_moves_urllib_error" -> "boto.vendored.six._LazyModule" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.Module_six_moves_urllib_parse" -> "boto.vendored.six._LazyModule" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.Module_six_moves_urllib_request" -> "boto.vendored.six._LazyModule" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.Module_six_moves_urllib_response" -> "boto.vendored.six._LazyModule" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.Module_six_moves_urllib_robotparser" -> "boto.vendored.six._LazyModule" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.MovedAttribute" -> "boto.vendored.six._LazyDescr" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six.MovedModule" -> "boto.vendored.six._LazyDescr" [arrowhead="empty", arrowtail="none"];
"boto.vendored.six._MovedItems" -> "boto.vendored.six._LazyModule" [arrowhead="empty", arrowtail="none"];
"boto.vpc.VPCConnection" -> "boto.ec2.connection.EC2Connection" [arrowhead="empty", arrowtail="none"];
"boto.vpc.customergateway.CustomerGateway" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.dhcpoptions.DhcpOptions" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.internetgateway.InternetGateway" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.networkacl.NetworkAcl" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.routetable.RouteTable" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.subnet.Subnet" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.vpc.VPC" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.vpc_peering_connection.VpcPeeringConnection" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.vpnconnection.VpnConnection" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.vpc.vpngateway.VpnGateway" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="empty", arrowtail="none"];
"boto.beanstalk.layer1.Layer1" -> "boto.beanstalk.wrapper.Layer1Wrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="api", style="solid"];
"boto.beanstalk.response.ApplicationDescription" -> "boto.beanstalk.response.CreateApplicationResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application", style="solid"];
"boto.beanstalk.response.ApplicationDescription" -> "boto.beanstalk.response.UpdateApplicationResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application", style="solid"];
"boto.beanstalk.response.ApplicationVersionDescription" -> "boto.beanstalk.response.CreateApplicationVersionResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application_version", style="solid"];
"boto.beanstalk.response.ApplicationVersionDescription" -> "boto.beanstalk.response.UpdateApplicationVersionResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application_version", style="solid"];
"boto.beanstalk.response.EnvironmentResourceDescription" -> "boto.beanstalk.response.DescribeEnvironmentResourcesResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="environment_resources", style="solid"];
"boto.beanstalk.response.EnvironmentResourcesDescription" -> "boto.beanstalk.response.CreateEnvironmentResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resources", style="solid"];
"boto.beanstalk.response.EnvironmentResourcesDescription" -> "boto.beanstalk.response.EnvironmentDescription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resources", style="solid"];
"boto.beanstalk.response.EnvironmentResourcesDescription" -> "boto.beanstalk.response.TerminateEnvironmentResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resources", style="solid"];
"boto.beanstalk.response.EnvironmentResourcesDescription" -> "boto.beanstalk.response.UpdateEnvironmentResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resources", style="solid"];
"boto.beanstalk.response.LoadBalancerDescription" -> "boto.beanstalk.response.EnvironmentResourcesDescription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="load_balancer", style="solid"];
"boto.beanstalk.response.OptionRestrictionRegex" -> "boto.beanstalk.response.ConfigurationOptionDescription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="regex", style="solid"];
"boto.beanstalk.response.ResponseMetadata" -> "boto.beanstalk.response.Response" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="response_metadata", style="solid"];
"boto.beanstalk.response.S3Location" -> "boto.beanstalk.response.ApplicationVersionDescription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="source_bundle", style="solid"];
"boto.cloudformation.stack.Tag" -> "boto.cloudformation.stack.Stack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tags", style="solid"];
"boto.cloudfront.distribution.DistributionConfig" -> "boto.cloudfront.distribution.Distribution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"boto.cloudfront.distribution.StreamingDistributionConfig" -> "boto.cloudfront.distribution.StreamingDistribution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"boto.cloudfront.identity.OriginAccessIdentityConfig" -> "boto.cloudfront.identity.OriginAccessIdentity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"boto.cloudfront.logging.LoggingInfo" -> "boto.cloudfront.distribution.DistributionConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logging", style="solid"];
"boto.cloudfront.origin.CustomOrigin" -> "boto.cloudfront.distribution.DistributionConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="origin", style="solid"];
"boto.cloudfront.origin.CustomOrigin" -> "boto.cloudfront.distribution.DistributionSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="origin", style="solid"];
"boto.cloudfront.origin.S3Origin" -> "boto.cloudfront.distribution.DistributionConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="origin", style="solid"];
"boto.cloudfront.origin.S3Origin" -> "boto.cloudfront.distribution.DistributionSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="origin", style="solid"];
"boto.cloudfront.signers.ActiveTrustedSigners" -> "boto.cloudfront.distribution.Distribution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="active_signers", style="solid"];
"boto.cloudfront.signers.TrustedSigners" -> "boto.cloudfront.distribution.DistributionConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="trusted_signers", style="solid"];
"boto.cloudfront.signers.TrustedSigners" -> "boto.cloudfront.distribution.DistributionSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="trusted_signers", style="solid"];
"boto.cloudsearch.layer1.Layer1" -> "boto.cloudsearch.layer2.Layer2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer1", style="solid"];
"boto.cloudsearch2.layer1.CloudSearchConnection" -> "boto.cloudsearch2.layer2.Layer2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer1", style="solid"];
"boto.cloudsearchdomain.layer1.CloudSearchDomainConnection" -> "boto.cloudsearch2.document.DocumentServiceConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="domain_connection", style="solid"];
"boto.cloudsearchdomain.layer1.CloudSearchDomainConnection" -> "boto.cloudsearch2.search.SearchConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="domain_connection", style="solid"];
"boto.connection.ConnectionPool" -> "boto.connection.AWSAuthConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_pool", style="solid"];
"boto.dynamodb.layer1.Layer1" -> "boto.dynamodb.layer2.Layer2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer1", style="solid"];
"boto.dynamodb.schema.Schema" -> "boto.dynamodb.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_schema", style="solid"];
"boto.dynamodb.types.Dynamizer" -> "boto.dynamodb2.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dynamizer", style="solid"];
"boto.dynamodb.types.LossyFloatDynamizer" -> "boto.dynamodb.layer2.Layer2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dynamizer", style="solid"];
"boto.dynamodb.types.NonBooleanDynamizer" -> "boto.dynamodb.layer2.Layer2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dynamizer", style="solid"];
"boto.dynamodb.types.NonBooleanDynamizer" -> "boto.dynamodb2.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dynamizer", style="solid"];
"boto.dynamodb2.layer1.DynamoDBConnection" -> "boto.dynamodb2.table.Table" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"boto.ec2.attributes.AttributeValues" -> "boto.ec2.attributes.AccountAttribute" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attribute_values", style="solid"];
"boto.ec2.autoscale.launchconfig.Ebs" -> "boto.ec2.autoscale.launchconfig.BlockDeviceMapping" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ebs", style="solid"];
"boto.ec2.autoscale.launchconfig.InstanceMonitoring" -> "boto.ec2.autoscale.launchconfig.LaunchConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_monitoring", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceMapping" -> "boto.ec2.autoscale.launchconfig.LaunchConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block_device_mappings", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceMapping" -> "boto.ec2.image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block_device_mapping", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceMapping" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block_device_mapping", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceMapping" -> "boto.ec2.launchspecification.LaunchSpecification" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block_device_mapping", style="solid"];
"boto.ec2.blockdevicemapping.BlockDeviceType" -> "boto.ec2.blockdevicemapping.BlockDeviceMapping" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="current_value", style="solid"];
"boto.ec2.cloudwatch.dimension.Dimension" -> "boto.ec2.cloudwatch.alarm.MetricAlarm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dimensions", style="solid"];
"boto.ec2.cloudwatch.dimension.Dimension" -> "boto.ec2.cloudwatch.metric.Metric" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dimensions", style="solid"];
"boto.ec2.cloudwatch.listelement.ListElement" -> "boto.ec2.cloudwatch.alarm.MetricAlarm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alarm_actions", style="solid"];
"boto.ec2.cloudwatch.listelement.ListElement" -> "boto.ec2.cloudwatch.alarm.MetricAlarm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="insufficient_data_actions", style="solid"];
"boto.ec2.cloudwatch.listelement.ListElement" -> "boto.ec2.cloudwatch.alarm.MetricAlarm" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ok_actions", style="solid"];
"boto.ec2.connection.EC2Connection" -> "boto.manage.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ec2", style="solid"];
"boto.ec2.connection.EC2Connection" -> "boto.manage.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ec2", style="solid"];
"boto.ec2.connection.EC2Connection" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ec2", style="solid"];
"boto.ec2.elb.attributes.AccessLogAttribute" -> "boto.ec2.elb.attributes.LbAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="access_log", style="solid"];
"boto.ec2.elb.attributes.ConnectionDrainingAttribute" -> "boto.ec2.elb.attributes.LbAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_draining", style="solid"];
"boto.ec2.elb.attributes.ConnectionSettingAttribute" -> "boto.ec2.elb.attributes.LbAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connecting_settings", style="solid"];
"boto.ec2.elb.attributes.CrossZoneLoadBalancingAttribute" -> "boto.ec2.elb.attributes.LbAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cross_zone_load_balancing", style="solid"];
"boto.ec2.elb.healthcheck.HealthCheck" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="health_check", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="load_balancers", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="availability_zones", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="termination_policies", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.autoscale.launchconfig.LaunchConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="security_groups", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.autoscale.launchconfig.LaunchConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="classic_link_vpc_security_groups", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.elb.listener.Listener" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="policy_names", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="availability_zones", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subnets", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="security_groups", style="solid"];
"boto.ec2.elb.listelement.ListElement" -> "boto.ec2.elb.loadbalancer.LoadBalancerZones" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="zones", style="solid"];
"boto.ec2.elb.policies.Policies" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="policies", style="solid"];
"boto.ec2.elb.securitygroup.SecurityGroup" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="source_security_group", style="solid"];
"boto.ec2.image.BillingProducts" -> "boto.ec2.image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="billing_products", style="solid"];
"boto.ec2.image.ProductCodes" -> "boto.ec2.image.Image" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="product_codes", style="solid"];
"boto.ec2.image.ProductCodes" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="product_codes", style="solid"];
"boto.ec2.instance.InstancePlacement" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_placement", style="solid"];
"boto.ec2.instance.InstanceState" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_previous_state", style="solid"];
"boto.ec2.instance.InstanceState" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_state", style="solid"];
"boto.ec2.instance.SubParse" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="state_reason", style="solid"];
"boto.ec2.instance.SubParse" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="eventsSet", style="solid"];
"boto.ec2.instance.SubParse" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_profile", style="solid"];
"boto.ec2.instance.SubParse" -> "boto.ec2.launchspecification.LaunchSpecification" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_profile", style="solid"];
"boto.ec2.instancestatus.EventSet" -> "boto.ec2.instancestatus.InstanceStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="events", style="solid"];
"boto.ec2.instancestatus.Status" -> "boto.ec2.instancestatus.InstanceStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="system_status", style="solid"];
"boto.ec2.instancestatus.Status" -> "boto.ec2.instancestatus.InstanceStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_status", style="solid"];
"boto.ec2.instancestatus.Status" -> "boto.ec2.volumestatus.VolumeStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="volume_status", style="solid"];
"boto.ec2.launchspecification.LaunchSpecification" -> "boto.ec2.spotinstancerequest.SpotInstanceRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launch_specification", style="solid"];
"boto.ec2.networkinterface.Attachment" -> "boto.ec2.networkinterface.NetworkInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attachment", style="solid"];
"boto.ec2.securitygroup.IPPermissionsList" -> "boto.ec2.securitygroup.SecurityGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rules", style="solid"];
"boto.ec2.securitygroup.IPPermissionsList" -> "boto.ec2.securitygroup.SecurityGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rules_egress", style="solid"];
"boto.ec2.spotinstancerequest.SpotInstanceStateFault" -> "boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fault", style="solid"];
"boto.ec2.spotinstancerequest.SpotInstanceStateFault" -> "boto.ec2.spotinstancerequest.SpotInstanceRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fault", style="solid"];
"boto.ec2.spotinstancerequest.SpotInstanceStatus" -> "boto.ec2.spotinstancerequest.SpotInstanceRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.ec2.tag.TagSet" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tags", style="solid"];
"boto.ec2.tag.TagSet" -> "boto.ec2.ec2object.TaggedEC2Object" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tags", style="solid"];
"boto.ec2.volume.AttachmentSet" -> "boto.ec2.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attach_data", style="solid"];
"boto.ec2.volumestatus.ActionSet" -> "boto.ec2.volumestatus.VolumeStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="actions", style="solid"];
"boto.ec2.volumestatus.EventSet" -> "boto.ec2.volumestatus.VolumeStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="events", style="solid"];
"boto.ec2.zone.MessageSet" -> "boto.ec2.zone.Zone" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="messages", style="solid"];
"boto.ecs.item.Item" -> "boto.ecs.item.ItemSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="curItem", style="solid"];
"boto.emr.emrobject.ClusterStateChangeReason" -> "boto.emr.emrobject.ClusterStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="statechangereason", style="solid"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.Cluster" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.ClusterSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.HadoopStep" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.InstanceGroupInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.InstanceInfo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.emr.emrobject.ClusterStatus" -> "boto.emr.emrobject.StepSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.emr.emrobject.ClusterTimeline" -> "boto.emr.emrobject.ClusterStatus" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timeline", style="solid"];
"boto.emr.emrobject.Ec2InstanceAttributes" -> "boto.emr.emrobject.Cluster" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ec2instanceattributes", style="solid"];
"boto.emr.emrobject.StepConfig" -> "boto.emr.emrobject.HadoopStep" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"boto.emr.emrobject.StepConfig" -> "boto.emr.emrobject.StepSummary" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"boto.exception.BotoServerError" -> "boto.connection.AWSQueryConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.BotoServerError" -> "boto.ses.connection.SESConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.DynamoDBResponseError" -> "boto.dynamodb.layer1.Layer1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.EC2ResponseError" -> "boto.ec2.connection.EC2Connection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.EmrResponseError" -> "boto.emr.connection.EmrConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.awslambda.layer1.AWSLambdaConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.cloudhsm.layer1.CloudHSMConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.cloudsearch2.layer1.CloudSearchConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.cloudsearchdomain.layer1.CloudSearchDomainConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.cloudtrail.layer1.CloudTrailConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.codedeploy.layer1.CodeDeployConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.cognito.identity.layer1.CognitoIdentityConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.cognito.sync.layer1.CognitoSyncConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.configservice.layer1.ConfigServiceConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.datapipeline.layer1.DataPipelineConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.directconnect.layer1.DirectConnectConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.dynamodb2.layer1.DynamoDBConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.ec2containerservice.layer1.EC2ContainerServiceConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.elastictranscoder.layer1.ElasticTranscoderConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.kinesis.layer1.KinesisConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.kms.layer1.KMSConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.logs.layer1.CloudWatchLogsConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.machinelearning.layer1.MachineLearningConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.opsworks.layer1.OpsWorksConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.rds2.layer1.RDSConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.redshift.layer1.RedshiftConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.route53.domains.layer1.Route53DomainsConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.JSONResponseError" -> "boto.support.layer1.SupportConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.SDBResponseError" -> "boto.sdb.connection.SDBConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.SQSError" -> "boto.sqs.connection.SQSConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.exception.SWFResponseError" -> "boto.swf.layer1.Layer1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.file.connection.FileConnection" -> "boto.storage_uri.StorageUri" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"boto.fps.exception.ResponseErrorFactory" -> "boto.fps.connection.FPSConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseError", style="solid"];
"boto.glacier.layer1.Layer1" -> "boto.glacier.layer2.Layer2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="layer1", style="solid"];
"boto.glacier.writer._Partitioner" -> "boto.glacier.writer.Writer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="partitioner", style="solid"];
"boto.glacier.writer._Uploader" -> "boto.glacier.writer.Writer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uploader", style="solid"];
"boto.gs.acl.Entries" -> "boto.gs.acl.ACL" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="entries", style="solid"];
"boto.gs.acl.Entries" -> "boto.gs.acl.ACL" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="entries", style="solid"];
"boto.gs.acl.Scope" -> "boto.gs.acl.Entry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scope", style="solid"];
"boto.gs.connection.GSConnection" -> "boto.storage_uri.StorageUri" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"boto.gs.user.User" -> "boto.gs.acl.ACL" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"boto.handler.XmlHandler" -> "boto.handler.XmlHandlerWrapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="handler", style="solid"];
"boto.jsonresponse.Element" -> "boto.roboto.awsqueryrequest.AWSQueryRequest" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="aws_response", style="solid"];
"boto.manage.cmdshell.LocalClient" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cmdshell", style="solid"];
"boto.manage.cmdshell.SSHClient" -> "boto.manage.server.Bundler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ssh_client", style="solid"];
"boto.manage.cmdshell.SSHClient" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cmdshell", style="solid"];
"boto.mturk.question.Constraints" -> "boto.mturk.question.FreeTextAnswer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="constraints", style="solid"];
"boto.mturk.question.Constraints" -> "boto.mturk.question.FreeTextAnswer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="constraints", style="solid"];
"boto.mws.exception.ResponseErrorFactory" -> "boto.mws.connection.MWSConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseErrorFactory", style="solid"];
"boto.mws.response.DeclarativeType" -> "boto.mws.response.DeclarativeType" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_clone", style="solid"];
"boto.mws.response.DeclarativeType.__init__.JITResponse" -> "boto.mws.response.Element" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_value", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AttributeSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ItemDimensions", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AttributeSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ListPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AttributeSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="PackageDimensions", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AttributeSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SmallImage", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AuthorizationDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AuthorizationAmount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AuthorizationDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CapturedAmount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AuthorizationDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AuthorizationFee", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AuthorizationDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AuthorizationStatus", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.AuthorizeResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AuthorizationDetails", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CaptureDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CaptureAmount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CaptureDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RefundedAmount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CaptureDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CaptureFee", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CaptureDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CaptureStatus", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CaptureResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CaptureDetails", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Cart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ActiveCartItemList", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Cart" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SavedCartItemList", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CartItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CurrentPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CartItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SalePrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CompetitivePrice" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Price", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CompetitivePricing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CompetitivePrices", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.CompetitivePricing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TradeInValue", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="PrimaryContactInfo", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShippingAddressList", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Customer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AssociatedMarketplaces", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.FulfillmentOrder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DestinationAddress", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.FulfillmentPreview" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="EstimatedShippingWeight", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.FulfillmentPreviewItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="EstimatedShippingWeight", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.GetFulfillmentOrderResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FulfillmentOrder", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.GetPackageTrackingDetailsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShipToAddress", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.GetServiceStatusResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Messages", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.GetSubscriptionResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Subscription", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ItemAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Languages", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListCartsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CartList", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListCustomersResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CustomerList", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListMarketplaceParticipationsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ListParticipations", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListMarketplaceParticipationsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ListMarketplaces", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListMatchingProductsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Products", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListOrderItemsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OrderItems", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ListOrdersResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Orders", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.LowestOfferListing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Qualifiers", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.LowestOfferListing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Price", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ManageReportScheduleResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ReportSchedule", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Offer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="BuyingPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Offer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RegularPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Order" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OrderTotal", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Order" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShippingAddress", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Order" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="PaymentExecutionDetail", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ItemPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShippingPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GiftWrapPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ItemTax", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShippingTax", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GiftWrapTax", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShippingDiscount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="PromotionDiscount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CODFee", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CODFeeDiscount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderReferenceDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Buyer", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderReferenceDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OrderTotal", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderReferenceDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Destination", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderReferenceDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SellerOrderAttributes", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.OrderReferenceDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OrderReferenceStatus", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Price" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="LandedPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Price" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ListingPrice", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Price" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Shipping", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Identifiers", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AttributeSets", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Relationships", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SalesRankings", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="LowestOfferListings", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Offers", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ProductsBulkOperationResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Product", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.ProductsBulkOperationResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Error", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.RefundDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RefundAmount", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.RefundDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FeeRefunded", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.RefundDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RefundStatus", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.RefundResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="RefundDetails", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.RequestReportResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ReportRequestInfo", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Response" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseMetadata", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.SetOrderReferenceDetailsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OrderReferenceDetails", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.SubmitFeedResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FeedSubmissionInfo", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.Subscription" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Destination", style="solid"];
"boto.mws.response.Element" -> "boto.mws.response.VariationRelationship" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Identifiers", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.CompetitivePriceList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CompetitivePrice", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.GetFeedSubmissionListResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FeedSubmissionInfo", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.GetProductCategoriesResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Self", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.GetReportListResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ReportInfo", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.GetReportRequestListResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ReportRequestInfo", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.OrderReferenceDetails" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Constraints", style="solid"];
"boto.mws.response.ElementList" -> "boto.mws.response.Product" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CompetitivePricing", style="solid"];
"boto.mws.response.GetMatchingProductForIdResult" -> "boto.mws.response.GetMatchingProductForIdResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ResultClass", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.CreateInboundShipmentPlanResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InboundShipmentPlans", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.Destination" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="AttributeList", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.FulfillmentOrder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="NotificationEmailList", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.FulfillmentPreview" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="EstimatedFees", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.FulfillmentPreview" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="UnfulfillablePreviewItems", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.FulfillmentPreview" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FulfillmentPreviewShipments", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.GetFulfillmentOrderResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FulfillmentShipment", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.GetFulfillmentOrderResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FulfillmentOrderItem", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.GetFulfillmentPreviewResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FulfillmentPreviews", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.GetPackageTrackingDetailsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="TrackingEvents", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListAllFulfillmentOrdersResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="FulfillmentOrders", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListInboundShipmentItemsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ItemData", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListInboundShipmentsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ShipmentData", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListInventorySupplyResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InventorySupplyList", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListRecommendationsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ListingQualityRecommendations", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListRegisteredDestinationsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DestinationList", style="solid"];
"boto.mws.response.MemberList" -> "boto.mws.response.ListSubscriptionsResult" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SubscriptionList", style="solid"];
"boto.mws.response.ProductsBulkOperationResult" -> "boto.mws.response.ProductsBulkOperationResponse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ResultClass", style="solid"];
"boto.mws.response.ResponseElement" -> "boto.mws.response.ResponseResultList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ResultClass", style="solid"];
"boto.mws.response.ResponseFactory" -> "boto.mws.connection.MWSConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ResponseFactory", style="solid"];
"boto.mws.response.SimpleList" -> "boto.mws.response.CompetitivePricing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="NumberOfOfferListings", style="solid"];
"boto.mws.response.SimpleList" -> "boto.mws.response.OrderItem" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="PromotionIds", style="solid"];
"boto.mws.response.SimpleList" -> "boto.mws.response.VariationRelationship" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="GemType", style="solid"];
"boto.mws.response.SimpleList" -> "boto.mws.response.VariationRelationship" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="MaterialType", style="solid"];
"boto.mws.response.SimpleList" -> "boto.mws.response.VariationRelationship" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OperatingSystem", style="solid"];
"boto.provider.Provider" -> "boto.connection.AWSAuthConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="provider", style="solid"];
"boto.provider.Provider" -> "boto.dynamodb.layer1.Layer1" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="provider", style="solid"];
"boto.pyami.config.Config" -> "boto.mashups.order.Item" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"boto.pyami.config.Config" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_config", style="solid"];
"boto.pyami.config.Config" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_config", style="solid"];
"boto.pyami.config.Config" -> "boto.provider.Provider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shared_credentials", style="solid"];
"boto.rds.dbinstance.PendingModifiedValues" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pending_modified_values", style="solid"];
"boto.rds.dbinstance.ReadReplicaDBInstanceIdentifiers" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="read_replica_dbinstance_identifiers", style="solid"];
"boto.rds.dbsubnetgroup.DBSubnetGroup" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subnet_group", style="solid"];
"boto.rds.parametergroup.Parameter" -> "boto.rds.parametergroup.ParameterGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_current_param", style="solid"];
"boto.resultset.ResultSet" -> "boto.cloudformation.stack.Stack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="notification_arns", style="solid"];
"boto.resultset.ResultSet" -> "boto.cloudformation.stack.Stack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outputs", style="solid"];
"boto.resultset.ResultSet" -> "boto.cloudformation.stack.Stack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameters", style="solid"];
"boto.resultset.ResultSet" -> "boto.cloudformation.stack.Stack" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="capabilities", style="solid"];
"boto.resultset.ResultSet" -> "boto.cloudformation.template.Template" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="template_parameters", style="solid"];
"boto.resultset.ResultSet" -> "boto.cloudformation.template.Template" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="capabilities", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instances", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tags", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="enabled_metrics", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.group.AutoScalingGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="suspended_processes", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.launchconfig.LaunchConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="block_device_mappings", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.policy.MetricCollectionTypes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metrics", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.policy.MetricCollectionTypes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="granularities", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.autoscale.policy.ScalingPolicy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alarms", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.loadbalancer.Backend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="policies", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="listeners", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instances", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.loadbalancer.LoadBalancer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="backends", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.instance.Instance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="interfaces", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.instance.Reservation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.instance.Reservation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instances", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.launchspecification.LaunchSpecification" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.networkinterface.NetworkInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.networkinterface.NetworkInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="private_ip_addresses", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.reservedinstance.ReservedInstanceListing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_counts", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.reservedinstance.ReservedInstanceListing" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="price_schedules", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.reservedinstance.ReservedInstancesModification" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reserved_instances", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.reservedinstance.ReservedInstancesModification" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="modification_results", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.reservedinstance.ReservedInstancesOffering" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="recurring_charges", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.reservedinstance.ReservedInstancesOffering" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pricing_details", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tags", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.BootstrapAction" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="args", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.BootstrapActionList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="actions", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.Cluster" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="applications", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.Cluster" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tags", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.ClusterSummaryList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clusters", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.InstanceGroupList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instancegroups", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.InstanceList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instances", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.JobFlow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="steps", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.JobFlow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instancegroups", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.JobFlow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bootstrapactions", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.JobFlow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="supported_products", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.JobFlowStepList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stepids", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.Step" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="args", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.Step" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="properties", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.StepConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="properties", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.StepConfig" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="args", style="solid"];
"boto.resultset.ResultSet" -> "boto.emr.emrobject.StepSummaryList" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="steps", style="solid"];
"boto.resultset.ResultSet" -> "boto.exception.EC2ResponseError" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_errorResultSet", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parameter_groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="security_groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vpc_security_groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.dbinstance.DBInstance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status_infos", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.optiongroup.Option" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="settings", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.optiongroup.Option" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="db_security_groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.optiongroup.Option" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vpc_security_groups", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.optiongroup.OptionGroup" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"boto.resultset.ResultSet" -> "boto.rds.optiongroup.OptionGroupOption" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="settings", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.internetgateway.InternetGateway" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attachments", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.networkacl.NetworkAcl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="network_acl_entries", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.networkacl.NetworkAcl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="associations", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.routetable.RouteTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="routes", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.routetable.RouteTable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="associations", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.vpnconnection.VpnConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tunnels", style="solid"];
"boto.resultset.ResultSet" -> "boto.vpc.vpnconnection.VpnConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="static_routes", style="solid"];
"boto.route53.connection.Route53Connection" -> "boto.route53.record.ResourceRecordSets" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"boto.s3.acl.ACL" -> "boto.s3.acl.Policy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="acl", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.cloudfront.distribution.Distribution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bucket", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.pyami.copybot.CopyBot" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="src", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.pyami.copybot.CopyBot" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dst", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.pyami.copybot.CopyBot" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dst", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bucket", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bucket", style="solid"];
"boto.s3.connection.S3Connection" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s3", style="solid"];
"boto.s3.connection.S3Connection" -> "boto.sdb.db.manager.xmlmanager.XMLManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="s3", style="solid"];
"boto.s3.connection.S3Connection" -> "boto.storage_uri.StorageUri" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"boto.s3.key.Key" -> "boto.sdb.db.property.S3KeyProperty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_type", style="solid"];
"boto.s3.lifecycle.Expiration" -> "boto.s3.lifecycle.Rule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="expiration", style="solid"];
"boto.s3.lifecycle.Expiration" -> "boto.s3.lifecycle.Rule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="expiration", style="solid"];
"boto.s3.lifecycle.Transition" -> "boto.s3.lifecycle.Rule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transition", style="solid"];
"boto.s3.user.User" -> "boto.resultset.ResultSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"boto.s3.user.User" -> "boto.s3.acl.Policy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"boto.s3.user.User" -> "boto.s3.deletemarker.DeleteMarker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"boto.s3.user.User" -> "boto.s3.key.Key" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"boto.s3.user.User" -> "boto.s3.multipart.MultiPartUpload" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="initiator", style="solid"];
"boto.s3.user.User" -> "boto.s3.multipart.MultiPartUpload" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="owner", style="solid"];
"boto.s3.website.Redirect" -> "boto.s3.website.RoutingRule" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="redirect", style="solid"];
"boto.s3.website.RoutingRules" -> "boto.s3.website.WebsiteConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="routing_rules", style="solid"];
"boto.s3.website.RoutingRules" -> "boto.s3.website.WebsiteConfiguration" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="routing_rules", style="solid"];
"boto.sdb.connection.SDBConnection" -> "boto.sdb.connection.ItemThread" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="conn", style="solid"];
"boto.sdb.connection.SDBConnection" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_sdb", style="solid"];
"boto.sdb.db.blob.Blob" -> "boto.sdb.db.property.BlobProperty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_type", style="solid"];
"boto.sdb.db.key.Key" -> "boto.sdb.db.property.ReferenceProperty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_type", style="solid"];
"boto.sdb.db.manager.sdbmanager.SDBConverter" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="converter", style="solid"];
"boto.sdb.db.manager.xmlmanager.XMLConverter" -> "boto.sdb.db.manager.xmlmanager.XMLManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="converter", style="solid"];
"boto.sdb.db.model.ModelMeta" -> "boto.sdb.db.model.Model" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__metaclass__", style="solid"];
"boto.sdb.db.property.BooleanProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="production", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ami_id", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="zone", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hostname", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="private_hostname", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="groups", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="security_group", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="key_name", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_type", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="status", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="launch_time", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="console_output", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="volume_state", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attachment_state", style="solid"];
"boto.sdb.db.property.CalculatedProperty" -> "boto.manage.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="size", style="solid"];
"boto.sdb.db.property.DateTimeProperty" -> "boto.sdb.db.test_db.TestAutoNow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="create_date", style="solid"];
"boto.sdb.db.property.DateTimeProperty" -> "boto.sdb.db.test_db.TestAutoNow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="modified_date", style="solid"];
"boto.sdb.db.property.IntegerProperty" -> "boto.sdb.db.test_db.TestSubClass" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="answer", style="solid"];
"boto.sdb.db.property.ListProperty" -> "boto.manage.volume.Volume" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="past_volume_ids", style="solid"];
"boto.sdb.db.property.MapProperty" -> "boto.sdb.db.test_db.TestMap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="map", style="solid"];
"boto.sdb.db.property.ReferenceProperty" -> "boto.sdb.db.test_db.TestReference" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ref", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.manage.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="elastic_ip", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.manage.task.Task" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.manage.task.Task" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hour", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.manage.task.Task" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="command", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="config_uri", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ami_id", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="zone", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="security_group", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="key_name", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="elastic_ip", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="instance_type", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="description", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.mashups.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.sdb.db.test_db.TestMap" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.sdb.db.test_db.TestRequired" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="req", style="solid"];
"boto.sdb.db.property.StringProperty" -> "boto.sdb.db.test_db.TestUnique" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"boto.sdb.db.query.Query" -> "boto.sdb.db.property._ReverseReferenceProperty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_type", style="solid"];
"boto.sdb.domain.Domain" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_domain", style="solid"];
"boto.sdb.domain.Domain" -> "boto.sdb.db.manager.sdbmanager.SDBManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_domain", style="solid"];
"boto.sdb.domain.Domain" -> "boto.sdb.db.sequence.Sequence" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_db", style="solid"];
"boto.sdb.domain.Domain" -> "boto.sdb.db.sequence.Sequence" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_db", style="solid"];
"boto.sdb.domain.UploaderThread" -> "boto.sdb.domain.DomainDumpParser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uploader", style="solid"];
"boto.sdb.domain.UploaderThread" -> "boto.sdb.domain.DomainDumpParser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="uploader", style="solid"];
"boto.services.servicedef.ServiceDef" -> "boto.services.bs.BS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sd", style="solid"];
"boto.services.servicedef.ServiceDef" -> "boto.services.service.Service" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sd", style="solid"];
"boto.sqs.attributes.Attributes" -> "boto.sqs.message.RawMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="attributes", style="solid"];
"boto.sqs.connection.SQSConnection" -> "boto.manage.task.TaskPoller" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sqs", style="solid"];
"boto.sqs.messageattributes.MessageAttributeValue" -> "boto.sqs.messageattributes.MessageAttributes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="current_value", style="solid"];
"boto.sqs.messageattributes.MessageAttributes" -> "boto.sqs.message.RawMessage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="message_attributes", style="solid"];
"boto.sqs.queue.Queue" -> "boto.manage.task.TaskPoller" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue", style="solid"];
"boto.sts.credentials.Credentials" -> "boto.sts.credentials.AssumedRole" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="credentials", style="solid"];
"boto.sts.credentials.Credentials" -> "boto.sts.credentials.FederationToken" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="credentials", style="solid"];
"boto.sts.credentials.User" -> "boto.sts.credentials.AssumedRole" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="user", style="solid"];
"boto.swf.layer1.Layer1" -> "boto.swf.layer2.SWFBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_swf", style="solid"];
"boto.utils.Password" -> "boto.sdb.db.property.PasswordProperty" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="data_type", style="solid"];
"boto.utils.ShellCommand" -> "boto.pyami.scriptbase.ScriptBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="last_command", style="solid"];
"boto.vpc.dhcpoptions.DhcpConfigSet" -> "boto.vpc.dhcpoptions.DhcpOptions" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"boto.vpc.networkacl.Icmp" -> "boto.vpc.networkacl.NetworkAclEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="icmp", style="solid"];
"boto.vpc.networkacl.PortRange" -> "boto.vpc.networkacl.NetworkAclEntry" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="port_range", style="solid"];
"boto.vpc.vpc_peering_connection.VpcInfo" -> "boto.vpc.vpc_peering_connection.VpcPeeringConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="accepter_vpc_info", style="solid"];
"boto.vpc.vpc_peering_connection.VpcInfo" -> "boto.vpc.vpc_peering_connection.VpcPeeringConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="requester_vpc_info", style="solid"];
"boto.vpc.vpc_peering_connection.VpcPeeringConnectionStatus" -> "boto.vpc.vpc_peering_connection.VpcPeeringConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_status", style="solid"];
"boto.vpc.vpnconnection.VpnConnectionOptions" -> "boto.vpc.vpnconnection.VpnConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="options", style="solid"];
"boto.cloudfront.CloudFrontConnection" -> "boto.cloudfront.invalidation.InvalidationBatch" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"boto.cloudfront.distribution.Distribution" -> "boto.s3.bucket.Bucket" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="distribution", style="solid"];
"boto.cloudfront.object.Object" -> "boto.cloudfront.distribution.Distribution" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_object_class", style="solid"];
"boto.cloudfront.object.StreamingObject" -> "boto.cloudfront.distribution.StreamingDistribution" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_object_class", style="solid"];
"boto.connection.HTTPResponse" -> "boto.https_connection.CertValidatingHTTPSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="response_class", style="solid"];
"boto.ec2.instancestatus.Details" -> "boto.ec2.instancestatus.Status" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="details", style="solid"];
"boto.ecs.item.ResponseGroup" -> "boto.ecs.item.ResponseGroup" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_curobj", style="solid"];
"boto.mws.response.DeclarativeType.__init__.JITResponse" -> "boto.mws.response.DeclarativeType" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_hint", style="solid"];
"boto.rds.regioninfo.RDSRegionInfo" -> "boto.rds.RDSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.awslambda.layer1.AWSLambdaConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.beanstalk.layer1.Layer1" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cloudformation.connection.CloudFormationConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cloudhsm.layer1.CloudHSMConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cloudsearch.layer1.Layer1" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cloudsearch2.layer1.CloudSearchConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cloudsearchdomain.layer1.CloudSearchDomainConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cloudtrail.layer1.CloudTrailConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.codedeploy.layer1.CodeDeployConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cognito.identity.layer1.CognitoIdentityConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.cognito.sync.layer1.CognitoSyncConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.configservice.layer1.ConfigServiceConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.datapipeline.layer1.DataPipelineConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.directconnect.layer1.DirectConnectConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.ec2.autoscale.AutoScaleConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.ec2.cloudwatch.CloudWatchConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.ec2.connection.EC2Connection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.ec2.elb.ELBConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.ec2containerservice.layer1.EC2ContainerServiceConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.elasticache.layer1.ElastiCacheConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.elastictranscoder.layer1.ElasticTranscoderConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.emr.connection.EmrConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.kinesis.layer1.KinesisConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.kms.layer1.KMSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.logs.layer1.CloudWatchLogsConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.machinelearning.layer1.MachineLearningConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.opsworks.layer1.OpsWorksConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.rds2.layer1.RDSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.redshift.layer1.RedshiftConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.route53.domains.layer1.Route53DomainsConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.ses.connection.SESConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.sns.connection.SNSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.sts.connection.STSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.regioninfo.RegionInfo" -> "boto.support.layer1.SupportConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.policies.Policies" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="app_cookie_stickiness_policies", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.policies.Policies" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="lb_cookie_stickiness_policies", style="solid"];
"boto.resultset.ResultSet" -> "boto.ec2.elb.policies.Policies" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="other_policies", style="solid"];
"boto.s3.bucket.Bucket" -> "boto.s3.connection.S3Connection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="bucket_class", style="solid"];
"boto.s3.key.Key" -> "boto.s3.bucket.Bucket" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="key_class", style="solid"];
"boto.s3.website._XMLKeyValue" -> "boto.s3.website._XMLKeyValue" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="container", style="solid"];
"boto.sdb.db.model.Model" -> "boto.sdb.db.manager.sdbmanager.SDBConverter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="model_class", style="solid"];
"boto.sdb.db.test_db.TestBasic" -> "boto.sdb.db.test_db.TestReference" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="ref", style="solid"];
"boto.sdb.domain.Domain" -> "boto.sdb.domain.DomainMetaData" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="domain", style="solid"];
"boto.sdb.item.Item" -> "boto.sdb.connection.SDBConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="item_cls", style="solid"];
"boto.sqs.message.Message" -> "boto.sqs.queue.Queue" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="message_class", style="solid"];
"boto.sqs.queue.Queue" -> "boto.sqs.message.Message" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="queue", style="solid"];
"boto.sqs.regioninfo.SQSRegionInfo" -> "boto.sqs.connection.SQSConnection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="region", style="solid"];
}
