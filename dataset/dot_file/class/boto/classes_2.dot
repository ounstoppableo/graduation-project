digraph "classes_2" {
rankdir=BT
charset="utf-8"
"tests.unit.AWSMockServiceTestCase" [color="black", fontcolor="black", label=<{AWSMockServiceTestCase|actual_request : NoneType<br ALIGN="LEFT"/>connection_class : NoneType<br ALIGN="LEFT"/>https_connection : Mock<br ALIGN="LEFT"/>https_connection_factory : tuple<br ALIGN="LEFT"/>maxDiff : NoneType<br ALIGN="LEFT"/>original_mexe<br ALIGN="LEFT"/>proxy : NoneType<br ALIGN="LEFT"/>service_connection<br ALIGN="LEFT"/>use_proxy : bool<br ALIGN="LEFT"/>|assert_request_parameters(params, ignore_params_values)<br ALIGN="LEFT"/>create_response(status_code, reason, header, body)<br ALIGN="LEFT"/>create_service_connection()<br ALIGN="LEFT"/>default_body()<br ALIGN="LEFT"/>initialize_service_connection()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>set_http_response(status_code, reason, header, body)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_address.AddressTest" [color="black", fontcolor="black", label=<{AddressTest|address : Address<br ALIGN="LEFT"/>|check_that_attribute_has_been_set(name, value, attribute)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_associate_calls_connection_associate_address_with_correct_args()<br ALIGN="LEFT"/>test_disassociate_calls_connection_disassociate_address_with_correct_args()<br ALIGN="LEFT"/>test_endElement_sets_correct_attributes_with_values()<br ALIGN="LEFT"/>test_release_calls_connection_release_address_with_correct_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_address.AddressWithAllocationTest" [color="black", fontcolor="black", label=<{AddressWithAllocationTest|address : Address<br ALIGN="LEFT"/>|check_that_attribute_has_been_set(name, value, attribute)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_associate_calls_connection_associate_address_with_correct_args()<br ALIGN="LEFT"/>test_disassociate_calls_connection_disassociate_address_with_correct_args()<br ALIGN="LEFT"/>test_endElement_sets_correct_attributes_with_values()<br ALIGN="LEFT"/>test_release_calls_connection_release_address_with_correct_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_address.AddressWithNetworkInterfaceTest" [color="black", fontcolor="black", label=<{AddressWithNetworkInterfaceTest|address : Address<br ALIGN="LEFT"/>|check_that_attribute_has_been_set(name, value, attribute)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_associate_calls_connection_associate_address_with_correct_args()<br ALIGN="LEFT"/>test_disassociate_calls_connection_disassociate_address_with_correct_args()<br ALIGN="LEFT"/>test_endElement_sets_correct_attributes_with_values()<br ALIGN="LEFT"/>test_release_calls_connection_release_address_with_correct_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_volume.AttachmentSetTests" [color="black", fontcolor="black", label=<{AttachmentSetTests|<br ALIGN="LEFT"/>|check_that_attribute_has_been_set(name, value, attribute)<br ALIGN="LEFT"/>test_endElement_with_name_attachTime_sets_attach_time()<br ALIGN="LEFT"/>test_endElement_with_name_device_sets_device()<br ALIGN="LEFT"/>test_endElement_with_name_instanceId_sets_instance_id()<br ALIGN="LEFT"/>test_endElement_with_name_status_sets_status()<br ALIGN="LEFT"/>test_endElement_with_name_volumeId_sets_id()<br ALIGN="LEFT"/>test_endElement_with_other_name_sets_other_name_attribute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.autoscale.test_cert_verification.AutoscaleCertVerificationTest" [color="black", fontcolor="black", label=<{AutoscaleCertVerificationTest|autoscale : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.autoscale.test_connection.AutoscaleConnectionTest" [color="black", fontcolor="black", label=<{AutoscaleConnectionTest|autoscale : bool<br ALIGN="LEFT"/>ec2 : bool<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>test_ebs_optimized_regression()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.BatchGetResultSetTestCase" [color="black", fontcolor="black", label=<{BatchGetResultSetTestCase|results : BatchGetResultSet<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_fetch_more()<br ALIGN="LEFT"/>test_fetch_more_empty()<br ALIGN="LEFT"/>test_iteration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_blockdevicemapping.BlockDeviceMappingTests" [color="black", fontcolor="black", label=<{BlockDeviceMappingTests|block_device_mapping : BlockDeviceMapping<br ALIGN="LEFT"/>|block_device_type_eq(b1, b2)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_endElement_with_name_device_sets_current_name()<br ALIGN="LEFT"/>test_endElement_with_name_device_sets_current_name_dev_null()<br ALIGN="LEFT"/>test_endElement_with_name_item_sets_current_name_key_to_current_value()<br ALIGN="LEFT"/>test_startElement_with_name_ebs_sets_and_returns_current_value()<br ALIGN="LEFT"/>test_startElement_with_name_virtualName_sets_and_returns_current_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_blockdevicemapping.BlockDeviceTypeTests" [color="black", fontcolor="black", label=<{BlockDeviceTypeTests|block_device_type : BlockDeviceType<br ALIGN="LEFT"/>|check_that_attribute_has_been_set(name, value, attribute)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_endElement_sets_correct_attributes_with_values()<br ALIGN="LEFT"/>test_endElement_with_name_Encrypted_value_other()<br ALIGN="LEFT"/>test_endElement_with_name_NoDevice_value_other()<br ALIGN="LEFT"/>test_endElement_with_name_NoDevice_value_true()<br ALIGN="LEFT"/>test_endElement_with_name_deleteOnTermination_value_other()<br ALIGN="LEFT"/>test_endElement_with_name_deleteOnTermination_value_true()<br ALIGN="LEFT"/>test_endElement_with_name_encrypted_value_true()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.cloudwatch.test_connection.CloudWatchConnectionTest.test_describe_alarms.make_request.Body" [color="black", fontcolor="black", label=<{Body|status : int<br ALIGN="LEFT"/>|read()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudfront.test_invalidation_list.CFInvalidationListTest" [color="black", fontcolor="black", label=<{CFInvalidationListTest|cf : CloudFrontConnection<br ALIGN="LEFT"/>cloudfront : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_auto_pagination(num_invals)<br ALIGN="LEFT"/>test_manual_pagination(num_invals, max_items)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.gs.cb_test_harness.CallbackTestHarness" [color="black", fontcolor="black", label=<{CallbackTestHarness|called : bool<br ALIGN="LEFT"/>delay_after_change : NoneType<br ALIGN="LEFT"/>exception : OSError<br ALIGN="LEFT"/>fail_after_n_bytes : int<br ALIGN="LEFT"/>fp_change_pos : NoneType<br ALIGN="LEFT"/>fp_to_change : NoneType<br ALIGN="LEFT"/>num_failures : int<br ALIGN="LEFT"/>num_times_to_fail : int<br ALIGN="LEFT"/>transferred_seq_after_first_failure : list<br ALIGN="LEFT"/>transferred_seq_before_first_failure : list<br ALIGN="LEFT"/>|call(total_bytes_transferred, unused_total_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_https_cert_validation.CertValidationTest" [color="black", fontcolor="black", label=<{CertValidationTest|<br ALIGN="LEFT"/>|assertConnectionThrows(connection_class, error)<br ALIGN="LEFT"/>do_test_invalid_host()<br ALIGN="LEFT"/>do_test_invalid_signature()<br ALIGN="LEFT"/>do_test_valid_cert()<br ALIGN="LEFT"/>enableProxy()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_invalid_host()<br ALIGN="LEFT"/>test_invalid_host_with_proxy()<br ALIGN="LEFT"/>test_invalid_signature()<br ALIGN="LEFT"/>test_invalid_signature_with_proxy()<br ALIGN="LEFT"/>test_valid_cert()<br ALIGN="LEFT"/>test_valid_cert_with_proxy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudformation.test_cert_verification.CloudFormationCertVerificationTest" [color="black", fontcolor="black", label=<{CloudFormationCertVerificationTest|cloudformation : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [color="black", fontcolor="black", label=<{CloudFormationConnectionBase|connection_class : CloudFormationConnection<br ALIGN="LEFT"/>stack_id : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchBadSDFTesting" [color="black", fontcolor="black", label=<{CloudSearchBadSDFTesting|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_erroneous_sdf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchBadSDFTesting" [color="black", fontcolor="black", label=<{CloudSearchBadSDFTesting|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_erroneous_sdf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudsearch.test_cert_verification.CloudSearchCertVerificationTest" [color="black", fontcolor="black", label=<{CloudSearchCertVerificationTest|cloudsearch : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudsearch2.test_cert_verification.CloudSearchCertVerificationTest" [color="black", fontcolor="black", label=<{CloudSearchCertVerificationTest|cloudsearch : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_connection.CloudSearchConnectionDeletionTest" [color="black", fontcolor="black", label=<{CloudSearchConnectionDeletionTest|connection_class : Layer1<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cloudsearch_deletion()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_connection.CloudSearchConnectionDeletionTest" [color="black", fontcolor="black", label=<{CloudSearchConnectionDeletionTest|connection_class : CloudSearchConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cloudsearch_deletion()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_connection.CloudSearchConnectionIndexDocumentTest" [color="black", fontcolor="black", label=<{CloudSearchConnectionIndexDocumentTest|connection_class : Layer1<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cloudsearch_index_documents()<br ALIGN="LEFT"/>test_cloudsearch_index_documents_resp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_connection.CloudSearchConnectionIndexDocumentTest" [color="black", fontcolor="black", label=<{CloudSearchConnectionIndexDocumentTest|connection_class : CloudSearchConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cloudsearch_index_documents()<br ALIGN="LEFT"/>test_cloudsearch_index_documents_resp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.CloudSearchConnectionTest" [color="black", fontcolor="black", label=<{CloudSearchConnectionTest|cloudsearch : bool<br ALIGN="LEFT"/>conn : SearchConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_expose_additional_error_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.CloudSearchConnectionTest" [color="black", fontcolor="black", label=<{CloudSearchConnectionTest|cloudsearch : bool<br ALIGN="LEFT"/>conn : SearchConnection<br ALIGN="LEFT"/>connection_class : CloudSearchConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_expose_additional_error_info()<br ALIGN="LEFT"/>test_proxy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentConnectionTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentConnectionTest|connection_class : CloudSearchConnection<br ALIGN="LEFT"/>|test_proxy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentDelete" [color="black", fontcolor="black", label=<{CloudSearchDocumentDelete|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_delete()<br ALIGN="LEFT"/>test_cloudsearch_delete_results()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentDelete" [color="black", fontcolor="black", label=<{CloudSearchDocumentDelete|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_delete()<br ALIGN="LEFT"/>test_cloudsearch_delete_results()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentDeleteMultiple" [color="black", fontcolor="black", label=<{CloudSearchDocumentDeleteMultiple|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_delete_multiples()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentDeleteMultiple" [color="black", fontcolor="black", label=<{CloudSearchDocumentDeleteMultiple|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_delete_multiples()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentErrorBadUnicode" [color="black", fontcolor="black", label=<{CloudSearchDocumentErrorBadUnicode|response : dict<br ALIGN="LEFT"/>|test_fake_bad_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentErrorBadUnicode" [color="black", fontcolor="black", label=<{CloudSearchDocumentErrorBadUnicode|response : dict<br ALIGN="LEFT"/>|test_fake_bad_unicode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentErrorDocsTooBig" [color="black", fontcolor="black", label=<{CloudSearchDocumentErrorDocsTooBig|response : dict<br ALIGN="LEFT"/>|test_fake_docs_too_big()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentErrorDocsTooBig" [color="black", fontcolor="black", label=<{CloudSearchDocumentErrorDocsTooBig|response : dict<br ALIGN="LEFT"/>|test_fake_docs_too_big()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentErrorMismatch" [color="black", fontcolor="black", label=<{CloudSearchDocumentErrorMismatch|response : dict<br ALIGN="LEFT"/>|test_fake_failure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentErrorMismatch" [color="black", fontcolor="black", label=<{CloudSearchDocumentErrorMismatch|response : dict<br ALIGN="LEFT"/>|test_attached_errors_list()<br ALIGN="LEFT"/>test_fake_failure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentMultipleAddTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentMultipleAddTest|objs : dict<br ALIGN="LEFT"/>response : dict<br ALIGN="LEFT"/>|test_cloudsearch_add_basics()<br ALIGN="LEFT"/>test_cloudsearch_add_results()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentMultipleAddTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentMultipleAddTest|objs : dict<br ALIGN="LEFT"/>response : dict<br ALIGN="LEFT"/>|test_cloudsearch_add_basics()<br ALIGN="LEFT"/>test_cloudsearch_add_results()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentSingleTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentSingleTest|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_add_basics()<br ALIGN="LEFT"/>test_cloudsearch_add_single_basic()<br ALIGN="LEFT"/>test_cloudsearch_add_single_fields()<br ALIGN="LEFT"/>test_cloudsearch_add_single_result()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentSingleTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentSingleTest|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_add_basics()<br ALIGN="LEFT"/>test_cloudsearch_add_single_basic()<br ALIGN="LEFT"/>test_cloudsearch_add_single_fields()<br ALIGN="LEFT"/>test_cloudsearch_add_single_result()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [color="black", fontcolor="black", label=<{CloudSearchDocumentTest|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentsErrorMissingAdds" [color="black", fontcolor="black", label=<{CloudSearchDocumentsErrorMissingAdds|response : dict<br ALIGN="LEFT"/>|test_fake_failure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearchdomain.test_cloudsearchdomain.CloudSearchDomainConnectionTest" [color="black", fontcolor="black", label=<{CloudSearchDomainConnectionTest|connection_class : CloudSearchDomainConnection<br ALIGN="LEFT"/>domain_status : str<br ALIGN="LEFT"/>|create_service_connection()<br ALIGN="LEFT"/>test_get_document_service()<br ALIGN="LEFT"/>test_get_search_service()<br ALIGN="LEFT"/>test_no_host_provided()<br ALIGN="LEFT"/>test_search_with_auth()<br ALIGN="LEFT"/>test_upload_documents_with_auth()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_exceptions.CloudSearchJSONExceptionTest" [color="black", fontcolor="black", label=<{CloudSearchJSONExceptionTest|response : bytes<br ALIGN="LEFT"/>|test_no_simplejson_value_error()<br ALIGN="LEFT"/>test_simplejson_jsondecodeerror()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_exceptions.CloudSearchJSONExceptionTest" [color="black", fontcolor="black", label=<{CloudSearchJSONExceptionTest|response : bytes<br ALIGN="LEFT"/>|test_no_simplejson_value_error()<br ALIGN="LEFT"/>test_simplejson_jsondecodeerror()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudsearch.test_layers.CloudSearchLayer1Test" [color="black", fontcolor="black", label=<{CloudSearchLayer1Test|cloudsearch : bool<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>layer1 : Layer1<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_domain()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudsearch2.test_layers.CloudSearchLayer1Test" [color="black", fontcolor="black", label=<{CloudSearchLayer1Test|cloudsearch : bool<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>layer1 : CloudSearchConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_domain()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudsearch.test_layers.CloudSearchLayer2Test" [color="black", fontcolor="black", label=<{CloudSearchLayer2Test|cloudsearch : bool<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>layer2 : Layer2<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_domain()<br ALIGN="LEFT"/>test_initialization_regression()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudsearch2.test_layers.CloudSearchLayer2Test" [color="black", fontcolor="black", label=<{CloudSearchLayer2Test|cloudsearch : bool<br ALIGN="LEFT"/>domain_name<br ALIGN="LEFT"/>layer2 : Layer2<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_domain()<br ALIGN="LEFT"/>test_initialization_regression()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.CloudSearchNonJsonTest" [color="black", fontcolor="black", label=<{CloudSearchNonJsonTest|content_type : str<br ALIGN="LEFT"/>response : bytes<br ALIGN="LEFT"/>response_status : int<br ALIGN="LEFT"/>|test_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.CloudSearchNonJsonTest" [color="black", fontcolor="black", label=<{CloudSearchNonJsonTest|content_type : str<br ALIGN="LEFT"/>response : bytes<br ALIGN="LEFT"/>response_status : int<br ALIGN="LEFT"/>|test_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_document.CloudSearchSDFManipulation" [color="black", fontcolor="black", label=<{CloudSearchSDFManipulation|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_initial_sdf_is_blank()<br ALIGN="LEFT"/>test_cloudsearch_single_document_sdf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_document.CloudSearchSDFManipulation" [color="black", fontcolor="black", label=<{CloudSearchSDFManipulation|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_initial_sdf_is_blank()<br ALIGN="LEFT"/>test_cloudsearch_single_document_sdf()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.CloudSearchSearchBaseTest" [color="black", fontcolor="black", label=<{CloudSearchSearchBaseTest|content_type : str<br ALIGN="LEFT"/>hits : list<br ALIGN="LEFT"/>response_status : int<br ALIGN="LEFT"/>|get_args(requestline)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.CloudSearchSearchBaseTest" [color="black", fontcolor="black", label=<{CloudSearchSearchBaseTest|content_type : str<br ALIGN="LEFT"/>hits : list<br ALIGN="LEFT"/>response_status : int<br ALIGN="LEFT"/>|get_args(requestline)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.CloudSearchSearchFacetTest" [color="black", fontcolor="black", label=<{CloudSearchSearchFacetTest|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_search_facets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.CloudSearchSearchFacetTest" [color="black", fontcolor="black", label=<{CloudSearchSearchFacetTest|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_search_facets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.CloudSearchSearchTest" [color="black", fontcolor="black", label=<{CloudSearchSearchTest|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_bqsearch()<br ALIGN="LEFT"/>test_cloudsearch_facet_constraint_multiple()<br ALIGN="LEFT"/>test_cloudsearch_facet_constraint_single()<br ALIGN="LEFT"/>test_cloudsearch_facet_multiple()<br ALIGN="LEFT"/>test_cloudsearch_facet_single()<br ALIGN="LEFT"/>test_cloudsearch_facet_sort_multiple()<br ALIGN="LEFT"/>test_cloudsearch_facet_sort_single()<br ALIGN="LEFT"/>test_cloudsearch_qsearch()<br ALIGN="LEFT"/>test_cloudsearch_rank_multiple()<br ALIGN="LEFT"/>test_cloudsearch_rank_single()<br ALIGN="LEFT"/>test_cloudsearch_result_fields_multiple()<br ALIGN="LEFT"/>test_cloudsearch_result_fields_single()<br ALIGN="LEFT"/>test_cloudsearch_results_hits()<br ALIGN="LEFT"/>test_cloudsearch_results_info()<br ALIGN="LEFT"/>test_cloudsearch_results_internal_consistancy()<br ALIGN="LEFT"/>test_cloudsearch_results_iterator()<br ALIGN="LEFT"/>test_cloudsearch_results_matched()<br ALIGN="LEFT"/>test_cloudsearch_results_meta()<br ALIGN="LEFT"/>test_cloudsearch_search_details()<br ALIGN="LEFT"/>test_cloudsearch_search_nextpage()<br ALIGN="LEFT"/>test_cloudsearch_t_field_multiple()<br ALIGN="LEFT"/>test_cloudsearch_t_field_single()<br ALIGN="LEFT"/>test_cloudsearch_top_n_multiple()<br ALIGN="LEFT"/>test_cloudsearch_top_n_single()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.CloudSearchSearchTest" [color="black", fontcolor="black", label=<{CloudSearchSearchTest|response : dict<br ALIGN="LEFT"/>|test_cloudsearch_facet_constraint_multiple()<br ALIGN="LEFT"/>test_cloudsearch_facet_constraint_single()<br ALIGN="LEFT"/>test_cloudsearch_facet_sort_multiple()<br ALIGN="LEFT"/>test_cloudsearch_facet_sort_single()<br ALIGN="LEFT"/>test_cloudsearch_qsearch()<br ALIGN="LEFT"/>test_cloudsearch_result_fields_multiple()<br ALIGN="LEFT"/>test_cloudsearch_result_fields_single()<br ALIGN="LEFT"/>test_cloudsearch_results_hits()<br ALIGN="LEFT"/>test_cloudsearch_results_info()<br ALIGN="LEFT"/>test_cloudsearch_results_internal_consistancy()<br ALIGN="LEFT"/>test_cloudsearch_results_iterator()<br ALIGN="LEFT"/>test_cloudsearch_results_matched()<br ALIGN="LEFT"/>test_cloudsearch_results_meta()<br ALIGN="LEFT"/>test_cloudsearch_search_details()<br ALIGN="LEFT"/>test_cloudsearch_search_nextpage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.CloudSearchUnauthorizedTest" [color="black", fontcolor="black", label=<{CloudSearchUnauthorizedTest|content_type : str<br ALIGN="LEFT"/>response : bytes<br ALIGN="LEFT"/>response_status : int<br ALIGN="LEFT"/>|test_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.CloudSearchUnauthorizedTest" [color="black", fontcolor="black", label=<{CloudSearchUnauthorizedTest|content_type : str<br ALIGN="LEFT"/>response : bytes<br ALIGN="LEFT"/>response_status : int<br ALIGN="LEFT"/>|test_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudtrail.test_cert_verification.CloudTrailCertVerificationTest" [color="black", fontcolor="black", label=<{CloudTrailCertVerificationTest|cloudtrail : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.cloudwatch.test_cert_verification.CloudWatchCertVerificationTest" [color="black", fontcolor="black", label=<{CloudWatchCertVerificationTest|cloudwatch : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.cloudwatch.test_connection.CloudWatchConnectionTest" [color="black", fontcolor="black", label=<{CloudWatchConnectionTest|ec2 : bool<br ALIGN="LEFT"/>maxDiff : NoneType<br ALIGN="LEFT"/>|test_build_get_params_multiple_parameter_dimension1()<br ALIGN="LEFT"/>test_build_get_params_multiple_parameter_dimension2()<br ALIGN="LEFT"/>test_build_list_params()<br ALIGN="LEFT"/>test_build_put_params_invalid()<br ALIGN="LEFT"/>test_build_put_params_multiple_dimensions()<br ALIGN="LEFT"/>test_build_put_params_multiple_metrics()<br ALIGN="LEFT"/>test_build_put_params_multiple_parameter_dimension()<br ALIGN="LEFT"/>test_build_put_params_one()<br ALIGN="LEFT"/>test_describe_alarms()<br ALIGN="LEFT"/>test_get_metric_statistics()<br ALIGN="LEFT"/>test_put_metric_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.logs.test_cert_verification.CloudWatchLogsCertVerificationTest" [color="black", fontcolor="black", label=<{CloudWatchLogsCertVerificationTest|regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudfront.test_distribution.CloudfrontDistributionTest" [color="black", fontcolor="black", label=<{CloudfrontDistributionTest|cloudfront : bool<br ALIGN="LEFT"/>dist : DistributionConfig<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_logging()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudfront.test_signed_urls.CloudfrontSignedUrlsTest" [color="black", fontcolor="black", label=<{CloudfrontSignedUrlsTest|canned_policy : str<br ALIGN="LEFT"/>cloudfront : bool<br ALIGN="LEFT"/>custom_policy_1 : str<br ALIGN="LEFT"/>custom_policy_2 : str<br ALIGN="LEFT"/>dist : Distribution<br ALIGN="LEFT"/>notdefault : bool<br ALIGN="LEFT"/>pk_id : str<br ALIGN="LEFT"/>pk_str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_canned_policy()<br ALIGN="LEFT"/>test_create_canned_policy()<br ALIGN="LEFT"/>test_custom_policy_all()<br ALIGN="LEFT"/>test_custom_policy_expires_and_policy_url()<br ALIGN="LEFT"/>test_custom_policy_ip_address()<br ALIGN="LEFT"/>test_custom_policy_ip_range()<br ALIGN="LEFT"/>test_custom_policy_valid_after()<br ALIGN="LEFT"/>test_encode_custom_policy_1()<br ALIGN="LEFT"/>test_encode_custom_policy_2()<br ALIGN="LEFT"/>test_params_canned_policy()<br ALIGN="LEFT"/>test_sign_canned_policy()<br ALIGN="LEFT"/>test_sign_canned_policy_pk_file()<br ALIGN="LEFT"/>test_sign_canned_policy_pk_file_like()<br ALIGN="LEFT"/>test_sign_canned_policy_pk_file_name()<br ALIGN="LEFT"/>test_sign_canned_policy_unicode()<br ALIGN="LEFT"/>test_sign_custom_policy_1()<br ALIGN="LEFT"/>test_sign_custom_policy_2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cognito.CognitoTest" [color="black", fontcolor="black", label=<{CognitoTest|cognito_identity : CognitoIdentityConnection<br ALIGN="LEFT"/>cognito_sync : CognitoSyncConnection<br ALIGN="LEFT"/>identity_pool_id<br ALIGN="LEFT"/>identity_pool_name : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_key.TestFileError.test_file_error.CustomException" [color="black", fontcolor="red", label=<{CustomException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.integration.datapipeline.test_cert_verification.DatapipelineCertVerificationTest" [color="black", fontcolor="black", label=<{DatapipelineCertVerificationTest|datapipeline : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_message.DecodeExceptionRaisingMessage" [color="black", fontcolor="black", label=<{DecodeExceptionRaisingMessage|<br ALIGN="LEFT"/>|decode(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.DeleteCreateNetworkAcl" [color="black", fontcolor="black", label=<{DeleteCreateNetworkAcl|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_network_acl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.directconnect.test_directconnect.DirectConnectTest" [color="black", fontcolor="black", label=<{DirectConnectTest|<br ALIGN="LEFT"/>|test_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb2.test_cert_verification.DynamoDB2CertVerificationTest" [color="black", fontcolor="black", label=<{DynamoDB2CertVerificationTest|dynamodb2 : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb.test_cert_verification.DynamoDBCertVerificationTest" [color="black", fontcolor="black", label=<{DynamoDBCertVerificationTest|dynamodb : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb.test_layer1.DynamoDBLayer1Test" [color="black", fontcolor="black", label=<{DynamoDBLayer1Test|dynamodb : bool<br ALIGN="LEFT"/>hash_key_name : str<br ALIGN="LEFT"/>hash_key_type : str<br ALIGN="LEFT"/>provisioned_throughput : dict<br ALIGN="LEFT"/>range_key_name : str<br ALIGN="LEFT"/>range_key_type : str<br ALIGN="LEFT"/>read_units : int<br ALIGN="LEFT"/>schema : dict<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>write_units : int<br ALIGN="LEFT"/>|create_table(table_name, schema, provisioned_throughput)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/><I>tearDown</I>()<br ALIGN="LEFT"/>test_binary_attributes()<br ALIGN="LEFT"/>test_layer1_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb.test_layer2.DynamoDBLayer2Test" [color="black", fontcolor="black", label=<{DynamoDBLayer2Test|dynamodb : bool<br ALIGN="LEFT"/>hash_key_name : str<br ALIGN="LEFT"/>hash_key_proto_value : str<br ALIGN="LEFT"/>range_key_name : str<br ALIGN="LEFT"/>range_key_proto_value : str<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>|create_sample_table()<br ALIGN="LEFT"/>create_table(table_name, schema, read_units, write_units)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_binary_attrs()<br ALIGN="LEFT"/>test_large_integers()<br ALIGN="LEFT"/>test_layer2_basic()<br ALIGN="LEFT"/>test_lossy_float_conversion()<br ALIGN="LEFT"/>test_put_decimal_attrs()<br ALIGN="LEFT"/>test_put_single_letter_attr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb2.test_layer1.DynamoDBv2Layer1Test" [color="black", fontcolor="black", label=<{DynamoDBv2Layer1Test|attributes : list<br ALIGN="LEFT"/>dynamodb : bool<br ALIGN="LEFT"/>hash_key_name : str<br ALIGN="LEFT"/>hash_key_type : str<br ALIGN="LEFT"/>lsi : list<br ALIGN="LEFT"/>provisioned_throughput : dict<br ALIGN="LEFT"/>range_key_name : str<br ALIGN="LEFT"/>range_key_type : str<br ALIGN="LEFT"/>read_units : int<br ALIGN="LEFT"/>schema : list<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>write_units : int<br ALIGN="LEFT"/>|create_table(table_name, attributes, schema, provisioned_throughput, lsi, wait)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_integrated()<br ALIGN="LEFT"/>test_recursive()<br ALIGN="LEFT"/>test_throughput_exceeded_regression()<br ALIGN="LEFT"/>test_without_range_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_layer1.DynamoDBv2Layer1UnitTest" [color="black", fontcolor="black", label=<{DynamoDBv2Layer1UnitTest|dynamodb : bool<br ALIGN="LEFT"/>|test_init_host_override()<br ALIGN="LEFT"/>test_init_region()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb2.test_highlevel.DynamoDBv2Test" [color="black", fontcolor="black", label=<{DynamoDBv2Test|dynamodb : bool<br ALIGN="LEFT"/>|test_gsi()<br ALIGN="LEFT"/>test_gsi_with_just_hash_key()<br ALIGN="LEFT"/>test_integration()<br ALIGN="LEFT"/>test_query_after_describe_with_gsi()<br ALIGN="LEFT"/>test_query_with_limits()<br ALIGN="LEFT"/>test_query_with_reverse()<br ALIGN="LEFT"/>test_unprocessed_batch_writes()<br ALIGN="LEFT"/>test_update_table_online_indexing_support()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.test_cert_verification.EC2CertVerificationTest" [color="black", fontcolor="black", label=<{EC2CertVerificationTest|ec2 : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.test_connection.EC2ConnectionTest" [color="black", fontcolor="black", label=<{EC2ConnectionTest|ec2 : bool<br ALIGN="LEFT"/>|test_1_basic()<br ALIGN="LEFT"/>test_can_get_all_instances_sigv4()<br ALIGN="LEFT"/>test_dry_run()<br ALIGN="LEFT"/>test_launch_permissions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.elb.test_cert_verification.ELBCertVerificationTest" [color="black", fontcolor="black", label=<{ELBCertVerificationTest|elb : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.elb.test_connection.ELBConnectionTest" [color="black", fontcolor="black", label=<{ELBConnectionTest|availability_zones : list<br ALIGN="LEFT"/>balancer : LoadBalancer, NoneType<br ALIGN="LEFT"/>bucket : Bucket<br ALIGN="LEFT"/>bucket_name : str<br ALIGN="LEFT"/>conn : ELBConnection<br ALIGN="LEFT"/>ec2 : bool<br ALIGN="LEFT"/>listeners : list<br ALIGN="LEFT"/>mod_balancer : LoadBalancer, NoneType<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>s3 : S3Connection<br ALIGN="LEFT"/>timestamp : str<br ALIGN="LEFT"/>|change_and_verify_load_balancer_connection_draining(enabled, timeout)<br ALIGN="LEFT"/>cleanup_bucket(bucket)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_build_list_params()<br ALIGN="LEFT"/>test_can_make_sigv4_call()<br ALIGN="LEFT"/>test_create_load_balancer()<br ALIGN="LEFT"/>test_create_load_balancer_backend_with_policies()<br ALIGN="LEFT"/>test_create_load_balancer_complex_listeners()<br ALIGN="LEFT"/>test_create_load_balancer_listeners()<br ALIGN="LEFT"/>test_create_load_balancer_listeners_with_policies()<br ALIGN="LEFT"/>test_delete_load_balancer_listeners()<br ALIGN="LEFT"/>test_load_balancer_access_log()<br ALIGN="LEFT"/>test_load_balancer_connection_draining_config()<br ALIGN="LEFT"/>test_load_balancer_get_attributes()<br ALIGN="LEFT"/>test_set_load_balancer_policies_of_listeners()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.emr.test_cert_verification.EMRCertVerificationTest" [color="black", fontcolor="black", label=<{EMRCertVerificationTest|emr : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.elastictranscoder.test_cert_verification.ElasticTranscoderCertVerificationTest" [color="black", fontcolor="black", label=<{ElasticTranscoderCertVerificationTest|elastictranscoder : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_regioninfo.FakeConn" [color="black", fontcolor="black", label=<{FakeConn|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.auth.test_sigv4.FakeEC2Connection" [color="black", fontcolor="black", label=<{FakeEC2Connection|region<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.beanstalk.test_exception.FakeError" [color="black", fontcolor="black", label=<{FakeError|body<br ALIGN="LEFT"/>code<br ALIGN="LEFT"/>reason<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_search.FakeResponse" [color="black", fontcolor="black", label=<{FakeResponse|content : bytes<br ALIGN="LEFT"/>status_code : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_search.FakeResponse" [color="black", fontcolor="black", label=<{FakeResponse|content : bytes<br ALIGN="LEFT"/>status_code : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.glacier.test_vault.TestVault.test_retrieve_inventory.FakeResponse" [color="black", fontcolor="black", label=<{FakeResponse|status : int<br ALIGN="LEFT"/>|getheader(key, default)<br ALIGN="LEFT"/>read(amt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.auth.test_sigv4.FakeS3Connection" [color="black", fontcolor="black", label=<{FakeS3Connection|host<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.glacier.test_concurrent.FakeThreadedConcurrentDownloader" [color="black", fontcolor="black", label=<{FakeThreadedConcurrentDownloader|results_queue<br ALIGN="LEFT"/>worker_queue<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.glacier.test_concurrent.FakeThreadedConcurrentUploader" [color="black", fontcolor="black", label=<{FakeThreadedConcurrentUploader|results_queue<br ALIGN="LEFT"/>upload_id<br ALIGN="LEFT"/>worker_queue<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.integration.gs.test_basic.GSBasicTest" [color="black", fontcolor="black", label=<{GSBasicTest|<br ALIGN="LEFT"/>|test_acl()<br ALIGN="LEFT"/>test_bucket_lookup()<br ALIGN="LEFT"/>test_copy_key()<br ALIGN="LEFT"/>test_cors_xml_bucket()<br ALIGN="LEFT"/>test_cors_xml_storage_uri()<br ALIGN="LEFT"/>test_default_object_acls()<br ALIGN="LEFT"/>test_default_object_acls_storage_uri()<br ALIGN="LEFT"/>test_get_all_keys()<br ALIGN="LEFT"/>test_lifecycle_config_bucket()<br ALIGN="LEFT"/>test_lifecycle_config_storage_uri()<br ALIGN="LEFT"/>test_list_iterator()<br ALIGN="LEFT"/>test_logging()<br ALIGN="LEFT"/>test_metadata()<br ALIGN="LEFT"/>test_read_write()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.gs.test_generation_conditionals.GSGenerationConditionalsTest" [color="black", fontcolor="black", label=<{GSGenerationConditionalsTest|<br ALIGN="LEFT"/>|testBucketConditionalSetAcl()<br ALIGN="LEFT"/>testBucketConditionalSetCannedAcl()<br ALIGN="LEFT"/>testBucketConditionalSetXmlAcl()<br ALIGN="LEFT"/>testConditionalSetContentsFromFile()<br ALIGN="LEFT"/>testConditionalSetContentsFromFilename()<br ALIGN="LEFT"/>testConditionalSetContentsFromStream()<br ALIGN="LEFT"/>testConditionalSetContentsFromString()<br ALIGN="LEFT"/>testObjectConditionalSetAcl()<br ALIGN="LEFT"/>testObjectConditionalSetCannedAcl()<br ALIGN="LEFT"/>testObjectConditionalSetXmlAcl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.gs.test_storage_uri.GSStorageUriTest" [color="black", fontcolor="black", label=<{GSStorageUriTest|<br ALIGN="LEFT"/>|testCloneReplaceKey()<br ALIGN="LEFT"/>testCompose()<br ALIGN="LEFT"/>testHasVersion()<br ALIGN="LEFT"/>testPropertiesUpdated()<br ALIGN="LEFT"/>testSetAclXml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.gs.testcase.GSTestCase" [color="black", fontcolor="black", label=<{GSTestCase|gs : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.gs.test_versioning.GSVersioningTest" [color="black", fontcolor="black", label=<{GSVersioningTest|<br ALIGN="LEFT"/>|testCopyVersionedKey()<br ALIGN="LEFT"/>testDeleteVersionedKey()<br ALIGN="LEFT"/>testGetVersionedKey()<br ALIGN="LEFT"/>testKeyGenerationUpdatesOnSet()<br ALIGN="LEFT"/>testVersionedBucketCannedAcl()<br ALIGN="LEFT"/>testVersionedBucketXmlAcl()<br ALIGN="LEFT"/>testVersionedObjectCannedAcl()<br ALIGN="LEFT"/>testVersioningToggle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.glacier.test_cert_verification.GlacierCertVerificationTest" [color="black", fontcolor="black", label=<{GlacierCertVerificationTest|glacier : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer1.GlacierJobOperations" [color="black", fontcolor="black", label=<{GlacierJobOperations|job_content : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_archive_output()<br ALIGN="LEFT"/>test_initiate_archive_job()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer1.GlacierLayer1ConnectionBase" [color="black", fontcolor="black", label=<{GlacierLayer1ConnectionBase|connection_class : Layer1<br ALIGN="LEFT"/>json_header : list<br ALIGN="LEFT"/>vault_arn : str<br ALIGN="LEFT"/>vault_info : dict<br ALIGN="LEFT"/>vault_name : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer2.GlacierLayer2Base" [color="black", fontcolor="black", label=<{GlacierLayer2Base|mock_layer1<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer1.GlacierUploadArchiveResets" [color="black", fontcolor="black", label=<{GlacierUploadArchiveResets|<br ALIGN="LEFT"/>|test_upload_archive()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer1.GlacierVaultsOperations" [color="black", fontcolor="black", label=<{GlacierVaultsOperations|<br ALIGN="LEFT"/>|test_create_vault_parameters()<br ALIGN="LEFT"/>test_delete_vault()<br ALIGN="LEFT"/>test_describe_vaults()<br ALIGN="LEFT"/>test_list_vaults()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestPassword.test_hmac.HMACPassword" [color="black", fontcolor="black", label=<{HMACPassword|hashfunc<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.integration.iam.test_password_policy.IAMAccountPasswordPolicy" [color="black", fontcolor="black", label=<{IAMAccountPasswordPolicy|iam : bool<br ALIGN="LEFT"/>|test_password_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.iam.test_cert_verification.IAMCertVerificationTest" [color="black", fontcolor="black", label=<{IAMCertVerificationTest|iam : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.IndexFieldTestCase" [color="black", fontcolor="black", label=<{IndexFieldTestCase|<br ALIGN="LEFT"/>|test_all_index()<br ALIGN="LEFT"/>test_global_all_index()<br ALIGN="LEFT"/>test_global_include_index()<br ALIGN="LEFT"/>test_global_include_index_throughput()<br ALIGN="LEFT"/>test_global_keys_only_index()<br ALIGN="LEFT"/>test_include_index()<br ALIGN="LEFT"/>test_keys_only_index()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.ItemFromItemTestCase" [color="black", fontcolor="black", label=<{ItemFromItemTestCase|johndoe : Item<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.ItemTestCase" [color="black", fontcolor="black", label=<{ItemTestCase|assertCountEqual<br ALIGN="LEFT"/>johndoe : Item<br ALIGN="LEFT"/>table : Table<br ALIGN="LEFT"/>|create_item(data)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_attribute_access()<br ALIGN="LEFT"/>test_build_expects()<br ALIGN="LEFT"/>test_contains()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_get()<br ALIGN="LEFT"/>test_get_keys()<br ALIGN="LEFT"/>test_get_raw_keys()<br ALIGN="LEFT"/>test_initialization()<br ALIGN="LEFT"/>test_items()<br ALIGN="LEFT"/>test_iter()<br ALIGN="LEFT"/>test_keys()<br ALIGN="LEFT"/>test_load()<br ALIGN="LEFT"/>test_mark_clean()<br ALIGN="LEFT"/>test_needs_save()<br ALIGN="LEFT"/>test_needs_save_set_changed()<br ALIGN="LEFT"/>test_nonzero()<br ALIGN="LEFT"/>test_partial_no_changes()<br ALIGN="LEFT"/>test_partial_with_changes()<br ALIGN="LEFT"/>test_prepare_full()<br ALIGN="LEFT"/>test_prepare_full_empty_set()<br ALIGN="LEFT"/>test_prepare_partial()<br ALIGN="LEFT"/>test_prepare_partial_empty_set()<br ALIGN="LEFT"/>test_save_no_changes()<br ALIGN="LEFT"/>test_save_with_changes()<br ALIGN="LEFT"/>test_save_with_changes_overwrite()<br ALIGN="LEFT"/>test_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_keyfile.KeyfileTest" [color="black", fontcolor="black", label=<{KeyfileTest|contents : str<br ALIGN="LEFT"/>keyfile : KeyFile<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>testReadFull()<br ALIGN="LEFT"/>testReadPartial()<br ALIGN="LEFT"/>testSeek()<br ALIGN="LEFT"/>testSeekCur()<br ALIGN="LEFT"/>testSeekEnd()<br ALIGN="LEFT"/>testSetEtag()<br ALIGN="LEFT"/>testTell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.kinesis.test_cert_verification.KinesisCertVerificationTest" [color="black", fontcolor="black", label=<{KinesisCertVerificationTest|kinesis : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_pool.LittleQuerier" [color="black", fontcolor="black", label=<{LittleQuerier|bucket<br ALIGN="LEFT"/>running : bool<br ALIGN="LEFT"/>small_names<br ALIGN="LEFT"/>thread : Thread<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.mturk.common.MTurkCommon" [color="black", fontcolor="black", label=<{MTurkCommon|conn<br ALIGN="LEFT"/>|get_hit_params()<br ALIGN="LEFT"/>get_question()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.mturk.mocks.MTurkConnection" [color="black", fontcolor="black", label=<{MTurkConnection|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.integration.mws.test.MWSTestCase" [color="black", fontcolor="black", label=<{MWSTestCase|marketplace<br ALIGN="LEFT"/>marketplace_id<br ALIGN="LEFT"/>mws : MWSConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_feedlist()<br ALIGN="LEFT"/>test_get_lowest_offer_listings_for_asin()<br ALIGN="LEFT"/>test_get_matching_product()<br ALIGN="LEFT"/>test_get_matching_product_for_id()<br ALIGN="LEFT"/>test_get_product_categories_for_asin()<br ALIGN="LEFT"/>test_inbound_status()<br ALIGN="LEFT"/>test_list_inventory_supply()<br ALIGN="LEFT"/>test_list_matching_products()<br ALIGN="LEFT"/>test_marketplace_participations()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.MockAWSService" [color="black", fontcolor="black", label=<{MockAWSService|APIVersion : str<br ALIGN="LEFT"/>region : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.integration.s3.mock_storage_service.MockAcl" [color="black", fontcolor="black", label=<{MockAcl|<br ALIGN="LEFT"/>|<I>endElement</I>(name, value, connection)<br ALIGN="LEFT"/><I>startElement</I>(name, attrs, connection)<br ALIGN="LEFT"/>to_xml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.mock_storage_service.MockBucket" [color="black", fontcolor="black", label=<{MockBucket|acls : dict<br ALIGN="LEFT"/>connection : NoneType<br ALIGN="LEFT"/>def_acl<br ALIGN="LEFT"/>keys : dict<br ALIGN="LEFT"/>logging : bool<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>subresources : dict<br ALIGN="LEFT"/>|copy_key(new_key_name, src_bucket_name, src_key_name, metadata, src_version_id, storage_class, preserve_acl, encrypt_key, headers, query_args)<br ALIGN="LEFT"/>delete_key(key_name, headers, version_id, mfa_token)<br ALIGN="LEFT"/>disable_logging()<br ALIGN="LEFT"/>enable_logging(target_bucket_prefix)<br ALIGN="LEFT"/>get_acl(key_name, headers, version_id)<br ALIGN="LEFT"/>get_all_keys(headers)<br ALIGN="LEFT"/>get_def_acl(key_name, headers, version_id)<br ALIGN="LEFT"/>get_key(key_name, headers, version_id)<br ALIGN="LEFT"/>get_logging_config()<br ALIGN="LEFT"/>get_subresource(subresource, key_name, headers, version_id)<br ALIGN="LEFT"/>get_versioning_status(headers)<br ALIGN="LEFT"/>list(prefix, delimiter, marker, headers)<br ALIGN="LEFT"/>new_key(key_name)<br ALIGN="LEFT"/>set_acl(acl_or_str, key_name, headers, version_id)<br ALIGN="LEFT"/>set_def_acl(acl_or_str, key_name, headers, version_id)<br ALIGN="LEFT"/>set_subresource(subresource, value, key_name, headers, version_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.mock_storage_service.MockBucketStorageUri" [color="black", fontcolor="black", label=<{MockBucketStorageUri|bucket_name : NoneType<br ALIGN="LEFT"/>delim : str<br ALIGN="LEFT"/>generation : NoneType<br ALIGN="LEFT"/>is_latest : bool<br ALIGN="LEFT"/>is_version_specific : bool<br ALIGN="LEFT"/>object_name : NoneType<br ALIGN="LEFT"/>scheme<br ALIGN="LEFT"/>suppress_consec_slashes : NoneType<br ALIGN="LEFT"/>uri<br ALIGN="LEFT"/>version_id : NoneType<br ALIGN="LEFT"/>versionless_uri<br ALIGN="LEFT"/>|acl_class()<br ALIGN="LEFT"/>canned_acls()<br ALIGN="LEFT"/>clone_replace_key(key)<br ALIGN="LEFT"/>clone_replace_name(new_name)<br ALIGN="LEFT"/>connect(access_key_id, secret_access_key)<br ALIGN="LEFT"/>copy_key(src_bucket_name, src_key_name, metadata, src_version_id, storage_class, preserve_acl, encrypt_key, headers, query_args, src_generation)<br ALIGN="LEFT"/>create_bucket(headers, location, policy, storage_class)<br ALIGN="LEFT"/>delete_bucket(headers)<br ALIGN="LEFT"/>delete_key(validate, headers, version_id, mfa_token)<br ALIGN="LEFT"/>disable_logging(validate, headers, version_id)<br ALIGN="LEFT"/>enable_logging(target_bucket, target_prefix, validate, headers, version_id)<br ALIGN="LEFT"/>equals(uri)<br ALIGN="LEFT"/>get_acl(validate, headers, version_id)<br ALIGN="LEFT"/>get_all_buckets(headers)<br ALIGN="LEFT"/>get_all_keys(validate, headers)<br ALIGN="LEFT"/>get_bucket(validate, headers)<br ALIGN="LEFT"/>get_contents_to_file(fp, headers, cb, num_cb, torrent, version_id, res_download_handler, response_headers)<br ALIGN="LEFT"/>get_contents_to_stream(fp, headers, cb, num_cb, version_id)<br ALIGN="LEFT"/>get_def_acl(validate, headers, version_id)<br ALIGN="LEFT"/>get_key(validate, headers, version_id)<br ALIGN="LEFT"/>get_logging_config(validate, headers, version_id)<br ALIGN="LEFT"/>get_subresource(subresource, validate, headers, version_id)<br ALIGN="LEFT"/>get_versioning_config(headers)<br ALIGN="LEFT"/>has_version()<br ALIGN="LEFT"/>is_cloud_uri()<br ALIGN="LEFT"/>is_file_uri()<br ALIGN="LEFT"/>is_stream()<br ALIGN="LEFT"/>list_bucket(prefix, delimiter, headers, all_versions)<br ALIGN="LEFT"/>names_bucket()<br ALIGN="LEFT"/>names_container()<br ALIGN="LEFT"/>names_directory()<br ALIGN="LEFT"/>names_file()<br ALIGN="LEFT"/>names_object()<br ALIGN="LEFT"/>names_provider()<br ALIGN="LEFT"/>names_singleton()<br ALIGN="LEFT"/>new_key(validate, headers)<br ALIGN="LEFT"/>set_acl(acl_or_str, key_name, validate, headers, version_id)<br ALIGN="LEFT"/>set_contents_from_file(fp, headers, replace, cb, num_cb, policy, md5, size, rewind, res_upload_handler)<br ALIGN="LEFT"/>set_contents_from_stream(fp, headers, replace, cb, num_cb, policy, reduced_redundancy, query_args, size)<br ALIGN="LEFT"/>set_contents_from_string(s, headers, replace, cb, num_cb, policy, md5, reduced_redundancy)<br ALIGN="LEFT"/>set_def_acl(acl_or_str, key_name, validate, headers, version_id)<br ALIGN="LEFT"/>set_subresource(subresource, value, validate, headers, version_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.mock_storage_service.MockConnection" [color="black", fontcolor="black", label=<{MockConnection|buckets : dict<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>|create_bucket(bucket_name, headers, location, policy, storage_class)<br ALIGN="LEFT"/>delete_bucket(bucket, headers)<br ALIGN="LEFT"/>get_all_buckets(headers)<br ALIGN="LEFT"/>get_bucket(bucket_name, validate, headers)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.mock_storage_service.MockKey" [color="black", fontcolor="black", label=<{MockKey|BufferSize : int<br ALIGN="LEFT"/>bucket : NoneType<br ALIGN="LEFT"/>closed : bool<br ALIGN="LEFT"/>content_encoding : NoneType, str<br ALIGN="LEFT"/>content_language : NoneType, str<br ALIGN="LEFT"/>content_type : NoneType, str<br ALIGN="LEFT"/>data : NoneType, str<br ALIGN="LEFT"/>etag : NoneType, str<br ALIGN="LEFT"/>last_modified : str<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>provider<br ALIGN="LEFT"/>read_pos : NoneType, int<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>|close(fast)<br ALIGN="LEFT"/>compute_md5(fp)<br ALIGN="LEFT"/>copy(dst_bucket_name, dst_key, metadata, reduced_redundancy, preserve_acl)<br ALIGN="LEFT"/>get_contents_as_string(headers, cb, num_cb, torrent, version_id)<br ALIGN="LEFT"/>get_contents_to_file(fp, headers, cb, num_cb, torrent, version_id, res_download_handler)<br ALIGN="LEFT"/>get_file(fp, headers, cb, num_cb, torrent, version_id, override_num_retries)<br ALIGN="LEFT"/>open_read(headers, query_args, override_num_retries)<br ALIGN="LEFT"/>read(size)<br ALIGN="LEFT"/>set_contents_from_file(fp, headers, replace, cb, num_cb, policy, md5, res_upload_handler)<br ALIGN="LEFT"/>set_contents_from_filename(filename, headers, replace, cb, num_cb, policy, md5, res_upload_handler)<br ALIGN="LEFT"/>set_contents_from_stream(fp, headers, replace, cb, num_cb, policy, reduced_redundancy, query_args, size)<br ALIGN="LEFT"/>set_contents_from_string(s, headers, replace, cb, num_cb, policy, md5, reduced_redundancy)<br ALIGN="LEFT"/>set_etag()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.mock_storage_service.MockProvider" [color="black", fontcolor="black", label=<{MockProvider|provider<br ALIGN="LEFT"/>|get_provider_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.MockServiceWithConfigTestCase" [color="black", fontcolor="black", label=<{MockServiceWithConfigTestCase|config : dict<br ALIGN="LEFT"/>config_patch : _patch<br ALIGN="LEFT"/>environ : dict<br ALIGN="LEFT"/>environ_patch : _patch<br ALIGN="LEFT"/>has_config_patch : _patch<br ALIGN="LEFT"/>|get_config(section_name, key, default)<br ALIGN="LEFT"/>has_config(section_name, key)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.mws.test_connection.TestMWSConnection.test_response_factory.MyResult" [color="black", fontcolor="black", label=<{MyResult|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.ec2.test_networkinterface.NetworkInterfaceTests" [color="black", fontcolor="black", label=<{NetworkInterfaceTests|attachment : Attachment<br ALIGN="LEFT"/>eni_one : NetworkInterface<br ALIGN="LEFT"/>eni_two : NetworkInterface<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_attach_calls_attach_eni()<br ALIGN="LEFT"/>test_detach_calls_detach_network_interface()<br ALIGN="LEFT"/>test_detach_with_force_calls_detach_network_interface_with_force()<br ALIGN="LEFT"/>test_detach_with_no_attach_data()<br ALIGN="LEFT"/>test_update_returns_status()<br ALIGN="LEFT"/>test_update_with_result_set_greater_than_0_updates_dict()<br ALIGN="LEFT"/>test_update_with_validate_true_raises_value_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_blockdevicemapping.TestLaunchConfiguration.test_run_instances_block_device_mapping.OrderedBlockDeviceMapping" [color="black", fontcolor="black", label=<{OrderedBlockDeviceMapping|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.mturk.all_tests.Program" [color="black", fontcolor="black", label=<{Program|test : TestSuite<br ALIGN="LEFT"/>|runTests()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.rds.test_cert_verification.RDSCertVerificationTest" [color="black", fontcolor="black", label=<{RDSCertVerificationTest|rds : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.rds2.test_cert_verification.RDSCertVerificationTest" [color="black", fontcolor="black", label=<{RDSCertVerificationTest|rds : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.redshift.test_cert_verification.RedshiftCertVerificationTest" [color="black", fontcolor="black", label=<{RedshiftCertVerificationTest|redshift : bool<br ALIGN="LEFT"/>regions : list<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.ResultSetTestCase" [color="black", fontcolor="black", label=<{ResultSetTestCase|result_function : MagicMock<br ALIGN="LEFT"/>results : ResultSet<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_fetch_more()<br ALIGN="LEFT"/>test_first_key()<br ALIGN="LEFT"/>test_iteration()<br ALIGN="LEFT"/>test_iteration_noresults()<br ALIGN="LEFT"/>test_iteration_sporadic_pages()<br ALIGN="LEFT"/>test_limit_equals_page()<br ALIGN="LEFT"/>test_limit_greater_than_page()<br ALIGN="LEFT"/>test_limit_smaller_than_first_page()<br ALIGN="LEFT"/>test_list()<br ALIGN="LEFT"/>test_max_page_size_and_bigger_limit_fetch_more()<br ALIGN="LEFT"/>test_max_page_size_and_smaller_limit_fetch_more()<br ALIGN="LEFT"/>test_max_page_size_fetch_more()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.test_cert_verification.Route53CertVerificationTest" [color="black", fontcolor="black", label=<{Route53CertVerificationTest|regions : list<br ALIGN="LEFT"/>route53 : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.Route53TestCase" [color="black", fontcolor="black", label=<{Route53TestCase|base_domain : str<br ALIGN="LEFT"/>conn : Route53Connection<br ALIGN="LEFT"/>zone : Zone<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_bucket.S3BucketTest" [color="black", fontcolor="black", label=<{S3BucketTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_lifecycle()<br ALIGN="LEFT"/>test_lifecycle_jp()<br ALIGN="LEFT"/>test_lifecycle_multi()<br ALIGN="LEFT"/>test_lifecycle_rule_xml()<br ALIGN="LEFT"/>test_lifecycle_with_defaults()<br ALIGN="LEFT"/>test_lifecycle_with_glacier_transition()<br ALIGN="LEFT"/>test_list_with_url_encoding()<br ALIGN="LEFT"/>test_logging()<br ALIGN="LEFT"/>test_next_marker()<br ALIGN="LEFT"/>test_tagging()<br ALIGN="LEFT"/>test_tagging_from_objects()<br ALIGN="LEFT"/>test_website_configuration()<br ALIGN="LEFT"/>test_website_redirect_all_requests()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_cors.S3CORSTest" [color="black", fontcolor="black", label=<{S3CORSTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>cfg : CORSConfiguration<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_cors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_cert_verification.S3CertVerificationTest" [color="black", fontcolor="black", label=<{S3CertVerificationTest|regions : list<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_connection.S3ConnectionTest" [color="black", fontcolor="black", label=<{S3ConnectionTest|s3 : bool<br ALIGN="LEFT"/>|test_1_basic()<br ALIGN="LEFT"/>test_basic_anon()<br ALIGN="LEFT"/>test_error_code_populated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_encryption.S3EncryptionTest" [color="black", fontcolor="black", label=<{S3EncryptionTest|s3 : bool<br ALIGN="LEFT"/>|test_1_versions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_key.S3KeySigV4Test" [color="black", fontcolor="black", label=<{S3KeySigV4Test|bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_put_get_with_non_string_headers_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_key.S3KeyTest" [color="black", fontcolor="black", label=<{S3KeyTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>my_cb_cnt : int<br ALIGN="LEFT"/>my_cb_last : NoneType<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_file_callback()<br ALIGN="LEFT"/>test_get_contents_with_md5()<br ALIGN="LEFT"/>test_header_casing()<br ALIGN="LEFT"/>test_header_encoding()<br ALIGN="LEFT"/>test_set_contents_as_file()<br ALIGN="LEFT"/>test_set_contents_from_file_dataloss()<br ALIGN="LEFT"/>test_set_contents_with_md5()<br ALIGN="LEFT"/>test_set_contents_with_sse_c()<br ALIGN="LEFT"/>test_setting_date()<br ALIGN="LEFT"/>test_website_redirect_none_configured()<br ALIGN="LEFT"/>test_website_redirect_with_bad_value()<br ALIGN="LEFT"/>test_website_redirects()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_key.S3KeyVersionCopyTest" [color="black", fontcolor="black", label=<{S3KeyVersionCopyTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_key_overwrite_and_copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_mfa.S3MFATest" [color="black", fontcolor="black", label=<{S3MFATest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_mfadel()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_multidelete.S3MultiDeleteTest" [color="black", fontcolor="black", label=<{S3MultiDeleteTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_1()<br ALIGN="LEFT"/>test_delete_empty_by_list()<br ALIGN="LEFT"/>test_delete_illegal()<br ALIGN="LEFT"/>test_delete_kanji()<br ALIGN="LEFT"/>test_delete_kanji_by_list()<br ALIGN="LEFT"/>test_delete_mix()<br ALIGN="LEFT"/>test_delete_must_escape()<br ALIGN="LEFT"/>test_delete_nothing()<br ALIGN="LEFT"/>test_delete_quietly()<br ALIGN="LEFT"/>test_delete_too_many_versions()<br ALIGN="LEFT"/>test_delete_unknown_version()<br ALIGN="LEFT"/>test_delete_with_prefixes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_multipart.S3MultiPartUploadSigV4Test" [color="black", fontcolor="black", label=<{S3MultiPartUploadSigV4Test|bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : NoneType<br ALIGN="LEFT"/>env_patch<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_initiate_multipart()<br ALIGN="LEFT"/>test_upload_part_by_size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_multipart.S3MultiPartUploadTest" [color="black", fontcolor="black", label=<{S3MultiPartUploadTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>s3 : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_abort()<br ALIGN="LEFT"/>test_complete_ascii()<br ALIGN="LEFT"/>test_complete_japanese()<br ALIGN="LEFT"/>test_etag_of_parts()<br ALIGN="LEFT"/>test_four_part_file()<br ALIGN="LEFT"/>test_get_all_multipart_uploads()<br ALIGN="LEFT"/>test_list_japanese()<br ALIGN="LEFT"/>test_list_multipart_uploads()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_connect_to_region.S3SpecifyHost" [color="black", fontcolor="black", label=<{S3SpecifyHost|s3 : bool<br ALIGN="LEFT"/>|tearDown()<br ALIGN="LEFT"/>testDefaultWithInvalidHost()<br ALIGN="LEFT"/>testDefaultWithInvalidHostNone()<br ALIGN="LEFT"/>testSuccessWithDefaultUSEast1()<br ALIGN="LEFT"/>testSuccessWithDefaultUSWest1()<br ALIGN="LEFT"/>testSuccessWithHostOverrideRegion()<br ALIGN="LEFT"/>testWithNonAWSHost()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_versioning.S3VersionTest" [color="black", fontcolor="black", label=<{S3VersionTest|bucket : Bucket<br ALIGN="LEFT"/>bucket_name<br ALIGN="LEFT"/>conn : S3Connection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_1_versions()<br ALIGN="LEFT"/>test_latest_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sdb.test_cert_verification.SDBCertVerificationTest" [color="black", fontcolor="black", label=<{SDBCertVerificationTest|regions : list<br ALIGN="LEFT"/>sdb : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sdb.test_connection.SDBConnectionTest" [color="black", fontcolor="black", label=<{SDBConnectionTest|sdb : bool<br ALIGN="LEFT"/>|test_1_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ses.test_cert_verification.SESCertVerificationTest" [color="black", fontcolor="black", label=<{SESCertVerificationTest|regions : list<br ALIGN="LEFT"/>ses : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ses.test_connection.SESConnectionTest" [color="black", fontcolor="black", label=<{SESConnectionTest|ses : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_dkim_attributes()<br ALIGN="LEFT"/>test_set_identity_dkim_enabled()<br ALIGN="LEFT"/>test_verify_domain_dkim()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestPassword.test_custom_hashclass.SHA224Password" [color="black", fontcolor="black", label=<{SHA224Password|hashfunc : sha224<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.integration.sns.test_cert_verification.SNSCertVerificationTest" [color="black", fontcolor="black", label=<{SNSCertVerificationTest|regions : list<br ALIGN="LEFT"/>sns : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sns.test_sns_sqs_subscription.SNSSubcribeSQSTest" [color="black", fontcolor="black", label=<{SNSSubcribeSQSTest|sns : bool<br ALIGN="LEFT"/>snsc : SNSConnection<br ALIGN="LEFT"/>sqs : bool<br ALIGN="LEFT"/>sqsc : SQSConnection<br ALIGN="LEFT"/>|get_policy_statements(queue)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_correct_sid()<br ALIGN="LEFT"/>test_idempotent_subscribe()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_connection.SQSAuthParams" [color="black", fontcolor="black", label=<{SQSAuthParams|connection_class : SQSConnection<br ALIGN="LEFT"/>service_connection : SQSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_auth_region_name_is_automatically_updated()<br ALIGN="LEFT"/>test_auth_service_name_override()<br ALIGN="LEFT"/>test_class_attribute_can_set_service_name()<br ALIGN="LEFT"/>test_get_queue_with_owner_account_id_returns_queue()<br ALIGN="LEFT"/>test_set_get_auth_service_and_region_names()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sqs.test_cert_verification.SQSCertVerificationTest" [color="black", fontcolor="black", label=<{SQSCertVerificationTest|regions : list<br ALIGN="LEFT"/>sqs : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sqs.test_connection.SQSConnectionTest" [color="black", fontcolor="black", label=<{SQSConnectionTest|sqs : bool<br ALIGN="LEFT"/>|create_temp_queue(conn)<br ALIGN="LEFT"/>put_queue_message(queue)<br ALIGN="LEFT"/>test_1_basic()<br ALIGN="LEFT"/>test_get_messages_attributes()<br ALIGN="LEFT"/>test_queue_deletion_affects_full_queues()<br ALIGN="LEFT"/>test_queue_purge()<br ALIGN="LEFT"/>test_sqs_longpoll()<br ALIGN="LEFT"/>test_sqs_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_connection.SQSMessageAttributesParsing" [color="black", fontcolor="black", label=<{SQSMessageAttributesParsing|connection_class : SQSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_message_attribute_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_connection.SQSProfileName" [color="black", fontcolor="black", label=<{SQSProfileName|config : dict<br ALIGN="LEFT"/>connection_class : SQSConnection<br ALIGN="LEFT"/>profile_name : str<br ALIGN="LEFT"/>service_connection : SQSConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_profile_name_gets_passed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_connection.SQSSendBatchMessageAttributes" [color="black", fontcolor="black", label=<{SQSSendBatchMessageAttributes|connection_class : SQSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_send_message_attributes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_connection.SQSSendMessageAttributes" [color="black", fontcolor="black", label=<{SQSSendMessageAttributes|connection_class : SQSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_send_message_attributes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sts.test_cert_verification.STSCertVerificationTest" [color="black", fontcolor="black", label=<{STSCertVerificationTest|regions : list<br ALIGN="LEFT"/>sts : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sts.test_credentials.STSCredentialsTest" [color="black", fontcolor="black", label=<{STSCredentialsTest|creds : Credentials<br ALIGN="LEFT"/>sts : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.swf.test_cert_verification.SWFCertVerificationTest" [color="black", fontcolor="black", label=<{SWFCertVerificationTest|regions : list<br ALIGN="LEFT"/>swf : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.SchemaFieldsTestCase" [color="black", fontcolor="black", label=<{SchemaFieldsTestCase|<br ALIGN="LEFT"/>|test_alternate_type()<br ALIGN="LEFT"/>test_hash_key()<br ALIGN="LEFT"/>test_range_key()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_securitygroup.SecurityGroupTest" [color="black", fontcolor="black", label=<{SecurityGroupTest|<br ALIGN="LEFT"/>|test_add_rule()<br ALIGN="LEFT"/>test_remove_rule_on_empty_group()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ServiceCertVerificationTest" [color="black", fontcolor="black", label=<{ServiceCertVerificationTest|regions : list<br ALIGN="LEFT"/>ssl : bool<br ALIGN="LEFT"/>|<I>sample_service_call</I>(conn)<br ALIGN="LEFT"/>test_certs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sts.test_session_token.SessionTokenTest" [color="black", fontcolor="black", label=<{SessionTokenTest|sts : bool<br ALIGN="LEFT"/>|test_assume_role_with_web_identity()<br ALIGN="LEFT"/>test_decode_authorization_message()<br ALIGN="LEFT"/>test_session_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.swf.test_layer1.SimpleWorkflowLayer1Test" [color="black", fontcolor="black", label=<{SimpleWorkflowLayer1Test|<br ALIGN="LEFT"/>|test_list_activity_types()<br ALIGN="LEFT"/>test_list_closed_workflow_executions()<br ALIGN="LEFT"/>test_list_domains()<br ALIGN="LEFT"/>test_list_open_workflow_executions()<br ALIGN="LEFT"/>test_list_workflow_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.swf.test_layer1.SimpleWorkflowLayer1TestBase" [color="black", fontcolor="black", label=<{SimpleWorkflowLayer1TestBase|conn : Layer1<br ALIGN="LEFT"/>swf : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/><I>tearDown</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.storage_uri.test_storage_uri.StorageUriTest" [color="black", fontcolor="black", label=<{StorageUriTest|s3 : bool<br ALIGN="LEFT"/>|nuke_bucket(bucket)<br ALIGN="LEFT"/>test_storage_uri_regionless()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sns.test_connection.StubResponse" [color="black", fontcolor="black", label=<{StubResponse|reason : str<br ALIGN="LEFT"/>status : int<br ALIGN="LEFT"/>|getheader(val)<br ALIGN="LEFT"/>getheaders()<br ALIGN="LEFT"/>read()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.support.test_cert_verification.SupportCertVerificationTest" [color="black", fontcolor="black", label=<{SupportCertVerificationTest|regions : list<br ALIGN="LEFT"/>support : bool<br ALIGN="LEFT"/>|sample_service_call(conn)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.swf.test_layer1_workflow_execution.SwfL1WorkflowExecutionTest" [color="black", fontcolor="black", label=<{SwfL1WorkflowExecutionTest|swf : bool<br ALIGN="LEFT"/>|run_decider()<br ALIGN="LEFT"/>run_worker()<br ALIGN="LEFT"/>test_failed_workflow_execution()<br ALIGN="LEFT"/>test_workflow_execution()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb2.test_table.TableTestCase" [color="black", fontcolor="black", label=<{TableTestCase|default_connection : DynamoDBConnection<br ALIGN="LEFT"/>users : Table<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test__build_filters()<br ALIGN="LEFT"/>test__introspect_indexes()<br ALIGN="LEFT"/>test__introspect_schema()<br ALIGN="LEFT"/>test_batch_get()<br ALIGN="LEFT"/>test_batch_write()<br ALIGN="LEFT"/>test_batch_write_dont_swallow_exceptions()<br ALIGN="LEFT"/>test_batch_write_flushing()<br ALIGN="LEFT"/>test_batch_write_no_writes()<br ALIGN="LEFT"/>test_batch_write_unprocessed_items()<br ALIGN="LEFT"/>test_count()<br ALIGN="LEFT"/>test_create_full()<br ALIGN="LEFT"/>test_create_global_secondary_index()<br ALIGN="LEFT"/>test_create_simple()<br ALIGN="LEFT"/>test_delete()<br ALIGN="LEFT"/>test_delete_global_secondary_index()<br ALIGN="LEFT"/>test_delete_item()<br ALIGN="LEFT"/>test_delete_item_conditionally()<br ALIGN="LEFT"/>test_describe()<br ALIGN="LEFT"/>test_get_item()<br ALIGN="LEFT"/>test_get_key_fields_no_schema_populated()<br ALIGN="LEFT"/>test_has_item()<br ALIGN="LEFT"/>test_initialization()<br ALIGN="LEFT"/>test_lookup_hash()<br ALIGN="LEFT"/>test_lookup_hash_and_range()<br ALIGN="LEFT"/>test_private_batch_get()<br ALIGN="LEFT"/>test_private_batch_get_attributes()<br ALIGN="LEFT"/>test_private_put_item()<br ALIGN="LEFT"/>test_private_query()<br ALIGN="LEFT"/>test_private_scan()<br ALIGN="LEFT"/>test_private_update_item()<br ALIGN="LEFT"/>test_put_item()<br ALIGN="LEFT"/>test_query()<br ALIGN="LEFT"/>test_query_count_paginated()<br ALIGN="LEFT"/>test_query_count_simple()<br ALIGN="LEFT"/>test_query_with_specific_attributes()<br ALIGN="LEFT"/>test_scan()<br ALIGN="LEFT"/>test_scan_with_specific_attributes()<br ALIGN="LEFT"/>test_update()<br ALIGN="LEFT"/>test_update_global_secondary_index()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.mturk.create_hit_external.Test" [color="black", fontcolor="black", label=<{Test|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_hit_external()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_element_lists.Test1Result" [color="black", fontcolor="black", label=<{Test1Result|Item : ElementList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_missing_lists.Test2Result" [color="black", fontcolor="black", label=<{Test2Result|Item : ElementList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_simple_lists.Test3Result" [color="black", fontcolor="black", label=<{Test3Result|Item : SimpleList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_missing_member_list.Test4Result" [color="black", fontcolor="black", label=<{Test4Result|Item : MemberList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_empty_member_list.Test5Result" [color="black", fontcolor="black", label=<{Test5Result|Item : MemberList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_member_list.Test6Result" [color="black", fontcolor="black", label=<{Test6Result|Item : MemberList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_nested_lists.Test7Result" [color="black", fontcolor="black", label=<{Test7Result|Item : MemberList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_member_list_specification.Test8Result" [color="black", fontcolor="black", label=<{Test8Result|Extra : MemberList<br ALIGN="LEFT"/>Item : MemberList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_member_list_specification.Test8extra" [color="black", fontcolor="black", label=<{Test8extra|Foo : SimpleList<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_nested_elements.Test9Result" [color="black", fontcolor="black", label=<{Test9Result|Item : Element<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse.test_parsing_nested_elements.Test9one" [color="black", fontcolor="black", label=<{Test9one|Nest : Element<br ALIGN="LEFT"/>Zoom : Element<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.elasticache.test_api_interface.TestAPIInterface" [color="black", fontcolor="black", label=<{TestAPIInterface|connection_class : ElastiCacheConnection<br ALIGN="LEFT"/>|test_required_launch_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.TestAWSAuthConnection" [color="black", fontcolor="black", label=<{TestAWSAuthConnection|<br ALIGN="LEFT"/>|test_connection_behind_proxy()<br ALIGN="LEFT"/>test_connection_behind_proxy_without_explicit_port()<br ALIGN="LEFT"/>test_get_path()<br ALIGN="LEFT"/>test_get_proxy_url_with_auth()<br ALIGN="LEFT"/>test_host_header_with_nonstandard_port()<br ALIGN="LEFT"/>test_proxy_ssl(ssl_mock, http_response_mock, create_connection_mock)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.awslambda.test_awslambda.TestAWSLambda" [color="black", fontcolor="black", label=<{TestAWSLambda|awslambda : AWSLambdaConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_list_functions()<br ALIGN="LEFT"/>test_resource_not_found_exceptions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.awslambda.test_awslambda.TestAWSLambda" [color="black", fontcolor="black", label=<{TestAWSLambda|connection_class : AWSLambdaConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_upload_function_binary()<br ALIGN="LEFT"/>test_upload_function_file()<br ALIGN="LEFT"/>test_upload_function_unseekable_file_cannot_tell()<br ALIGN="LEFT"/>test_upload_function_unseekable_file_no_tell()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.TestAWSQueryConnection" [color="black", fontcolor="black", label=<{TestAWSQueryConnection|region : RegionInfo<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.TestAWSQueryConnectionSimple" [color="black", fontcolor="black", label=<{TestAWSQueryConnectionSimple|<br ALIGN="LEFT"/>|test_alternate_port()<br ALIGN="LEFT"/>test_connection_close()<br ALIGN="LEFT"/>test_multi_commands()<br ALIGN="LEFT"/>test_non_secure()<br ALIGN="LEFT"/>test_port_pooling()<br ALIGN="LEFT"/>test_query_connection_basis()<br ALIGN="LEFT"/>test_query_connection_noproxy()<br ALIGN="LEFT"/>test_query_connection_noproxy_nosecure()<br ALIGN="LEFT"/>test_single_command()<br ALIGN="LEFT"/>test_temp_failure()<br ALIGN="LEFT"/>test_unhandled_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.TestAWSQueryStatus" [color="black", fontcolor="black", label=<{TestAWSQueryStatus|<br ALIGN="LEFT"/>|test_get_status()<br ALIGN="LEFT"/>test_get_status_blank_error()<br ALIGN="LEFT"/>test_get_status_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc_peering_connection.TestAcceptVpcPeeringConnection" [color="black", fontcolor="black", label=<{TestAcceptVpcPeeringConnection|ACCEPT_VPC_PEERING_CONNECTION : bytes<br ALIGN="LEFT"/>connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_accept_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestAccountAttributes" [color="black", fontcolor="black", label=<{TestAccountAttributes|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_account_attributes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.swf.test_layer2_actors.TestActors" [color="black", fontcolor="black", label=<{TestActors|decider : Decider<br ALIGN="LEFT"/>worker : ActivityWorker<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_actor_poll_without_tasklist_override()<br ALIGN="LEFT"/>test_decider_override_tasklist()<br ALIGN="LEFT"/>test_decider_pass_tasktoken()<br ALIGN="LEFT"/>test_worker_override_tasklist()<br ALIGN="LEFT"/>test_worker_pass_tasktoken()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_ec2object.TestAddTags" [color="black", fontcolor="black", label=<{TestAddTags|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_add_tag()<br ALIGN="LEFT"/>test_add_tags()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestAssociateAddress" [color="black", fontcolor="black", label=<{TestAssociateAddress|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_associate_address()<br ALIGN="LEFT"/>test_associate_address_object()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestAssociateAddressFail" [color="black", fontcolor="black", label=<{TestAssociateAddressFail|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_associate_address()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_dhcpoptions.TestAssociateDhcpOptions" [color="black", fontcolor="black", label=<{TestAssociateDhcpOptions|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_associate_dhcp_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestAssociateRouteTable" [color="black", fontcolor="black", label=<{TestAssociateRouteTable|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_associate_route_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestAttachClassicLinkVpc" [color="black", fontcolor="black", label=<{TestAttachClassicLinkVpc|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_attach_classic_link_instance_object_groups()<br ALIGN="LEFT"/>test_attach_classic_link_instance_string_groups()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestAttachInstances" [color="black", fontcolor="black", label=<{TestAttachInstances|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_attach_instances()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_internetgateway.TestAttachInternetGateway" [color="black", fontcolor="black", label=<{TestAttachInternetGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_attach_internet_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestAttachVpnGateway" [color="black", fontcolor="black", label=<{TestAttachVpnGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_attach_vpn_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestAutoScaleGroup" [color="black", fontcolor="black", label=<{TestAutoScaleGroup|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_autoscaling_group_single_vpc_zone_identifier()<br ALIGN="LEFT"/>test_autoscaling_group_vpc_zone_identifier_list()<br ALIGN="LEFT"/>test_autoscaling_group_vpc_zone_identifier_multi()<br ALIGN="LEFT"/>test_autoscaling_group_with_termination_policies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestAutoScaleGroupHonorCooldown" [color="black", fontcolor="black", label=<{TestAutoScaleGroupHonorCooldown|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_honor_cooldown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestAutoScalingTag" [color="black", fontcolor="black", label=<{TestAutoScalingTag|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|check_tag_attributes_set(name, value, attr)<br ALIGN="LEFT"/>default_body()<br ALIGN="LEFT"/>test_create_or_update_tags()<br ALIGN="LEFT"/>test_endElement()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.swf.test_layer2_base.TestBase" [color="black", fontcolor="black", label=<{TestBase|swf_base : SWFBase<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_instantiation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb.test_batch.TestBatchObjects" [color="black", fontcolor="black", label=<{TestBatchObjects|layer2 : Layer2<br ALIGN="LEFT"/>maxDiff : NoneType<br ALIGN="LEFT"/>table : Table<br ALIGN="LEFT"/>table2 : Table<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_batch_consistent_read_defaults_to_false()<br ALIGN="LEFT"/>test_batch_list_consistent_read()<br ALIGN="LEFT"/>test_batch_to_dict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sqs.test_bigmessage.TestBigMessage" [color="black", fontcolor="black", label=<{TestBigMessage|sqs : bool<br ALIGN="LEFT"/>|test_1_basic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_message.TestBigMessage" [color="black", fontcolor="black", label=<{TestBigMessage|<br ALIGN="LEFT"/>|test_s3url_parsing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb.test_types.TestBinary" [color="black", fontcolor="black", label=<{TestBinary|<br ALIGN="LEFT"/>|test_bad_input()<br ALIGN="LEFT"/>test_bytes_input()<br ALIGN="LEFT"/>test_good_input()<br ALIGN="LEFT"/>test_non_ascii_good_input()<br ALIGN="LEFT"/>test_unicode_py2()<br ALIGN="LEFT"/>test_unicode_py3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_exception.TestBotoServerError" [color="black", fontcolor="black", label=<{TestBotoServerError|<br ALIGN="LEFT"/>|test_botoservererror_basics()<br ALIGN="LEFT"/>test_getters()<br ALIGN="LEFT"/>test_message_elb_xml()<br ALIGN="LEFT"/>test_message_json_response_error()<br ALIGN="LEFT"/>test_message_not_xml()<br ALIGN="LEFT"/>test_message_sd_xml()<br ALIGN="LEFT"/>test_message_storage_create_error()<br ALIGN="LEFT"/>test_xml_entity_not_loaded()<br ALIGN="LEFT"/>test_xmlns_not_loaded()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestBuildInstanceMetadataURL" [color="black", fontcolor="black", label=<{TestBuildInstanceMetadataURL|<br ALIGN="LEFT"/>|test_all_custom()<br ALIGN="LEFT"/>test_custom_path()<br ALIGN="LEFT"/>test_custom_url()<br ALIGN="LEFT"/>test_custom_version()<br ALIGN="LEFT"/>test_normal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_cors_configuration.TestCORSConfiguration" [color="black", fontcolor="black", label=<{TestCORSConfiguration|<br ALIGN="LEFT"/>|test_minimal()<br ALIGN="LEFT"/>test_one_rule_with_id()<br ALIGN="LEFT"/>test_two_rules()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestCancelReservedInstancesListing" [color="black", fontcolor="black", label=<{TestCancelReservedInstancesListing|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_reserved_instances_listing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_spotinstance.TestCancelSpotInstanceRequests" [color="black", fontcolor="black", label=<{TestCancelSpotInstanceRequests|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cancel_spot_instance_requests()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestChangeResourceRecordSetsRoute53" [color="black", fontcolor="black", label=<{TestChangeResourceRecordSetsRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_record_commit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_utils.TestChunking" [color="black", fontcolor="black", label=<{TestChunking|<br ALIGN="LEFT"/>|test_chunk_hashes_exact()<br ALIGN="LEFT"/>test_chunks_with_leftovers()<br ALIGN="LEFT"/>test_less_than_one_chunk()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationCancelUpdateStack" [color="black", fontcolor="black", label=<{TestCloudFormationCancelUpdateStack|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cancel_update_stack()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationCreateStack" [color="black", fontcolor="black", label=<{TestCloudFormationCreateStack|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_stack_fail_error()<br ALIGN="LEFT"/>test_create_stack_fails()<br ALIGN="LEFT"/>test_create_stack_has_correct_request_params()<br ALIGN="LEFT"/>test_create_stack_with_minimum_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDeleteStack" [color="black", fontcolor="black", label=<{TestCloudFormationDeleteStack|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_stack()<br ALIGN="LEFT"/>test_delete_stack_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDescribeStackResource" [color="black", fontcolor="black", label=<{TestCloudFormationDescribeStackResource|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_stack_resource()<br ALIGN="LEFT"/>test_describe_stack_resource_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDescribeStackResources" [color="black", fontcolor="black", label=<{TestCloudFormationDescribeStackResources|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_stack_resources()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDescribeStacks" [color="black", fontcolor="black", label=<{TestCloudFormationDescribeStacks|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_stacks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationEstimateTemplateCost" [color="black", fontcolor="black", label=<{TestCloudFormationEstimateTemplateCost|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_estimate_template_cost()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationGetStackPolicy" [color="black", fontcolor="black", label=<{TestCloudFormationGetStackPolicy|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_stack_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationGetStackevents" [color="black", fontcolor="black", label=<{TestCloudFormationGetStackevents|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_stack_events()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationGetTemplate" [color="black", fontcolor="black", label=<{TestCloudFormationGetTemplate|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_template()<br ALIGN="LEFT"/>test_get_template_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationListStackResources" [color="black", fontcolor="black", label=<{TestCloudFormationListStackResources|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_list_stack_resources()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationListStacks" [color="black", fontcolor="black", label=<{TestCloudFormationListStacks|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_list_stacks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationSetStackPolicy" [color="black", fontcolor="black", label=<{TestCloudFormationSetStackPolicy|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_set_stack_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationUpdateStack" [color="black", fontcolor="black", label=<{TestCloudFormationUpdateStack|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_update_stack_all_args()<br ALIGN="LEFT"/>test_update_stack_fails()<br ALIGN="LEFT"/>test_update_stack_with_minimum_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_connection.TestCloudFormationValidateTemplate" [color="black", fontcolor="black", label=<{TestCloudFormationValidateTemplate|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_validate_template()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudfront.test_connection.TestCloudFrontConnection" [color="black", fontcolor="black", label=<{TestCloudFrontConnection|connection_class : CloudFrontConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_distribution()<br ALIGN="LEFT"/>test_get_all_distributions()<br ALIGN="LEFT"/>test_get_distribution_config()<br ALIGN="LEFT"/>test_get_distribution_info()<br ALIGN="LEFT"/>test_set_distribution_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudhsm.test_cloudhsm.TestCloudHSM" [color="black", fontcolor="black", label=<{TestCloudHSM|cloudhsm : CloudHSMConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_hapgs()<br ALIGN="LEFT"/>test_validation_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch.test_connection.TestCloudSearchCreateDomain" [color="black", fontcolor="black", label=<{TestCloudSearchCreateDomain|connection_class : Layer1<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cloudsearch_connect_result_details()<br ALIGN="LEFT"/>test_cloudsearch_connect_result_endpoints()<br ALIGN="LEFT"/>test_cloudsearch_connect_result_statuses()<br ALIGN="LEFT"/>test_cloudsearch_documentservice_creation()<br ALIGN="LEFT"/>test_cloudsearch_searchservice_creation()<br ALIGN="LEFT"/>test_create_domain()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudsearch2.test_connection.TestCloudSearchCreateDomain" [color="black", fontcolor="black", label=<{TestCloudSearchCreateDomain|connection_class : CloudSearchConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_cloudsearch_connect_result_details()<br ALIGN="LEFT"/>test_cloudsearch_connect_result_endpoints()<br ALIGN="LEFT"/>test_cloudsearch_connect_result_statuses()<br ALIGN="LEFT"/>test_cloudsearch_documentservice_creation()<br ALIGN="LEFT"/>test_cloudsearch_searchservice_creation()<br ALIGN="LEFT"/>test_create_domain()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudtrail.test_cloudtrail.TestCloudTrail" [color="black", fontcolor="black", label=<{TestCloudTrail|<br ALIGN="LEFT"/>|test_cloudtrail()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.cloudwatch.test_connection.TestCloudWatchConnection" [color="black", fontcolor="black", label=<{TestCloudWatchConnection|connection_class : CloudWatchConnection<br ALIGN="LEFT"/>|test_build_put_params_multiple_everything()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.logs.test_layer1.TestCloudWatchLogs" [color="black", fontcolor="black", label=<{TestCloudWatchLogs|logs : CloudWatchLogsConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_logs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudformation.test_connection.TestCloudformationConnection" [color="black", fontcolor="black", label=<{TestCloudformationConnection|connection : CloudFormationConnection<br ALIGN="LEFT"/>stack_name : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_large_template_stack_size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.codedeploy.test_codedeploy.TestCodeDeploy" [color="black", fontcolor="black", label=<{TestCodeDeploy|codedeploy : CodeDeployConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_applications()<br ALIGN="LEFT"/>test_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cognito.identity.test_cognito_identity.TestCognitoIdentity" [color="black", fontcolor="black", label=<{TestCognitoIdentity|<br ALIGN="LEFT"/>|test_cognito_identity()<br ALIGN="LEFT"/>test_resource_not_found_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cognito.sync.test_cognito_sync.TestCognitoSync" [color="black", fontcolor="black", label=<{TestCognitoSync|<br ALIGN="LEFT"/>|test_cognito_sync()<br ALIGN="LEFT"/>test_resource_not_found_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_concurrent.TestConcurrentUploader" [color="black", fontcolor="black", label=<{TestConcurrentUploader|stat_mock : AsyncMock, MagicMock, dict<br ALIGN="LEFT"/>stat_patch : _patch<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_calculate_required_part_size()<br ALIGN="LEFT"/>test_calculate_required_part_size_too_small()<br ALIGN="LEFT"/>test_correct_low_level_api_calls()<br ALIGN="LEFT"/>test_downloader_work_queue_is_correctly_populated()<br ALIGN="LEFT"/>test_work_queue_is_correctly_populated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_vault.TestConcurrentUploads" [color="black", fontcolor="black", label=<{TestConcurrentUploads|<br ALIGN="LEFT"/>|test_concurrent_upload_file()<br ALIGN="LEFT"/>test_concurrent_upload_forwards_kwargs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.configservice.test_configservice.TestConfigService" [color="black", fontcolor="black", label=<{TestConfigService|configservice : ConfigServiceConnection, NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_connect_to_non_us_east_1()<br ALIGN="LEFT"/>test_describe_configuration_recorders()<br ALIGN="LEFT"/>test_handle_no_such_configuration_recorder()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestConnectToRegion" [color="black", fontcolor="black", label=<{TestConnectToRegion|ec2 : EC2Connection, NoneType<br ALIGN="LEFT"/>https_connection<br ALIGN="LEFT"/>https_connection_factory : tuple<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_aws_region()<br ALIGN="LEFT"/>test_missing_region()<br ALIGN="LEFT"/>test_non_aws_region()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_snapshot.TestCopyDBSnapshot" [color="black", fontcolor="black", label=<{TestCopyDBSnapshot|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_copy_dbinstance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestCopyImage" [color="black", fontcolor="black", label=<{TestCopyImage|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_copy_image()<br ALIGN="LEFT"/>test_copy_image_without_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestCopySnapshot" [color="black", fontcolor="black", label=<{TestCopySnapshot|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_copy_snapshot()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.beanstalk.test_layer1.TestCreateApplicationVersion" [color="black", fontcolor="black", label=<{TestCreateApplicationVersion|connection_class : Layer1<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_application_version()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestCreateAutoScalePolicy" [color="black", fontcolor="black", label=<{TestCreateAutoScalePolicy|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_scaling_policy_with_min_adjustment_step()<br ALIGN="LEFT"/>test_scaling_policy_with_wrong_adjustment_type()<br ALIGN="LEFT"/>test_scaling_policy_without_min_adjustment_step()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_customergateway.TestCreateCustomerGateway" [color="black", fontcolor="black", label=<{TestCreateCustomerGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_customer_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_snapshot.TestCreateDBSnapshot" [color="black", fontcolor="black", label=<{TestCreateDBSnapshot|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_dbinstance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_dhcpoptions.TestCreateDhcpOptions" [color="black", fontcolor="black", label=<{TestCreateDhcpOptions|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_dhcp_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.beanstalk.test_layer1.TestCreateEnvironment" [color="black", fontcolor="black", label=<{TestCreateEnvironment|connection_class : Layer1<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_environment()<br ALIGN="LEFT"/>test_create_environment_with_tier()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestCreateHealthCheckRoute53FQDN" [color="black", fontcolor="black", label=<{TestCreateHealthCheckRoute53FQDN|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_health_check_fqdn()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestCreateHealthCheckRoute53IpAddress" [color="black", fontcolor="black", label=<{TestCreateHealthCheckRoute53IpAddress|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_health_check_ip_address()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestCreateImage" [color="black", fontcolor="black", label=<{TestCreateImage|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_block_device_mapping()<br ALIGN="LEFT"/>test_minimal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_internetgateway.TestCreateInternetGateway" [color="black", fontcolor="black", label=<{TestCreateInternetGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_internet_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestCreateNetworkAcl" [color="black", fontcolor="black", label=<{TestCreateNetworkAcl|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_network_acl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestCreateNetworkAclEntry" [color="black", fontcolor="black", label=<{TestCreateNetworkAclEntry|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_network_acl()<br ALIGN="LEFT"/>test_create_network_acl_icmp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestCreatePrivateZoneRoute53" [color="black", fontcolor="black", label=<{TestCreatePrivateZoneRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_private_zone()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestCreateReservedInstancesListing" [color="black", fontcolor="black", label=<{TestCreateReservedInstancesListing|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_reserved_instances_listing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestCreateRole" [color="black", fontcolor="black", label=<{TestCreateRole|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_role_data_policy()<br ALIGN="LEFT"/>test_create_role_default()<br ALIGN="LEFT"/>test_create_role_default_cn_north()<br ALIGN="LEFT"/>test_create_role_string_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestCreateRoute" [color="black", fontcolor="black", label=<{TestCreateRoute|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_route_gateway()<br ALIGN="LEFT"/>test_create_route_instance()<br ALIGN="LEFT"/>test_create_route_interface()<br ALIGN="LEFT"/>test_create_route_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestCreateRouteTable" [color="black", fontcolor="black", label=<{TestCreateRouteTable|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_route_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestCreateSamlProvider" [color="black", fontcolor="black", label=<{TestCreateSamlProvider|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_saml_provider()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_subnet.TestCreateSubnet" [color="black", fontcolor="black", label=<{TestCreateSubnet|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_subnet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudtrail.test_layer1.TestCreateTrail" [color="black", fontcolor="black", label=<{TestCreateTrail|connection_class : CloudTrailConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpnconnection.TestCreateVPNConnection" [color="black", fontcolor="black", label=<{TestCreateVPNConnection|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_vpn_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpnconnection.TestCreateVPNConnectionRoute" [color="black", fontcolor="black", label=<{TestCreateVPNConnectionRoute|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_vpn_connection_route()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestCreateVirtualMFADevice" [color="black", fontcolor="black", label=<{TestCreateVirtualMFADevice|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_virtual_mfa_device()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestCreateVolume" [color="black", fontcolor="black", label=<{TestCreateVolume|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_volume()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestCreateVpc" [color="black", fontcolor="black", label=<{TestCreateVpc|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_vpc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc_peering_connection.TestCreateVpcPeeringConnection" [color="black", fontcolor="black", label=<{TestCreateVpcPeeringConnection|CREATE_VPC_PEERING_CONNECTION : bytes<br ALIGN="LEFT"/>connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_create_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestCreateVpnGateway" [color="black", fontcolor="black", label=<{TestCreateVpnGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_vpn_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestCreateZoneRoute53" [color="black", fontcolor="black", label=<{TestCreateZoneRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_hosted_zone()<br ALIGN="LEFT"/>test_create_zone()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.datapipeline.test_layer1.TestDataPipeline" [color="black", fontcolor="black", label=<{TestDataPipeline|connection : DataPipelineConnection<br ALIGN="LEFT"/>datapipeline : bool<br ALIGN="LEFT"/>sample_pipeline_objects : list<br ALIGN="LEFT"/>|create_pipeline(name, unique_id, description)<br ALIGN="LEFT"/>get_pipeline_state(pipeline_id)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_activate_pipeline()<br ALIGN="LEFT"/>test_can_create_and_delete_a_pipeline()<br ALIGN="LEFT"/>test_list_pipelines()<br ALIGN="LEFT"/>test_put_pipeline_definition()<br ALIGN="LEFT"/>test_validate_pipeline()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.swf.test_layer1_decisions.TestDecisions" [color="black", fontcolor="black", label=<{TestDecisions|decisions : Layer1Decisions<br ALIGN="LEFT"/>|assert_data()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_continue_as_new_workflow_execution()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestDeleteAccountPasswordPolicy" [color="black", fontcolor="black", label=<{TestDeleteAccountPasswordPolicy|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_account_password_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_customergateway.TestDeleteCustomerGateway" [color="black", fontcolor="black", label=<{TestDeleteCustomerGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_customer_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_snapshot.TestDeleteDBSnapshot" [color="black", fontcolor="black", label=<{TestDeleteDBSnapshot|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_dbinstance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_dhcpoptions.TestDeleteDhcpOptions" [color="black", fontcolor="black", label=<{TestDeleteDhcpOptions|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_dhcp_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_internetgateway.TestDeleteInternetGateway" [color="black", fontcolor="black", label=<{TestDeleteInternetGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_internet_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestDeleteNetworkAclEntry" [color="black", fontcolor="black", label=<{TestDeleteNetworkAclEntry|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_network_acl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestDeleteNotificationConfiguration" [color="black", fontcolor="black", label=<{TestDeleteNotificationConfiguration|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_autoscaling_group_put_notification_configuration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestDeleteRoute" [color="black", fontcolor="black", label=<{TestDeleteRoute|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_route()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestDeleteRouteTable" [color="black", fontcolor="black", label=<{TestDeleteRouteTable|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_route_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestDeleteSamlProvider" [color="black", fontcolor="black", label=<{TestDeleteSamlProvider|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_saml_provider()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_subnet.TestDeleteSubnet" [color="black", fontcolor="black", label=<{TestDeleteSubnet|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_subnet()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpnconnection.TestDeleteVPNConnection" [color="black", fontcolor="black", label=<{TestDeleteVPNConnection|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_vpn_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpnconnection.TestDeleteVPNConnectionRoute" [color="black", fontcolor="black", label=<{TestDeleteVPNConnectionRoute|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_vpn_connection_route()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestDeleteVpc" [color="black", fontcolor="black", label=<{TestDeleteVpc|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_vpc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc_peering_connection.TestDeleteVpcPeeringConnection" [color="black", fontcolor="black", label=<{TestDeleteVpcPeeringConnection|DELETE_VPC_PEERING_CONNECTION : bytes<br ALIGN="LEFT"/>connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc_peering_connection.TestDeleteVpcPeeringConnectionShortForm" [color="black", fontcolor="black", label=<{TestDeleteVpcPeeringConnectionShortForm|DELETE_VPC_PEERING_CONNECTION : bytes<br ALIGN="LEFT"/>DESCRIBE_VPC_PEERING_CONNECTIONS : bytes<br ALIGN="LEFT"/>|test_delete_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestDeleteVpnGateway" [color="black", fontcolor="black", label=<{TestDeleteVpnGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_delete_vpn_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_customergateway.TestDescribeCustomerGateways" [color="black", fontcolor="black", label=<{TestDescribeCustomerGateways|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_customer_gateways()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_snapshot.TestDescribeDBSnapshots" [color="black", fontcolor="black", label=<{TestDescribeDBSnapshots|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_dbinstances_by_instance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_dhcpoptions.TestDescribeDhcpOptions" [color="black", fontcolor="black", label=<{TestDescribeDhcpOptions|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_dhcp_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeInstances" [color="black", fontcolor="black", label=<{TestDescribeInstances|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_default_behavior()<br ALIGN="LEFT"/>test_max_results()<br ALIGN="LEFT"/>test_next_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_instance.TestDescribeInstances" [color="black", fontcolor="black", label=<{TestDescribeInstances|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_multiple_private_ip_addresses()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_internetgateway.TestDescribeInternetGateway" [color="black", fontcolor="black", label=<{TestDescribeInternetGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_internet_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.elb.test_loadbalancer.TestDescribeLoadBalancers" [color="black", fontcolor="black", label=<{TestDescribeLoadBalancers|<br ALIGN="LEFT"/>|test_other_policy()<br ALIGN="LEFT"/>test_request_with_marker()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.logs.test_layer1.TestDescribeLogs" [color="black", fontcolor="black", label=<{TestDescribeLogs|connection_class : CloudWatchLogsConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestDescribeNetworkAcls" [color="black", fontcolor="black", label=<{TestDescribeNetworkAcls|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_network_acls()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeReservedInstancesModifications" [color="black", fontcolor="black", label=<{TestDescribeReservedInstancesModifications|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_serialized_api_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestDescribeRouteTables" [color="black", fontcolor="black", label=<{TestDescribeRouteTables|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_route_tables()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_securitygroup.TestDescribeSecurityGroups" [color="black", fontcolor="black", label=<{TestDescribeSecurityGroups|connection_class : EC2Connection<br ALIGN="LEFT"/>|test_get_instances()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeSnapshots" [color="black", fontcolor="black", label=<{TestDescribeSnapshots|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_snapshots()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_snapshot.TestDescribeSnapshots" [color="black", fontcolor="black", label=<{TestDescribeSnapshots|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_snapshots()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeSpotInstanceRequests" [color="black", fontcolor="black", label=<{TestDescribeSpotInstanceRequests|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_spot_instance_requets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_subnet.TestDescribeSubnets" [color="black", fontcolor="black", label=<{TestDescribeSubnets|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_subnets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeTags" [color="black", fontcolor="black", label=<{TestDescribeTags|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_default_behavior()<br ALIGN="LEFT"/>test_max_results()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestDescribeTerminationPolicies" [color="black", fontcolor="black", label=<{TestDescribeTerminationPolicies|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_autoscaling_group_with_termination_policies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudtrail.test_layer1.TestDescribeTrails" [color="black", fontcolor="black", label=<{TestDescribeTrails|connection_class : CloudTrailConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe()<br ALIGN="LEFT"/>test_describe_name_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.directconnect.test_layer1.TestDescribeTrails" [color="black", fontcolor="black", label=<{TestDescribeTrails|connection_class : DirectConnectConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeVPCAttribute" [color="black", fontcolor="black", label=<{TestDescribeVPCAttribute|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_describe_vpc_attribute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestDescribeVPCs" [color="black", fontcolor="black", label=<{TestDescribeVPCs|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_vpcs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpnconnection.TestDescribeVPNConnections" [color="black", fontcolor="black", label=<{TestDescribeVPNConnections|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_vpcs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestDescribeVolumes" [color="black", fontcolor="black", label=<{TestDescribeVolumes|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_volumes()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc_peering_connection.TestDescribeVpcPeeringConnections" [color="black", fontcolor="black", label=<{TestDescribeVpcPeeringConnections|DESCRIBE_VPC_PEERING_CONNECTIONS : bytes<br ALIGN="LEFT"/>connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_vpc_peering_connections()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestDescribeVpnGateways" [color="black", fontcolor="black", label=<{TestDescribeVpnGateways|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_vpn_gateways()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestDetachClassicLinkVpc" [color="black", fontcolor="black", label=<{TestDetachClassicLinkVpc|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_detach_classic_link_instance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestDetachInstances" [color="black", fontcolor="black", label=<{TestDetachInstances|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_detach_instances()<br ALIGN="LEFT"/>test_detach_instances_with_decrement_desired_capacity()<br ALIGN="LEFT"/>test_detach_instances_without_decrement_desired_capacity()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_internetgateway.TestDetachInternetGateway" [color="black", fontcolor="black", label=<{TestDetachInternetGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_detach_internet_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.elb.test_loadbalancer.TestDetachSubnets" [color="black", fontcolor="black", label=<{TestDetachSubnets|<br ALIGN="LEFT"/>|test_detach_subnets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestDetachVpnGateway" [color="black", fontcolor="black", label=<{TestDetachVpnGateway|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_detach_vpn_gateway()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestDisableClassicLinkVpc" [color="black", fontcolor="black", label=<{TestDisableClassicLinkVpc|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_enable_classic_link()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.mturk.test_disable_hit.TestDisableHITs" [color="black", fontcolor="black", label=<{TestDisableHITs|<br ALIGN="LEFT"/>|test_disable_invalid_hit()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestDisableVgwRoutePropagation" [color="black", fontcolor="black", label=<{TestDisableVgwRoutePropagation|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_disable_vgw_route_propagation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestDisassociateRouteTable" [color="black", fontcolor="black", label=<{TestDisassociateRouteTable|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_disassociate_route_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.swf.test_layer2_domain.TestDomain" [color="black", fontcolor="black", label=<{TestDomain|domain : Domain<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_domain_instantiation()<br ALIGN="LEFT"/>test_domain_list_activities()<br ALIGN="LEFT"/>test_domain_list_executions()<br ALIGN="LEFT"/>test_domain_list_workflows()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb.test_types.TestDynamizer" [color="black", fontcolor="black", label=<{TestDynamizer|<br ALIGN="LEFT"/>|<I>setUp</I>()<br ALIGN="LEFT"/>test_decoding_to_dynamodb()<br ALIGN="LEFT"/>test_encoding_to_dynamodb()<br ALIGN="LEFT"/>test_float_conversion_errors()<br ALIGN="LEFT"/>test_lossy_float_conversions()<br ALIGN="LEFT"/>test_non_boolean_conversions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.dynamodb.test_table.TestDynamoDBTable" [color="black", fontcolor="black", label=<{TestDynamoDBTable|dynamodb : bool<br ALIGN="LEFT"/>schema : Schema<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>|assertAllEqual()<br ALIGN="LEFT"/>create_table(table_name, schema, read_units, write_units)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_table_retrieval_parity()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestEC2ConnectionBase" [color="black", fontcolor="black", label=<{TestEC2ConnectionBase|connection_class : EC2Connection<br ALIGN="LEFT"/>ec2 : EC2Connection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_instancetype.TestEC2ConnectionBase" [color="black", fontcolor="black", label=<{TestEC2ConnectionBase|connection_class : EC2Connection<br ALIGN="LEFT"/>ec2 : EC2Connection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2containerservice.test_ec2containerservice.TestEC2ContainerService" [color="black", fontcolor="black", label=<{TestEC2ContainerService|ecs : EC2ContainerServiceConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_handle_not_found_exception()<br ALIGN="LEFT"/>test_list_clusters()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ecs.test_connection.TestECSConnection" [color="black", fontcolor="black", label=<{TestECSConnection|connection_class : ECSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_item_lookup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.elastictranscoder.test_layer1.TestETSLayer1PipelineManagement" [color="black", fontcolor="black", label=<{TestETSLayer1PipelineManagement|api : ElasticTranscoderConnection<br ALIGN="LEFT"/>iam : IAMConnection<br ALIGN="LEFT"/>input_bucket : str<br ALIGN="LEFT"/>output_bucket : str<br ALIGN="LEFT"/>pipeline_name : str<br ALIGN="LEFT"/>role : Element, dict<br ALIGN="LEFT"/>role_arn<br ALIGN="LEFT"/>role_name : str<br ALIGN="LEFT"/>s3 : S3Connection<br ALIGN="LEFT"/>sns : SNSConnection<br ALIGN="LEFT"/>timestamp : str<br ALIGN="LEFT"/>|create_pipeline()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_can_retrieve_pipeline_information()<br ALIGN="LEFT"/>test_create_delete_pipeline()<br ALIGN="LEFT"/>test_list_jobs_by_pipeline()<br ALIGN="LEFT"/>test_proper_error_when_pipeline_does_not_exist()<br ALIGN="LEFT"/>test_update_pipeline()<br ALIGN="LEFT"/>test_update_pipeline_notification()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.elasticache.test_layer1.TestElastiCacheConnection" [color="black", fontcolor="black", label=<{TestElastiCacheConnection|elasticache : ElastiCacheConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_delete_cache_cluster()<br ALIGN="LEFT"/>wait_until_cluster_available(cluster_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestEnableClassicLinkVpc" [color="black", fontcolor="black", label=<{TestEnableClassicLinkVpc|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_enable_classic_link()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpngateway.TestEnableVgwRoutePropagation" [color="black", fontcolor="black", label=<{TestEnableVgwRoutePropagation|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_enable_vgw_route_propagation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_message.TestEncodeMessage" [color="black", fontcolor="black", label=<{TestEncodeMessage|<br ALIGN="LEFT"/>|test_encode_bytes_message()<br ALIGN="LEFT"/>test_encode_string_message()<br ALIGN="LEFT"/>test_message_id_available()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_regioninfo.TestEndpointLoading" [color="black", fontcolor="black", label=<{TestEndpointLoading|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_regions()<br ALIGN="LEFT"/>test_get_regions_overrides()<br ALIGN="LEFT"/>test_load_endpoint_json()<br ALIGN="LEFT"/>test_load_regions()<br ALIGN="LEFT"/>test_merge_endpoints()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.beanstalk.test_exception.TestExceptions" [color="black", fontcolor="black", label=<{TestExceptions|<br ALIGN="LEFT"/>|test_exception_class_names()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_key.TestFileError" [color="black", fontcolor="black", label=<{TestFileError|<br ALIGN="LEFT"/>|test_file_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_utils.TestFileHash" [color="black", fontcolor="black", label=<{TestFileHash|<br ALIGN="LEFT"/>|test_compute_hash_bytesio()<br ALIGN="LEFT"/>test_compute_hash_stringio()<br ALIGN="LEFT"/>test_compute_hash_tempfile()<br ALIGN="LEFT"/>test_compute_hash_tempfile_py3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestGenerateCredentialReport" [color="black", fontcolor="black", label=<{TestGenerateCredentialReport|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_generate_credential_report()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestGetAccountLimits" [color="black", fontcolor="black", label=<{TestGetAccountLimits|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_autoscaling_group_put_notification_configuration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestGetAccountPasswordPolicy" [color="black", fontcolor="black", label=<{TestGetAccountPasswordPolicy|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_account_password_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestGetAdjustmentTypes" [color="black", fontcolor="black", label=<{TestGetAdjustmentTypes|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_autoscaling_adjustment_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestGetAllClassicLinkVpc" [color="black", fontcolor="black", label=<{TestGetAllClassicLinkVpc|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_classic_link_vpcs()<br ALIGN="LEFT"/>test_get_all_classic_link_vpcs_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestGetAllImages" [color="black", fontcolor="black", label=<{TestGetAllImages|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_images()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestGetAllNetworkInterfaces" [color="black", fontcolor="black", label=<{TestGetAllNetworkInterfaces|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_attachment_has_device_index()<br ALIGN="LEFT"/>test_get_all_network_interfaces()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestGetAllRRSetsRoute53" [color="black", fontcolor="black", label=<{TestGetAllRRSetsRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_all_rr_sets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestGetCheckerIpRanges" [color="black", fontcolor="black", label=<{TestGetCheckerIpRanges|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_checker_ip_ranges()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestGetClassicLinkInstances" [color="black", fontcolor="black", label=<{TestGetClassicLinkInstances|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_classic_link_instances()<br ALIGN="LEFT"/>test_get_classic_link_instances_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestGetCredentialReport" [color="black", fontcolor="black", label=<{TestGetCredentialReport|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_credential_report()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestGetHostedZoneRoute53" [color="black", fontcolor="black", label=<{TestGetHostedZoneRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_list_zones()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestGetNetworkAclAssociations" [color="black", fontcolor="black", label=<{TestGetNetworkAclAssociations|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_network_acl_associations()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestGetSamlProvider" [color="black", fontcolor="black", label=<{TestGetSamlProvider|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_saml_provider()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestGetSigninURL" [color="black", fontcolor="black", label=<{TestGetSigninURL|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_signin_url_cn_north()<br ALIGN="LEFT"/>test_get_signin_url_default()<br ALIGN="LEFT"/>test_get_signin_url_s3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestGetSigninURLNoAliases" [color="black", fontcolor="black", label=<{TestGetSigninURLNoAliases|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_signin_url_no_aliases()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_spotinstance.TestGetSpotPriceHistory" [color="black", fontcolor="black", label=<{TestGetSpotPriceHistory|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_spot_price_history()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestGetZoneRoute53" [color="black", fontcolor="black", label=<{TestGetZoneRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_zone()<br ALIGN="LEFT"/>test_list_zones()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.glacier.test_layer1.TestGlacierLayer1" [color="black", fontcolor="black", label=<{TestGlacierLayer1|glacier : bool<br ALIGN="LEFT"/>|<I>delete_vault</I>(vault_name)<br ALIGN="LEFT"/>test_initialiate_multipart_upload()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.glacier.test_layer2.TestGlacierLayer2" [color="black", fontcolor="black", label=<{TestGlacierLayer2|glacier : bool<br ALIGN="LEFT"/>layer2 : Layer2<br ALIGN="LEFT"/>vault_name<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_delete_vault()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer2.TestGlacierLayer2Connection" [color="black", fontcolor="black", label=<{TestGlacierLayer2Connection|layer2 : Layer2<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_vault()<br ALIGN="LEFT"/>test_get_vault()<br ALIGN="LEFT"/>test_list_vaults()<br ALIGN="LEFT"/>test_list_vaults_paginated()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.mturk.create_hit_test.TestHITCreation" [color="black", fontcolor="black", label=<{TestHITCreation|<br ALIGN="LEFT"/>|testCallCreateHitWithOneQuestion()<br ALIGN="LEFT"/>testCallCreateHitWithQuestionForm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.mturk.hit_persistence.TestHITPersistence" [color="black", fontcolor="black", label=<{TestHITPersistence|<br ALIGN="LEFT"/>|create_hit_result()<br ALIGN="LEFT"/>test_pickle_deserialized_version()<br ALIGN="LEFT"/>test_pickle_hit_result()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.TestHTTPRequest" [color="black", fontcolor="black", label=<{TestHTTPRequest|<br ALIGN="LEFT"/>|test_content_length_str()<br ALIGN="LEFT"/>test_user_agent_not_url_encoded()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_connection.TestHeadBucket" [color="black", fontcolor="black", label=<{TestHeadBucket|connection_class : S3Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_head_bucket_forbidden()<br ALIGN="LEFT"/>test_head_bucket_notfound()<br ALIGN="LEFT"/>test_head_bucket_other()<br ALIGN="LEFT"/>test_head_bucket_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.iam.test_connection.TestIAM" [color="black", fontcolor="black", label=<{TestIAM|iam : bool<br ALIGN="LEFT"/>|test_group_users()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_instancestatus.TestInstanceStatusResponseParsing" [color="black", fontcolor="black", label=<{TestInstanceStatusResponseParsing|<br ALIGN="LEFT"/>|test_include_all_instances()<br ALIGN="LEFT"/>test_next_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.elb.test_loadbalancer.TestInstanceStatusResponseParsing" [color="black", fontcolor="black", label=<{TestInstanceStatusResponseParsing|<br ALIGN="LEFT"/>|test_next_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_job.TestJob" [color="black", fontcolor="black", label=<{TestJob|api : Mock<br ALIGN="LEFT"/>job : Job<br ALIGN="LEFT"/>vault : Mock<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_calc_num_chunks()<br ALIGN="LEFT"/>test_download_to_fileobj()<br ALIGN="LEFT"/>test_get_job_validate_checksum_success()<br ALIGN="LEFT"/>test_get_job_validation_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer2.TestJob" [color="black", fontcolor="black", label=<{TestJob|job : Job<br ALIGN="LEFT"/>vault : Vault<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_job_output()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.kinesis.test_kinesis.TestKinesis" [color="black", fontcolor="black", label=<{TestKinesis|kinesis : KinesisConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_describe_non_existent_stream()<br ALIGN="LEFT"/>test_kinesis()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.kinesis.test_kinesis.TestKinesis" [color="black", fontcolor="black", label=<{TestKinesis|connection_class : KinesisConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_put_record_binary()<br ALIGN="LEFT"/>test_put_record_string()<br ALIGN="LEFT"/>test_put_records()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.kms.test_kms.TestKinesis" [color="black", fontcolor="black", label=<{TestKinesis|connection_class : KMSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_binary_input()<br ALIGN="LEFT"/>test_binary_ouput()<br ALIGN="LEFT"/>test_non_binary_input_for_blobs_fails()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_blockdevicemapping.TestLaunchConfiguration" [color="black", fontcolor="black", label=<{TestLaunchConfiguration|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_run_instances_block_device_mapping()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestLaunchConfiguration" [color="black", fontcolor="black", label=<{TestLaunchConfiguration|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_launch_config()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestLaunchConfigurationDescribe" [color="black", fontcolor="black", label=<{TestLaunchConfigurationDescribe|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_configuration_limited()<br ALIGN="LEFT"/>test_get_all_launch_configurations()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestLaunchConfigurationDescribeWithBlockDeviceTypes" [color="black", fontcolor="black", label=<{TestLaunchConfigurationDescribeWithBlockDeviceTypes|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_configuration_limited()<br ALIGN="LEFT"/>test_get_all_launch_configurations_with_block_device_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestLazyLoadMetadata" [color="black", fontcolor="black", label=<{TestLazyLoadMetadata|retry_url_patch : _patch<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>set_normal_response(data)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_meta_data_with_invalid_json_format_happened_once()<br ALIGN="LEFT"/>test_meta_data_with_invalid_json_format_happened_twice()<br ALIGN="LEFT"/>test_user_data()<br ALIGN="LEFT"/>test_user_data_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.elb.test_attribute.TestLbAttributes" [color="black", fontcolor="black", label=<{TestLbAttributes|<br ALIGN="LEFT"/>|test_get_all_lb_attributes()<br ALIGN="LEFT"/>test_get_lb_attribute()<br ALIGN="LEFT"/>test_lb_disable_cross_zone_load_balancing()<br ALIGN="LEFT"/>test_lb_enable_cross_zone_load_balancing()<br ALIGN="LEFT"/>test_lb_get_attributes()<br ALIGN="LEFT"/>test_lb_get_connection_settings()<br ALIGN="LEFT"/>test_lb_is_cross_zone_load_balancing()<br ALIGN="LEFT"/>test_modify_lb_attribute()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.beanstalk.test_layer1.TestListAvailableSolutionStacks" [color="black", fontcolor="black", label=<{TestListAvailableSolutionStacks|connection_class : Layer1<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_list_available_solution_stacks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.TestListParamsSerialization" [color="black", fontcolor="black", label=<{TestListParamsSerialization|connection : AWSQueryConnection<br ALIGN="LEFT"/>maxDiff : NoneType<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_complex_list_serialization()<br ALIGN="LEFT"/>test_simple_list_serialization()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestListSamlProviders" [color="black", fontcolor="black", label=<{TestListSamlProviders|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_list_saml_providers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.elb.test_listener.TestListenerGetItem" [color="black", fontcolor="black", label=<{TestListenerGetItem|<br ALIGN="LEFT"/>|test_getitem_for_http_listener()<br ALIGN="LEFT"/>test_getitem_for_https_listener()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.elb.test_listener.TestListenerResponseParsing" [color="black", fontcolor="black", label=<{TestListenerResponseParsing|<br ALIGN="LEFT"/>|test_parse_complex()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_message.TestMHMessage" [color="black", fontcolor="black", label=<{TestMHMessage|<br ALIGN="LEFT"/>|test_contains()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.mturk.test_connection.TestMTurkConnection" [color="black", fontcolor="black", label=<{TestMTurkConnection|connection_class : MTurkConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_get_file_upload_url_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.mws.test_connection.TestMWSConnection" [color="black", fontcolor="black", label=<{TestMWSConnection|connection_class : MWSConnection<br ALIGN="LEFT"/>mws : bool<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>default_body_error()<br ALIGN="LEFT"/>test_built_api_call_map()<br ALIGN="LEFT"/>test_decorator_order()<br ALIGN="LEFT"/>test_destructure_object()<br ALIGN="LEFT"/>test_get_service_status()<br ALIGN="LEFT"/>test_method_for()<br ALIGN="LEFT"/>test_post_request()<br ALIGN="LEFT"/>test_response_factory()<br ALIGN="LEFT"/>test_sandboxify()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.mws.test_response.TestMWSResponse" [color="black", fontcolor="black", label=<{TestMWSResponse|connection_class : MWSConnection<br ALIGN="LEFT"/>mws : bool<br ALIGN="LEFT"/>|check_issue(klass, text)<br ALIGN="LEFT"/>test_parsing_element_lists()<br ALIGN="LEFT"/>test_parsing_empty_member_list()<br ALIGN="LEFT"/>test_parsing_member_list()<br ALIGN="LEFT"/>test_parsing_member_list_specification()<br ALIGN="LEFT"/>test_parsing_missing_lists()<br ALIGN="LEFT"/>test_parsing_missing_member_list()<br ALIGN="LEFT"/>test_parsing_nested_elements()<br ALIGN="LEFT"/>test_parsing_nested_lists()<br ALIGN="LEFT"/>test_parsing_simple_lists()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.machinelearning.test_machinelearning.TestMachineLearning" [color="black", fontcolor="black", label=<{TestMachineLearning|connection_class : MachineLearningConnection<br ALIGN="LEFT"/>|test_predict()<br ALIGN="LEFT"/>test_predict_with_scheme_in_endpoint()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestModifyInterfaceAttribute" [color="black", fontcolor="black", label=<{TestModifyInterfaceAttribute|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_modify_attr_invalid()<br ALIGN="LEFT"/>test_modify_delete_on_termination_bool()<br ALIGN="LEFT"/>test_modify_delete_on_termination_invalid()<br ALIGN="LEFT"/>test_modify_delete_on_termination_str()<br ALIGN="LEFT"/>test_modify_description()<br ALIGN="LEFT"/>test_modify_group_set_invalid()<br ALIGN="LEFT"/>test_modify_group_set_list()<br ALIGN="LEFT"/>test_modify_source_dest_check_bool()<br ALIGN="LEFT"/>test_modify_source_dest_check_invalid()<br ALIGN="LEFT"/>test_modify_source_dest_check_str()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestModifyReservedInstances" [color="black", fontcolor="black", label=<{TestModifyReservedInstances|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_serialized_api_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestModifyVpcAttribute" [color="black", fontcolor="black", label=<{TestModifyVpcAttribute|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_modify_vpc_attribute_dns_hostnames()<br ALIGN="LEFT"/>test_modify_vpc_attribute_dns_support()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_networkinterface.TestNetworkInterfaceCollection" [color="black", fontcolor="black", label=<{TestNetworkInterfaceCollection|maxDiff : NoneType<br ALIGN="LEFT"/>network_interfaces_spec1 : NetworkInterfaceSpecification<br ALIGN="LEFT"/>network_interfaces_spec2 : NetworkInterfaceSpecification<br ALIGN="LEFT"/>network_interfaces_spec3 : NetworkInterfaceSpecification<br ALIGN="LEFT"/>private_ip_address1 : PrivateIPAddress<br ALIGN="LEFT"/>private_ip_address2 : PrivateIPAddress<br ALIGN="LEFT"/>private_ip_address3 : PrivateIPAddress<br ALIGN="LEFT"/>private_ip_address4 : PrivateIPAddress<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_prefix_to_serialization()<br ALIGN="LEFT"/>test_cant_use_public_ip()<br ALIGN="LEFT"/>test_param_serialization()<br ALIGN="LEFT"/>test_public_ip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.opsworks.test_layer1.TestOpsWorksConnection" [color="black", fontcolor="black", label=<{TestOpsWorksConnection|api : OpsWorksConnection<br ALIGN="LEFT"/>opsworks : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_describe_stacks()<br ALIGN="LEFT"/>test_validation_errors()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.opsworks.test_layer1.TestOpsWorksHelpers" [color="black", fontcolor="black", label=<{TestOpsWorksHelpers|opsworks : bool<br ALIGN="LEFT"/>|test_connect_to_region()<br ALIGN="LEFT"/>test_regions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestParseAutoScaleGroupResponse" [color="black", fontcolor="black", label=<{TestParseAutoScaleGroupResponse|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_groups_is_parsed_correctly()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_utils.TestPartSizeCalculations" [color="black", fontcolor="black", label=<{TestPartSizeCalculations|<br ALIGN="LEFT"/>|test_default_part_size_can_be_specified()<br ALIGN="LEFT"/>test_file_size_too_large()<br ALIGN="LEFT"/>test_gigabyte_size()<br ALIGN="LEFT"/>test_small_values_still_use_default_part_size()<br ALIGN="LEFT"/>test_terabyte_size()<br ALIGN="LEFT"/>test_under_the_maximum_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestPassword" [color="black", fontcolor="black", label=<{TestPassword|<br ALIGN="LEFT"/>|clstest(cls)<br ALIGN="LEFT"/>test_aaa_version_1_9_default_behavior()<br ALIGN="LEFT"/>test_constructor()<br ALIGN="LEFT"/>test_custom_hashclass()<br ALIGN="LEFT"/>test_hmac()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.provider.test_provider.TestProvider" [color="black", fontcolor="black", label=<{TestProvider|config : dict<br ALIGN="LEFT"/>config_object_patch : _patch<br ALIGN="LEFT"/>config_patch : _patch<br ALIGN="LEFT"/>environ : dict<br ALIGN="LEFT"/>environ_patch : _patch<br ALIGN="LEFT"/>get_instance_metadata : AsyncMock, MagicMock, dict<br ALIGN="LEFT"/>has_config_object_patch : _patch<br ALIGN="LEFT"/>has_config_patch : _patch<br ALIGN="LEFT"/>metadata_patch : _patch<br ALIGN="LEFT"/>shared_config : dict<br ALIGN="LEFT"/>|get_config(section_name, key)<br ALIGN="LEFT"/>get_shared_config(section_name, key)<br ALIGN="LEFT"/>has_config(section_name, key)<br ALIGN="LEFT"/>has_shared_config(section_name, key)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_config_missing_profile()<br ALIGN="LEFT"/>test_config_profile_values_are_used()<br ALIGN="LEFT"/>test_config_value_security_token_is_used()<br ALIGN="LEFT"/>test_config_values_are_used()<br ALIGN="LEFT"/>test_env_profile_loads_profile()<br ALIGN="LEFT"/>test_env_vars_beat_shared_creds_values()<br ALIGN="LEFT"/>test_env_vars_security_token_beats_config_values()<br ALIGN="LEFT"/>test_environment_variable_aws_security_token()<br ALIGN="LEFT"/>test_environment_variables_are_used()<br ALIGN="LEFT"/>test_keyring_is_used()<br ALIGN="LEFT"/>test_metadata_config_params(config_float, config_int)<br ALIGN="LEFT"/>test_metadata_server_credentials()<br ALIGN="LEFT"/>test_no_credentials_provided()<br ALIGN="LEFT"/>test_passed_in_values_are_used()<br ALIGN="LEFT"/>test_passed_in_values_beat_env_vars()<br ALIGN="LEFT"/>test_provider_google()<br ALIGN="LEFT"/>test_refresh_credentials()<br ALIGN="LEFT"/>test_shared_config_loading(load_from_path, exists)<br ALIGN="LEFT"/>test_shared_creds_beat_config_values()<br ALIGN="LEFT"/>test_shared_creds_profile_beats_defaults()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestPurchaseReservedInstanceOffering" [color="black", fontcolor="black", label=<{TestPurchaseReservedInstanceOffering|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_serialized_api_args()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestPutNotificationConfiguration" [color="black", fontcolor="black", label=<{TestPutNotificationConfiguration|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_autoscaling_group_put_notification_configuration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestPythonizeName" [color="black", fontcolor="black", label=<{TestPythonizeName|<br ALIGN="LEFT"/>|test_all_lower_case()<br ALIGN="LEFT"/>test_all_upper_case()<br ALIGN="LEFT"/>test_already_pythonized()<br ALIGN="LEFT"/>test_camel_case()<br ALIGN="LEFT"/>test_empty_string()<br ALIGN="LEFT"/>test_multiple_upper_cased_letters()<br ALIGN="LEFT"/>test_string_with_numbers()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sqs.test_queue.TestQueue" [color="black", fontcolor="black", label=<{TestQueue|<br ALIGN="LEFT"/>|test_queue_arn()<br ALIGN="LEFT"/>test_queue_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.rds2.test_connection.TestRDS2Connection" [color="black", fontcolor="black", label=<{TestRDS2Connection|conn : RDSConnection<br ALIGN="LEFT"/>db_name : str<br ALIGN="LEFT"/>rds : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_connect_rds()<br ALIGN="LEFT"/>test_integration()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds2.test_connection.TestRDS2Connection" [color="black", fontcolor="black", label=<{TestRDS2Connection|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_describe_db_instances()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSCCreateDBInstance" [color="black", fontcolor="black", label=<{TestRDSCCreateDBInstance|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_db_instance_param_group_instance()<br ALIGN="LEFT"/>test_create_db_instance_param_group_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSConnection" [color="black", fontcolor="black", label=<{TestRDSConnection|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_all_db_instances()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSConnectionRestoreDBInstanceFromPointInTime" [color="black", fontcolor="black", label=<{TestRDSConnectionRestoreDBInstanceFromPointInTime|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_db_instance_vpc_sg_obj()<br ALIGN="LEFT"/>test_create_db_instance_vpc_sg_str()<br ALIGN="LEFT"/>test_restore_dbinstance_from_point_in_time()<br ALIGN="LEFT"/>test_restore_dbinstance_from_point_in_time__db_subnet_group_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSLogFile" [color="black", fontcolor="black", label=<{TestRDSLogFile|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_all_logs_filtered()<br ALIGN="LEFT"/>test_get_all_logs_simple()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSLogFileDownload" [color="black", fontcolor="black", label=<{TestRDSLogFileDownload|connection_class : RDSConnection<br ALIGN="LEFT"/>logfile_sample : str<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_multi_args()<br ALIGN="LEFT"/>test_single_download()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSOptionGroupOptions" [color="black", fontcolor="black", label=<{TestRDSOptionGroupOptions|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_describe_option_group_options()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_connection.TestRDSOptionGroups" [color="black", fontcolor="black", label=<{TestRDSOptionGroups|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_describe_option_groups()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer2.TestRangeStringParsing" [color="black", fontcolor="black", label=<{TestRangeStringParsing|<br ALIGN="LEFT"/>|test_range_end_mismatch()<br ALIGN="LEFT"/>test_range_one_too_big()<br ALIGN="LEFT"/>test_range_start_mismatch()<br ALIGN="LEFT"/>test_range_too_big()<br ALIGN="LEFT"/>test_simple_range()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.redshift.test_layer1.TestRedshiftLayer1Management" [color="black", fontcolor="black", label=<{TestRedshiftLayer1Management|api : RedshiftConnection<br ALIGN="LEFT"/>cluster_prefix : str<br ALIGN="LEFT"/>db_name : str<br ALIGN="LEFT"/>master_password : str<br ALIGN="LEFT"/>master_username : str<br ALIGN="LEFT"/>node_type : str<br ALIGN="LEFT"/>redshift : bool<br ALIGN="LEFT"/>wait_time : int<br ALIGN="LEFT"/>|cluster_id()<br ALIGN="LEFT"/>create_cluster()<br ALIGN="LEFT"/>delete_cluster_the_slow_way(cluster_id)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_as_much_as_possible_before_teardown()<br ALIGN="LEFT"/>test_create_delete_cluster()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_regioninfo.TestRegionInfo" [color="black", fontcolor="black", label=<{TestRegionInfo|connection : NoneType<br ALIGN="LEFT"/>connection_cls : NoneType<br ALIGN="LEFT"/>endpoint : NoneType<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestRegisterImage" [color="black", fontcolor="black", label=<{TestRegisterImage|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_sriov_net_support_simple()<br ALIGN="LEFT"/>test_vm_type_default()<br ALIGN="LEFT"/>test_vm_type_hvm()<br ALIGN="LEFT"/>test_volume_delete_on_termination_default()<br ALIGN="LEFT"/>test_volume_delete_on_termination_on()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc_peering_connection.TestRejectVpcPeeringConnection" [color="black", fontcolor="black", label=<{TestRejectVpcPeeringConnection|REJECT_VPC_PEERING_CONNECTION : bytes<br ALIGN="LEFT"/>connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_reject_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_ec2object.TestRemoveTags" [color="black", fontcolor="black", label=<{TestRemoveTags|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_remove_tag()<br ALIGN="LEFT"/>test_remove_tag_empty_value()<br ALIGN="LEFT"/>test_remove_tag_no_value()<br ALIGN="LEFT"/>test_remove_tags()<br ALIGN="LEFT"/>test_remove_tags_none_values()<br ALIGN="LEFT"/>test_remove_tags_wrong_values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestReplaceNetworkAclAssociation" [color="black", fontcolor="black", label=<{TestReplaceNetworkAclAssociation|connection_class : VPCConnection<br ALIGN="LEFT"/>get_all_network_acls_subnet_body : bytes<br ALIGN="LEFT"/>get_all_network_acls_vpc_body : bytes<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_associate_network_acl()<br ALIGN="LEFT"/>test_disassociate_network_acl()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_networkacl.TestReplaceNetworkAclEntry" [color="black", fontcolor="black", label=<{TestReplaceNetworkAclEntry|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_replace_network_acl()<br ALIGN="LEFT"/>test_replace_network_acl_icmp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestReplaceRoute" [color="black", fontcolor="black", label=<{TestReplaceRoute|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_replace_route_gateway()<br ALIGN="LEFT"/>test_replace_route_instance()<br ALIGN="LEFT"/>test_replace_route_interface()<br ALIGN="LEFT"/>test_replace_route_vpc_peering_connection()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_routetable.TestReplaceRouteTableAssociation" [color="black", fontcolor="black", label=<{TestReplaceRouteTableAssociation|connection_class : VPCConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_replace_route_table_assocation()<br ALIGN="LEFT"/>test_replace_route_table_association_with_assoc()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestReservedInstanceOfferings" [color="black", fontcolor="black", label=<{TestReservedInstanceOfferings|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_reserved_instance_offerings()<br ALIGN="LEFT"/>test_get_reserved_instance_offerings_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_instancetype.TestReservedInstanceOfferings" [color="black", fontcolor="black", label=<{TestReservedInstanceOfferings|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_instance_types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_reservedinstance.TestReservedInstancesSet" [color="black", fontcolor="black", label=<{TestReservedInstancesSet|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_get_all_reserved_instaces()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_response.TestResponse" [color="black", fontcolor="black", label=<{TestResponse|connection_class : Layer1<br ALIGN="LEFT"/>|test_204_body_isnt_passed_to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.rds.test_snapshot.TestRestoreDBInstanceFromDBSnapshot" [color="black", fontcolor="black", label=<{TestRestoreDBInstanceFromDBSnapshot|connection_class : RDSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_restore_dbinstance_from_dbsnapshot()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_writer.TestResume" [color="black", fontcolor="black", label=<{TestResume|chunk_size : int<br ALIGN="LEFT"/>part_size : int<br ALIGN="LEFT"/>vault<br ALIGN="LEFT"/>|check_no_resume(data, resume_set)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_one_part_no_resume()<br ALIGN="LEFT"/>test_one_part_resume()<br ALIGN="LEFT"/>test_returns_archive_id()<br ALIGN="LEFT"/>test_two_parts_no_resume()<br ALIGN="LEFT"/>test_two_parts_one_resume()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestRetryURL" [color="black", fontcolor="black", label=<{TestRetryURL|opener : AsyncMock, MagicMock, dict<br ALIGN="LEFT"/>opener_patch : _patch<br ALIGN="LEFT"/>urlopen : AsyncMock, MagicMock, dict<br ALIGN="LEFT"/>urlopen_patch : _patch<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>set_no_proxy_allowed_response(response)<br ALIGN="LEFT"/>set_normal_response(response)<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_retry_url_uses_proxy()<br ALIGN="LEFT"/>test_retry_url_using_bytes_and_string_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.test_alias_resourcerecordsets.TestRoute53AliasResourceRecordSets" [color="black", fontcolor="black", label=<{TestRoute53AliasResourceRecordSets|base_domain : str<br ALIGN="LEFT"/>conn : Route53Connection<br ALIGN="LEFT"/>route53 : bool<br ALIGN="LEFT"/>zone : Zone<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_add_alias()<br ALIGN="LEFT"/>test_incomplete_add_alias_failure()<br ALIGN="LEFT"/>test_set_alias()<br ALIGN="LEFT"/>test_set_alias_backwards_compatability()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestRoute53Connection" [color="black", fontcolor="black", label=<{TestRoute53Connection|calls : dict<br ALIGN="LEFT"/>connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>do_retry_handler(sleep_mock)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_private_zone_invalid_vpc_400()<br ALIGN="LEFT"/>test_retryable_400_prior_request_not_complete()<br ALIGN="LEFT"/>test_retryable_400_throttling()<br ALIGN="LEFT"/>test_typical_400()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.domains.test_route53domains.TestRoute53Domains" [color="black", fontcolor="black", label=<{TestRoute53Domains|route53domains : Route53DomainsConnection<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_check_domain_availability()<br ALIGN="LEFT"/>test_handle_invalid_input_error()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.test_health_check.TestRoute53HealthCheck" [color="black", fontcolor="black", label=<{TestRoute53HealthCheck|<br ALIGN="LEFT"/>|health_check_params()<br ALIGN="LEFT"/>test_create_and_list_health_check()<br ALIGN="LEFT"/>test_create_health_check()<br ALIGN="LEFT"/>test_create_health_check_failure_threshold()<br ALIGN="LEFT"/>test_create_health_check_https_string_match()<br ALIGN="LEFT"/>test_create_health_check_invalid_failure_threshold()<br ALIGN="LEFT"/>test_create_health_check_invalid_request_interval()<br ALIGN="LEFT"/>test_create_health_check_request_interval()<br ALIGN="LEFT"/>test_create_health_check_string_match()<br ALIGN="LEFT"/>test_create_https_health_check()<br ALIGN="LEFT"/>test_create_https_health_check_fqdn()<br ALIGN="LEFT"/>test_create_resource_record_set()<br ALIGN="LEFT"/>test_delete_health_check()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.test_zone.TestRoute53PrivateZone" [color="black", fontcolor="black", label=<{TestRoute53PrivateZone|zone : Element<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_create_private_zone()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.test_resourcerecordsets.TestRoute53ResourceRecordSets" [color="black", fontcolor="black", label=<{TestRoute53ResourceRecordSets|<br ALIGN="LEFT"/>|test_add_change()<br ALIGN="LEFT"/>test_record_count()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.route53.test_zone.TestRoute53Zone" [color="black", fontcolor="black", label=<{TestRoute53Zone|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>test_a()<br ALIGN="LEFT"/>test_cname()<br ALIGN="LEFT"/>test_get_nameservers()<br ALIGN="LEFT"/>test_get_records()<br ALIGN="LEFT"/>test_get_zones()<br ALIGN="LEFT"/>test_identifiers_lbrs()<br ALIGN="LEFT"/>test_identifiers_wrrs()<br ALIGN="LEFT"/>test_mx()<br ALIGN="LEFT"/>test_nameservers()<br ALIGN="LEFT"/>test_toomany_exception()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_instance.TestRunInstanceResponseParsing" [color="black", fontcolor="black", label=<{TestRunInstanceResponseParsing|<br ALIGN="LEFT"/>|testIAMInstanceProfileParsedCorrectly()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_instance.TestRunInstances" [color="black", fontcolor="black", label=<{TestRunInstances|connection_class : EC2Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_run_instances_user_data()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_bucket.TestS3Bucket" [color="black", fontcolor="black", label=<{TestS3Bucket|connection_class : S3Connection<br ALIGN="LEFT"/>|acl_policy()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test__get_all_query_args()<br ALIGN="LEFT"/>test_bucket_acl_policy_namespace()<br ALIGN="LEFT"/>test_bucket_basics()<br ALIGN="LEFT"/>test_bucket_constructor()<br ALIGN="LEFT"/>test_bucket_copy_key_no_validate(mock_head_bucket)<br ALIGN="LEFT"/>test_bucket_create_bucket()<br ALIGN="LEFT"/>test_bucket_delete_key_missing_name()<br ALIGN="LEFT"/>test_bucket_encoding(mock_get_all)<br ALIGN="LEFT"/>test_bucket_get_key_no_validate(mock_gki, mock_gak)<br ALIGN="LEFT"/>test_bucket_kwargs_misspelling()<br ALIGN="LEFT"/>test_bucket_new_key()<br ALIGN="LEFT"/>test_bucket_new_key_missing_name()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.auth.test_sigv4.TestS3HmacAuthV4Handler" [color="black", fontcolor="black", label=<{TestS3HmacAuthV4Handler|auth : S3HmacAuthV4Handler<br ALIGN="LEFT"/>awesome_bucket_request : HTTPRequest<br ALIGN="LEFT"/>provider : Mock<br ALIGN="LEFT"/>request : HTTPRequest<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_auth()<br ALIGN="LEFT"/>test_canonical_query_string()<br ALIGN="LEFT"/>test_canonical_request()<br ALIGN="LEFT"/>test_canonical_uri()<br ALIGN="LEFT"/>test_clean_region_name()<br ALIGN="LEFT"/>test_correct_handling_of_plus_sign()<br ALIGN="LEFT"/>test_determine_region_name()<br ALIGN="LEFT"/>test_determine_service_name()<br ALIGN="LEFT"/>test_host_header()<br ALIGN="LEFT"/>test_mangle_path_and_params()<br ALIGN="LEFT"/>test_non_string_headers()<br ALIGN="LEFT"/>test_region_stripping()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_key.TestS3Key" [color="black", fontcolor="black", label=<{TestS3Key|connection_class : S3Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_change_storage_class()<br ALIGN="LEFT"/>test_change_storage_class_new_bucket()<br ALIGN="LEFT"/>test_delete_key_return_key()<br ALIGN="LEFT"/>test_restore_completed()<br ALIGN="LEFT"/>test_restore_header_with_ongoing_restore()<br ALIGN="LEFT"/>test_storage_class()<br ALIGN="LEFT"/>test_unicode_name()<br ALIGN="LEFT"/>test_when_no_restore_header_present()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_key.TestS3KeyRetries" [color="black", fontcolor="black", label=<{TestS3KeyRetries|connection_class : S3Connection<br ALIGN="LEFT"/>|test_400_timeout(sleep_mock)<br ALIGN="LEFT"/>test_500_retry(sleep_mock)<br ALIGN="LEFT"/>test_502_bad_gateway(sleep_mock)<br ALIGN="LEFT"/>test_504_gateway_timeout(sleep_mock)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_lifecycle.TestS3LifeCycle" [color="black", fontcolor="black", label=<{TestS3LifeCycle|connection_class : S3Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_expiration_is_optional()<br ALIGN="LEFT"/>test_expiration_with_expiration_and_transition()<br ALIGN="LEFT"/>test_expiration_with_no_transition()<br ALIGN="LEFT"/>test_parse_lifecycle_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.auth.test_sigv4.TestS3SigV4OptIn" [color="black", fontcolor="black", label=<{TestS3SigV4OptIn|config : dict<br ALIGN="LEFT"/>connection_class<br ALIGN="LEFT"/>|test_sigv4_non_optional()<br ALIGN="LEFT"/>test_sigv4_opt_in_config()<br ALIGN="LEFT"/>test_sigv4_opt_in_env()<br ALIGN="LEFT"/>test_sigv4_opt_out()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_tagging.TestS3Tagging" [color="black", fontcolor="black", label=<{TestS3Tagging|connection_class : S3Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_parse_tagging_response()<br ALIGN="LEFT"/>test_tag_equality()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_website.TestS3WebsiteConfiguration" [color="black", fontcolor="black", label=<{TestS3WebsiteConfiguration|maxDiff : NoneType<br ALIGN="LEFT"/>|<I>setUp</I>()<br ALIGN="LEFT"/><I>tearDown</I>()<br ALIGN="LEFT"/>test_builders()<br ALIGN="LEFT"/>test_key_prefix()<br ALIGN="LEFT"/>test_parse_xml()<br ALIGN="LEFT"/>test_redirect_all_request_to_with_just_host()<br ALIGN="LEFT"/>test_redirect_all_requests_with_protocol()<br ALIGN="LEFT"/>test_routing_rules_key_prefix()<br ALIGN="LEFT"/>test_routing_rules_to_host_on_404()<br ALIGN="LEFT"/>test_suffix_and_error()<br ALIGN="LEFT"/>test_suffix_only()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ses.test_identity.TestSESIdentity" [color="black", fontcolor="black", label=<{TestSESIdentity|connection_class : SESConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_ses_get_identity_dkim_list()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ses.test_identity.TestSESSetIdentityFeedbackForwardingEnabled" [color="black", fontcolor="black", label=<{TestSESSetIdentityFeedbackForwardingEnabled|connection_class : SESConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_ses_set_identity_feedback_forwarding_enabled_true()<br ALIGN="LEFT"/>test_ses_set_identity_notification_topic_enabled_false()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ses.test_identity.TestSESSetIdentityNotificationTopic" [color="black", fontcolor="black", label=<{TestSESSetIdentityNotificationTopic|connection_class : SESConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_ses_set_identity_notification_topic_bounce()<br ALIGN="LEFT"/>test_ses_set_identity_notification_topic_complaint()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.sns.test_connection.TestSNSConnection" [color="black", fontcolor="black", label=<{TestSNSConnection|connection : NoneType<br ALIGN="LEFT"/>sns : bool<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_forced_host()<br ALIGN="LEFT"/>test_list_platform_applications()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sns.test_connection.TestSNSConnection" [color="black", fontcolor="black", label=<{TestSNSConnection|connection_class : SNSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_create_platform_application()<br ALIGN="LEFT"/>test_create_platform_endpoint()<br ALIGN="LEFT"/>test_message_is_required()<br ALIGN="LEFT"/>test_publish_with_attributes()<br ALIGN="LEFT"/>test_publish_with_json()<br ALIGN="LEFT"/>test_publish_with_kwargs()<br ALIGN="LEFT"/>test_publish_with_positional_args()<br ALIGN="LEFT"/>test_publish_with_target_arn()<br ALIGN="LEFT"/>test_publish_with_utf8_message()<br ALIGN="LEFT"/>test_set_endpoint_attributes()<br ALIGN="LEFT"/>test_set_platform_application_attributes()<br ALIGN="LEFT"/>test_sqs_with_existing_policy()<br ALIGN="LEFT"/>test_sqs_with_no_previous_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.manage.test_ssh.TestSSHTimeout" [color="black", fontcolor="black", label=<{TestSSHTimeout|<br ALIGN="LEFT"/>|test_timeout()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.auth.test_stsanon.TestSTSAnonHandler" [color="black", fontcolor="black", label=<{TestSTSAnonHandler|provider<br ALIGN="LEFT"/>request : HTTPRequest<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_add_auth()<br ALIGN="LEFT"/>test_build_query_string()<br ALIGN="LEFT"/>test_escape_value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sts.test_connection.TestSTSConnection" [color="black", fontcolor="black", label=<{TestSTSConnection|connection_class : STSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_assume_role()<br ALIGN="LEFT"/>test_assume_role_with_mfa()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sts.test_connection.TestSTSSAMLConnection" [color="black", fontcolor="black", label=<{TestSTSSAMLConnection|connection_class : STSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_assume_role_with_saml()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sts.test_connection.TestSTSWebIdentityConnection" [color="black", fontcolor="black", label=<{TestSTSWebIdentityConnection|connection_class : STSConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_assume_role_with_web_identity()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.autoscale.test_group.TestScheduledGroup" [color="black", fontcolor="black", label=<{TestScheduledGroup|connection_class : AutoScaleConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_scheduled_group_creation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb.test_layer2.TestSchemaEquality" [color="black", fontcolor="black", label=<{TestSchemaEquality|<br ALIGN="LEFT"/>|test_equal_with_hash_and_range()<br ALIGN="LEFT"/>test_schema_equal()<br ALIGN="LEFT"/>test_schema_not_equal()<br ALIGN="LEFT"/>test_schema_with_hash_and_range_not_equal()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.sts.test_connection.TestSecurityToken" [color="black", fontcolor="black", label=<{TestSecurityToken|connection_class : STSConnection<br ALIGN="LEFT"/>|create_service_connection()<br ALIGN="LEFT"/>test_security_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.auth.test_sigv4.TestSigV4Handler" [color="black", fontcolor="black", label=<{TestSigV4Handler|provider : Mock<br ALIGN="LEFT"/>request : HTTPRequest<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_bytes_header()<br ALIGN="LEFT"/>test_canonical_query_string()<br ALIGN="LEFT"/>test_canonical_uri()<br ALIGN="LEFT"/>test_credential_scope()<br ALIGN="LEFT"/>test_headers_to_sign()<br ALIGN="LEFT"/>test_inner_whitespace_is_collapsed()<br ALIGN="LEFT"/>test_not_adding_empty_qs()<br ALIGN="LEFT"/>test_pickle_works()<br ALIGN="LEFT"/>test_query_string()<br ALIGN="LEFT"/>test_region_and_service_can_be_overriden()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_connection.TestSigV4HostError" [color="black", fontcolor="black", label=<{TestSigV4HostError|config : dict<br ALIGN="LEFT"/>connection_class : S3Connection<br ALIGN="LEFT"/>|test_historical_behavior()<br ALIGN="LEFT"/>test_sigv4_opt_in()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.auth.test_sigv4.TestSigV4OptIn" [color="black", fontcolor="black", label=<{TestSigV4OptIn|config : dict<br ALIGN="LEFT"/>connection_class<br ALIGN="LEFT"/>sigv4_region : RegionInfo<br ALIGN="LEFT"/>standard_region : RegionInfo<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_sigv4_non_optional()<br ALIGN="LEFT"/>test_sigv4_opt_in_config()<br ALIGN="LEFT"/>test_sigv4_opt_in_env()<br ALIGN="LEFT"/>test_sigv4_opt_out()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_connection.TestSigV4Presigned" [color="black", fontcolor="black", label=<{TestSigV4Presigned|config : dict<br ALIGN="LEFT"/>connection_class : S3Connection<br ALIGN="LEFT"/>|test_sigv4_presign()<br ALIGN="LEFT"/>test_sigv4_presign_headers()<br ALIGN="LEFT"/>test_sigv4_presign_optional_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestSignatureAlteration" [color="black", fontcolor="black", label=<{TestSignatureAlteration|<br ALIGN="LEFT"/>|test_switched()<br ALIGN="LEFT"/>test_unchanged()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_connection.TestSignatureAlteration" [color="black", fontcolor="black", label=<{TestSignatureAlteration|connection_class : S3Connection<br ALIGN="LEFT"/>|test_switched()<br ALIGN="LEFT"/>test_unchanged()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.cloudformation.test_stack.TestStackParse" [color="black", fontcolor="black", label=<{TestStackParse|<br ALIGN="LEFT"/>|test_disable_rollback_false()<br ALIGN="LEFT"/>test_disable_rollback_false_upper()<br ALIGN="LEFT"/>test_disable_rollback_true()<br ALIGN="LEFT"/>test_disable_rollback_true_upper()<br ALIGN="LEFT"/>test_event_creation_time_with_millis()<br ALIGN="LEFT"/>test_list_stacks_time_with_millis()<br ALIGN="LEFT"/>test_list_stacks_time_with_millis_again()<br ALIGN="LEFT"/>test_parse_tags()<br ALIGN="LEFT"/>test_resource_time_with_millis()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestStringToDatetimeParsing" [color="black", fontcolor="black", label=<{TestStringToDatetimeParsing|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_nonus_locale()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.support.test_layer1.TestSupportLayer1Management" [color="black", fontcolor="black", label=<{TestSupportLayer1Management|api : SupportConnection<br ALIGN="LEFT"/>support : bool<br ALIGN="LEFT"/>wait_time : int<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_as_much_as_possible_before_teardown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.dynamodb.test_layer2.TestTableConstruction" [color="black", fontcolor="black", label=<{TestTableConstruction|api<br ALIGN="LEFT"/>layer2 : Layer2<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_schema_with_hash()<br ALIGN="LEFT"/>test_create_schema_with_hash_and_range()<br ALIGN="LEFT"/>test_create_table_without_api_call()<br ALIGN="LEFT"/>test_get_table()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestTerminateInstances" [color="black", fontcolor="black", label=<{TestTerminateInstances|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_terminate_bad_response()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.utils.test_utils.TestThreadImport" [color="black", fontcolor="black", label=<{TestThreadImport|<br ALIGN="LEFT"/>|test_strptime()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_utils.TestTreeHash" [color="black", fontcolor="black", label=<{TestTreeHash|<br ALIGN="LEFT"/>|calculate_tree_hash(bytestring)<br ALIGN="LEFT"/>test_empty_tree_hash()<br ALIGN="LEFT"/>test_tree_hash_calculations()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_connection.TestTrimSnapshots" [color="black", fontcolor="black", label=<{TestTrimSnapshots|<br ALIGN="LEFT"/>|test_trim_defaults()<br ALIGN="LEFT"/>test_trim_months()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_connection.TestTruncatedGetAllRRSetsRoute53" [color="black", fontcolor="black", label=<{TestTruncatedGetAllRRSetsRoute53|connection_class : Route53Connection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>paged_body()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_get_all_rr_sets()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.swf.test_layer2_types.TestTypes" [color="black", fontcolor="black", label=<{TestTypes|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_activity_type_register_defaults()<br ALIGN="LEFT"/>test_workflow_type_register_defaults()<br ALIGN="LEFT"/>test_workflow_type_start_execution()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_connection.TestUnicodeCallingFormat" [color="black", fontcolor="black", label=<{TestUnicodeCallingFormat|connection_class : S3Connection<br ALIGN="LEFT"/>|create_service_connection()<br ALIGN="LEFT"/>default_body()<br ALIGN="LEFT"/>test_unicode_calling_format()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestUpdateAccountPasswordPolicy" [color="black", fontcolor="black", label=<{TestUpdateAccountPasswordPolicy|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_update_account_password_policy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestUpdateClassicLinkVpc" [color="black", fontcolor="black", label=<{TestUpdateClassicLinkVpc|<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_vpc_update_classic_link_enabled()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.iam.test_connection.TestUpdateSamlProvider" [color="black", fontcolor="black", label=<{TestUpdateSamlProvider|connection_class : IAMConnection<br ALIGN="LEFT"/>|default_body()<br ALIGN="LEFT"/>test_update_saml_provider()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_concurrent.TestUploaderThread" [color="black", fontcolor="black", label=<{TestUploaderThread|filename<br ALIGN="LEFT"/>fileobj : _TemporaryFileWrapper<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_fileobj_closed_when_thread_shuts_down()<br ALIGN="LEFT"/>test_num_retries_is_obeyed()<br ALIGN="LEFT"/>test_upload_errors_have_exception_messages()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.ec2.vpc.test_connection.TestVPCConnection" [color="black", fontcolor="black", label=<{TestVPCConnection|api : VPCConnection<br ALIGN="LEFT"/>instances : list<br ALIGN="LEFT"/>post_terminate_cleanups : list<br ALIGN="LEFT"/>subnet : Subnet<br ALIGN="LEFT"/>vpc : VPC<br ALIGN="LEFT"/>|delete_elastic_ip(eip)<br ALIGN="LEFT"/>post_terminate_cleanup()<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>terminate_instance(instance)<br ALIGN="LEFT"/>terminate_instances()<br ALIGN="LEFT"/>test_associate_elastic_ip()<br ALIGN="LEFT"/>test_associate_public_ip()<br ALIGN="LEFT"/>test_multi_ip_create()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer2.TestVault" [color="black", fontcolor="black", label=<{TestVault|vault : Vault<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_create_archive_writer()<br ALIGN="LEFT"/>test_delete_vault()<br ALIGN="LEFT"/>test_get_job()<br ALIGN="LEFT"/>test_initiate_job()<br ALIGN="LEFT"/>test_list_all_parts_one_page()<br ALIGN="LEFT"/>test_list_all_parts_two_pages()<br ALIGN="LEFT"/>test_list_jobs()<br ALIGN="LEFT"/>test_resume_archive_from_file(mock_resume_file_upload)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_vault.TestVault" [color="black", fontcolor="black", label=<{TestVault|api : Mock<br ALIGN="LEFT"/>getsize : AsyncMock, MagicMock, dict<br ALIGN="LEFT"/>mock_open : MagicMock, NoneType<br ALIGN="LEFT"/>size_patch : _patch<br ALIGN="LEFT"/>vault : Vault<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_large_part_size_is_obeyed()<br ALIGN="LEFT"/>test_part_size_needs_to_be_adjusted()<br ALIGN="LEFT"/>test_retrieve_inventory()<br ALIGN="LEFT"/>test_small_part_size_is_obeyed()<br ALIGN="LEFT"/>test_upload_archive_small_file(compute_hashes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.vpc.test_vpc.TestVpcClassicLink" [color="black", fontcolor="black", label=<{TestVpcClassicLink|connection_class : VPCConnection<br ALIGN="LEFT"/>vpc : VPC<br ALIGN="LEFT"/>vpc_id : str<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.glacier.test_writer.TestWriter" [color="black", fontcolor="black", label=<{TestWriter|chunk_size : int<br ALIGN="LEFT"/>part_size : int<br ALIGN="LEFT"/>vault<br ALIGN="LEFT"/>writer : Writer<br ALIGN="LEFT"/>|check_write(write_list)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_current_tree_hash()<br ALIGN="LEFT"/>test_current_uploaded_size()<br ALIGN="LEFT"/>test_one_part_plus_one_write()<br ALIGN="LEFT"/>test_one_part_write()<br ALIGN="LEFT"/>test_returns_archive_id()<br ALIGN="LEFT"/>test_single_byte_write()<br ALIGN="LEFT"/>test_split_write_1()<br ALIGN="LEFT"/>test_split_write_2()<br ALIGN="LEFT"/>test_split_write_3()<br ALIGN="LEFT"/>test_upload_id()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.route53.test_zone.TestZone" [color="black", fontcolor="black", label=<{TestZone|<br ALIGN="LEFT"/>|test_find_records()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.kinesis.test_kinesis.TimeoutError" [color="black", fontcolor="red", label=<{TimeoutError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.glacier.test_layer2.TestVault.test_initiate_job.UTC" [color="black", fontcolor="black", label=<{UTC|<br ALIGN="LEFT"/>|dst(dt)<br ALIGN="LEFT"/>tzname(dt)<br ALIGN="LEFT"/>utcoffset(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.s3.test_uri.UriTest" [color="black", fontcolor="black", label=<{UriTest|<br ALIGN="LEFT"/>|test_bucket_uri_no_trailing_slash()<br ALIGN="LEFT"/>test_bucket_uri_with_trailing_slash()<br ALIGN="LEFT"/>test_explicit_file_uri()<br ALIGN="LEFT"/>test_file_containing_colon()<br ALIGN="LEFT"/>test_gs_object_uri_contains_sharp_not_matching_version_syntax()<br ALIGN="LEFT"/>test_implicit_file_uri()<br ALIGN="LEFT"/>test_invalid_scheme()<br ALIGN="LEFT"/>test_non_versioned_object_uri()<br ALIGN="LEFT"/>test_provider_uri()<br ALIGN="LEFT"/>test_roundtrip_versioned_gs_object_uri_parsed()<br ALIGN="LEFT"/>test_versioned_gs_object_uri()<br ALIGN="LEFT"/>test_versioned_gs_object_uri_with_legacy_generation_value()<br ALIGN="LEFT"/>test_versioned_s3_object_uri()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.test_connection.V4AuthConnection" [color="black", fontcolor="black", label=<{V4AuthConnection|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"tests.unit.ec2.test_volume.VolumeAttributeTests" [color="black", fontcolor="black", label=<{VolumeAttributeTests|volume_attribute : VolumeAttribute<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_endElement_with_name_value_and_value_false_sets_attrs_key_name_False()<br ALIGN="LEFT"/>test_endElement_with_name_value_and_value_true_sets_attrs_key_name_True()<br ALIGN="LEFT"/>test_endElement_with_name_volumeId_sets_id()<br ALIGN="LEFT"/>test_endElement_with_other_name_sets_other_name_attribute()<br ALIGN="LEFT"/>test_startElement_with_name_autoEnableIO_sets_key_name()<br ALIGN="LEFT"/>test_startElement_without_name_autoEnableIO_returns_None()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.unit.ec2.test_volume.VolumeTests" [color="black", fontcolor="black", label=<{VolumeTests|attach_data : AttachmentSet<br ALIGN="LEFT"/>volume_one : Volume<br ALIGN="LEFT"/>volume_two : Volume<br ALIGN="LEFT"/>|check_that_attribute_has_been_set(name, value, attribute, obj_value)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_attach_calls_attach_volume()<br ALIGN="LEFT"/>test_attachment_state_no_attach_data_returns_None()<br ALIGN="LEFT"/>test_attachment_state_returns_state()<br ALIGN="LEFT"/>test_create_snapshot_calls_connection_create_snapshot()<br ALIGN="LEFT"/>test_create_snapshot_with_description()<br ALIGN="LEFT"/>test_delete_calls_delete_volume()<br ALIGN="LEFT"/>test_detach_calls_detach_volume()<br ALIGN="LEFT"/>test_detach_with_force_calls_detach_volume_with_force()<br ALIGN="LEFT"/>test_detach_with_no_attach_data()<br ALIGN="LEFT"/>test_endElement_sets_correct_attributes_with_values()<br ALIGN="LEFT"/>test_endElement_with_name_status_and_empty_string_value_doesnt_set_status()<br ALIGN="LEFT"/>test_snapshots__with_owner_and_restorable_by()<br ALIGN="LEFT"/>test_snapshots_returns_snapshots()<br ALIGN="LEFT"/>test_startElement_calls_TaggedEC2Object_startElement_with_correct_args(startElement)<br ALIGN="LEFT"/>test_startElement_else_returns_None(startElement)<br ALIGN="LEFT"/>test_startElement_retval_not_None_returns_correct_thing(startElement)<br ALIGN="LEFT"/>test_startElement_with_name_attachmentSet_returns_AttachmentSet(startElement)<br ALIGN="LEFT"/>test_startElement_with_name_tagSet_calls_ResultSet(ResultSet, startElement)<br ALIGN="LEFT"/>test_update_returns_status()<br ALIGN="LEFT"/>test_update_with_result_set_greater_than_0_updates_dict()<br ALIGN="LEFT"/>test_update_with_validate_true_raises_value_error()<br ALIGN="LEFT"/>test_volume_state_returns_status()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.s3.test_pool.WriteAndCount" [color="black", fontcolor="black", label=<{WriteAndCount|size : int<br ALIGN="LEFT"/>|write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"tests.integration.cloudformation.test_cert_verification.CloudFormationCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.cloudsearch.test_cert_verification.CloudSearchCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.cloudsearch2.test_cert_verification.CloudSearchCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.cloudtrail.test_cert_verification.CloudTrailCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.cognito.identity.test_cognito_identity.TestCognitoIdentity" -> "tests.integration.cognito.CognitoTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.cognito.sync.test_cognito_sync.TestCognitoSync" -> "tests.integration.cognito.CognitoTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.datapipeline.test_cert_verification.DatapipelineCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.dynamodb.test_cert_verification.DynamoDBCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.dynamodb2.test_cert_verification.DynamoDB2CertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.ec2.autoscale.test_cert_verification.AutoscaleCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.ec2.cloudwatch.test_cert_verification.CloudWatchCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.ec2.elb.test_cert_verification.ELBCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.ec2.test_cert_verification.EC2CertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.elastictranscoder.test_cert_verification.ElasticTranscoderCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.emr.test_cert_verification.EMRCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.glacier.test_cert_verification.GlacierCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.gs.test_basic.GSBasicTest" -> "tests.integration.gs.testcase.GSTestCase" [arrowhead="empty", arrowtail="none"];
"tests.integration.gs.test_generation_conditionals.GSGenerationConditionalsTest" -> "tests.integration.gs.testcase.GSTestCase" [arrowhead="empty", arrowtail="none"];
"tests.integration.gs.test_storage_uri.GSStorageUriTest" -> "tests.integration.gs.testcase.GSTestCase" [arrowhead="empty", arrowtail="none"];
"tests.integration.gs.test_versioning.GSVersioningTest" -> "tests.integration.gs.testcase.GSTestCase" [arrowhead="empty", arrowtail="none"];
"tests.integration.iam.test_cert_verification.IAMCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.kinesis.test_cert_verification.KinesisCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.logs.test_cert_verification.CloudWatchLogsCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.rds.test_cert_verification.RDSCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.rds2.test_cert_verification.RDSCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.redshift.test_cert_verification.RedshiftCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.route53.test_cert_verification.Route53CertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.s3.test_cert_verification.S3CertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.sdb.test_cert_verification.SDBCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.ses.test_cert_verification.SESCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.sns.test_cert_verification.SNSCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.sqs.test_cert_verification.SQSCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.sts.test_cert_verification.STSCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.support.test_cert_verification.SupportCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.swf.test_cert_verification.SWFCertVerificationTest" -> "tests.integration.ServiceCertVerificationTest" [arrowhead="empty", arrowtail="none"];
"tests.integration.swf.test_layer1.SimpleWorkflowLayer1Test" -> "tests.integration.swf.test_layer1.SimpleWorkflowLayer1TestBase" [arrowhead="empty", arrowtail="none"];
"tests.integration.swf.test_layer1_workflow_execution.SwfL1WorkflowExecutionTest" -> "tests.integration.swf.test_layer1.SimpleWorkflowLayer1TestBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.MockServiceWithConfigTestCase" -> "tests.unit.AWSMockServiceTestCase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationCancelUpdateStack" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationCreateStack" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDeleteStack" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDescribeStackResource" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDescribeStackResources" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationDescribeStacks" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationEstimateTemplateCost" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationGetStackPolicy" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationGetStackevents" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationGetTemplate" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationListStackResources" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationListStacks" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationSetStackPolicy" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationUpdateStack" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudformation.test_connection.TestCloudFormationValidateTemplate" -> "tests.unit.cloudformation.test_connection.CloudFormationConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchBadSDFTesting" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentDelete" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentDeleteMultiple" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentErrorBadUnicode" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentErrorDocsTooBig" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentErrorMismatch" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentMultipleAddTest" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentSingleTest" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchDocumentsErrorMissingAdds" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_document.CloudSearchSDFManipulation" -> "tests.unit.cloudsearch.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_exceptions.CloudSearchJSONExceptionTest" -> "tests.unit.cloudsearch.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_search.CloudSearchNonJsonTest" -> "tests.unit.cloudsearch.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_search.CloudSearchSearchFacetTest" -> "tests.unit.cloudsearch.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_search.CloudSearchSearchTest" -> "tests.unit.cloudsearch.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch.test_search.CloudSearchUnauthorizedTest" -> "tests.unit.cloudsearch.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchBadSDFTesting" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentDelete" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentDeleteMultiple" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentErrorBadUnicode" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentErrorDocsTooBig" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentErrorMismatch" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentMultipleAddTest" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchDocumentSingleTest" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_document.CloudSearchSDFManipulation" -> "tests.unit.cloudsearch2.test_document.CloudSearchDocumentTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_exceptions.CloudSearchJSONExceptionTest" -> "tests.unit.cloudsearch2.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_search.CloudSearchNonJsonTest" -> "tests.unit.cloudsearch2.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_search.CloudSearchSearchFacetTest" -> "tests.unit.cloudsearch2.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_search.CloudSearchSearchTest" -> "tests.unit.cloudsearch2.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.cloudsearch2.test_search.CloudSearchUnauthorizedTest" -> "tests.unit.cloudsearch2.test_search.CloudSearchSearchBaseTest" [arrowhead="empty", arrowtail="none"];
"tests.unit.dynamodb2.test_table.ItemFromItemTestCase" -> "tests.unit.dynamodb2.test_table.ItemTestCase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestAccountAttributes" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestAssociateAddress" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestAssociateAddressFail" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestCancelReservedInstancesListing" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestCopyImage" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestCopySnapshot" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestCreateImage" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestCreateReservedInstancesListing" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestCreateVolume" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeInstances" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeReservedInstancesModifications" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeSnapshots" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeSpotInstanceRequests" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeTags" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeVPCAttribute" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestDescribeVolumes" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestGetAllImages" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestGetAllNetworkInterfaces" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestGetClassicLinkInstances" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestModifyInterfaceAttribute" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestModifyReservedInstances" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestPurchaseReservedInstanceOffering" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestRegisterImage" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestReservedInstanceOfferings" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestSignatureAlteration" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestTerminateInstances" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_connection.TestTrimSnapshots" -> "tests.unit.ec2.test_connection.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.ec2.test_instancetype.TestReservedInstanceOfferings" -> "tests.unit.ec2.test_instancetype.TestEC2ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.glacier.test_layer1.GlacierJobOperations" -> "tests.unit.glacier.test_layer1.GlacierLayer1ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.glacier.test_layer1.GlacierUploadArchiveResets" -> "tests.unit.glacier.test_layer1.GlacierLayer1ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.glacier.test_layer1.GlacierVaultsOperations" -> "tests.unit.glacier.test_layer1.GlacierLayer1ConnectionBase" [arrowhead="empty", arrowtail="none"];
"tests.unit.glacier.test_layer2.TestGlacierLayer2Connection" -> "tests.unit.glacier.test_layer2.GlacierLayer2Base" [arrowhead="empty", arrowtail="none"];
"tests.unit.glacier.test_layer2.TestJob" -> "tests.unit.glacier.test_layer2.GlacierLayer2Base" [arrowhead="empty", arrowtail="none"];
"tests.unit.glacier.test_layer2.TestVault" -> "tests.unit.glacier.test_layer2.GlacierLayer2Base" [arrowhead="empty", arrowtail="none"];
"tests.unit.test_connection.TestAWSQueryConnectionSimple" -> "tests.unit.test_connection.TestAWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"tests.unit.test_connection.TestAWSQueryStatus" -> "tests.unit.test_connection.TestAWSQueryConnection" [arrowhead="empty", arrowtail="none"];
"tests.unit.vpc.test_vpc.TestAttachClassicLinkVpc" -> "tests.unit.vpc.test_vpc.TestVpcClassicLink" [arrowhead="empty", arrowtail="none"];
"tests.unit.vpc.test_vpc.TestDetachClassicLinkVpc" -> "tests.unit.vpc.test_vpc.TestVpcClassicLink" [arrowhead="empty", arrowtail="none"];
"tests.unit.vpc.test_vpc.TestDisableClassicLinkVpc" -> "tests.unit.vpc.test_vpc.TestVpcClassicLink" [arrowhead="empty", arrowtail="none"];
"tests.unit.vpc.test_vpc.TestEnableClassicLinkVpc" -> "tests.unit.vpc.test_vpc.TestVpcClassicLink" [arrowhead="empty", arrowtail="none"];
"tests.unit.vpc.test_vpc.TestUpdateClassicLinkVpc" -> "tests.unit.vpc.test_vpc.TestVpcClassicLink" [arrowhead="empty", arrowtail="none"];
"tests.integration.s3.mock_storage_service.MockAcl" -> "tests.integration.s3.mock_storage_service.MockBucket" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="def_acl", style="solid"];
"tests.integration.s3.mock_storage_service.MockProvider" -> "tests.integration.s3.mock_storage_service.MockConnection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="provider", style="solid"];
"tests.unit.auth.test_sigv4.FakeEC2Connection" -> "tests.unit.auth.test_sigv4.TestSigV4OptIn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_class", style="solid"];
"tests.unit.auth.test_sigv4.FakeS3Connection" -> "tests.unit.auth.test_sigv4.TestS3SigV4OptIn" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection_class", style="solid"];
}
