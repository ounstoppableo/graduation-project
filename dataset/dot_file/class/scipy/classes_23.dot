digraph "classes_scipy" {
rankdir=BT
charset="utf-8"
"scipy.integrate.quadrature.AccuracyWarning" [color="black", fontcolor="red", label=<{AccuracyWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize._basinhopping.AdaptiveStepsize" [color="black", fontcolor="black", label=<{AdaptiveStepsize|factor : float<br ALIGN="LEFT"/>interval : int<br ALIGN="LEFT"/>naccept : int<br ALIGN="LEFT"/>nstep : int<br ALIGN="LEFT"/>nstep_tot : int<br ALIGN="LEFT"/>takestep<br ALIGN="LEFT"/>target_accept_rate : float<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|report(accept)<br ALIGN="LEFT"/>take_step(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate._monotone.Akima1DInterpolator" [color="black", fontcolor="black", label=<{Akima1DInterpolator|axis<br ALIGN="LEFT"/>|<I>extend</I>()<br ALIGN="LEFT"/><I>from_bernstein_basis</I>(bp, extrapolate)<br ALIGN="LEFT"/><I>from_spline</I>(tck, extrapolate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.nonlin.Anderson" [color="black", fontcolor="black", label=<{Anderson|M : int<br ALIGN="LEFT"/>a : ndarray<br ALIGN="LEFT"/>alpha : NoneType<br ALIGN="LEFT"/>df : list<br ALIGN="LEFT"/>dx : list<br ALIGN="LEFT"/>gamma : NoneType<br ALIGN="LEFT"/>w0 : float<br ALIGN="LEFT"/>|matvec(f)<br ALIGN="LEFT"/>solve(f, tol)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.arff.arffread.ArffError" [color="black", fontcolor="red", label=<{ArffError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack.ArpackError" [color="black", fontcolor="red", label=<{ArpackError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack.ArpackNoConvergence" [color="black", fontcolor="red", label=<{ArpackNoConvergence|eigenvalues<br ALIGN="LEFT"/>eigenvectors<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.idl.AttrDict" [color="black", fontcolor="black", label=<{AttrDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.interpolate.BPoly" [color="black", fontcolor="black", label=<{BPoly|c<br ALIGN="LEFT"/>extrapolate<br ALIGN="LEFT"/>|antiderivative(nu)<br ALIGN="LEFT"/>derivative(nu)<br ALIGN="LEFT"/>extend(c, x, right)<br ALIGN="LEFT"/>from_derivatives(xi, yi, orders, extrapolate)<br ALIGN="LEFT"/>from_power_basis(pp, extrapolate)<br ALIGN="LEFT"/>integrate(a, b, extrapolate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.signal.filter_design.BadCoefficients" [color="black", fontcolor="red", label=<{BadCoefficients|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.BadFortranFormat" [color="black", fontcolor="red", label=<{BadFortranFormat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.polyint.BarycentricInterpolator" [color="black", fontcolor="black", label=<{BarycentricInterpolator|n<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>wi : ndarray<br ALIGN="LEFT"/>xi : ndarray<br ALIGN="LEFT"/>yi : NoneType, ndarray<br ALIGN="LEFT"/>|add_xi(xi, yi)<br ALIGN="LEFT"/>set_yi(yi, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._trustregion.BaseQuadraticSubproblem" [color="black", fontcolor="black", label=<{BaseQuadraticSubproblem|fun<br ALIGN="LEFT"/>hess<br ALIGN="LEFT"/>jac<br ALIGN="LEFT"/>jac_mag<br ALIGN="LEFT"/>|get_boundaries_intersections(z, d, trust_radius)<br ALIGN="LEFT"/>hessp(p)<br ALIGN="LEFT"/><I>solve</I>(trust_radius)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Basic" [color="black", fontcolor="black", label=<{Basic|owned : int<br ALIGN="LEFT"/>|check(s)<br ALIGN="LEFT"/>inbound(s)<br ALIGN="LEFT"/>outbound(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Basic_Number" [color="black", fontcolor="black", label=<{Basic_Number|<br ALIGN="LEFT"/>|binop(symbol, a, b)<br ALIGN="LEFT"/>literalizer(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._basinhopping.BasinHoppingRunner" [color="black", fontcolor="black", label=<{BasinHoppingRunner|accept : bool<br ALIGN="LEFT"/>accept_tests<br ALIGN="LEFT"/>disp : bool<br ALIGN="LEFT"/>energy<br ALIGN="LEFT"/>energy_trial<br ALIGN="LEFT"/>minimizer<br ALIGN="LEFT"/>nstep : int<br ALIGN="LEFT"/>res<br ALIGN="LEFT"/>step_taking<br ALIGN="LEFT"/>storage<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>xtrial<br ALIGN="LEFT"/>|one_cycle()<br ALIGN="LEFT"/>print_report(energy_trial, accept)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.BivariateSpline" [color="black", fontcolor="black", label=<{BivariateSpline|degrees<br ALIGN="LEFT"/>tck<br ALIGN="LEFT"/>|ev(xi, yi, dx, dy)<br ALIGN="LEFT"/>integral(xa, xb, ya, yb)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.blitz_tools.BlitzWarning" [color="black", fontcolor="red", label=<{BlitzWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.optimize.Brent" [color="black", fontcolor="black", label=<{Brent|args : tuple<br ALIGN="LEFT"/>brack : NoneType<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>funcalls : int<br ALIGN="LEFT"/>fval : NoneType<br ALIGN="LEFT"/>iter : int<br ALIGN="LEFT"/>maxiter : int<br ALIGN="LEFT"/>tol : float<br ALIGN="LEFT"/>xmin : NoneType<br ALIGN="LEFT"/>|get_bracket_info()<br ALIGN="LEFT"/>get_result(full_output)<br ALIGN="LEFT"/>optimize()<br ALIGN="LEFT"/>set_bracket(brack)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.nonlin.BroydenFirst" [color="black", fontcolor="black", label=<{BroydenFirst|Gm : NoneType<br ALIGN="LEFT"/>alpha : NoneType<br ALIGN="LEFT"/>max_rank : NoneType<br ALIGN="LEFT"/>|matvec(f)<br ALIGN="LEFT"/>rmatvec(f)<br ALIGN="LEFT"/>rsolve(f, tol)<br ALIGN="LEFT"/>setup(x, F, func)<br ALIGN="LEFT"/>solve(f, tol)<br ALIGN="LEFT"/>todense()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.nonlin.BroydenSecond" [color="black", fontcolor="black", label=<{BroydenSecond|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.signal.ltisys.Bunch" [color="black", fontcolor="black", label=<{Bunch|X : ndarray<br ALIGN="LEFT"/>computed_poles<br ALIGN="LEFT"/>gain_matrix : ndarray<br ALIGN="LEFT"/>nb_iter : int<br ALIGN="LEFT"/>requested_poles<br ALIGN="LEFT"/>rtol : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.bytecodecompiler.ByteCodeMeaning" [color="black", fontcolor="black", label=<{ByteCodeMeaning|symbols : dict<br ALIGN="LEFT"/>|<I>BINARY_ADD</I>(pc)<br ALIGN="LEFT"/><I>BINARY_AND</I>(pc)<br ALIGN="LEFT"/><I>BINARY_DIVIDE</I>(pc)<br ALIGN="LEFT"/><I>BINARY_LSHIFT</I>(pc)<br ALIGN="LEFT"/><I>BINARY_MODULO</I>(pc)<br ALIGN="LEFT"/><I>BINARY_MULTIPLY</I>(pc)<br ALIGN="LEFT"/><I>BINARY_OR</I>(pc)<br ALIGN="LEFT"/><I>BINARY_POWER</I>(pc)<br ALIGN="LEFT"/><I>BINARY_RSHIFT</I>(pc)<br ALIGN="LEFT"/><I>BINARY_SUBSCR</I>(pc)<br ALIGN="LEFT"/><I>BINARY_SUBTRACT</I>(pc)<br ALIGN="LEFT"/><I>BINARY_XOR</I>(pc)<br ALIGN="LEFT"/><I>BREAK_LOOP</I>(pc)<br ALIGN="LEFT"/><I>BUILD_CLASS</I>(pc)<br ALIGN="LEFT"/><I>BUILD_LIST</I>(pc, count)<br ALIGN="LEFT"/><I>BUILD_MAP</I>(pc, zero)<br ALIGN="LEFT"/><I>BUILD_SLICE</I>(pc, argc)<br ALIGN="LEFT"/><I>BUILD_TUPLE</I>(pc, count)<br ALIGN="LEFT"/><I>CALL_FUNCTION</I>(pc, argc)<br ALIGN="LEFT"/><I>CALL_FUNCTION_KW</I>(pc, argc)<br ALIGN="LEFT"/><I>CALL_FUNCTION_VAR</I>(pc, argc)<br ALIGN="LEFT"/><I>CALL_FUNCTION_VAR_KW</I>(pc, argc)<br ALIGN="LEFT"/><I>COMPARE_OP</I>(pc, opname)<br ALIGN="LEFT"/><I>DELETE_ATTR</I>(pc, namei)<br ALIGN="LEFT"/><I>DELETE_FAST</I>(pc, var_num)<br ALIGN="LEFT"/><I>DELETE_GLOBAL</I>(pc, namei)<br ALIGN="LEFT"/><I>DELETE_NAME</I>(pc, namei)<br ALIGN="LEFT"/><I>DELETE_SLICE_0</I>(pc)<br ALIGN="LEFT"/><I>DELETE_SLICE_1</I>(pc)<br ALIGN="LEFT"/><I>DELETE_SLICE_2</I>(pc)<br ALIGN="LEFT"/><I>DELETE_SLICE_3</I>(pc)<br ALIGN="LEFT"/><I>DELETE_SUBSCR</I>(pc)<br ALIGN="LEFT"/><I>DUP_TOP</I>(pc)<br ALIGN="LEFT"/><I>DUP_TOPX</I>(pc, count)<br ALIGN="LEFT"/><I>END_FINALLY</I>(pc)<br ALIGN="LEFT"/><I>EXEC_STMT</I>(pc)<br ALIGN="LEFT"/><I>EXTENDED_ARG</I>(pc, ext)<br ALIGN="LEFT"/><I>FOR_LOOP</I>(pc, delta)<br ALIGN="LEFT"/><I>IMPORT_FROM</I>(pc, namei)<br ALIGN="LEFT"/><I>IMPORT_NAME</I>(pc, namei)<br ALIGN="LEFT"/><I>IMPORT_STAR</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_ADD</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_AND</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_DIVIDE</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_LSHIFT</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_MODULO</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_MULTIPLY</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_OR</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_POWER</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_RSHIFT</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_SUBTRACT</I>(pc)<br ALIGN="LEFT"/><I>INPLACE_XOR</I>(pc)<br ALIGN="LEFT"/><I>JUMP_ABSOLUTE</I>(pc, target)<br ALIGN="LEFT"/><I>JUMP_FORWARD</I>(pc, delta)<br ALIGN="LEFT"/><I>JUMP_IF_FALSE</I>(pc, delta)<br ALIGN="LEFT"/><I>JUMP_IF_TRUE</I>(pc, delta)<br ALIGN="LEFT"/><I>LOAD_ATTR</I>(pc, namei)<br ALIGN="LEFT"/><I>LOAD_CLOSURE</I>(pc, i)<br ALIGN="LEFT"/><I>LOAD_CONST</I>(pc, consti)<br ALIGN="LEFT"/><I>LOAD_DEREF</I>(pc, i)<br ALIGN="LEFT"/><I>LOAD_FAST</I>(pc, var_num)<br ALIGN="LEFT"/><I>LOAD_GLOBAL</I>(pc, namei)<br ALIGN="LEFT"/><I>LOAD_LOCALS</I>(pc)<br ALIGN="LEFT"/><I>LOAD_NAME</I>(pc, namei)<br ALIGN="LEFT"/><I>MAKE_CLOSURE</I>(pc, argc)<br ALIGN="LEFT"/><I>MAKE_FUNCTION</I>(pc, argc)<br ALIGN="LEFT"/><I>POP_BLOCK</I>(pc)<br ALIGN="LEFT"/><I>POP_TOP</I>(pc)<br ALIGN="LEFT"/><I>PRINT_EXPR</I>(pc)<br ALIGN="LEFT"/><I>PRINT_ITEM</I>(pc)<br ALIGN="LEFT"/><I>PRINT_ITEM_TO</I>(pc)<br ALIGN="LEFT"/><I>PRINT_NEWLINE</I>(pc)<br ALIGN="LEFT"/><I>PRINT_NEWLINE_TO</I>(pc)<br ALIGN="LEFT"/><I>RAISE_VARARGS</I>(pc, argc)<br ALIGN="LEFT"/><I>RETURN_VALUE</I>(pc)<br ALIGN="LEFT"/><I>ROT_FOUR</I>(pc)<br ALIGN="LEFT"/><I>ROT_THREE</I>(pc)<br ALIGN="LEFT"/><I>ROT_TWO</I>(pc)<br ALIGN="LEFT"/><I>SETUP_EXCEPT</I>(pc, delta)<br ALIGN="LEFT"/><I>SETUP_FINALLY</I>(pc, delta)<br ALIGN="LEFT"/><I>SETUP_LOOP</I>(pc, delta)<br ALIGN="LEFT"/><I>SET_LINENO</I>(pc, lineno)<br ALIGN="LEFT"/><I>SLICE_0</I>(pc)<br ALIGN="LEFT"/><I>SLICE_1</I>(pc)<br ALIGN="LEFT"/><I>SLICE_2</I>(pc)<br ALIGN="LEFT"/><I>SLICE_3</I>(pc)<br ALIGN="LEFT"/><I>STOP_CODE</I>(pc)<br ALIGN="LEFT"/><I>STORE_ATTR</I>(pc, namei)<br ALIGN="LEFT"/><I>STORE_DEREF</I>(pc, i)<br ALIGN="LEFT"/><I>STORE_FAST</I>(pc, var_num)<br ALIGN="LEFT"/><I>STORE_GLOBAL</I>(pc, namei)<br ALIGN="LEFT"/><I>STORE_NAME</I>(pc, namei)<br ALIGN="LEFT"/><I>STORE_SLICE_0</I>(pc)<br ALIGN="LEFT"/><I>STORE_SLICE_1</I>(pc)<br ALIGN="LEFT"/><I>STORE_SLICE_2</I>(pc)<br ALIGN="LEFT"/><I>STORE_SLICE_3</I>(pc)<br ALIGN="LEFT"/><I>STORE_SUBSCR</I>(pc)<br ALIGN="LEFT"/><I>UNARY_CONVERT</I>(pc)<br ALIGN="LEFT"/><I>UNARY_INVERT</I>(pc)<br ALIGN="LEFT"/><I>UNARY_NEGATIVE</I>(pc)<br ALIGN="LEFT"/><I>UNARY_NOT</I>(pc)<br ALIGN="LEFT"/><I>UNARY_POSITIVE</I>(pc)<br ALIGN="LEFT"/><I>UNPACK_SEQUENCE</I>(pc, count)<br ALIGN="LEFT"/>cmp_op(opname)<br ALIGN="LEFT"/>evaluate(pc, code)<br ALIGN="LEFT"/>execute(pc, opcode, argument)<br ALIGN="LEFT"/>fetch(pc, code)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._trustregion_ncg.CGSteihaugSubproblem" [color="black", fontcolor="black", label=<{CGSteihaugSubproblem|<br ALIGN="LEFT"/>|solve(trust_radius)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.bytecodecompiler.CXXCoder" [color="black", fontcolor="black", label=<{CXXCoder|codeobject<br ALIGN="LEFT"/>consts<br ALIGN="LEFT"/>forwards : dict<br ALIGN="LEFT"/>function<br ALIGN="LEFT"/>helpers : list<br ALIGN="LEFT"/>name : NoneType<br ALIGN="LEFT"/>rtype<br ALIGN="LEFT"/>signature<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>types<br ALIGN="LEFT"/>used : list<br ALIGN="LEFT"/>|BINARY_ADD(pc)<br ALIGN="LEFT"/>BINARY_DIVIDE(pc)<br ALIGN="LEFT"/>BINARY_MODULO(pc)<br ALIGN="LEFT"/>BINARY_MULTIPLY(pc)<br ALIGN="LEFT"/>BINARY_SUBSCR(pc)<br ALIGN="LEFT"/>BINARY_SUBTRACT(pc)<br ALIGN="LEFT"/>BUILD_TUPLE(pc, count)<br ALIGN="LEFT"/>CALL_FUNCTION(pc, argc)<br ALIGN="LEFT"/>COMPARE_OP(pc, opname)<br ALIGN="LEFT"/>FOR_LOOP(pc, delta)<br ALIGN="LEFT"/>JUMP_ABSOLUTE(pc, target)<br ALIGN="LEFT"/>JUMP_FORWARD(pc, delta)<br ALIGN="LEFT"/>JUMP_IF_FALSE(pc, delta)<br ALIGN="LEFT"/>LOAD_ATTR(pc, namei)<br ALIGN="LEFT"/>LOAD_CONST(pc, consti)<br ALIGN="LEFT"/>LOAD_FAST(pc, var_num)<br ALIGN="LEFT"/>LOAD_GLOBAL(pc, var_num)<br ALIGN="LEFT"/>POP_BLOCK(pc)<br ALIGN="LEFT"/>POP_TOP(pc)<br ALIGN="LEFT"/>PRINT_ITEM(pc)<br ALIGN="LEFT"/>PRINT_NEWLINE(pc)<br ALIGN="LEFT"/>RETURN_VALUE(pc)<br ALIGN="LEFT"/>SETUP_LOOP(pc, delta)<br ALIGN="LEFT"/>SET_LINENO(pc, lineno)<br ALIGN="LEFT"/>STORE_ATTR(pc, namei)<br ALIGN="LEFT"/>STORE_FAST(pc, var_num)<br ALIGN="LEFT"/>STORE_GLOBAL(pc, var_num)<br ALIGN="LEFT"/>STORE_SUBSCR(pc)<br ALIGN="LEFT"/>binop(pc, symbol)<br ALIGN="LEFT"/>codeup(rhs, rhs_type)<br ALIGN="LEFT"/>dedent()<br ALIGN="LEFT"/>emit(s)<br ALIGN="LEFT"/>emit_value(v)<br ALIGN="LEFT"/>evaluate(pc, code)<br ALIGN="LEFT"/>generate()<br ALIGN="LEFT"/>global_info(var_num)<br ALIGN="LEFT"/>indent()<br ALIGN="LEFT"/>multiarg()<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>popTuple()<br ALIGN="LEFT"/>post(pc, action)<br ALIGN="LEFT"/>push(v, t)<br ALIGN="LEFT"/>pushTuple(V, T)<br ALIGN="LEFT"/><I>typedef_by_value</I>(v)<br ALIGN="LEFT"/>unique()<br ALIGN="LEFT"/>wrapped_code()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.cluster.vq.ClusterError" [color="black", fontcolor="red", label=<{ClusterError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.cluster.hierarchy.ClusterNode" [color="black", fontcolor="black", label=<{ClusterNode|count : int<br ALIGN="LEFT"/>dist : int<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>left : NoneType<br ALIGN="LEFT"/>right : NoneType<br ALIGN="LEFT"/>|get_count()<br ALIGN="LEFT"/>get_id()<br ALIGN="LEFT"/>get_left()<br ALIGN="LEFT"/>get_right()<br ALIGN="LEFT"/>is_leaf()<br ALIGN="LEFT"/>pre_order(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.build_tools.CompileError" [color="black", fontcolor="red", label=<{CompileError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.constants.codata.ConstantWarning" [color="black", fontcolor="red", label=<{ConstantWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.odr.odrpack.Data" [color="black", fontcolor="black", label=<{Data|fix : NoneType<br ALIGN="LEFT"/>meta : dict<br ALIGN="LEFT"/>wd : NoneType<br ALIGN="LEFT"/>we : NoneType<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y : NoneType<br ALIGN="LEFT"/>|set_meta()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave._dumb_shelve.DbfilenameShelf" [color="black", fontcolor="black", label=<{DbfilenameShelf|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy._lib._util.DeprecatedImport" [color="black", fontcolor="black", label=<{DeprecatedImport|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.DiagBroyden" [color="black", fontcolor="black", label=<{DiagBroyden|alpha : NoneType<br ALIGN="LEFT"/>d : ndarray<br ALIGN="LEFT"/>|matvec(f)<br ALIGN="LEFT"/>rmatvec(f)<br ALIGN="LEFT"/>rsolve(f, tol)<br ALIGN="LEFT"/>setup(x, F, func)<br ALIGN="LEFT"/>solve(f, tol)<br ALIGN="LEFT"/>todense()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._differentialevolution.DifferentialEvolutionSolver" [color="black", fontcolor="black", label=<{DifferentialEvolutionSolver|args : tuple<br ALIGN="LEFT"/>callback : NoneType<br ALIGN="LEFT"/>cross_over_probability : float<br ALIGN="LEFT"/>disp : bool<br ALIGN="LEFT"/>dither : NoneType, list<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>limits : ndarray<br ALIGN="LEFT"/>maxfun<br ALIGN="LEFT"/>maxiter : int<br ALIGN="LEFT"/>mutation_func<br ALIGN="LEFT"/>polish : bool<br ALIGN="LEFT"/>population : ndarray<br ALIGN="LEFT"/>population_energies<br ALIGN="LEFT"/>random_number_generator : NoneType<br ALIGN="LEFT"/>scale : tuple<br ALIGN="LEFT"/>strategy : str<br ALIGN="LEFT"/>tol : float<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|init_population_lhs()<br ALIGN="LEFT"/>init_population_random()<br ALIGN="LEFT"/>solve()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._trustregion_dogleg.DoglegSubproblem" [color="black", fontcolor="black", label=<{DoglegSubproblem|<br ALIGN="LEFT"/>|cauchy_point()<br ALIGN="LEFT"/>newton_point()<br ALIGN="LEFT"/>solve(trust_radius)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Double" [color="black", fontcolor="black", label=<{Double|checker : str<br ALIGN="LEFT"/>cxxtype : str<br ALIGN="LEFT"/>inbounder : str<br ALIGN="LEFT"/>outbounder : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.DoubleVector" [color="black", fontcolor="black", label=<{DoubleVector|cxxbase : str<br ALIGN="LEFT"/>pybase<br ALIGN="LEFT"/>typecode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Doublematrix" [color="black", fontcolor="black", label=<{Doublematrix|cxxbase : str<br ALIGN="LEFT"/>pybase<br ALIGN="LEFT"/>typecode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.mio5.EmptyStructMarker" [color="black", fontcolor="black", label=<{EmptyStructMarker|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.ExcitingMixing" [color="black", fontcolor="black", label=<{ExcitingMixing|alpha : NoneType<br ALIGN="LEFT"/>alphamax : float<br ALIGN="LEFT"/>beta : NoneType<br ALIGN="LEFT"/>|matvec(f)<br ALIGN="LEFT"/>rmatvec(f)<br ALIGN="LEFT"/>rsolve(f, tol)<br ALIGN="LEFT"/>setup(x, F, func)<br ALIGN="LEFT"/>solve(f, tol)<br ALIGN="LEFT"/>todense()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.ExpFormat" [color="black", fontcolor="black", label=<{ExpFormat|fortran_format<br ALIGN="LEFT"/>min : NoneType<br ALIGN="LEFT"/>python_format<br ALIGN="LEFT"/>repeat : NoneType<br ALIGN="LEFT"/>significand<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|from_number(n, min)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.FitDataError" [color="black", fontcolor="red", label=<{FitDataError|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.FitSolverError" [color="black", fontcolor="red", label=<{FitSolverError|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io._fortran.FortranFile" [color="black", fontcolor="black", label=<{FortranFile|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>read_ints(dtype)<br ALIGN="LEFT"/>read_reals(dtype)<br ALIGN="LEFT"/>read_record(dtype)<br ALIGN="LEFT"/>write_record(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser" [color="black", fontcolor="black", label=<{FortranFormatParser|tokenizer<br ALIGN="LEFT"/>|parse(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_inv_ssq.FractionalMatrixPowerError" [color="black", fontcolor="red", label=<{FractionalMatrixPowerError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.special._testutils.FuncData" [color="black", fontcolor="black", label=<{FuncData|atol : NoneType<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>dataname : NoneType<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>ignore_inf_sign : bool<br ALIGN="LEFT"/>knownfailure : NoneType<br ALIGN="LEFT"/>nan_ok : bool<br ALIGN="LEFT"/>param_columns : tuple<br ALIGN="LEFT"/>param_filter : NoneType, tuple<br ALIGN="LEFT"/>result_columns : NoneType, tuple<br ALIGN="LEFT"/>result_func : NoneType<br ALIGN="LEFT"/>rtol : NoneType<br ALIGN="LEFT"/>vectorized : bool<br ALIGN="LEFT"/>|check(data, dtype)<br ALIGN="LEFT"/>get_tolerances(dtype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy._lib.decorator.FunctionMaker" [color="black", fontcolor="black", label=<{FunctionMaker|defaults : NoneType<br ALIGN="LEFT"/>dict : NoneType<br ALIGN="LEFT"/>doc : NoneType<br ALIGN="LEFT"/>module : NoneType, str<br ALIGN="LEFT"/>name : NoneType, str<br ALIGN="LEFT"/>shortsignature : NoneType, str<br ALIGN="LEFT"/>signature<br ALIGN="LEFT"/>|create(obj, body, evaldict, defaults, doc, module, addsource)<br ALIGN="LEFT"/>make(src_templ, evaldict, addsource)<br ALIGN="LEFT"/>update(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.bytecodecompiler.Function_Descriptor" [color="black", fontcolor="black", label=<{Function_Descriptor|code<br ALIGN="LEFT"/>return_type<br ALIGN="LEFT"/>support : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.GenericBroyden" [color="black", fontcolor="black", label=<{GenericBroyden|alpha : float<br ALIGN="LEFT"/>last_f<br ALIGN="LEFT"/>last_x<br ALIGN="LEFT"/>|setup(x0, f0, func)<br ALIGN="LEFT"/>update(x, f)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing.hb.HBFile" [color="black", fontcolor="black", label=<{HBFile|key<br ALIGN="LEFT"/>storage<br ALIGN="LEFT"/>structure<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|read_matrix()<br ALIGN="LEFT"/>write_matrix(m)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing.hb.HBInfo" [color="black", fontcolor="black", label=<{HBInfo|indices_dtype : int32<br ALIGN="LEFT"/>indices_format<br ALIGN="LEFT"/>indices_nbytes_full<br ALIGN="LEFT"/>indices_nlines<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>mxtype<br ALIGN="LEFT"/>ncols<br ALIGN="LEFT"/>nelementals : int<br ALIGN="LEFT"/>nnon_zeros<br ALIGN="LEFT"/>nrows<br ALIGN="LEFT"/>pointer_dtype : int32<br ALIGN="LEFT"/>pointer_format<br ALIGN="LEFT"/>pointer_nbytes_full<br ALIGN="LEFT"/>pointer_nlines<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>total_nlines<br ALIGN="LEFT"/>values_dtype : float64, int<br ALIGN="LEFT"/>values_format<br ALIGN="LEFT"/>values_nbytes_full<br ALIGN="LEFT"/>values_nlines<br ALIGN="LEFT"/>|dump()<br ALIGN="LEFT"/>from_data(m, title, key, mxtype, fmt)<br ALIGN="LEFT"/>from_file(fid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing.hb.HBMatrixType" [color="black", fontcolor="black", label=<{HBMatrixType|fortran_format<br ALIGN="LEFT"/>storage : str<br ALIGN="LEFT"/>structure<br ALIGN="LEFT"/>value_type<br ALIGN="LEFT"/>|from_fortran(fmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface.IdentityOperator" [color="black", fontcolor="black", label=<{IdentityOperator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.sputils.IndexMixin" [color="black", fontcolor="black", label=<{IndexMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Instance" [color="black", fontcolor="black", label=<{Instance|cxxtype : str<br ALIGN="LEFT"/>prototype<br ALIGN="LEFT"/>|check(s)<br ALIGN="LEFT"/>get_attribute(name)<br ALIGN="LEFT"/>inbound(s)<br ALIGN="LEFT"/>outbound(s)<br ALIGN="LEFT"/>set_attribute(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.IntFormat" [color="black", fontcolor="black", label=<{IntFormat|fortran_format<br ALIGN="LEFT"/>min : NoneType<br ALIGN="LEFT"/>python_format<br ALIGN="LEFT"/>repeat : NoneType<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|from_number(n, min)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Integer" [color="black", fontcolor="black", label=<{Integer|checker : str<br ALIGN="LEFT"/>cxxtype : str<br ALIGN="LEFT"/>inbounder : str<br ALIGN="LEFT"/>outbounder : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.IntegerVector" [color="black", fontcolor="black", label=<{IntegerVector|cxxbase : str<br ALIGN="LEFT"/>pybase<br ALIGN="LEFT"/>typecode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Integermatrix" [color="black", fontcolor="black", label=<{Integermatrix|cxxbase : str<br ALIGN="LEFT"/>pybase<br ALIGN="LEFT"/>typecode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate.quadpack.IntegrationWarning" [color="black", fontcolor="red", label=<{IntegrationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate._ode.IntegratorBase" [color="black", fontcolor="black", label=<{IntegratorBase|handle<br ALIGN="LEFT"/>integrator_classes : list<br ALIGN="LEFT"/>runner : NoneType<br ALIGN="LEFT"/>scalar : float<br ALIGN="LEFT"/>success : NoneType<br ALIGN="LEFT"/>supports_run_relax : NoneType<br ALIGN="LEFT"/>supports_solout : bool<br ALIGN="LEFT"/>supports_step : NoneType<br ALIGN="LEFT"/>|acquire_new_handle()<br ALIGN="LEFT"/>check_handle()<br ALIGN="LEFT"/><I>reset</I>(n, has_jac)<br ALIGN="LEFT"/><I>run</I>(f, jac, y0, t0, t1, f_params, jac_params)<br ALIGN="LEFT"/><I>run_relax</I>(f, jac, y0, t0, t1, f_params, jac_params)<br ALIGN="LEFT"/><I>step</I>(f, jac, y0, t0, t1, f_params, jac_params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.IntegratorConcurrencyError" [color="black", fontcolor="red", label=<{IntegratorConcurrencyError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.InterpolatedUnivariateSpline" [color="black", fontcolor="black", label=<{InterpolatedUnivariateSpline|ext : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.InverseJacobian" [color="black", fontcolor="black", label=<{InverseJacobian|dtype<br ALIGN="LEFT"/>jacobian<br ALIGN="LEFT"/>matvec<br ALIGN="LEFT"/>rmatvec<br ALIGN="LEFT"/>setup<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>update<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack.IterInv" [color="black", fontcolor="black", label=<{IterInv|M<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>ifunc<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>tol : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv" [color="black", fontcolor="black", label=<{IterOpInv|A<br ALIGN="LEFT"/>M<br ALIGN="LEFT"/>OP<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>ifunc<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>sigma<br ALIGN="LEFT"/>tol : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.asjacobian.Jac" [color="black", fontcolor="black", label=<{Jac|x<br ALIGN="LEFT"/>|matvec(v)<br ALIGN="LEFT"/>rmatvec(v)<br ALIGN="LEFT"/>rsolve(v, tol)<br ALIGN="LEFT"/>solve(v, tol)<br ALIGN="LEFT"/>update(x, F)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.nonlin.Jacobian" [color="black", fontcolor="black", label=<{Jacobian|dtype<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|aspreconditioner()<br ALIGN="LEFT"/>setup(x, F, func)<br ALIGN="LEFT"/><I>solve</I>(v, tol)<br ALIGN="LEFT"/><I>update</I>(x, F)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.spatial.kdtree.KDTree" [color="black", fontcolor="black", label=<{KDTree|data : ndarray<br ALIGN="LEFT"/>leafsize : int<br ALIGN="LEFT"/>m<br ALIGN="LEFT"/>maxes : ndarray<br ALIGN="LEFT"/>mins : ndarray<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>tree<br ALIGN="LEFT"/>|count_neighbors(other, r, p)<br ALIGN="LEFT"/>query(x, k, eps, p, distance_upper_bound)<br ALIGN="LEFT"/>query_ball_point(x, r, p, eps)<br ALIGN="LEFT"/>query_ball_tree(other, r, p, eps)<br ALIGN="LEFT"/>query_pairs(r, p, eps)<br ALIGN="LEFT"/>sparse_distance_matrix(other, max_distance, p)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.polyint.KroghInterpolator" [color="black", fontcolor="black", label=<{KroghInterpolator|c : ndarray<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>xi : ndarray<br ALIGN="LEFT"/>yi : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.KrylovJacobian" [color="black", fontcolor="black", label=<{KrylovJacobian|f0<br ALIGN="LEFT"/>method<br ALIGN="LEFT"/>method_kw : dict<br ALIGN="LEFT"/>omega<br ALIGN="LEFT"/>op<br ALIGN="LEFT"/>preconditioner : NoneType<br ALIGN="LEFT"/>rdiff : NoneType<br ALIGN="LEFT"/>x0<br ALIGN="LEFT"/>|matvec(v)<br ALIGN="LEFT"/>setup(x, f, func)<br ALIGN="LEFT"/>solve(rhs, tol)<br ALIGN="LEFT"/>update(x, f)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.LSQBivariateSpline" [color="black", fontcolor="black", label=<{LSQBivariateSpline|degrees : tuple<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.LSQSphereBivariateSpline" [color="black", fontcolor="black", label=<{LSQSphereBivariateSpline|degrees : tuple<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.LSQUnivariateSpline" [color="black", fontcolor="black", label=<{LSQUnivariateSpline|ext : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo" [color="black", fontcolor="black", label=<{LazyOperatorNormInfo|<br ALIGN="LEFT"/>|alpha(p)<br ALIGN="LEFT"/>d(p)<br ALIGN="LEFT"/>onenorm()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.lbfgsb.LbfgsInvHessProduct" [color="black", fontcolor="black", label=<{LbfgsInvHessProduct|n_corrs<br ALIGN="LEFT"/>rho<br ALIGN="LEFT"/>sk<br ALIGN="LEFT"/>yk<br ALIGN="LEFT"/>|todense()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing.hb.LineOverflow" [color="black", fontcolor="red", label=<{LineOverflow|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.linesearch.LineSearchWarning" [color="black", fontcolor="red", label=<{LineSearchWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.LinearMixing" [color="black", fontcolor="black", label=<{LinearMixing|alpha : NoneType<br ALIGN="LEFT"/>|matvec(f)<br ALIGN="LEFT"/>rmatvec(f)<br ALIGN="LEFT"/>rsolve(f, tol)<br ALIGN="LEFT"/>solve(f, tol)<br ALIGN="LEFT"/>todense()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface.LinearOperator" [color="black", fontcolor="black", label=<{LinearOperator|H<br ALIGN="LEFT"/>T<br ALIGN="LEFT"/>dtype : NoneType, dtype<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|adjoint()<br ALIGN="LEFT"/>dot(x)<br ALIGN="LEFT"/>matmat(X)<br ALIGN="LEFT"/>matvec(x)<br ALIGN="LEFT"/>rmatvec(x)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_inv_ssq.LogmError" [color="black", fontcolor="red", label=<{LogmError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_inv_ssq.LogmExactlySingularWarning" [color="black", fontcolor="red", label=<{LogmExactlySingularWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_inv_ssq.LogmNearlySingularWarning" [color="black", fontcolor="red", label=<{LogmNearlySingularWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_inv_ssq.LogmRankWarning" [color="black", fontcolor="red", label=<{LogmRankWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.LongVector" [color="black", fontcolor="black", label=<{LongVector|cxxbase : str<br ALIGN="LEFT"/>pybase<br ALIGN="LEFT"/>typecode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Longmatrix" [color="black", fontcolor="black", label=<{Longmatrix|cxxbase : str<br ALIGN="LEFT"/>pybase<br ALIGN="LEFT"/>typecode : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.LowRankMatrix" [color="black", fontcolor="black", label=<{LowRankMatrix|alpha : NoneType<br ALIGN="LEFT"/>collapsed : NoneType, ndarray<br ALIGN="LEFT"/>cs : NoneType, list<br ALIGN="LEFT"/>ds : NoneType, list<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>|append(c, d)<br ALIGN="LEFT"/>collapse()<br ALIGN="LEFT"/>matvec(v)<br ALIGN="LEFT"/>restart_reduce(rank)<br ALIGN="LEFT"/>rmatvec(v)<br ALIGN="LEFT"/>rsolve(v, tol)<br ALIGN="LEFT"/>simple_reduce(rank)<br ALIGN="LEFT"/>solve(v, tol)<br ALIGN="LEFT"/>svd_reduce(max_rank, to_retain)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack.LuInv" [color="black", fontcolor="black", label=<{LuInv|M_lu : tuple<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.mmio.MMFile" [color="black", fontcolor="black", label=<{MMFile|DTYPES_BY_FIELD : dict<br ALIGN="LEFT"/>FIELD_COMPLEX : str<br ALIGN="LEFT"/>FIELD_INTEGER : str<br ALIGN="LEFT"/>FIELD_PATTERN : str<br ALIGN="LEFT"/>FIELD_REAL : str<br ALIGN="LEFT"/>FIELD_VALUES : tuple<br ALIGN="LEFT"/>FORMAT_ARRAY : str<br ALIGN="LEFT"/>FORMAT_COORDINATE : str<br ALIGN="LEFT"/>FORMAT_VALUES : tuple<br ALIGN="LEFT"/>SYMMETRY_GENERAL : str<br ALIGN="LEFT"/>SYMMETRY_HERMITIAN : str<br ALIGN="LEFT"/>SYMMETRY_SKEW_SYMMETRIC : str<br ALIGN="LEFT"/>SYMMETRY_SYMMETRIC : str<br ALIGN="LEFT"/>SYMMETRY_VALUES : tuple<br ALIGN="LEFT"/>cols<br ALIGN="LEFT"/>entries<br ALIGN="LEFT"/>field<br ALIGN="LEFT"/>format<br ALIGN="LEFT"/>has_symmetry<br ALIGN="LEFT"/>rows<br ALIGN="LEFT"/>symmetry<br ALIGN="LEFT"/>|info(source)<br ALIGN="LEFT"/>read(source)<br ALIGN="LEFT"/><I>reader</I>()<br ALIGN="LEFT"/>write(target, a, comment, field, precision)<br ALIGN="LEFT"/><I>writer</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing.hb.MalformedHeader" [color="black", fontcolor="red", label=<{MalformedHeader|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.mio4.MatFile4Reader" [color="black", fontcolor="black", label=<{MatFile4Reader|dtypes : dict<br ALIGN="LEFT"/>|get_variables(variable_names)<br ALIGN="LEFT"/>guess_byte_order()<br ALIGN="LEFT"/>initialize_read()<br ALIGN="LEFT"/>list_variables()<br ALIGN="LEFT"/>read_var_array(header, process)<br ALIGN="LEFT"/>read_var_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio4.MatFile4Writer" [color="black", fontcolor="black", label=<{MatFile4Writer|file_stream<br ALIGN="LEFT"/>oned_as : NoneType, str<br ALIGN="LEFT"/>|put_variables(mdict, write_header)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio5.MatFile5Reader" [color="black", fontcolor="black", label=<{MatFile5Reader|uint16_codec : NoneType<br ALIGN="LEFT"/>|get_variables(variable_names)<br ALIGN="LEFT"/>guess_byte_order()<br ALIGN="LEFT"/>initialize_read()<br ALIGN="LEFT"/>list_variables()<br ALIGN="LEFT"/>read_file_header()<br ALIGN="LEFT"/>read_var_array(header, process)<br ALIGN="LEFT"/>read_var_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio5.MatFile5Writer" [color="black", fontcolor="black", label=<{MatFile5Writer|do_compression : bool<br ALIGN="LEFT"/>file_stream<br ALIGN="LEFT"/>global_vars : NoneType, list<br ALIGN="LEFT"/>long_field_names : bool<br ALIGN="LEFT"/>oned_as : str<br ALIGN="LEFT"/>unicode_strings : bool<br ALIGN="LEFT"/>|put_variables(mdict, write_header)<br ALIGN="LEFT"/>write_file_header()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.miobase.MatFileReader" [color="black", fontcolor="black", label=<{MatFileReader|byte_order : NoneType, str<br ALIGN="LEFT"/>chars_as_strings : bool<br ALIGN="LEFT"/>dtypes : dict<br ALIGN="LEFT"/>mat_dtype : bool<br ALIGN="LEFT"/>mat_stream<br ALIGN="LEFT"/>squeeze_me : bool<br ALIGN="LEFT"/>struct_as_record : bool<br ALIGN="LEFT"/>verify_compressed_data_integrity : bool<br ALIGN="LEFT"/>|end_of_stream()<br ALIGN="LEFT"/>guess_byte_order()<br ALIGN="LEFT"/>set_matlab_compatible()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.miobase.MatReadError" [color="black", fontcolor="red", label=<{MatReadError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.miobase.MatReadWarning" [color="black", fontcolor="red", label=<{MatReadWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.miobase.MatVarReader" [color="black", fontcolor="black", label=<{MatVarReader|<br ALIGN="LEFT"/>|<I>array_from_header</I>(header)<br ALIGN="LEFT"/><I>read_header</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.miobase.MatWriteError" [color="black", fontcolor="red", label=<{MatWriteError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.mio5_params.MatlabFunction" [color="black", fontcolor="black", label=<{MatlabFunction|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.mio5_params.MatlabObject" [color="black", fontcolor="black", label=<{MatlabObject|classname<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.mio5_params.MatlabOpaque" [color="black", fontcolor="black", label=<{MatlabOpaque|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface.MatrixLinearOperator" [color="black", fontcolor="black", label=<{MatrixLinearOperator|A<br ALIGN="LEFT"/>args : tuple<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.matfuncs.MatrixPowerOperator" [color="black", fontcolor="black", label=<{MatrixPowerOperator|T<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.dsolve.linsolve.MatrixRankWarning" [color="black", fontcolor="red", label=<{MatrixRankWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.optimize.MemoizeJac" [color="black", fontcolor="black", label=<{MemoizeJac|fun<br ALIGN="LEFT"/>jac : NoneType<br ALIGN="LEFT"/>x : NoneType<br ALIGN="LEFT"/>|derivative(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.arff.arffread.MetaData" [color="black", fontcolor="black", label=<{MetaData|name<br ALIGN="LEFT"/>|names()<br ALIGN="LEFT"/>types()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._basinhopping.Metropolis" [color="black", fontcolor="black", label=<{Metropolis|beta<br ALIGN="LEFT"/>|accept_reject(energy_new, energy_old)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.build_tools.Mingw32CCompiler" [color="black", fontcolor="black", label=<{Mingw32CCompiler|compiler_cxx : list<br ALIGN="LEFT"/>compiler_type : str<br ALIGN="LEFT"/>dll_libraries : list<br ALIGN="LEFT"/>gcc_version : StrictVersion<br ALIGN="LEFT"/>linker : str<br ALIGN="LEFT"/>|link(target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols, debug, extra_preargs, extra_postargs, build_temp, target_lang)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._basinhopping.MinimizerWrapper" [color="black", fontcolor="black", label=<{MinimizerWrapper|func : NoneType<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>minimizer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.odr.odrpack.Model" [color="black", fontcolor="black", label=<{Model|estimate : NoneType<br ALIGN="LEFT"/>extra_args : NoneType, tuple<br ALIGN="LEFT"/>fcn<br ALIGN="LEFT"/>fjacb : NoneType<br ALIGN="LEFT"/>fjacd : NoneType<br ALIGN="LEFT"/>implicit : int<br ALIGN="LEFT"/>meta : NoneType<br ALIGN="LEFT"/>|set_meta()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.ndgriddata.NearestNDInterpolator" [color="black", fontcolor="black", label=<{NearestNDInterpolator|tree<br ALIGN="LEFT"/>values<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.nonlin.NoConvergence" [color="black", fontcolor="red", label=<{NoConvergence|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy._lib._version.NumpyVersion" [color="black", fontcolor="black", label=<{NumpyVersion|bugfix<br ALIGN="LEFT"/>is_devversion<br ALIGN="LEFT"/>major<br ALIGN="LEFT"/>minor<br ALIGN="LEFT"/>pre_release : str<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>vstring<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate.odepack.ODEintWarning" [color="black", fontcolor="red", label=<{ODEintWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.odr.odrpack.ODR" [color="black", fontcolor="black", label=<{ODR|beta0<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>delta0 : NoneType<br ALIGN="LEFT"/>errfile : NoneType<br ALIGN="LEFT"/>ifixb : NoneType<br ALIGN="LEFT"/>ifixx : NoneType<br ALIGN="LEFT"/>iprint : NoneType, int<br ALIGN="LEFT"/>iwork : NoneType<br ALIGN="LEFT"/>job : NoneType, int<br ALIGN="LEFT"/>maxit : NoneType<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>ndigit : NoneType<br ALIGN="LEFT"/>output : NoneType<br ALIGN="LEFT"/>partol : NoneType<br ALIGN="LEFT"/>rptfile : NoneType<br ALIGN="LEFT"/>sclb : NoneType<br ALIGN="LEFT"/>scld : NoneType<br ALIGN="LEFT"/>sstol : NoneType<br ALIGN="LEFT"/>stpb : NoneType<br ALIGN="LEFT"/>stpd : NoneType<br ALIGN="LEFT"/>taufac : NoneType<br ALIGN="LEFT"/>work : NoneType, ndarray<br ALIGN="LEFT"/>|restart(iter)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>set_iprint(init, so_init, iter, so_iter, iter_step, final, so_final)<br ALIGN="LEFT"/>set_job(fit_type, deriv, var_calc, del_init, restart)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.idl.ObjectPointer" [color="black", fontcolor="black", label=<{ObjectPointer|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.optimize.OptimizeResult" [color="black", fontcolor="black", label=<{OptimizeResult|fun<br ALIGN="LEFT"/>jac<br ALIGN="LEFT"/>message : list<br ALIGN="LEFT"/>minimization_failures : int<br ALIGN="LEFT"/>nfev<br ALIGN="LEFT"/>nhev<br ALIGN="LEFT"/>nit<br ALIGN="LEFT"/>njev<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.optimize.OptimizeWarning" [color="black", fontcolor="red", label=<{OptimizeWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.odr.odrpack.Output" [color="black", fontcolor="black", label=<{Output|beta<br ALIGN="LEFT"/>cov_beta<br ALIGN="LEFT"/>sd_beta<br ALIGN="LEFT"/>stopreason : list<br ALIGN="LEFT"/>|pprint()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.interpolate.PPoly" [color="black", fontcolor="black", label=<{PPoly|<br ALIGN="LEFT"/>|antiderivative(nu)<br ALIGN="LEFT"/>derivative(nu)<br ALIGN="LEFT"/>from_bernstein_basis(bp, extrapolate)<br ALIGN="LEFT"/>from_spline(tck, extrapolate)<br ALIGN="LEFT"/>integrate(a, b, extrapolate)<br ALIGN="LEFT"/>roots(discontinuity, extrapolate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.arff.arffread.ParseArffError" [color="black", fontcolor="red", label=<{ParseArffError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate._monotone.PchipInterpolator" [color="black", fontcolor="black", label=<{PchipInterpolator|axis<br ALIGN="LEFT"/>|roots()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.polyint.PiecewisePolynomial" [color="black", fontcolor="black", label=<{PiecewisePolynomial|direction : NoneType<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>orders : list<br ALIGN="LEFT"/>polynomials : list<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>xi : list<br ALIGN="LEFT"/>yi : list<br ALIGN="LEFT"/>|append(xi, yi, order)<br ALIGN="LEFT"/>extend(xi, yi, orders)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.idl.Pointer" [color="black", fontcolor="black", label=<{Pointer|index<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.lbfgsb.Problem" [color="black", fontcolor="black", label=<{Problem|<br ALIGN="LEFT"/>|fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.matfuncs.ProductOperator" [color="black", fontcolor="black", label=<{ProductOperator|T<br ALIGN="LEFT"/>dtype : NoneType, dtype<br ALIGN="LEFT"/>ndim<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Python2CXX" [color="black", fontcolor="black", label=<{Python2CXX|arg_specs : list<br ALIGN="LEFT"/>customize<br ALIGN="LEFT"/>|function_by_signature(signature)<br ALIGN="LEFT"/>function_code()<br ALIGN="LEFT"/>python_function_definition_code()<br ALIGN="LEFT"/>typedef_by_value(v)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._basinhopping.RandomDisplacement" [color="black", fontcolor="black", label=<{RandomDisplacement|stepsize : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.rbf.Rbf" [color="black", fontcolor="black", label=<{Rbf|A<br ALIGN="LEFT"/>N<br ALIGN="LEFT"/>di : ndarray<br ALIGN="LEFT"/>epsilon<br ALIGN="LEFT"/>function<br ALIGN="LEFT"/>nodes<br ALIGN="LEFT"/>norm<br ALIGN="LEFT"/>smooth<br ALIGN="LEFT"/>xi : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.odr.odrpack.RealData" [color="black", fontcolor="black", label=<{RealData|covx : NoneType<br ALIGN="LEFT"/>covy : NoneType<br ALIGN="LEFT"/>fix : NoneType<br ALIGN="LEFT"/>meta : dict<br ALIGN="LEFT"/>sx : NoneType<br ALIGN="LEFT"/>sy : NoneType<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.RectBivariateSpline" [color="black", fontcolor="black", label=<{RectBivariateSpline|degrees : tuple<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.RectSphereBivariateSpline" [color="black", fontcolor="black", label=<{RectSphereBivariateSpline|degrees : tuple<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.spatial.kdtree.Rectangle" [color="black", fontcolor="black", label=<{Rectangle|m<br ALIGN="LEFT"/>maxes<br ALIGN="LEFT"/>mins<br ALIGN="LEFT"/>|max_distance_point(x, p)<br ALIGN="LEFT"/>max_distance_rectangle(other, p)<br ALIGN="LEFT"/>min_distance_point(x, p)<br ALIGN="LEFT"/>min_distance_rectangle(other, p)<br ALIGN="LEFT"/>split(d, split)<br ALIGN="LEFT"/>volume()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy._lib._gcutils.ReferenceError" [color="black", fontcolor="red", label=<{ReferenceError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.interpolate.RegularGridInterpolator" [color="black", fontcolor="black", label=<{RegularGridInterpolator|bounds_error : bool<br ALIGN="LEFT"/>fill_value<br ALIGN="LEFT"/>grid : tuple<br ALIGN="LEFT"/>method : str<br ALIGN="LEFT"/>values : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.optimize.zeros.RootResults" [color="black", fontcolor="black", label=<{RootResults|converged<br ALIGN="LEFT"/>flag<br ALIGN="LEFT"/>function_calls<br ALIGN="LEFT"/>iterations<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.SmoothBivariateSpline" [color="black", fontcolor="black", label=<{SmoothBivariateSpline|degrees : tuple<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.SmoothSphereBivariateSpline" [color="black", fontcolor="black", label=<{SmoothSphereBivariateSpline|degrees : tuple<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack.SpLuInv" [color="black", fontcolor="black", label=<{SpLuInv|M_lu<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>isreal<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.base.SparseEfficiencyWarning" [color="black", fontcolor="red", label=<{SparseEfficiencyWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.base.SparseFormatWarning" [color="black", fontcolor="red", label=<{SparseFormatWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.base.SparseWarning" [color="black", fontcolor="red", label=<{SparseWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.special.basic.SpecialFunctionWarning" [color="black", fontcolor="red", label=<{SpecialFunctionWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.SphereBivariateSpline" [color="black", fontcolor="black", label=<{SphereBivariateSpline|<br ALIGN="LEFT"/>|ev(theta, phi, dtheta, dphi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_sqrtm.SqrtmError" [color="black", fontcolor="red", label=<{SqrtmError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.signal.ltisys.StateSpace" [color="black", fontcolor="black", label=<{StateSpace|A<br ALIGN="LEFT"/>B<br ALIGN="LEFT"/>C<br ALIGN="LEFT"/>D<br ALIGN="LEFT"/>inputs<br ALIGN="LEFT"/>outputs<br ALIGN="LEFT"/>|to_ss()<br ALIGN="LEFT"/>to_tf()<br ALIGN="LEFT"/>to_zpk()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._basinhopping.Storage" [color="black", fontcolor="black", label=<{Storage|f<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|get_lowest()<br ALIGN="LEFT"/>update(x, f)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.String" [color="black", fontcolor="black", label=<{String|checker : str<br ALIGN="LEFT"/>cxxtype : str<br ALIGN="LEFT"/>inbounder : str<br ALIGN="LEFT"/>outbounder : str<br ALIGN="LEFT"/>|literalizer(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.nonlin.TerminationCondition" [color="black", fontcolor="black", label=<{TerminationCondition|f0_norm : NoneType<br ALIGN="LEFT"/>f_rtol : NoneType<br ALIGN="LEFT"/>f_tol : NoneType<br ALIGN="LEFT"/>iter : NoneType<br ALIGN="LEFT"/>iteration : int<br ALIGN="LEFT"/>norm<br ALIGN="LEFT"/>x_rtol : NoneType<br ALIGN="LEFT"/>x_tol : NoneType<br ALIGN="LEFT"/>|check(f, x, dx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.Token" [color="black", fontcolor="black", label=<{Token|pos<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.Tokenizer" [color="black", fontcolor="black", label=<{Tokenizer|curpos : int<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>len<br ALIGN="LEFT"/>res<br ALIGN="LEFT"/>tokens : list<br ALIGN="LEFT"/>|input(s)<br ALIGN="LEFT"/>next_token()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.signal.ltisys.TransferFunction" [color="black", fontcolor="black", label=<{TransferFunction|den<br ALIGN="LEFT"/>inputs : int<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>outputs : int<br ALIGN="LEFT"/>|to_ss()<br ALIGN="LEFT"/>to_tf()<br ALIGN="LEFT"/>to_zpk()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.bytecodecompiler.Type_Descriptor" [color="black", fontcolor="black", label=<{Type_Descriptor|module_init_code : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.special.generate_ufuncs.Ufunc" [color="black", fontcolor="black", label=<{Ufunc|doc<br ALIGN="LEFT"/>function_name_overrides : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>signatures<br ALIGN="LEFT"/>|cython_func_name(c_name, specialized, prefix, override)<br ALIGN="LEFT"/>generate(all_loops)<br ALIGN="LEFT"/>get_prototypes()<br ALIGN="LEFT"/>parse_all(ufunc_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2.UnivariateSpline" [color="black", fontcolor="black", label=<{UnivariateSpline|ext : int<br ALIGN="LEFT"/>|antiderivative(n)<br ALIGN="LEFT"/>derivative(n)<br ALIGN="LEFT"/>derivatives(x)<br ALIGN="LEFT"/>get_coeffs()<br ALIGN="LEFT"/>get_knots()<br ALIGN="LEFT"/>get_residual()<br ALIGN="LEFT"/>integral(a, b)<br ALIGN="LEFT"/>roots()<br ALIGN="LEFT"/>set_smoothing_factor(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio4.VarHeader4" [color="black", fontcolor="black", label=<{VarHeader4|dims<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>is_complex<br ALIGN="LEFT"/>is_global : bool<br ALIGN="LEFT"/>is_logical : bool<br ALIGN="LEFT"/>mclass<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.matlab.mio4.VarReader4" [color="black", fontcolor="black", label=<{VarReader4|chars_as_strings<br ALIGN="LEFT"/>dtypes<br ALIGN="LEFT"/>file_reader<br ALIGN="LEFT"/>mat_stream<br ALIGN="LEFT"/>squeeze_me<br ALIGN="LEFT"/>|array_from_header(hdr, process)<br ALIGN="LEFT"/>read_char_array(hdr)<br ALIGN="LEFT"/>read_full_array(hdr)<br ALIGN="LEFT"/>read_header()<br ALIGN="LEFT"/>read_sparse_array(hdr)<br ALIGN="LEFT"/>read_sub_array(hdr, copy)<br ALIGN="LEFT"/>shape_from_header(hdr)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio4.VarWriter4" [color="black", fontcolor="black", label=<{VarWriter4|file_stream<br ALIGN="LEFT"/>oned_as<br ALIGN="LEFT"/>|write(arr, name)<br ALIGN="LEFT"/>write_bytes(arr)<br ALIGN="LEFT"/>write_char(arr, name)<br ALIGN="LEFT"/>write_header(name, shape, P, T, imagf)<br ALIGN="LEFT"/>write_numeric(arr, name)<br ALIGN="LEFT"/>write_sparse(arr, name)<br ALIGN="LEFT"/>write_string(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio5.VarWriter5" [color="black", fontcolor="black", label=<{VarWriter5|file_stream : BytesIO<br ALIGN="LEFT"/>long_field_names<br ALIGN="LEFT"/>mat_tag : ndarray<br ALIGN="LEFT"/>oned_as<br ALIGN="LEFT"/>unicode_strings<br ALIGN="LEFT"/>|update_matrix_tag(start_pos)<br ALIGN="LEFT"/>write(arr)<br ALIGN="LEFT"/>write_bytes(arr)<br ALIGN="LEFT"/>write_cells(arr)<br ALIGN="LEFT"/>write_char(arr, codec)<br ALIGN="LEFT"/>write_element(arr, mdtype)<br ALIGN="LEFT"/>write_empty_struct()<br ALIGN="LEFT"/>write_header(shape, mclass, is_complex, is_logical, nzmax)<br ALIGN="LEFT"/>write_numeric(arr)<br ALIGN="LEFT"/>write_object(arr)<br ALIGN="LEFT"/>write_regular_element(arr, mdtype, byte_count)<br ALIGN="LEFT"/>write_smalldata_element(arr, mdtype, byte_count)<br ALIGN="LEFT"/>write_sparse(arr)<br ALIGN="LEFT"/>write_string(s)<br ALIGN="LEFT"/>write_struct(arr)<br ALIGN="LEFT"/>write_top(arr, name, is_global)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.Vector" [color="black", fontcolor="black", label=<{Vector|cxxtype : str<br ALIGN="LEFT"/>dims : int<br ALIGN="LEFT"/>inbounder : str<br ALIGN="LEFT"/>module_init_code : str<br ALIGN="LEFT"/>outbounder : str<br ALIGN="LEFT"/>owned : int<br ALIGN="LEFT"/>prerequisites : list<br ALIGN="LEFT"/>refcount : int<br ALIGN="LEFT"/>|check(s)<br ALIGN="LEFT"/>getitem(A, v, t)<br ALIGN="LEFT"/>inbound(s)<br ALIGN="LEFT"/>outbound(s)<br ALIGN="LEFT"/>setitem(A, v, t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.wavfile.WavFileWarning" [color="black", fontcolor="red", label=<{WavFileWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy._lib.six.X" [color="black", fontcolor="black", label=<{X|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.XRange" [color="black", fontcolor="black", label=<{XRange|cxxtype : str<br ALIGN="LEFT"/>prerequisites : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.signal.ltisys.ZerosPolesGain" [color="black", fontcolor="black", label=<{ZerosPolesGain|gain<br ALIGN="LEFT"/>inputs : int<br ALIGN="LEFT"/>outputs : int<br ALIGN="LEFT"/>poles<br ALIGN="LEFT"/>zeros<br ALIGN="LEFT"/>|to_ss()<br ALIGN="LEFT"/>to_tf()<br ALIGN="LEFT"/>to_zpk()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface._AdjointMatrixOperator" [color="black", fontcolor="black", label=<{_AdjointMatrixOperator|A<br ALIGN="LEFT"/>args : tuple<br ALIGN="LEFT"/>dtype<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack._ArpackParams" [color="black", fontcolor="black", label=<{_ArpackParams|converged : bool<br ALIGN="LEFT"/>ido : int<br ALIGN="LEFT"/>info : int<br ALIGN="LEFT"/>iparam : ndarray<br ALIGN="LEFT"/>k<br ALIGN="LEFT"/>maxiter : NoneType<br ALIGN="LEFT"/>mode : int<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>ncv<br ALIGN="LEFT"/>resid : ndarray<br ALIGN="LEFT"/>sigma : int<br ALIGN="LEFT"/>tol : int<br ALIGN="LEFT"/>tp<br ALIGN="LEFT"/>v : ndarray<br ALIGN="LEFT"/>which : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.fitpack2._BivariateSplineBase" [color="black", fontcolor="black", label=<{_BivariateSplineBase|<br ALIGN="LEFT"/>|get_coeffs()<br ALIGN="LEFT"/>get_knots()<br ALIGN="LEFT"/>get_residual()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface._CustomLinearOperator" [color="black", fontcolor="black", label=<{_CustomLinearOperator|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave._dumbdbm_patched._Database" [color="black", fontcolor="black", label=<{_Database|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>has_key(key)<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.matfuncs._ExpmPadeHelper" [color="black", fontcolor="black", label=<{_ExpmPadeHelper|A<br ALIGN="LEFT"/>A10<br ALIGN="LEFT"/>A2<br ALIGN="LEFT"/>A4<br ALIGN="LEFT"/>A6<br ALIGN="LEFT"/>A8<br ALIGN="LEFT"/>d10_loose<br ALIGN="LEFT"/>d10_tight<br ALIGN="LEFT"/>d4_loose<br ALIGN="LEFT"/>d4_tight<br ALIGN="LEFT"/>d6_loose<br ALIGN="LEFT"/>d6_tight<br ALIGN="LEFT"/>d8_loose<br ALIGN="LEFT"/>d8_tight<br ALIGN="LEFT"/>ident<br ALIGN="LEFT"/>structure : NoneType<br ALIGN="LEFT"/>use_exact_onenorm : bool<br ALIGN="LEFT"/>|pade13_scaled(s)<br ALIGN="LEFT"/>pade3()<br ALIGN="LEFT"/>pade5()<br ALIGN="LEFT"/>pade7()<br ALIGN="LEFT"/>pade9()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.linalg._testutils._FakeMatrix" [color="black", fontcolor="black", label=<{_FakeMatrix|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.linalg._testutils._FakeMatrix2" [color="black", fontcolor="black", label=<{_FakeMatrix2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.polyint._Interpolator1D" [color="black", fontcolor="black", label=<{_Interpolator1D|dtype : NoneType, complex128, float64<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.polyint._Interpolator1DWithDerivatives" [color="black", fontcolor="black", label=<{_Interpolator1DWithDerivatives|<br ALIGN="LEFT"/>|derivative(x, der)<br ALIGN="LEFT"/>derivatives(x, der)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize.optimize._LineSearchError" [color="black", fontcolor="red", label=<{_LineSearchError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator" [color="black", fontcolor="black", label=<{_MatrixM1PowerOperator|ndim<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate.quadpack._NQuad" [color="black", fontcolor="black", label=<{_NQuad|abserr : int<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>maxdepth<br ALIGN="LEFT"/>opts<br ALIGN="LEFT"/>ranges<br ALIGN="LEFT"/>|integrate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.optimize._spectral._NoConvergence" [color="black", fontcolor="red", label=<{_NoConvergence|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate.quadpack._OptFunc" [color="black", fontcolor="black", label=<{_OptFunc|opt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.interpolate._PPolyBase" [color="black", fontcolor="black", label=<{_PPolyBase|axis : int<br ALIGN="LEFT"/>c : ndarray<br ALIGN="LEFT"/>extrapolate : NoneType, bool<br ALIGN="LEFT"/>x : matrix, ndarray<br ALIGN="LEFT"/>|construct_fast(c, x, extrapolate, axis)<br ALIGN="LEFT"/>extend(c, x, right)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate._PSD" [color="black", fontcolor="black", label=<{_PSD|U<br ALIGN="LEFT"/>log_pdet : ndarray<br ALIGN="LEFT"/>pinv<br ALIGN="LEFT"/>rank<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface._PowerLinearOperator" [color="black", fontcolor="black", label=<{_PowerLinearOperator|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface._ProductLinearOperator" [color="black", fontcolor="black", label=<{_ProductLinearOperator|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate.quadpack._RangeFunc" [color="black", fontcolor="black", label=<{_RangeFunc|range_<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface._ScaledLinearOperator" [color="black", fontcolor="black", label=<{_ScaledLinearOperator|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.interface._SumLinearOperator" [color="black", fontcolor="black", label=<{_SumLinearOperator|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack._SymmetricArpackParams" [color="black", fontcolor="black", label=<{_SymmetricArpackParams|A_matvec<br ALIGN="LEFT"/>B : NoneType<br ALIGN="LEFT"/>OP : NoneType<br ALIGN="LEFT"/>OPa : NoneType<br ALIGN="LEFT"/>OPb<br ALIGN="LEFT"/>bmat : str<br ALIGN="LEFT"/>converged : bool<br ALIGN="LEFT"/>extract_infodict<br ALIGN="LEFT"/>ido<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>iparam<br ALIGN="LEFT"/>ipntr : ndarray<br ALIGN="LEFT"/>iterate_infodict<br ALIGN="LEFT"/>resid<br ALIGN="LEFT"/>tol<br ALIGN="LEFT"/>v<br ALIGN="LEFT"/>workd : ndarray<br ALIGN="LEFT"/>workl : ndarray<br ALIGN="LEFT"/>|extract(return_eigenvectors)<br ALIGN="LEFT"/>iterate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.linalg.eigen.arpack.arpack._UnsymmetricArpackParams" [color="black", fontcolor="black", label=<{_UnsymmetricArpackParams|B : NoneType<br ALIGN="LEFT"/>OP : NoneType<br ALIGN="LEFT"/>OPa : NoneType<br ALIGN="LEFT"/>OPb<br ALIGN="LEFT"/>bmat : str<br ALIGN="LEFT"/>converged : bool<br ALIGN="LEFT"/>extract_infodict<br ALIGN="LEFT"/>ido<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>iparam<br ALIGN="LEFT"/>ipntr : ndarray<br ALIGN="LEFT"/>iterate_infodict<br ALIGN="LEFT"/>matvec<br ALIGN="LEFT"/>resid<br ALIGN="LEFT"/>rwork : NoneType, ndarray<br ALIGN="LEFT"/>tol<br ALIGN="LEFT"/>v<br ALIGN="LEFT"/>workd : ndarray<br ALIGN="LEFT"/>workl : ndarray<br ALIGN="LEFT"/>|extract(return_eigenvectors)<br ALIGN="LEFT"/>iterate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.bytecodecompiler.__Descriptor" [color="black", fontcolor="black", label=<{__Descriptor|prerequisites : list<br ALIGN="LEFT"/>refcount : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.compressed._cs_matrix" [color="black", fontcolor="black", label=<{_cs_matrix|data : ndarray<br ALIGN="LEFT"/>has_canonical_format : property<br ALIGN="LEFT"/>has_sorted_indices : property<br ALIGN="LEFT"/>indices : ndarray<br ALIGN="LEFT"/>indptr : ndarray<br ALIGN="LEFT"/>nnz : property<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>|check_format(full_check)<br ALIGN="LEFT"/>diagonal()<br ALIGN="LEFT"/>eliminate_zeros()<br ALIGN="LEFT"/>getnnz(axis)<br ALIGN="LEFT"/>maximum(other)<br ALIGN="LEFT"/>minimum(other)<br ALIGN="LEFT"/>multiply(other)<br ALIGN="LEFT"/>prune()<br ALIGN="LEFT"/>sort_indices()<br ALIGN="LEFT"/>sorted_indices()<br ALIGN="LEFT"/>sum(axis)<br ALIGN="LEFT"/>sum_duplicates()<br ALIGN="LEFT"/>toarray(order, out)<br ALIGN="LEFT"/>tocoo(copy)<br ALIGN="LEFT"/>todia()<br ALIGN="LEFT"/>todok()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.data._data_matrix" [color="black", fontcolor="black", label=<{_data_matrix|data<br ALIGN="LEFT"/>dtype : property<br ALIGN="LEFT"/>|astype(t)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>power(n, dtype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.data._minmax_mixin" [color="black", fontcolor="black", label=<{_minmax_mixin|<br ALIGN="LEFT"/>|max(axis)<br ALIGN="LEFT"/>min(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.accelerate" [color="black", fontcolor="black", label=<{accelerate|function<br ALIGN="LEFT"/>module : NoneType, module<br ALIGN="LEFT"/>|accelerate(signature, identifier)<br ALIGN="LEFT"/>code()<br ALIGN="LEFT"/>identifier(signature)<br ALIGN="LEFT"/>signature()<br ALIGN="LEFT"/>singleton(signature)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.alpha_gen" [color="black", fontcolor="black", label=<{alpha_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.anglit_gen" [color="black", fontcolor="black", label=<{anglit_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.arcsine_gen" [color="black", fontcolor="black", label=<{arcsine_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.base_spec.arg_spec_list" [color="black", fontcolor="black", label=<{arg_spec_list|<br ALIGN="LEFT"/>|build_information()<br ALIGN="LEFT"/>init_flags()<br ALIGN="LEFT"/>pointers()<br ALIGN="LEFT"/>py_pointers()<br ALIGN="LEFT"/>py_references()<br ALIGN="LEFT"/>py_variables()<br ALIGN="LEFT"/>references()<br ALIGN="LEFT"/>variable_as_strings()<br ALIGN="LEFT"/>variables()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.blitz_spec.array_converter" [color="black", fontcolor="black", label=<{array_converter|dims<br ALIGN="LEFT"/>include_dirs : list<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|declaration_code(templatize, inline)<br ALIGN="LEFT"/>info_object()<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>template_vars(inline)<br ALIGN="LEFT"/>type_spec(name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.standard_array_spec.array_converter" [color="black", fontcolor="black", label=<{array_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>headers : list<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>module_init_code : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>support_code : list<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|cleanup_code()<br ALIGN="LEFT"/>declaration_code(templatize, inline)<br ALIGN="LEFT"/>get_var_type(value)<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>template_vars(inline)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.blitz_spec.array_info" [color="black", fontcolor="black", label=<{array_info|<br ALIGN="LEFT"/>|check_compiler(compiler)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.base_spec.base_converter" [color="black", fontcolor="black", label=<{base_converter|compiler : str<br ALIGN="LEFT"/>|build_information()<br ALIGN="LEFT"/>cleanup_code()<br ALIGN="LEFT"/>declaration_code(templatize)<br ALIGN="LEFT"/>init_flag()<br ALIGN="LEFT"/>local_dict_code()<br ALIGN="LEFT"/>pointer()<br ALIGN="LEFT"/>py_pointer()<br ALIGN="LEFT"/>py_reference()<br ALIGN="LEFT"/>py_variable()<br ALIGN="LEFT"/>reference()<br ALIGN="LEFT"/>retrieve_py_variable(inline)<br ALIGN="LEFT"/>set_compiler(compiler)<br ALIGN="LEFT"/><I>type_match</I>(value)<br ALIGN="LEFT"/><I>type_spec</I>(name, value)<br ALIGN="LEFT"/>variable()<br ALIGN="LEFT"/>variable_as_string()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.base_info.base_info" [color="black", fontcolor="black", label=<{base_info|compiler : str<br ALIGN="LEFT"/>|<I>check_compiler</I>(compiler)<br ALIGN="LEFT"/>define_macros()<br ALIGN="LEFT"/>extra_compile_args()<br ALIGN="LEFT"/>extra_link_args()<br ALIGN="LEFT"/>headers()<br ALIGN="LEFT"/>include_dirs()<br ALIGN="LEFT"/>libraries()<br ALIGN="LEFT"/>library_dirs()<br ALIGN="LEFT"/>module_init_code()<br ALIGN="LEFT"/>set_compiler(compiler)<br ALIGN="LEFT"/>sources()<br ALIGN="LEFT"/>support_code()<br ALIGN="LEFT"/>undefine_macros()<br ALIGN="LEFT"/>warnings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.common_info.basic_module_info" [color="black", fontcolor="black", label=<{basic_module_info|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.bernoulli_gen" [color="black", fontcolor="black", label=<{bernoulli_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.beta_gen" [color="black", fontcolor="black", label=<{beta_gen|<br ALIGN="LEFT"/>|fit(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.betaprime_gen" [color="black", fontcolor="black", label=<{betaprime_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.binom_gen" [color="black", fontcolor="black", label=<{binom_gen|b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.boltzmann_gen" [color="black", fontcolor="black", label=<{boltzmann_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.bradford_gen" [color="black", fontcolor="black", label=<{bradford_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.bsr.bsr_matrix" [color="black", fontcolor="black", label=<{bsr_matrix|blocksize : property<br ALIGN="LEFT"/>data : ndarray<br ALIGN="LEFT"/>has_sorted_indices : bool<br ALIGN="LEFT"/>indices : ndarray<br ALIGN="LEFT"/>indptr : ndarray<br ALIGN="LEFT"/>nnz : property<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|check_format(full_check)<br ALIGN="LEFT"/>diagonal()<br ALIGN="LEFT"/>eliminate_zeros()<br ALIGN="LEFT"/><I>getdata</I>(ind)<br ALIGN="LEFT"/>getnnz()<br ALIGN="LEFT"/>matmat(other)<br ALIGN="LEFT"/>matvec(other)<br ALIGN="LEFT"/>prune()<br ALIGN="LEFT"/>sort_indices()<br ALIGN="LEFT"/><I>sum_duplicates</I>()<br ALIGN="LEFT"/>tobsr(blocksize, copy)<br ALIGN="LEFT"/>tocoo(copy)<br ALIGN="LEFT"/>tocsc()<br ALIGN="LEFT"/>tocsr()<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.burr_gen" [color="black", fontcolor="black", label=<{burr_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.catalog.catalog" [color="black", fontcolor="black", label=<{catalog|cache : dict<br ALIGN="LEFT"/>module_dir : NoneType<br ALIGN="LEFT"/>paths_added : int<br ALIGN="LEFT"/>user_path_list : NoneType, list<br ALIGN="LEFT"/>|add_function(code, function, module_dir)<br ALIGN="LEFT"/>add_function_persistent(code, function)<br ALIGN="LEFT"/>build_search_order()<br ALIGN="LEFT"/>clear_module_directory()<br ALIGN="LEFT"/>configure_path(cat, code)<br ALIGN="LEFT"/>fast_cache(code, function)<br ALIGN="LEFT"/>get_catalog_files()<br ALIGN="LEFT"/>get_cataloged_functions(code)<br ALIGN="LEFT"/>get_environ_path()<br ALIGN="LEFT"/>get_existing_files()<br ALIGN="LEFT"/>get_functions(code, module_dir)<br ALIGN="LEFT"/>get_functions_fast(code)<br ALIGN="LEFT"/>get_module_directory()<br ALIGN="LEFT"/>get_writable_dir()<br ALIGN="LEFT"/>get_writable_file(existing_only)<br ALIGN="LEFT"/>path_key(code)<br ALIGN="LEFT"/>repair_catalog(catalog_path, code)<br ALIGN="LEFT"/>set_module_directory(module_dir)<br ALIGN="LEFT"/>unconfigure_path()<br ALIGN="LEFT"/>unique_module_name(code, module_dir)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.catchall_converter" [color="black", fontcolor="black", label=<{catchall_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>type_match(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.cauchy_gen" [color="black", fontcolor="black", label=<{cauchy_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.chi2_gen" [color="black", fontcolor="black", label=<{chi2_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.chi_gen" [color="black", fontcolor="black", label=<{chi_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.common_base_converter" [color="black", fontcolor="black", label=<{common_base_converter|c_type : str<br ALIGN="LEFT"/>define_macros : list<br ALIGN="LEFT"/>extra_compile_args : list<br ALIGN="LEFT"/>extra_link_args : list<br ALIGN="LEFT"/>headers : list<br ALIGN="LEFT"/>include_dirs : list<br ALIGN="LEFT"/>libraries : list<br ALIGN="LEFT"/>library_dirs : list<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>module_init_code : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>sources : list<br ALIGN="LEFT"/>support_code : list<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>var_type<br ALIGN="LEFT"/>warnings : list<br ALIGN="LEFT"/>|c_to_py_code()<br ALIGN="LEFT"/>cleanup_code()<br ALIGN="LEFT"/>declaration_code(templatize, inline)<br ALIGN="LEFT"/>generate_build_info()<br ALIGN="LEFT"/>get_var_type(value)<br ALIGN="LEFT"/>info_object()<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>py_to_c_code()<br ALIGN="LEFT"/>template_vars(inline)<br ALIGN="LEFT"/>type_match(value)<br ALIGN="LEFT"/>type_spec(name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.complex_converter" [color="black", fontcolor="black", label=<{complex_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.complex_ode" [color="black", fontcolor="black", label=<{complex_ode|cf<br ALIGN="LEFT"/>cjac : NoneType<br ALIGN="LEFT"/>tmp<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|integrate(t, step, relax)<br ALIGN="LEFT"/>set_initial_value(y, t)<br ALIGN="LEFT"/>set_integrator(name)<br ALIGN="LEFT"/>set_solout(solout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.coo.coo_matrix" [color="black", fontcolor="black", label=<{coo_matrix|col : ndarray<br ALIGN="LEFT"/>data : ndarray<br ALIGN="LEFT"/>has_canonical_format : bool<br ALIGN="LEFT"/>nnz : property<br ALIGN="LEFT"/>row : ndarray<br ALIGN="LEFT"/>shape : NoneType, tuple<br ALIGN="LEFT"/>|diagonal()<br ALIGN="LEFT"/>getnnz(axis)<br ALIGN="LEFT"/>sum_duplicates()<br ALIGN="LEFT"/>toarray(order, out)<br ALIGN="LEFT"/>tocoo(copy)<br ALIGN="LEFT"/>tocsc()<br ALIGN="LEFT"/>tocsr()<br ALIGN="LEFT"/>todia()<br ALIGN="LEFT"/>todok()<br ALIGN="LEFT"/>transpose(copy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.cosine_gen" [color="black", fontcolor="black", label=<{cosine_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.cpp_namespace_spec.cpp_namespace_converter" [color="black", fontcolor="black", label=<{cpp_namespace_converter|name : str<br ALIGN="LEFT"/>type_name : NoneType, str<br ALIGN="LEFT"/>|declaration_code(inline)<br ALIGN="LEFT"/>type_match(value)<br ALIGN="LEFT"/>type_spec(name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.csc.csc_matrix" [color="black", fontcolor="black", label=<{csc_matrix|has_sorted_indices : bool<br ALIGN="LEFT"/>|getcol(i)<br ALIGN="LEFT"/>getrow(i)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>tocsc(copy)<br ALIGN="LEFT"/>tocsr()<br ALIGN="LEFT"/>transpose(copy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.sparse.csr.csr_matrix" [color="black", fontcolor="black", label=<{csr_matrix|has_sorted_indices : bool<br ALIGN="LEFT"/>indices : ndarray<br ALIGN="LEFT"/>indptr : ndarray<br ALIGN="LEFT"/>|getcol(i)<br ALIGN="LEFT"/>getrow(i)<br ALIGN="LEFT"/>tobsr(blocksize, copy)<br ALIGN="LEFT"/>tocsc()<br ALIGN="LEFT"/>tocsr(copy)<br ALIGN="LEFT"/>tolil()<br ALIGN="LEFT"/>transpose(copy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.base_info.custom_info" [color="black", fontcolor="black", label=<{custom_info|<br ALIGN="LEFT"/>|add_define_macro(define_macro)<br ALIGN="LEFT"/>add_extra_compile_arg(compile_arg)<br ALIGN="LEFT"/>add_extra_link_arg(link_arg)<br ALIGN="LEFT"/>add_header(header)<br ALIGN="LEFT"/>add_include_dir(include_dir)<br ALIGN="LEFT"/>add_library(library)<br ALIGN="LEFT"/>add_library_dir(library_dir)<br ALIGN="LEFT"/>add_module_init_code(module_init_code)<br ALIGN="LEFT"/>add_source(source)<br ALIGN="LEFT"/>add_support_code(support_code)<br ALIGN="LEFT"/>add_undefine_macro(undefine_macro)<br ALIGN="LEFT"/>add_warning(warning)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.dgamma_gen" [color="black", fontcolor="black", label=<{dgamma_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.dia.dia_matrix" [color="black", fontcolor="black", label=<{dia_matrix|data : list, ndarray<br ALIGN="LEFT"/>nnz : property<br ALIGN="LEFT"/>offsets : list, ndarray<br ALIGN="LEFT"/>psolve<br ALIGN="LEFT"/>shape : NoneType<br ALIGN="LEFT"/>|getnnz()<br ALIGN="LEFT"/>tocoo()<br ALIGN="LEFT"/>tocsc()<br ALIGN="LEFT"/>tocsr()<br ALIGN="LEFT"/>todia(copy)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.dict_converter" [color="black", fontcolor="black", label=<{dict_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate.dirichlet_frozen" [color="black", fontcolor="black", label=<{dirichlet_frozen|alpha : ndarray<br ALIGN="LEFT"/>|entropy()<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>rvs(size, random_state)<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate.dirichlet_gen" [color="black", fontcolor="black", label=<{dirichlet_gen|<br ALIGN="LEFT"/>|entropy(alpha)<br ALIGN="LEFT"/>logpdf(x, alpha)<br ALIGN="LEFT"/>mean(alpha)<br ALIGN="LEFT"/>pdf(x, alpha)<br ALIGN="LEFT"/>rvs(alpha, size, random_state)<br ALIGN="LEFT"/>var(alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.dlaplace_gen" [color="black", fontcolor="black", label=<{dlaplace_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.dok.dok_matrix" [color="black", fontcolor="black", label=<{dok_matrix|dtype : dtype<br ALIGN="LEFT"/>nnz : property<br ALIGN="LEFT"/>shape : ndarray, tuple<br ALIGN="LEFT"/>|conjtransp()<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>get(key, default)<br ALIGN="LEFT"/>getcol(j)<br ALIGN="LEFT"/>getnnz()<br ALIGN="LEFT"/>getrow(i)<br ALIGN="LEFT"/>resize(shape)<br ALIGN="LEFT"/>tocoo()<br ALIGN="LEFT"/>tocsc()<br ALIGN="LEFT"/>tocsr()<br ALIGN="LEFT"/>todok(copy)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.dop853" [color="black", fontcolor="black", label=<{dop853|atol : float<br ALIGN="LEFT"/>beta : float<br ALIGN="LEFT"/>call_args : list<br ALIGN="LEFT"/>dfactor : float<br ALIGN="LEFT"/>first_step : float<br ALIGN="LEFT"/>ifactor : float<br ALIGN="LEFT"/>iwork<br ALIGN="LEFT"/>max_step : float<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>nsteps : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>safety : float<br ALIGN="LEFT"/>success : int<br ALIGN="LEFT"/>verbosity : int<br ALIGN="LEFT"/>work<br ALIGN="LEFT"/>|reset(n, has_jac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.dopri5" [color="black", fontcolor="black", label=<{dopri5|atol : float<br ALIGN="LEFT"/>beta : float<br ALIGN="LEFT"/>call_args : list<br ALIGN="LEFT"/>dfactor : float<br ALIGN="LEFT"/>first_step : float<br ALIGN="LEFT"/>ifactor : float<br ALIGN="LEFT"/>iout : int<br ALIGN="LEFT"/>iwork<br ALIGN="LEFT"/>max_step : float<br ALIGN="LEFT"/>messages : dict<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>nsteps : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>runner<br ALIGN="LEFT"/>safety : float<br ALIGN="LEFT"/>solout<br ALIGN="LEFT"/>solout_cmplx : bool<br ALIGN="LEFT"/>success : int<br ALIGN="LEFT"/>supports_solout : bool<br ALIGN="LEFT"/>verbosity : int<br ALIGN="LEFT"/>work<br ALIGN="LEFT"/>|reset(n, has_jac)<br ALIGN="LEFT"/>run(f, jac, y0, t0, t1, f_params, jac_params)<br ALIGN="LEFT"/>set_solout(solout, complex)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.size_check.dummy_array" [color="black", fontcolor="black", label=<{dummy_array|name : NoneType<br ALIGN="LEFT"/>shape : ndarray, recarray<br ALIGN="LEFT"/>|binary_op(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.dweibull_gen" [color="black", fontcolor="black", label=<{dweibull_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.erlang_gen" [color="black", fontcolor="black", label=<{erlang_gen|<br ALIGN="LEFT"/>|fit(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.expon_gen" [color="black", fontcolor="black", label=<{expon_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.exponnorm_gen" [color="black", fontcolor="black", label=<{exponnorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.exponpow_gen" [color="black", fontcolor="black", label=<{exponpow_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.exponweib_gen" [color="black", fontcolor="black", label=<{exponweib_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.ext_tools.ext_function" [color="black", fontcolor="black", label=<{ext_function|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.ext_tools.ext_function_from_specs" [color="black", fontcolor="black", label=<{ext_function_from_specs|arg_specs<br ALIGN="LEFT"/>code_block<br ALIGN="LEFT"/>compiler : str<br ALIGN="LEFT"/>customize<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|arg_cleanup_code()<br ALIGN="LEFT"/>arg_declaration_code()<br ALIGN="LEFT"/>arg_local_dict_code()<br ALIGN="LEFT"/>function_code()<br ALIGN="LEFT"/>function_declaration_code()<br ALIGN="LEFT"/><I>header_code</I>()<br ALIGN="LEFT"/>parse_tuple_code()<br ALIGN="LEFT"/>python_function_definition_code()<br ALIGN="LEFT"/>set_compiler(compiler)<br ALIGN="LEFT"/>template_declaration_code()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.ext_tools.ext_module" [color="black", fontcolor="black", label=<{ext_module|compiler : str<br ALIGN="LEFT"/>customize<br ALIGN="LEFT"/>functions : list<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|add_function(func)<br ALIGN="LEFT"/>arg_specs()<br ALIGN="LEFT"/>build_information()<br ALIGN="LEFT"/>build_kw_and_file(location, kw)<br ALIGN="LEFT"/>compile(location, compiler, verbose)<br ALIGN="LEFT"/>function_code()<br ALIGN="LEFT"/>generate_file(file_name, location)<br ALIGN="LEFT"/>get_headers()<br ALIGN="LEFT"/>header_code()<br ALIGN="LEFT"/>module_code()<br ALIGN="LEFT"/>module_init_code()<br ALIGN="LEFT"/>python_function_definition_code()<br ALIGN="LEFT"/>set_compiler(compiler)<br ALIGN="LEFT"/>setup_extension(location)<br ALIGN="LEFT"/>support_code()<br ALIGN="LEFT"/>warning_code()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.f_gen" [color="black", fontcolor="black", label=<{f_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.fatiguelife_gen" [color="black", fontcolor="black", label=<{fatiguelife_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.file_converter" [color="black", fontcolor="black", label=<{file_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>headers : list<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|c_to_py_code()<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.fisk_gen" [color="black", fontcolor="black", label=<{fisk_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.float_converter" [color="black", fontcolor="black", label=<{float_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.foldcauchy_gen" [color="black", fontcolor="black", label=<{foldcauchy_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.foldnorm_gen" [color="black", fontcolor="black", label=<{foldnorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.frechet_l_gen" [color="black", fontcolor="black", label=<{frechet_l_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.frechet_r_gen" [color="black", fontcolor="black", label=<{frechet_r_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gamma_gen" [color="black", fontcolor="black", label=<{gamma_gen|<br ALIGN="LEFT"/>|fit(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gausshyper_gen" [color="black", fontcolor="black", label=<{gausshyper_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats.kde.gaussian_kde" [color="black", fontcolor="black", label=<{gaussian_kde|covariance<br ALIGN="LEFT"/>covariance_factor<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>dataset : list<br ALIGN="LEFT"/>factor<br ALIGN="LEFT"/>inv_cov<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>|evaluate(points)<br ALIGN="LEFT"/>integrate_box(low_bounds, high_bounds, maxpts)<br ALIGN="LEFT"/>integrate_box_1d(low, high)<br ALIGN="LEFT"/>integrate_gaussian(mean, cov)<br ALIGN="LEFT"/>integrate_kde(other)<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>resample(size)<br ALIGN="LEFT"/>scotts_factor()<br ALIGN="LEFT"/>set_bandwidth(bw_method)<br ALIGN="LEFT"/>silverman_factor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.genexpon_gen" [color="black", fontcolor="black", label=<{genexpon_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.genextreme_gen" [color="black", fontcolor="black", label=<{genextreme_gen|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gengamma_gen" [color="black", fontcolor="black", label=<{gengamma_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.genhalflogistic_gen" [color="black", fontcolor="black", label=<{genhalflogistic_gen|b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.genlogistic_gen" [color="black", fontcolor="black", label=<{genlogistic_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gennorm_gen" [color="black", fontcolor="black", label=<{gennorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.genpareto_gen" [color="black", fontcolor="black", label=<{genpareto_gen|b : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.geom_gen" [color="black", fontcolor="black", label=<{geom_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gilbrat_gen" [color="black", fontcolor="black", label=<{gilbrat_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gompertz_gen" [color="black", fontcolor="black", label=<{gompertz_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gumbel_l_gen" [color="black", fontcolor="black", label=<{gumbel_l_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.gumbel_r_gen" [color="black", fontcolor="black", label=<{gumbel_r_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.halfcauchy_gen" [color="black", fontcolor="black", label=<{halfcauchy_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.halfgennorm_gen" [color="black", fontcolor="black", label=<{halfgennorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.halflogistic_gen" [color="black", fontcolor="black", label=<{halflogistic_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.halfnorm_gen" [color="black", fontcolor="black", label=<{halfnorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.hypergeom_gen" [color="black", fontcolor="black", label=<{hypergeom_gen|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.hypsecant_gen" [color="black", fontcolor="black", label=<{hypsecant_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.base_info.info_list" [color="black", fontcolor="black", label=<{info_list|<br ALIGN="LEFT"/>|define_macros()<br ALIGN="LEFT"/>extra_compile_args()<br ALIGN="LEFT"/>extra_link_args()<br ALIGN="LEFT"/>get_unique_values(attribute)<br ALIGN="LEFT"/>headers()<br ALIGN="LEFT"/>include_dirs()<br ALIGN="LEFT"/>libraries()<br ALIGN="LEFT"/>library_dirs()<br ALIGN="LEFT"/>module_init_code()<br ALIGN="LEFT"/>sources()<br ALIGN="LEFT"/>support_code()<br ALIGN="LEFT"/>warnings()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.inline_tools.inline_ext_function" [color="black", fontcolor="black", label=<{inline_ext_function|<br ALIGN="LEFT"/>|arg_cleanup_code()<br ALIGN="LEFT"/>arg_declaration_code()<br ALIGN="LEFT"/>arg_local_dict_code()<br ALIGN="LEFT"/>function_code()<br ALIGN="LEFT"/>function_declaration_code()<br ALIGN="LEFT"/>parse_tuple_code()<br ALIGN="LEFT"/>python_function_definition_code()<br ALIGN="LEFT"/>template_declaration_code()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.inline_tools.inline_ext_module" [color="black", fontcolor="black", label=<{inline_ext_module|customize : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.common_info.inline_info" [color="black", fontcolor="black", label=<{inline_info|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.spatial.kdtree.KDTree.innernode" [color="black", fontcolor="black", label=<{innernode|children<br ALIGN="LEFT"/>greater<br ALIGN="LEFT"/>less<br ALIGN="LEFT"/>split<br ALIGN="LEFT"/>split_dim<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.instance_converter" [color="black", fontcolor="black", label=<{instance_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.int_converter" [color="black", fontcolor="black", label=<{int_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.interpolate.interpolate.interp1d" [color="black", fontcolor="black", label=<{interp1d|axis<br ALIGN="LEFT"/>bounds_error : bool<br ALIGN="LEFT"/>copy : bool<br ALIGN="LEFT"/>fill_value<br ALIGN="LEFT"/>x : recarray<br ALIGN="LEFT"/>x_bds<br ALIGN="LEFT"/>y : recarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.interpolate.interp2d" [color="black", fontcolor="black", label=<{interp2d|bounds_error : bool<br ALIGN="LEFT"/>fill_value : NoneType<br ALIGN="LEFT"/>tck : tuple<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>x_max : ndarray<br ALIGN="LEFT"/>x_min : ndarray<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>y_max : ndarray<br ALIGN="LEFT"/>y_min : ndarray<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.invgamma_gen" [color="black", fontcolor="black", label=<{invgamma_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.invgauss_gen" [color="black", fontcolor="black", label=<{invgauss_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.invweibull_gen" [color="black", fontcolor="black", label=<{invweibull_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._multivariate.invwishart_frozen" [color="black", fontcolor="black", label=<{invwishart_frozen|C<br ALIGN="LEFT"/>df<br ALIGN="LEFT"/>dim<br ALIGN="LEFT"/>inv_scale<br ALIGN="LEFT"/>log_det_scale<br ALIGN="LEFT"/>scale : ndarray<br ALIGN="LEFT"/>|entropy()<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>mode()<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>rvs(size, random_state)<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate.invwishart_gen" [color="black", fontcolor="black", label=<{invwishart_gen|<br ALIGN="LEFT"/>|entropy()<br ALIGN="LEFT"/>logpdf(x, df, scale)<br ALIGN="LEFT"/>mean(df, scale)<br ALIGN="LEFT"/>mode(df, scale)<br ALIGN="LEFT"/>pdf(x, df, scale)<br ALIGN="LEFT"/>rvs(df, scale, size, random_state)<br ALIGN="LEFT"/>var(df, scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.johnsonsb_gen" [color="black", fontcolor="black", label=<{johnsonsb_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.johnsonsu_gen" [color="black", fontcolor="black", label=<{johnsonsu_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.ksone_gen" [color="black", fontcolor="black", label=<{ksone_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.kstwobign_gen" [color="black", fontcolor="black", label=<{kstwobign_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.laplace_gen" [color="black", fontcolor="black", label=<{laplace_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.spatial.kdtree.KDTree.leafnode" [color="black", fontcolor="black", label=<{leafnode|children<br ALIGN="LEFT"/>idx<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.levy_gen" [color="black", fontcolor="black", label=<{levy_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.levy_l_gen" [color="black", fontcolor="black", label=<{levy_l_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.levy_stable_gen" [color="black", fontcolor="black", label=<{levy_stable_gen|a : float<br ALIGN="LEFT"/>b : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.lil.lil_matrix" [color="black", fontcolor="black", label=<{lil_matrix|data : ndarray<br ALIGN="LEFT"/>dtype : dtype<br ALIGN="LEFT"/>nnz : property<br ALIGN="LEFT"/>rows : ndarray<br ALIGN="LEFT"/>shape : property<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>getnnz(axis)<br ALIGN="LEFT"/>getrow(i)<br ALIGN="LEFT"/>getrowview(i)<br ALIGN="LEFT"/>reshape(shape)<br ALIGN="LEFT"/>set_shape(shape)<br ALIGN="LEFT"/>toarray(order, out)<br ALIGN="LEFT"/>tocsc()<br ALIGN="LEFT"/>tocsr()<br ALIGN="LEFT"/>tolil(copy)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.list_converter" [color="black", fontcolor="black", label=<{list_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.loggamma_gen" [color="black", fontcolor="black", label=<{loggamma_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.logistic_gen" [color="black", fontcolor="black", label=<{logistic_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.loglaplace_gen" [color="black", fontcolor="black", label=<{loglaplace_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.lognorm_gen" [color="black", fontcolor="black", label=<{lognorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.logser_gen" [color="black", fontcolor="black", label=<{logser_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.lomax_gen" [color="black", fontcolor="black", label=<{lomax_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.long_converter" [color="black", fontcolor="black", label=<{long_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.lsoda" [color="black", fontcolor="black", label=<{lsoda|active_global_handle : int<br ALIGN="LEFT"/>atol : float<br ALIGN="LEFT"/>call_args : list<br ALIGN="LEFT"/>first_step : float<br ALIGN="LEFT"/>initialized : bool<br ALIGN="LEFT"/>iwork<br ALIGN="LEFT"/>ixpr : int<br ALIGN="LEFT"/>max_hnil : int<br ALIGN="LEFT"/>max_order_ns : int<br ALIGN="LEFT"/>max_order_s : int<br ALIGN="LEFT"/>max_step : float<br ALIGN="LEFT"/>messages : dict<br ALIGN="LEFT"/>min_step : float<br ALIGN="LEFT"/>ml : NoneType, int<br ALIGN="LEFT"/>mu : NoneType, int<br ALIGN="LEFT"/>nsteps : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>runner : NoneType<br ALIGN="LEFT"/>rwork<br ALIGN="LEFT"/>success : int<br ALIGN="LEFT"/>with_jacobian : bool<br ALIGN="LEFT"/>|reset(n, has_jac)<br ALIGN="LEFT"/>run(f, jac, y0, t0, t1, f_params, jac_params)<br ALIGN="LEFT"/>run_relax()<br ALIGN="LEFT"/>step()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.signal.ltisys.lti" [color="black", fontcolor="black", label=<{lti|A<br ALIGN="LEFT"/>B<br ALIGN="LEFT"/>C<br ALIGN="LEFT"/>D<br ALIGN="LEFT"/>den<br ALIGN="LEFT"/>gain<br ALIGN="LEFT"/>inputs : NoneType<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>outputs : NoneType<br ALIGN="LEFT"/>poles<br ALIGN="LEFT"/>zeros<br ALIGN="LEFT"/>|bode(w, n)<br ALIGN="LEFT"/>freqresp(w, n)<br ALIGN="LEFT"/>impulse(X0, T, N)<br ALIGN="LEFT"/>output(U, T, X0)<br ALIGN="LEFT"/>step(X0, T, N)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.matlab.mio5_params.mat_struct" [color="black", fontcolor="black", label=<{mat_struct|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.accelerate_tools.matrix" [color="black", fontcolor="black", label=<{matrix|dims : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.maxwell_gen" [color="black", fontcolor="black", label=<{maxwell_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.mielke_gen" [color="black", fontcolor="black", label=<{mielke_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.module_converter" [color="black", fontcolor="black", label=<{module_converter|check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate.multi_rv_frozen" [color="black", fontcolor="black", label=<{multi_rv_frozen|random_state<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._multivariate.multi_rv_generic" [color="black", fontcolor="black", label=<{multi_rv_generic|random_state<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._multivariate.multivariate_normal_frozen" [color="black", fontcolor="black", label=<{multivariate_normal_frozen|cov : ndarray<br ALIGN="LEFT"/>cov_info<br ALIGN="LEFT"/>dim : NoneType, int<br ALIGN="LEFT"/>mean : ndarray<br ALIGN="LEFT"/>|entropy()<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>rvs(size, random_state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate.multivariate_normal_gen" [color="black", fontcolor="black", label=<{multivariate_normal_gen|<br ALIGN="LEFT"/>|entropy(mean, cov)<br ALIGN="LEFT"/>logpdf(x, mean, cov, allow_singular)<br ALIGN="LEFT"/>pdf(x, mean, cov, allow_singular)<br ALIGN="LEFT"/>rvs(mean, cov, size, random_state)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.nakagami_gen" [color="black", fontcolor="black", label=<{nakagami_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.nbinom_gen" [color="black", fontcolor="black", label=<{nbinom_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.ncf_gen" [color="black", fontcolor="black", label=<{ncf_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.nct_gen" [color="black", fontcolor="black", label=<{nct_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.ncx2_gen" [color="black", fontcolor="black", label=<{ncx2_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.io.netcdf.netcdf_file" [color="black", fontcolor="black", label=<{netcdf_file|dimensions : dict<br ALIGN="LEFT"/>filename : str<br ALIGN="LEFT"/>fp<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>sync<br ALIGN="LEFT"/>use_mmap : NoneType, bool<br ALIGN="LEFT"/>variables : dict<br ALIGN="LEFT"/>version_byte : int<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>createDimension(name, length)<br ALIGN="LEFT"/>createVariable(name, type, dimensions)<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.io.netcdf.netcdf_variable" [color="black", fontcolor="black", label=<{netcdf_variable|data<br ALIGN="LEFT"/>dimensions<br ALIGN="LEFT"/>|assignValue(value)<br ALIGN="LEFT"/>getValue()<br ALIGN="LEFT"/>isrec()<br ALIGN="LEFT"/>itemsize()<br ALIGN="LEFT"/>shape()<br ALIGN="LEFT"/>typecode()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.spatial.kdtree.KDTree.node" [color="black", fontcolor="black", label=<{node|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.norm_gen" [color="black", fontcolor="black", label=<{norm_gen|<br ALIGN="LEFT"/>|fit(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.numpy_scalar_spec.numpy_complex_scalar_converter" [color="black", fontcolor="black", label=<{numpy_complex_scalar_converter|matching_types : list<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.ode" [color="black", fontcolor="black", label=<{ode|f<br ALIGN="LEFT"/>f_params : tuple<br ALIGN="LEFT"/>jac : NoneType<br ALIGN="LEFT"/>jac_params : tuple<br ALIGN="LEFT"/>stiff : int<br ALIGN="LEFT"/>t : float<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|integrate(t, step, relax)<br ALIGN="LEFT"/>set_f_params()<br ALIGN="LEFT"/>set_initial_value(y, t)<br ALIGN="LEFT"/>set_integrator(name)<br ALIGN="LEFT"/>set_jac_params()<br ALIGN="LEFT"/>set_solout(solout)<br ALIGN="LEFT"/>successful()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.odr.odrpack.odr_error" [color="black", fontcolor="red", label=<{odr_error|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.odr.odrpack.odr_stop" [color="black", fontcolor="red", label=<{odr_stop|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.special.orthogonal.orthopoly1d" [color="black", fontcolor="black", label=<{orthopoly1d|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.pareto_gen" [color="black", fontcolor="black", label=<{pareto_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.pearson3_gen" [color="black", fontcolor="black", label=<{pearson3_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.planck_gen" [color="black", fontcolor="black", label=<{planck_gen|a : int<br ALIGN="LEFT"/>b : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.poisson_gen" [color="black", fontcolor="black", label=<{poisson_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.powerlaw_gen" [color="black", fontcolor="black", label=<{powerlaw_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.powerlognorm_gen" [color="black", fontcolor="black", label=<{powerlognorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.powernorm_gen" [color="black", fontcolor="black", label=<{powernorm_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.interpolate.interpolate.ppform" [color="black", fontcolor="black", label=<{ppform|K<br ALIGN="LEFT"/>a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>breaks : matrix, ndarray<br ALIGN="LEFT"/>coeffs : ndarray<br ALIGN="LEFT"/>fill : float<br ALIGN="LEFT"/>|fromspline(xk, cvals, order, fill)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.randint_gen" [color="black", fontcolor="black", label=<{randint_gen|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.rayleigh_gen" [color="black", fontcolor="black", label=<{rayleigh_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.rdist_gen" [color="black", fontcolor="black", label=<{rdist_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.recipinvgauss_gen" [color="black", fontcolor="black", label=<{recipinvgauss_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.reciprocal_gen" [color="black", fontcolor="black", label=<{reciprocal_gen|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>d<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.rice_gen" [color="black", fontcolor="black", label=<{rice_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._distn_infrastructure.rv_continuous" [color="black", fontcolor="black", label=<{rv_continuous|a : NoneType<br ALIGN="LEFT"/>b : NoneType<br ALIGN="LEFT"/>badvalue : NoneType<br ALIGN="LEFT"/>extradoc : NoneType<br ALIGN="LEFT"/>generic_moment : vectorize<br ALIGN="LEFT"/>moment_type : int<br ALIGN="LEFT"/>name : NoneType, str<br ALIGN="LEFT"/>shapes : NoneType<br ALIGN="LEFT"/>veccdf : _Deprecate<br ALIGN="LEFT"/>vecentropy : vectorize<br ALIGN="LEFT"/>vecfunc : _Deprecate<br ALIGN="LEFT"/>xtol : float<br ALIGN="LEFT"/>|cdf(x)<br ALIGN="LEFT"/>est_loc_scale(data)<br ALIGN="LEFT"/>expect(func, args, loc, scale, lb, ub, conditional)<br ALIGN="LEFT"/>fit(data)<br ALIGN="LEFT"/>fit_loc_scale(data)<br ALIGN="LEFT"/>isf(q)<br ALIGN="LEFT"/>logcdf(x)<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>logsf(x)<br ALIGN="LEFT"/>nnlf(theta, x)<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>ppf(q)<br ALIGN="LEFT"/>sf(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._distn_infrastructure.rv_discrete" [color="black", fontcolor="black", label=<{rv_discrete|F : dict<br ALIGN="LEFT"/>Finv : dict<br ALIGN="LEFT"/>P : dict<br ALIGN="LEFT"/>a : int<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>badvalue : NoneType<br ALIGN="LEFT"/>extradoc : NoneType<br ALIGN="LEFT"/>generic_moment : method<br ALIGN="LEFT"/>inc : int<br ALIGN="LEFT"/>moment_gen : method<br ALIGN="LEFT"/>moment_tol : float<br ALIGN="LEFT"/>name : NoneType, str<br ALIGN="LEFT"/>pk : ndarray<br ALIGN="LEFT"/>qvals : ndarray<br ALIGN="LEFT"/>return_integers : int<br ALIGN="LEFT"/>shapes : NoneType<br ALIGN="LEFT"/>vec_generic_moment : _Deprecate<br ALIGN="LEFT"/>vecentropy : vectorize<br ALIGN="LEFT"/>xk : ndarray<br ALIGN="LEFT"/>|cdf(k)<br ALIGN="LEFT"/>expect(func, args, loc, lb, ub, conditional)<br ALIGN="LEFT"/>isf(q)<br ALIGN="LEFT"/>logcdf(k)<br ALIGN="LEFT"/>logpmf(k)<br ALIGN="LEFT"/>logsf(k)<br ALIGN="LEFT"/>pmf(k)<br ALIGN="LEFT"/>ppf(q)<br ALIGN="LEFT"/>rvs()<br ALIGN="LEFT"/>sf(k)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._distn_infrastructure.rv_frozen" [color="black", fontcolor="black", label=<{rv_frozen|a<br ALIGN="LEFT"/>args : tuple<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>dist<br ALIGN="LEFT"/>kwds : dict<br ALIGN="LEFT"/>random_state<br ALIGN="LEFT"/>|cdf(x)<br ALIGN="LEFT"/>entropy()<br ALIGN="LEFT"/>expect(func, lb, ub, conditional)<br ALIGN="LEFT"/>interval(alpha)<br ALIGN="LEFT"/>isf(q)<br ALIGN="LEFT"/>logcdf(x)<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>logpmf(k)<br ALIGN="LEFT"/>logsf(x)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>median()<br ALIGN="LEFT"/>moment(n)<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>pmf(k)<br ALIGN="LEFT"/>ppf(q)<br ALIGN="LEFT"/>rvs(size, random_state)<br ALIGN="LEFT"/>sf(x)<br ALIGN="LEFT"/>stats(moments)<br ALIGN="LEFT"/>std()<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._distn_infrastructure.rv_generic" [color="black", fontcolor="black", label=<{rv_generic|numargs<br ALIGN="LEFT"/>random_state<br ALIGN="LEFT"/>shapes : NoneType, str<br ALIGN="LEFT"/>|entropy()<br ALIGN="LEFT"/>freeze()<br ALIGN="LEFT"/>interval(alpha)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>median()<br ALIGN="LEFT"/>moment(n)<br ALIGN="LEFT"/>rvs()<br ALIGN="LEFT"/>stats()<br ALIGN="LEFT"/>std()<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.scalar_converter" [color="black", fontcolor="black", label=<{scalar_converter|headers : list<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>warnings : list<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.scxx_converter" [color="black", fontcolor="black", label=<{scxx_converter|headers : list<br ALIGN="LEFT"/>include_dirs : list<br ALIGN="LEFT"/>sources : list<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.semicircular_gen" [color="black", fontcolor="black", label=<{semicircular_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.skellam_gen" [color="black", fontcolor="black", label=<{skellam_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.sparse.base.spmatrix" [color="black", fontcolor="black", label=<{spmatrix|format : str<br ALIGN="LEFT"/>maxprint : int<br ALIGN="LEFT"/>ndim : int<br ALIGN="LEFT"/>shape : property<br ALIGN="LEFT"/>|asformat(format)<br ALIGN="LEFT"/>asfptype()<br ALIGN="LEFT"/>astype(t)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>diagonal()<br ALIGN="LEFT"/>dot(other)<br ALIGN="LEFT"/>getH()<br ALIGN="LEFT"/>get_shape()<br ALIGN="LEFT"/>getcol(j)<br ALIGN="LEFT"/>getformat()<br ALIGN="LEFT"/>getmaxprint()<br ALIGN="LEFT"/>getnnz()<br ALIGN="LEFT"/>getrow(i)<br ALIGN="LEFT"/>maximum(other)<br ALIGN="LEFT"/>mean(axis)<br ALIGN="LEFT"/>minimum(other)<br ALIGN="LEFT"/>multiply(other)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>power(n, dtype)<br ALIGN="LEFT"/><I>reshape</I>(shape)<br ALIGN="LEFT"/>set_shape(shape)<br ALIGN="LEFT"/>setdiag(values, k)<br ALIGN="LEFT"/>sum(axis)<br ALIGN="LEFT"/>toarray(order, out)<br ALIGN="LEFT"/>tobsr(blocksize)<br ALIGN="LEFT"/>tocoo()<br ALIGN="LEFT"/>todense(order, out)<br ALIGN="LEFT"/>todia()<br ALIGN="LEFT"/>todok()<br ALIGN="LEFT"/>tolil()<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.string_converter" [color="black", fontcolor="black", label=<{string_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|c_to_py_code()<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.swig2_spec.swig2_converter" [color="black", fontcolor="black", label=<{swig2_converter|c_type : str<br ALIGN="LEFT"/>check_func : NoneType<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pycobj : int<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>runtime_version : NoneType, int<br ALIGN="LEFT"/>to_c_return : NoneType<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|c_to_py_code()<br ALIGN="LEFT"/>generate_build_info()<br ALIGN="LEFT"/>init_info(runtime)<br ALIGN="LEFT"/>py_to_c_code()<br ALIGN="LEFT"/>type_match(value)<br ALIGN="LEFT"/>type_spec(name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.common_info.swig_info" [color="black", fontcolor="black", label=<{swig_info|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.t_gen" [color="black", fontcolor="black", label=<{t_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.triang_gen" [color="black", fontcolor="black", label=<{triang_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.truncexpon_gen" [color="black", fontcolor="black", label=<{truncexpon_gen|b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.truncnorm_gen" [color="black", fontcolor="black", label=<{truncnorm_gen|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.tukeylambda_gen" [color="black", fontcolor="black", label=<{tukeylambda_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.c_spec.tuple_converter" [color="black", fontcolor="black", label=<{tuple_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>use_ref_count : int<br ALIGN="LEFT"/>|init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.weave.c_spec.unicode_converter" [color="black", fontcolor="black", label=<{unicode_converter|c_type : str<br ALIGN="LEFT"/>check_func : str<br ALIGN="LEFT"/>matching_types : list<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : str<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|declaration_code(templatize, inline)<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.uniform_gen" [color="black", fontcolor="black", label=<{uniform_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate._ode.vode" [color="black", fontcolor="black", label=<{vode|active_global_handle : int<br ALIGN="LEFT"/>atol : float<br ALIGN="LEFT"/>call_args : list<br ALIGN="LEFT"/>first_step : float<br ALIGN="LEFT"/>initialized : bool<br ALIGN="LEFT"/>iwork<br ALIGN="LEFT"/>max_step : float<br ALIGN="LEFT"/>messages : dict<br ALIGN="LEFT"/>meth : int<br ALIGN="LEFT"/>min_step : float<br ALIGN="LEFT"/>ml : NoneType, int<br ALIGN="LEFT"/>mu : NoneType, int<br ALIGN="LEFT"/>nsteps : int<br ALIGN="LEFT"/>order : int<br ALIGN="LEFT"/>rtol : float<br ALIGN="LEFT"/>runner : NoneType<br ALIGN="LEFT"/>rwork<br ALIGN="LEFT"/>success : int<br ALIGN="LEFT"/>supports_run_relax : int<br ALIGN="LEFT"/>supports_step : int<br ALIGN="LEFT"/>with_jacobian : bool<br ALIGN="LEFT"/>|reset(n, has_jac)<br ALIGN="LEFT"/>run(f, jac, y0, t0, t1, f_params, jac_params)<br ALIGN="LEFT"/>run_relax()<br ALIGN="LEFT"/>step()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.vonmises_gen" [color="black", fontcolor="black", label=<{vonmises_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.weave.vtk_spec.vtk_converter" [color="black", fontcolor="black", label=<{vtk_converter|c_type : str<br ALIGN="LEFT"/>check_func : NoneType<br ALIGN="LEFT"/>class_name : str<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>return_type : str<br ALIGN="LEFT"/>to_c_return : NoneType<br ALIGN="LEFT"/>type_name : str<br ALIGN="LEFT"/>|c_to_py_code()<br ALIGN="LEFT"/>generate_build_info()<br ALIGN="LEFT"/>init_info()<br ALIGN="LEFT"/>py_to_c_code()<br ALIGN="LEFT"/>type_match(value)<br ALIGN="LEFT"/>type_spec(name, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.wald_gen" [color="black", fontcolor="black", label=<{wald_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._multivariate.wishart_frozen" [color="black", fontcolor="black", label=<{wishart_frozen|C<br ALIGN="LEFT"/>df<br ALIGN="LEFT"/>dim<br ALIGN="LEFT"/>log_det_scale<br ALIGN="LEFT"/>scale : ndarray<br ALIGN="LEFT"/>|entropy()<br ALIGN="LEFT"/>logpdf(x)<br ALIGN="LEFT"/>mean()<br ALIGN="LEFT"/>mode()<br ALIGN="LEFT"/>pdf(x)<br ALIGN="LEFT"/>rvs(size, random_state)<br ALIGN="LEFT"/>var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._multivariate.wishart_gen" [color="black", fontcolor="black", label=<{wishart_gen|<br ALIGN="LEFT"/>|entropy(df, scale)<br ALIGN="LEFT"/>logpdf(x, df, scale)<br ALIGN="LEFT"/>mean(df, scale)<br ALIGN="LEFT"/>mode(df, scale)<br ALIGN="LEFT"/>pdf(x, df, scale)<br ALIGN="LEFT"/>rvs(df, scale, size, random_state)<br ALIGN="LEFT"/>var(df, scale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.stats._continuous_distns.wrapcauchy_gen" [color="black", fontcolor="black", label=<{wrapcauchy_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.stats._discrete_distns.zipf_gen" [color="black", fontcolor="black", label=<{zipf_gen|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"scipy.integrate._ode.zvode" [color="black", fontcolor="black", label=<{zvode|active_global_handle : int<br ALIGN="LEFT"/>call_args : list<br ALIGN="LEFT"/>initialized : bool<br ALIGN="LEFT"/>iwork<br ALIGN="LEFT"/>runner : NoneType<br ALIGN="LEFT"/>rwork<br ALIGN="LEFT"/>scalar : complex<br ALIGN="LEFT"/>success : int<br ALIGN="LEFT"/>supports_run_relax : int<br ALIGN="LEFT"/>supports_step : int<br ALIGN="LEFT"/>zwork<br ALIGN="LEFT"/>|reset(n, has_jac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"scipy.integrate._ode.complex_ode" -> "scipy.integrate._ode.ode" [arrowhead="empty", arrowtail="none"];
"scipy.integrate._ode.dop853" -> "scipy.integrate._ode.dopri5" [arrowhead="empty", arrowtail="none"];
"scipy.integrate._ode.dopri5" -> "scipy.integrate._ode.IntegratorBase" [arrowhead="empty", arrowtail="none"];
"scipy.integrate._ode.lsoda" -> "scipy.integrate._ode.IntegratorBase" [arrowhead="empty", arrowtail="none"];
"scipy.integrate._ode.vode" -> "scipy.integrate._ode.IntegratorBase" [arrowhead="empty", arrowtail="none"];
"scipy.integrate._ode.zvode" -> "scipy.integrate._ode.vode" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate._monotone.Akima1DInterpolator" -> "scipy.interpolate.interpolate.PPoly" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate._monotone.PchipInterpolator" -> "scipy.interpolate.interpolate.BPoly" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.BivariateSpline" -> "scipy.interpolate.fitpack2._BivariateSplineBase" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.InterpolatedUnivariateSpline" -> "scipy.interpolate.fitpack2.UnivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.LSQBivariateSpline" -> "scipy.interpolate.fitpack2.BivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.LSQSphereBivariateSpline" -> "scipy.interpolate.fitpack2.SphereBivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.LSQUnivariateSpline" -> "scipy.interpolate.fitpack2.UnivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.RectBivariateSpline" -> "scipy.interpolate.fitpack2.BivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.RectSphereBivariateSpline" -> "scipy.interpolate.fitpack2.SphereBivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.SmoothBivariateSpline" -> "scipy.interpolate.fitpack2.BivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.SmoothSphereBivariateSpline" -> "scipy.interpolate.fitpack2.SphereBivariateSpline" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.fitpack2.SphereBivariateSpline" -> "scipy.interpolate.fitpack2._BivariateSplineBase" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.interpolate.BPoly" -> "scipy.interpolate.interpolate._PPolyBase" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.interpolate.PPoly" -> "scipy.interpolate.interpolate._PPolyBase" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.interpolate.interp1d" -> "scipy.interpolate.polyint._Interpolator1D" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.interpolate.ppform" -> "scipy.interpolate.interpolate.PPoly" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.polyint.BarycentricInterpolator" -> "scipy.interpolate.polyint._Interpolator1D" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.polyint.KroghInterpolator" -> "scipy.interpolate.polyint._Interpolator1DWithDerivatives" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.polyint.PiecewisePolynomial" -> "scipy.interpolate.polyint._Interpolator1DWithDerivatives" [arrowhead="empty", arrowtail="none"];
"scipy.interpolate.polyint._Interpolator1DWithDerivatives" -> "scipy.interpolate.polyint._Interpolator1D" [arrowhead="empty", arrowtail="none"];
"scipy.io.arff.arffread.ParseArffError" -> "scipy.io.arff.arffread.ArffError" [arrowhead="empty", arrowtail="none"];
"scipy.io.idl.ObjectPointer" -> "scipy.io.idl.Pointer" [arrowhead="empty", arrowtail="none"];
"scipy.io.matlab.mio4.MatFile4Reader" -> "scipy.io.matlab.miobase.MatFileReader" [arrowhead="empty", arrowtail="none"];
"scipy.io.matlab.mio5.MatFile5Reader" -> "scipy.io.matlab.miobase.MatFileReader" [arrowhead="empty", arrowtail="none"];
"scipy.linalg._matfuncs_inv_ssq.LogmExactlySingularWarning" -> "scipy.linalg._matfuncs_inv_ssq.LogmRankWarning" [arrowhead="empty", arrowtail="none"];
"scipy.linalg._matfuncs_inv_ssq.LogmNearlySingularWarning" -> "scipy.linalg._matfuncs_inv_ssq.LogmRankWarning" [arrowhead="empty", arrowtail="none"];
"scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.odr.odrpack.RealData" -> "scipy.odr.odrpack.Data" [arrowhead="empty", arrowtail="none"];
"scipy.optimize._trustregion_dogleg.DoglegSubproblem" -> "scipy.optimize._trustregion.BaseQuadraticSubproblem" [arrowhead="empty", arrowtail="none"];
"scipy.optimize._trustregion_ncg.CGSteihaugSubproblem" -> "scipy.optimize._trustregion.BaseQuadraticSubproblem" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.lbfgsb.LbfgsInvHessProduct" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.Anderson" -> "scipy.optimize.nonlin.GenericBroyden" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.BroydenFirst" -> "scipy.optimize.nonlin.GenericBroyden" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.BroydenSecond" -> "scipy.optimize.nonlin.BroydenFirst" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.DiagBroyden" -> "scipy.optimize.nonlin.GenericBroyden" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.ExcitingMixing" -> "scipy.optimize.nonlin.GenericBroyden" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.GenericBroyden" -> "scipy.optimize.nonlin.Jacobian" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.KrylovJacobian" -> "scipy.optimize.nonlin.Jacobian" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.LinearMixing" -> "scipy.optimize.nonlin.GenericBroyden" [arrowhead="empty", arrowtail="none"];
"scipy.optimize.nonlin.asjacobian.Jac" -> "scipy.optimize.nonlin.Jacobian" [arrowhead="empty", arrowtail="none"];
"scipy.signal.ltisys.StateSpace" -> "scipy.signal.ltisys.lti" [arrowhead="empty", arrowtail="none"];
"scipy.signal.ltisys.TransferFunction" -> "scipy.signal.ltisys.lti" [arrowhead="empty", arrowtail="none"];
"scipy.signal.ltisys.ZerosPolesGain" -> "scipy.signal.ltisys.lti" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.base.SparseEfficiencyWarning" -> "scipy.sparse.base.SparseWarning" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.base.SparseFormatWarning" -> "scipy.sparse.base.SparseWarning" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.bsr.bsr_matrix" -> "scipy.sparse.compressed._cs_matrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.bsr.bsr_matrix" -> "scipy.sparse.data._minmax_mixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.compressed._cs_matrix" -> "scipy.sparse.data._data_matrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.compressed._cs_matrix" -> "scipy.sparse.data._minmax_mixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.compressed._cs_matrix" -> "scipy.sparse.sputils.IndexMixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.coo.coo_matrix" -> "scipy.sparse.data._data_matrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.coo.coo_matrix" -> "scipy.sparse.data._minmax_mixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.csc.csc_matrix" -> "scipy.sparse.compressed._cs_matrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.csc.csc_matrix" -> "scipy.sparse.sputils.IndexMixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.csr.csr_matrix" -> "scipy.sparse.compressed._cs_matrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.csr.csr_matrix" -> "scipy.sparse.sputils.IndexMixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.data._data_matrix" -> "scipy.sparse.base.spmatrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.dia.dia_matrix" -> "scipy.sparse.data._data_matrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.dok.dok_matrix" -> "scipy.sparse.base.spmatrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.dok.dok_matrix" -> "scipy.sparse.sputils.IndexMixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.lil.lil_matrix" -> "scipy.sparse.base.spmatrix" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.lil.lil_matrix" -> "scipy.sparse.sputils.IndexMixin" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack.ArpackNoConvergence" -> "scipy.sparse.linalg.eigen.arpack.arpack.ArpackError" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack.IterInv" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack.LuInv" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack.SpLuInv" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack._SymmetricArpackParams" -> "scipy.sparse.linalg.eigen.arpack.arpack._ArpackParams" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.eigen.arpack.arpack._UnsymmetricArpackParams" -> "scipy.sparse.linalg.eigen.arpack.arpack._ArpackParams" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface.IdentityOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface.MatrixLinearOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface._AdjointMatrixOperator" -> "scipy.sparse.linalg.interface.MatrixLinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface._CustomLinearOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface._PowerLinearOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface._ProductLinearOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface._ScaledLinearOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.interface._SumLinearOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.matfuncs.MatrixPowerOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.sparse.linalg.matfuncs.ProductOperator" -> "scipy.sparse.linalg.interface.LinearOperator" [arrowhead="empty", arrowtail="none"];
"scipy.spatial.kdtree.KDTree.innernode" -> "scipy.spatial.kdtree.KDTree.node" [arrowhead="empty", arrowtail="none"];
"scipy.spatial.kdtree.KDTree.leafnode" -> "scipy.spatial.kdtree.KDTree.node" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.alpha_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.anglit_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.arcsine_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.beta_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.betaprime_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.bradford_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.burr_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.cauchy_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.chi2_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.chi_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.cosine_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.dgamma_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.dweibull_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.erlang_gen" -> "scipy.stats._continuous_distns.gamma_gen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.expon_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.exponnorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.exponpow_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.exponweib_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.f_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.fatiguelife_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.fisk_gen" -> "scipy.stats._continuous_distns.burr_gen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.foldcauchy_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.foldnorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.frechet_l_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.frechet_r_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gamma_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gausshyper_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.genexpon_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.genextreme_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gengamma_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.genhalflogistic_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.genlogistic_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gennorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.genpareto_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gilbrat_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gompertz_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gumbel_l_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.gumbel_r_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.halfcauchy_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.halfgennorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.halflogistic_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.halfnorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.hypsecant_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.invgamma_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.invgauss_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.invweibull_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.johnsonsb_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.johnsonsu_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.ksone_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.kstwobign_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.laplace_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.levy_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.levy_l_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.levy_stable_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.loggamma_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.logistic_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.loglaplace_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.lognorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.lomax_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.maxwell_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.mielke_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.nakagami_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.ncf_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.nct_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.ncx2_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.norm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.pareto_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.pearson3_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.powerlaw_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.powerlognorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.powernorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.rayleigh_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.rdist_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.recipinvgauss_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.reciprocal_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.rice_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.semicircular_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.t_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.triang_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.truncexpon_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.truncnorm_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.tukeylambda_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.uniform_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.vonmises_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.wald_gen" -> "scipy.stats._continuous_distns.invgauss_gen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._continuous_distns.wrapcauchy_gen" -> "scipy.stats._distn_infrastructure.rv_continuous" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.bernoulli_gen" -> "scipy.stats._discrete_distns.binom_gen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.binom_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.boltzmann_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.dlaplace_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.geom_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.hypergeom_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.logser_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.nbinom_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.planck_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.poisson_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.randint_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.skellam_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._discrete_distns.zipf_gen" -> "scipy.stats._distn_infrastructure.rv_discrete" [arrowhead="empty", arrowtail="none"];
"scipy.stats._distn_infrastructure.rv_continuous" -> "scipy.stats._distn_infrastructure.rv_generic" [arrowhead="empty", arrowtail="none"];
"scipy.stats._distn_infrastructure.rv_discrete" -> "scipy.stats._distn_infrastructure.rv_generic" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.dirichlet_frozen" -> "scipy.stats._multivariate.multi_rv_frozen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.dirichlet_gen" -> "scipy.stats._multivariate.multi_rv_generic" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.invwishart_frozen" -> "scipy.stats._multivariate.multi_rv_frozen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.invwishart_gen" -> "scipy.stats._multivariate.wishart_gen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.multivariate_normal_frozen" -> "scipy.stats._multivariate.multi_rv_frozen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.multivariate_normal_gen" -> "scipy.stats._multivariate.multi_rv_generic" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.wishart_frozen" -> "scipy.stats._multivariate.multi_rv_frozen" [arrowhead="empty", arrowtail="none"];
"scipy.stats._multivariate.wishart_gen" -> "scipy.stats._multivariate.multi_rv_generic" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Basic" -> "scipy.weave.bytecodecompiler.Type_Descriptor" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Basic_Number" -> "scipy.weave.accelerate_tools.Basic" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Double" -> "scipy.weave.accelerate_tools.Basic_Number" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.DoubleVector" -> "scipy.weave.accelerate_tools.Vector" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Doublematrix" -> "scipy.weave.accelerate_tools.matrix" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Instance" -> "scipy.weave.bytecodecompiler.Type_Descriptor" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Integer" -> "scipy.weave.accelerate_tools.Basic_Number" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.IntegerVector" -> "scipy.weave.accelerate_tools.Vector" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Integermatrix" -> "scipy.weave.accelerate_tools.matrix" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.LongVector" -> "scipy.weave.accelerate_tools.Vector" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Longmatrix" -> "scipy.weave.accelerate_tools.matrix" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Python2CXX" -> "scipy.weave.bytecodecompiler.CXXCoder" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.String" -> "scipy.weave.accelerate_tools.Basic" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.Vector" -> "scipy.weave.bytecodecompiler.Type_Descriptor" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.XRange" -> "scipy.weave.bytecodecompiler.Type_Descriptor" [arrowhead="empty", arrowtail="none"];
"scipy.weave.accelerate_tools.matrix" -> "scipy.weave.accelerate_tools.Vector" [arrowhead="empty", arrowtail="none"];
"scipy.weave.base_info.custom_info" -> "scipy.weave.base_info.base_info" [arrowhead="empty", arrowtail="none"];
"scipy.weave.blitz_spec.array_converter" -> "scipy.weave.standard_array_spec.array_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.blitz_spec.array_info" -> "scipy.weave.base_info.custom_info" [arrowhead="empty", arrowtail="none"];
"scipy.weave.bytecodecompiler.CXXCoder" -> "scipy.weave.bytecodecompiler.ByteCodeMeaning" [arrowhead="empty", arrowtail="none"];
"scipy.weave.bytecodecompiler.Function_Descriptor" -> "scipy.weave.bytecodecompiler.__Descriptor" [arrowhead="empty", arrowtail="none"];
"scipy.weave.bytecodecompiler.Type_Descriptor" -> "scipy.weave.bytecodecompiler.__Descriptor" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.catchall_converter" -> "scipy.weave.c_spec.scxx_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.common_base_converter" -> "scipy.weave.base_spec.base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.complex_converter" -> "scipy.weave.c_spec.scalar_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.dict_converter" -> "scipy.weave.c_spec.scxx_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.file_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.float_converter" -> "scipy.weave.c_spec.scalar_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.instance_converter" -> "scipy.weave.c_spec.scxx_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.int_converter" -> "scipy.weave.c_spec.scalar_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.list_converter" -> "scipy.weave.c_spec.scxx_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.long_converter" -> "scipy.weave.c_spec.scalar_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.module_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.scalar_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.scxx_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.string_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.tuple_converter" -> "scipy.weave.c_spec.scxx_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.c_spec.unicode_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.common_info.basic_module_info" -> "scipy.weave.base_info.base_info" [arrowhead="empty", arrowtail="none"];
"scipy.weave.common_info.inline_info" -> "scipy.weave.base_info.base_info" [arrowhead="empty", arrowtail="none"];
"scipy.weave.common_info.swig_info" -> "scipy.weave.base_info.base_info" [arrowhead="empty", arrowtail="none"];
"scipy.weave.ext_tools.ext_function" -> "scipy.weave.ext_tools.ext_function_from_specs" [arrowhead="empty", arrowtail="none"];
"scipy.weave.inline_tools.inline_ext_function" -> "scipy.weave.ext_tools.ext_function" [arrowhead="empty", arrowtail="none"];
"scipy.weave.inline_tools.inline_ext_module" -> "scipy.weave.ext_tools.ext_module" [arrowhead="empty", arrowtail="none"];
"scipy.weave.numpy_scalar_spec.numpy_complex_scalar_converter" -> "scipy.weave.c_spec.complex_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.standard_array_spec.array_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.swig2_spec.swig2_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.weave.vtk_spec.vtk_converter" -> "scipy.weave.c_spec.common_base_converter" [arrowhead="empty", arrowtail="none"];
"scipy.io.harwell_boeing._fortran_format_parser.Tokenizer" -> "scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tokenizer", style="solid"];
"scipy.io.harwell_boeing.hb.HBInfo" -> "scipy.io.harwell_boeing.hb.HBFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_hb_info", style="solid"];
"scipy.io.matlab.mio4.VarReader4" -> "scipy.io.matlab.mio4.MatFile4Reader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_matrix_reader", style="solid"];
"scipy.io.matlab.mio4.VarWriter4" -> "scipy.io.matlab.mio4.MatFile4Writer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_matrix_writer", style="solid"];
"scipy.io.matlab.mio5.VarWriter5" -> "scipy.io.matlab.mio5.MatFile5Writer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_matrix_writer", style="solid"];
"scipy.odr.odrpack.Output" -> "scipy.odr.odrpack.ODR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output", style="solid"];
"scipy.optimize._basinhopping.Storage" -> "scipy.optimize._basinhopping.BasinHoppingRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="storage", style="solid"];
"scipy.optimize.nonlin.KrylovJacobian" -> "scipy.optimize.nonlin.KrylovJacobian" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="op", style="solid"];
"scipy.optimize.nonlin.LowRankMatrix" -> "scipy.optimize.nonlin.BroydenFirst" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Gm", style="solid"];
"scipy.optimize.optimize.OptimizeResult" -> "scipy.optimize._basinhopping.BasinHoppingRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="res", style="solid"];
"scipy.sparse.coo.coo_matrix" -> "scipy.sparse.linalg.matfuncs._ExpmPadeHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ident", style="solid"];
"scipy.sparse.dia.dia_matrix" -> "scipy.sparse.linalg.matfuncs._ExpmPadeHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ident", style="solid"];
"scipy.sparse.linalg.interface.LinearOperator" -> "scipy.optimize.nonlin.KrylovJacobian" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="op", style="solid"];
"scipy.sparse.linalg.interface.LinearOperator" -> "scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OP", style="solid"];
"scipy.sparse.linalg.interface.LinearOperator" -> "scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="OP", style="solid"];
"scipy.sparse.linalg.interface.MatrixLinearOperator" -> "scipy.optimize.nonlin.KrylovJacobian" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="op", style="solid"];
"scipy.sparse.linalg.interface._AdjointMatrixOperator" -> "scipy.sparse.linalg.interface.MatrixLinearOperator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__adj", style="solid"];
"scipy.spatial.kdtree.KDTree.innernode" -> "scipy.spatial.kdtree.KDTree" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"scipy.spatial.kdtree.KDTree.leafnode" -> "scipy.spatial.kdtree.KDTree" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"scipy.stats._multivariate._PSD" -> "scipy.stats._multivariate.multivariate_normal_frozen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cov_info", style="solid"];
"scipy.stats._multivariate.dirichlet_gen" -> "scipy.stats._multivariate.dirichlet_frozen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dist", style="solid"];
"scipy.stats._multivariate.invwishart_gen" -> "scipy.stats._multivariate.invwishart_frozen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dist", style="solid"];
"scipy.stats._multivariate.multivariate_normal_gen" -> "scipy.stats._multivariate.multivariate_normal_frozen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dist", style="solid"];
"scipy.stats._multivariate.wishart_gen" -> "scipy.stats._multivariate.wishart_frozen" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_dist", style="solid"];
"scipy.weave.accelerate_tools.Double" -> "scipy.weave.accelerate_tools.DoubleVector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pybase", style="solid"];
"scipy.weave.accelerate_tools.Double" -> "scipy.weave.accelerate_tools.Doublematrix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pybase", style="solid"];
"scipy.weave.accelerate_tools.Integer" -> "scipy.weave.accelerate_tools.IntegerVector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pybase", style="solid"];
"scipy.weave.accelerate_tools.Integer" -> "scipy.weave.accelerate_tools.Integermatrix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pybase", style="solid"];
"scipy.weave.accelerate_tools.Integer" -> "scipy.weave.accelerate_tools.LongVector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pybase", style="solid"];
"scipy.weave.accelerate_tools.Integer" -> "scipy.weave.accelerate_tools.Longmatrix" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pybase", style="solid"];
"scipy.weave.base_info.custom_info" -> "scipy.weave.accelerate_tools.Python2CXX" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="customize", style="solid"];
"scipy.weave.base_info.custom_info" -> "scipy.weave.ext_tools.ext_function_from_specs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="customize", style="solid"];
"scipy.weave.base_info.custom_info" -> "scipy.weave.ext_tools.ext_module" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="customize", style="solid"];
"scipy.weave.base_info.info_list" -> "scipy.weave.ext_tools.ext_module" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_build_information", style="solid"];
"scipy.weave.base_spec.arg_spec_list" -> "scipy.weave.ext_tools.ext_function_from_specs" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arg_specs", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.ExpFormat" -> "scipy.io.harwell_boeing.hb.HBInfo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="pointer_format", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.ExpFormat" -> "scipy.io.harwell_boeing.hb.HBInfo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="indices_format", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.ExpFormat" -> "scipy.io.harwell_boeing.hb.HBInfo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="values_format", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.IntFormat" -> "scipy.io.harwell_boeing.hb.HBInfo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="pointer_format", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.IntFormat" -> "scipy.io.harwell_boeing.hb.HBInfo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="indices_format", style="solid"];
"scipy.io.harwell_boeing._fortran_format_parser.IntFormat" -> "scipy.io.harwell_boeing.hb.HBInfo" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="values_format", style="solid"];
}
