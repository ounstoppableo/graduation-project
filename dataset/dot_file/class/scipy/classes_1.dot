digraph "classes_1" {
rankdir=BT
charset="utf-8"
"benchmarks.test_functions.Ackley" [color="black", fontcolor="black", label=<{Ackley|solution : list<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|der(x)<br ALIGN="LEFT"/>fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.special.Airy" [color="black", fontcolor="black", label=<{Airy|<br ALIGN="LEFT"/>|time_ai_zeros()<br ALIGN="LEFT"/>time_bi_zeros()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.stats.Anderson_KSamp" [color="black", fontcolor="black", label=<{Anderson_KSamp|rand<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_anderson_ksamp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Arithmetic" [color="black", fontcolor="black", label=<{Arithmetic|fn<br ALIGN="LEFT"/>matrices : dict<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup(format, XY, op)<br ALIGN="LEFT"/>time_arithmetic(format, XY, op)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.AsymmetricQuadratic" [color="black", fontcolor="black", label=<{AsymmetricQuadratic|<br ALIGN="LEFT"/>|der(x)<br ALIGN="LEFT"/>fun(x)<br ALIGN="LEFT"/>hess(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.Beale" [color="black", fontcolor="black", label=<{Beale|solution : ndarray<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|der(coords)<br ALIGN="LEFT"/>fun(coords)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.fftpack_pseudo_diffs.Bench" [color="black", fontcolor="black", label=<{Bench|a : int<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>sf<br ALIGN="LEFT"/>|setup(size, type)<br ALIGN="LEFT"/>time_diff(size, soltype)<br ALIGN="LEFT"/>time_hilbert(size, soltype)<br ALIGN="LEFT"/>time_shift(size, soltype)<br ALIGN="LEFT"/>time_tilbert(size, soltype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.linalg.Bench" [color="black", fontcolor="black", label=<{Bench|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(size, contig, module)<br ALIGN="LEFT"/>time_det(size, contig, module)<br ALIGN="LEFT"/>time_eigvals(size, contig, module)<br ALIGN="LEFT"/>time_inv(size, contig, module)<br ALIGN="LEFT"/>time_solve(size, contig, module)<br ALIGN="LEFT"/>time_svd(size, contig, module)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse_linalg_lobpcg.Bench" [color="black", fontcolor="black", label=<{Bench|A : coo_array, coo_matrix<br ALIGN="LEFT"/>A_dense<br ALIGN="LEFT"/>B : dia_matrix<br ALIGN="LEFT"/>B_dense<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>shape : tuple<br ALIGN="LEFT"/>|setup_mikota(n, solver)<br ALIGN="LEFT"/>setup_sakurai(n, solver)<br ALIGN="LEFT"/>time_mikota(n, solver)<br ALIGN="LEFT"/>time_sakurai(n, solver)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse_linalg_solve.Bench" [color="black", fontcolor="black", label=<{Bench|P_dense<br ALIGN="LEFT"/>P_sparse<br ALIGN="LEFT"/>b : ndarray<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(n, solver)<br ALIGN="LEFT"/>time_cg(n, solver)<br ALIGN="LEFT"/>time_spsolve(n, solver)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.interpolate.BenchPPoly" [color="black", fontcolor="black", label=<{BenchPPoly|pp : PPoly<br ALIGN="LEFT"/>xp : ndarray<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_evaluation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.optimize.BenchSmoothUnbounded" [color="black", fontcolor="black", label=<{BenchSmoothUnbounded|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>result : NoneType<br ALIGN="LEFT"/>|run_LJ(methods)<br ALIGN="LEFT"/>run_asymmetric_quadratic(methods)<br ALIGN="LEFT"/>run_beale(methods)<br ALIGN="LEFT"/>run_booth(methods)<br ALIGN="LEFT"/>run_rosenbrock(methods)<br ALIGN="LEFT"/>run_rosenbrock_tight(methods)<br ALIGN="LEFT"/>run_simple_quadratic(methods)<br ALIGN="LEFT"/>run_sin_1d(methods)<br ALIGN="LEFT"/>setup(func_name, method_name, ret_val)<br ALIGN="LEFT"/>track_all(func_name, method_name, ret_val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.common.Benchmark" [color="black", fontcolor="black", label=<{Benchmark|goal_time : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"benchmarks.sparse_linalg_onenormest.BenchmarkOneNormEst" [color="black", fontcolor="black", label=<{BenchmarkOneNormEst|matrices : list<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(n, solver)<br ALIGN="LEFT"/>time_onenormest(n, solver)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.Booth" [color="black", fontcolor="black", label=<{Booth|solution : ndarray<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|der(coords)<br ALIGN="LEFT"/>fun(coords)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.spatial.Build" [color="black", fontcolor="black", label=<{Build|T : KDTree<br ALIGN="LEFT"/>cls : KDTree<br ALIGN="LEFT"/>data : ndarray<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>queries : ndarray<br ALIGN="LEFT"/>|setup(mnr, cls_name)<br ALIGN="LEFT"/>time_build(mnr, cls_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.signal.CalculateWindowedFFT" [color="black", fontcolor="black", label=<{CalculateWindowedFFT|x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_csd()<br ALIGN="LEFT"/>time_welch()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Construction" [color="black", fontcolor="black", label=<{Construction|A<br ALIGN="LEFT"/>cls<br ALIGN="LEFT"/>formats : dict<br ALIGN="LEFT"/>matrices : dict<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(name, format)<br ALIGN="LEFT"/>time_construction(name, format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Conversion" [color="black", fontcolor="black", label=<{Conversion|A : dia_matrix<br ALIGN="LEFT"/>fn<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(fromfmt, tofmt)<br ALIGN="LEFT"/>time_conversion(fromfmt, tofmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.signal.Convolve2D" [color="black", fontcolor="black", label=<{Convolve2D|pairs : list<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_convolutions()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.stats.CorrelationFunctions" [color="black", fontcolor="black", label=<{CorrelationFunctions|a<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(mode)<br ALIGN="LEFT"/>time_fisher_exact(alternative)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.CrossInTray" [color="black", fontcolor="black", label=<{CrossInTray|solution : list<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.stats.Distribution" [color="black", fontcolor="black", label=<{Distribution|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|setup(distribution, properties)<br ALIGN="LEFT"/>time_distribution(distribution, properties)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.EggHolder" [color="black", fontcolor="black", label=<{EggHolder|solution : list<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.special.Erf" [color="black", fontcolor="black", label=<{Erf|rand<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_real(offset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse_linalg_expm.Expm" [color="black", fontcolor="black", label=<{Expm|A_dense<br ALIGN="LEFT"/>A_sparse : csc_matrix<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(n, format)<br ALIGN="LEFT"/>time_expm(n, format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse_linalg_expm.ExpmMultiply" [color="black", fontcolor="black", label=<{ExpmMultiply|A : csr_matrix<br ALIGN="LEFT"/>A_dense<br ALIGN="LEFT"/>i : int<br ALIGN="LEFT"/>j : int<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_expm_multiply(format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.fftpack_basic.Fft" [color="black", fontcolor="black", label=<{Fft|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|setup(size, cmplx, module)<br ALIGN="LEFT"/>time_fft(size, cmplx, module)<br ALIGN="LEFT"/>time_ifft(size, cmplx, module)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.fftpack_basic.Fftn" [color="black", fontcolor="black", label=<{Fftn|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|setup(size, cmplx, module)<br ALIGN="LEFT"/>time_fftn(size, cmplx, module)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Getset" [color="black", fontcolor="black", label=<{Getset|A : coo_matrix<br ALIGN="LEFT"/>i : int, list, matrix<br ALIGN="LEFT"/>j : int, list, matrix<br ALIGN="LEFT"/>m<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>v : float<br ALIGN="LEFT"/>|setup(N, sparsity_pattern, format)<br ALIGN="LEFT"/>track_fancy_getitem(N, sparsity_pattern, format)<br ALIGN="LEFT"/>track_fancy_setitem(N, sparsity_pattern, format)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.HolderTable" [color="black", fontcolor="black", label=<{HolderTable|solution : list<br ALIGN="LEFT"/>stepsize : float<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>temperature : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|dabs(x)<br ALIGN="LEFT"/>fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.stats.InferentialStats" [color="black", fontcolor="black", label=<{InferentialStats|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_ttest_ind_diff_var()<br ALIGN="LEFT"/>time_ttest_ind_same_var()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.LJ" [color="black", fontcolor="black", label=<{LJ|eps : float<br ALIGN="LEFT"/>sig : float<br ALIGN="LEFT"/>|der(coords)<br ALIGN="LEFT"/>dvij(r)<br ALIGN="LEFT"/>fun(coords)<br ALIGN="LEFT"/>get_random_configuration()<br ALIGN="LEFT"/>vij(r)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.LJ13" [color="black", fontcolor="black", label=<{LJ13|natoms : int<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"benchmarks.test_functions.LJ20" [color="black", fontcolor="black", label=<{LJ20|natoms : int<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"benchmarks.test_functions.LJ30" [color="black", fontcolor="black", label=<{LJ30|natoms : int<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"benchmarks.test_functions.LJ38" [color="black", fontcolor="black", label=<{LJ38|natoms : int<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"benchmarks.signal.LTI" [color="black", fontcolor="black", label=<{LTI|system : lti<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>u<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_lsim()<br ALIGN="LEFT"/>time_lsim2()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.interpolate.Leaks" [color="black", fontcolor="black", label=<{Leaks|unit : str<br ALIGN="LEFT"/>|track_leaks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.Levi" [color="black", fontcolor="black", label=<{Levi|solution : list<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|der(x)<br ALIGN="LEFT"/>fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Matmul" [color="black", fontcolor="black", label=<{Matmul|matrix1 : csr_matrix<br ALIGN="LEFT"/>matrix2 : csr_matrix<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_large()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Matvec" [color="black", fontcolor="black", label=<{Matvec|A<br ALIGN="LEFT"/>matrices : OrderedDict<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>|setup(matrix)<br ALIGN="LEFT"/>time_matvec(matrix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Matvecs" [color="black", fontcolor="black", label=<{Matvecs|matrices : dict<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>time_matvecs(fmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.io_matlab.MemUsage" [color="black", fontcolor="black", label=<{MemUsage|filename<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>sizes : OrderedDict<br ALIGN="LEFT"/>timeout : int<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|setup(size, compressed)<br ALIGN="LEFT"/>teardown(size, compressed)<br ALIGN="LEFT"/>track_loadmat(size, compressed)<br ALIGN="LEFT"/>track_savemat(size, compressed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.spatial.Neighbors" [color="black", fontcolor="black", label=<{Neighbors|T1 : KDTree<br ALIGN="LEFT"/>T2 : KDTree<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(mn1n2, probe_radius, cls_str)<br ALIGN="LEFT"/>time_count_neighbors(mn1n2, probe_radius, cls_str)<br ALIGN="LEFT"/>time_sparse_distance_matrix(mn1n2, probe_radius, cls_str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.linalg.Norm" [color="black", fontcolor="black", label=<{Norm|a<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(shape, contig, module)<br ALIGN="LEFT"/>time_1_norm(size, contig, module)<br ALIGN="LEFT"/>time_frobenius_norm(size, contig, module)<br ALIGN="LEFT"/>time_inf_norm(size, contig, module)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.NullSlice" [color="black", fontcolor="black", label=<{NullSlice|X : coo_matrix<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(density)<br ALIGN="LEFT"/>time_10000_rows(density)<br ALIGN="LEFT"/>time_100_cols(density)<br ALIGN="LEFT"/>time_3_cols(density)<br ALIGN="LEFT"/>time_3_rows(density)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.spatial.Query" [color="black", fontcolor="black", label=<{Query|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|do_setup(self, mnr, cls_name)<br ALIGN="LEFT"/>setup(mnr, cls_name)<br ALIGN="LEFT"/>time_query(mnr, cls_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.fftpack_basic.RFft" [color="black", fontcolor="black", label=<{RFft|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|setup(size, module)<br ALIGN="LEFT"/>time_irfft(size, module)<br ALIGN="LEFT"/>time_rfft(size, module)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.spatial.Radius" [color="black", fontcolor="black", label=<{Radius|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(mnr, probe_radius, cls_name)<br ALIGN="LEFT"/>time_query_ball_point(mnr, probe_radius, cls_name)<br ALIGN="LEFT"/>time_query_pairs(mnr, probe_radius, cls_name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.Schaffer2" [color="black", fontcolor="black", label=<{Schaffer2|solution : list<br ALIGN="LEFT"/>target_E : int<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.Schaffer4" [color="black", fontcolor="black", label=<{Schaffer4|solution : list<br ALIGN="LEFT"/>target_E : float<br ALIGN="LEFT"/>xmax : ndarray<br ALIGN="LEFT"/>xmin : ndarray<br ALIGN="LEFT"/>|fun(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.test_functions.SimpleQuadratic" [color="black", fontcolor="black", label=<{SimpleQuadratic|<br ALIGN="LEFT"/>|der(x)<br ALIGN="LEFT"/>fun(x)<br ALIGN="LEFT"/>hess(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.linalg_solve_toeplitz.SolveToeplitz" [color="black", fontcolor="black", label=<{SolveToeplitz|T<br ALIGN="LEFT"/>c<br ALIGN="LEFT"/>param_names : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|setup(dtype, n, soltype)<br ALIGN="LEFT"/>time_solve_toeplitz(dtype, n, soltype)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.sparse.Sort" [color="black", fontcolor="black", label=<{Sort|A : csr_matrix<br ALIGN="LEFT"/>matrices : dict<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(matrix)<br ALIGN="LEFT"/>time_sort(matrix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.linalg_sqrtm.Sqrtm" [color="black", fontcolor="black", label=<{Sqrtm|A<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(dtype, n, blocksize)<br ALIGN="LEFT"/>time_sqrtm(dtype, n, blocksize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.io_matlab.StructArr" [color="black", fontcolor="black", label=<{StructArr|param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>str_io : BytesIO<br ALIGN="LEFT"/>var_dict : dict<br ALIGN="LEFT"/>|make_structarr(n_vars, n_fields, n_structs)<br ALIGN="LEFT"/>setup(nvfs, compression)<br ALIGN="LEFT"/>time_loadmat(nvfs, compression)<br ALIGN="LEFT"/>time_savemat(nvfs, compression)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.optimize_zeros.Zeros" [color="black", fontcolor="black", label=<{Zeros|a : float<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>meth<br ALIGN="LEFT"/>param_names : list<br ALIGN="LEFT"/>params : list<br ALIGN="LEFT"/>|setup(func, meth)<br ALIGN="LEFT"/>time_zeros(func, meth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.optimize._BenchOptimizers" [color="black", fontcolor="black", label=<{_BenchOptimizers|der : NoneType<br ALIGN="LEFT"/>fun<br ALIGN="LEFT"/>function_name<br ALIGN="LEFT"/>hess : NoneType<br ALIGN="LEFT"/>minimizer_kwargs : dict<br ALIGN="LEFT"/>results : list<br ALIGN="LEFT"/>|add_result(result, t, name)<br ALIGN="LEFT"/>average_results()<br ALIGN="LEFT"/>bench_run(x0, methods)<br ALIGN="LEFT"/>print_results()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"benchmarks.fftpack_basic.Fft" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.fftpack_basic.Fftn" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.fftpack_basic.RFft" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.fftpack_pseudo_diffs.Bench" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.interpolate.BenchPPoly" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.interpolate.Leaks" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.io_matlab.MemUsage" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.io_matlab.StructArr" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.linalg.Bench" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.linalg.Norm" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.linalg_solve_toeplitz.SolveToeplitz" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.linalg_sqrtm.Sqrtm" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.optimize.BenchSmoothUnbounded" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.optimize._BenchOptimizers" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.optimize_zeros.Zeros" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.signal.CalculateWindowedFFT" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.signal.Convolve2D" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.signal.LTI" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Arithmetic" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Construction" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Conversion" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Getset" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Matmul" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Matvec" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Matvecs" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.NullSlice" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse.Sort" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse_linalg_expm.Expm" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse_linalg_expm.ExpmMultiply" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse_linalg_lobpcg.Bench" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse_linalg_onenormest.BenchmarkOneNormEst" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.sparse_linalg_solve.Bench" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.spatial.Build" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.spatial.Neighbors" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.spatial.Query" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.spatial.Radius" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.special.Airy" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.special.Erf" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.stats.Anderson_KSamp" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.stats.CorrelationFunctions" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.stats.Distribution" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.stats.InferentialStats" -> "benchmarks.common.Benchmark" [arrowhead="empty", arrowtail="none"];
"benchmarks.test_functions.LJ13" -> "benchmarks.test_functions.LJ" [arrowhead="empty", arrowtail="none"];
"benchmarks.test_functions.LJ20" -> "benchmarks.test_functions.LJ" [arrowhead="empty", arrowtail="none"];
"benchmarks.test_functions.LJ30" -> "benchmarks.test_functions.LJ" [arrowhead="empty", arrowtail="none"];
"benchmarks.test_functions.LJ38" -> "benchmarks.test_functions.LJ" [arrowhead="empty", arrowtail="none"];
}
