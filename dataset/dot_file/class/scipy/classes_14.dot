digraph "classes_14" {
rankdir=BT
charset="utf-8"
"test_base.BinopTester" [color="black", fontcolor="black", label=<{BinopTester|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_base.Test64Bit" [color="black", fontcolor="black", label=<{Test64Bit|MAT_CLASSES : list<br ALIGN="LEFT"/>SKIP_TESTS : dict<br ALIGN="LEFT"/>TEST_CLASSES : list<br ALIGN="LEFT"/>|test_decorator_maxval_limit()<br ALIGN="LEFT"/>test_decorator_maxval_random()<br ALIGN="LEFT"/>test_downcast_intp()<br ALIGN="LEFT"/>test_no_64()<br ALIGN="LEFT"/>test_resiliency_all_32()<br ALIGN="LEFT"/>test_resiliency_all_64()<br ALIGN="LEFT"/>test_resiliency_limit_10()<br ALIGN="LEFT"/>test_resiliency_random()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestBSR" [color="black", fontcolor="black", label=<{TestBSR|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : bsr_matrix<br ALIGN="LEFT"/>|test_bsr_matvec()<br ALIGN="LEFT"/>test_bsr_matvecs()<br ALIGN="LEFT"/>test_constructor1()<br ALIGN="LEFT"/>test_constructor2()<br ALIGN="LEFT"/>test_eliminate_zeros()<br ALIGN="LEFT"/><I>test_iterator</I>()<br ALIGN="LEFT"/><I>test_setdiag</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestBSRNonCanonical" [color="black", fontcolor="black", label=<{TestBSRNonCanonical|<br ALIGN="LEFT"/>|<I>test_diagonal</I>()<br ALIGN="LEFT"/><I>test_empty</I>()<br ALIGN="LEFT"/><I>test_eq</I>()<br ALIGN="LEFT"/><I>test_expm</I>()<br ALIGN="LEFT"/><I>test_ge</I>()<br ALIGN="LEFT"/><I>test_gt</I>()<br ALIGN="LEFT"/><I>test_le</I>()<br ALIGN="LEFT"/><I>test_lt</I>()<br ALIGN="LEFT"/><I>test_maximum_minimum</I>()<br ALIGN="LEFT"/><I>test_ne</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestCOO" [color="black", fontcolor="black", label=<{TestCOO|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : coo_matrix<br ALIGN="LEFT"/>|test_constructor1()<br ALIGN="LEFT"/>test_constructor2()<br ALIGN="LEFT"/>test_constructor3()<br ALIGN="LEFT"/>test_constructor4()<br ALIGN="LEFT"/><I>test_iterator</I>()<br ALIGN="LEFT"/>test_sum_duplicates()<br ALIGN="LEFT"/>test_todia_all_zeros()<br ALIGN="LEFT"/>test_todok_duplicates()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestCOONonCanonical" [color="black", fontcolor="black", label=<{TestCOONonCanonical|<br ALIGN="LEFT"/>|<I>test_empty</I>()<br ALIGN="LEFT"/>test_setdiag_noncanonical()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestCSC" [color="black", fontcolor="black", label=<{TestCSC|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : csc_matrix<br ALIGN="LEFT"/>|test_constructor1()<br ALIGN="LEFT"/>test_constructor2()<br ALIGN="LEFT"/>test_constructor3()<br ALIGN="LEFT"/>test_constructor4()<br ALIGN="LEFT"/>test_constructor5()<br ALIGN="LEFT"/>test_eliminate_zeros()<br ALIGN="LEFT"/>test_fancy_indexing_broadcast()<br ALIGN="LEFT"/>test_sort_indices()<br ALIGN="LEFT"/>test_ufuncs()<br ALIGN="LEFT"/>test_unsorted_arithmetic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestCSCNonCanonical" [color="black", fontcolor="black", label=<{TestCSCNonCanonical|<br ALIGN="LEFT"/>|<I>test_empty</I>()<br ALIGN="LEFT"/><I>test_nonzero</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestCSR" [color="black", fontcolor="black", label=<{TestCSR|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : csr_matrix<br ALIGN="LEFT"/>|test_constructor1()<br ALIGN="LEFT"/>test_constructor2()<br ALIGN="LEFT"/>test_constructor3()<br ALIGN="LEFT"/>test_constructor4()<br ALIGN="LEFT"/>test_constructor5()<br ALIGN="LEFT"/>test_eliminate_zeros()<br ALIGN="LEFT"/>test_fancy_indexing_broadcast()<br ALIGN="LEFT"/>test_has_canonical_format()<br ALIGN="LEFT"/>test_has_sorted_indices()<br ALIGN="LEFT"/>test_sort_indices()<br ALIGN="LEFT"/>test_ufuncs()<br ALIGN="LEFT"/>test_unsorted_arithmetic()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestCSRNonCanonical" [color="black", fontcolor="black", label=<{TestCSRNonCanonical|<br ALIGN="LEFT"/>|<I>test_empty</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestDIA" [color="black", fontcolor="black", label=<{TestDIA|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : dia_matrix<br ALIGN="LEFT"/>|test_constructor1()<br ALIGN="LEFT"/><I>test_iterator</I>()<br ALIGN="LEFT"/>test_setdiag_dtype()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestDOK" [color="black", fontcolor="black", label=<{TestDOK|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : dok_matrix<br ALIGN="LEFT"/>|test_add_nonzero()<br ALIGN="LEFT"/><I>test_add_sub</I>()<br ALIGN="LEFT"/>test_convert()<br ALIGN="LEFT"/>test_ctor()<br ALIGN="LEFT"/>test_dok_divide_scalar()<br ALIGN="LEFT"/><I>test_fancy_indexing</I>()<br ALIGN="LEFT"/>test_mult()<br ALIGN="LEFT"/>test_resize()<br ALIGN="LEFT"/>test_ticket1160()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base.TestLIL" [color="black", fontcolor="black", label=<{TestLIL|checked_dtypes : list<br ALIGN="LEFT"/>spmatrix : lil_matrix<br ALIGN="LEFT"/>|test_dot()<br ALIGN="LEFT"/>test_fancy_indexing_lil()<br ALIGN="LEFT"/>test_inplace_ops()<br ALIGN="LEFT"/>test_lil_from_csr()<br ALIGN="LEFT"/>test_lil_iteration()<br ALIGN="LEFT"/>test_lil_multiply_removal()<br ALIGN="LEFT"/>test_point_wise_multiply()<br ALIGN="LEFT"/>test_reshape()<br ALIGN="LEFT"/>test_scalar_mul()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._NonCanonicalCSMixin" [color="black", fontcolor="black", label=<{_NonCanonicalCSMixin|<br ALIGN="LEFT"/>|<I>test_elementwise_multiply_broadcast</I>()<br ALIGN="LEFT"/><I>test_fancy_indexing_sparse_boolean</I>()<br ALIGN="LEFT"/><I>test_inv</I>()<br ALIGN="LEFT"/><I>test_solve</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._NonCanonicalCompressedMixin" [color="black", fontcolor="black", label=<{_NonCanonicalCompressedMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_base._NonCanonicalMixin" [color="black", fontcolor="black", label=<{_NonCanonicalMixin|<br ALIGN="LEFT"/>|spmatrix(D)<br ALIGN="LEFT"/><I>test_abs</I>()<br ALIGN="LEFT"/><I>test_binary_ufunc_overrides</I>()<br ALIGN="LEFT"/><I>test_bool</I>()<br ALIGN="LEFT"/><I>test_getnnz_axis</I>()<br ALIGN="LEFT"/><I>test_minmax</I>()<br ALIGN="LEFT"/><I>test_sparse_format_conversions</I>()<br ALIGN="LEFT"/><I>test_unary_ufunc_overrides</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestArithmetic" [color="black", fontcolor="black", label=<{_TestArithmetic|<br ALIGN="LEFT"/>|test_add_sub()<br ALIGN="LEFT"/>test_mu()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestCommon" [color="black", fontcolor="black", label=<{_TestCommon|checked_dtypes<br ALIGN="LEFT"/>dat : matrix<br ALIGN="LEFT"/>dat_dtypes : dict<br ALIGN="LEFT"/>datsp<br ALIGN="LEFT"/>datsp_dtypes : dict<br ALIGN="LEFT"/>|test_abs()<br ALIGN="LEFT"/>test_add()<br ALIGN="LEFT"/>test_add0()<br ALIGN="LEFT"/>test_add_dense()<br ALIGN="LEFT"/>test_asfptype()<br ALIGN="LEFT"/>test_astype()<br ALIGN="LEFT"/>test_binary_ufunc_overrides()<br ALIGN="LEFT"/>test_binop_custom_type()<br ALIGN="LEFT"/>test_bool()<br ALIGN="LEFT"/>test_bool_rollover()<br ALIGN="LEFT"/>test_copy()<br ALIGN="LEFT"/>test_diagonal()<br ALIGN="LEFT"/>test_elementwise_divide()<br ALIGN="LEFT"/>test_elementwise_multiply()<br ALIGN="LEFT"/>test_elementwise_multiply_broadcast()<br ALIGN="LEFT"/>test_elementwise_power()<br ALIGN="LEFT"/>test_empty()<br ALIGN="LEFT"/>test_empty_arithmetic()<br ALIGN="LEFT"/>test_eq()<br ALIGN="LEFT"/>test_expm()<br ALIGN="LEFT"/>test_from_array()<br ALIGN="LEFT"/>test_from_list()<br ALIGN="LEFT"/>test_from_matrix()<br ALIGN="LEFT"/>test_from_sparse()<br ALIGN="LEFT"/>test_ge()<br ALIGN="LEFT"/>test_getcol()<br ALIGN="LEFT"/>test_getrow()<br ALIGN="LEFT"/>test_gt()<br ALIGN="LEFT"/>test_imag()<br ALIGN="LEFT"/>test_inv()<br ALIGN="LEFT"/>test_invalid_shapes()<br ALIGN="LEFT"/>test_iterator()<br ALIGN="LEFT"/>test_le()<br ALIGN="LEFT"/>test_lt()<br ALIGN="LEFT"/>test_matmat_dense()<br ALIGN="LEFT"/>test_matmat_sparse()<br ALIGN="LEFT"/>test_matvec()<br ALIGN="LEFT"/>test_maximum_minimum()<br ALIGN="LEFT"/>test_mean()<br ALIGN="LEFT"/>test_mul_scalar()<br ALIGN="LEFT"/>test_ne()<br ALIGN="LEFT"/>test_neg()<br ALIGN="LEFT"/>test_nonzero()<br ALIGN="LEFT"/>test_pow()<br ALIGN="LEFT"/>test_radd()<br ALIGN="LEFT"/>test_real()<br ALIGN="LEFT"/>test_repr()<br ALIGN="LEFT"/>test_rmatvec()<br ALIGN="LEFT"/>test_rmul_scalar()<br ALIGN="LEFT"/>test_rsub()<br ALIGN="LEFT"/>test_setdiag()<br ALIGN="LEFT"/>test_size_zero_conversions()<br ALIGN="LEFT"/>test_size_zero_matrix_arithmetic()<br ALIGN="LEFT"/>test_small_multiplication()<br ALIGN="LEFT"/>test_sparse_format_conversions()<br ALIGN="LEFT"/>test_str()<br ALIGN="LEFT"/>test_sub()<br ALIGN="LEFT"/>test_sub_dense()<br ALIGN="LEFT"/>test_sum()<br ALIGN="LEFT"/>test_toarray()<br ALIGN="LEFT"/>test_tobsr()<br ALIGN="LEFT"/>test_todense()<br ALIGN="LEFT"/>test_transpose()<br ALIGN="LEFT"/>test_ufunc_object_array()<br ALIGN="LEFT"/>test_unary_ufunc_overrides()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestFancyIndexing" [color="black", fontcolor="black", label=<{_TestFancyIndexing|<br ALIGN="LEFT"/>|test_bad_index()<br ALIGN="LEFT"/>test_fancy_indexing()<br ALIGN="LEFT"/>test_fancy_indexing_boolean()<br ALIGN="LEFT"/>test_fancy_indexing_empty()<br ALIGN="LEFT"/>test_fancy_indexing_randomized()<br ALIGN="LEFT"/>test_fancy_indexing_regression_3087()<br ALIGN="LEFT"/>test_fancy_indexing_seq_assign()<br ALIGN="LEFT"/>test_fancy_indexing_sparse_boolean()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestFancyIndexingAssign" [color="black", fontcolor="black", label=<{_TestFancyIndexingAssign|<br ALIGN="LEFT"/>|test_bad_index_assign()<br ALIGN="LEFT"/>test_fancy_assign_empty()<br ALIGN="LEFT"/>test_fancy_assignment_dtypes()<br ALIGN="LEFT"/>test_fancy_indexing_set()<br ALIGN="LEFT"/>test_sequence_assignment()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestFancyMultidim" [color="black", fontcolor="black", label=<{_TestFancyMultidim|<br ALIGN="LEFT"/>|test_fancy_indexing_ndarray()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestFancyMultidimAssign" [color="black", fontcolor="black", label=<{_TestFancyMultidimAssign|<br ALIGN="LEFT"/>|test_fancy_assign_list()<br ALIGN="LEFT"/>test_fancy_assign_ndarray()<br ALIGN="LEFT"/>test_fancy_assign_slice()<br ALIGN="LEFT"/>test_fancy_indexing_multidim_set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestGetNnzAxis" [color="black", fontcolor="black", label=<{_TestGetNnzAxis|<br ALIGN="LEFT"/>|test_getnnz_axis()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestGetSet" [color="black", fontcolor="black", label=<{_TestGetSet|<br ALIGN="LEFT"/>|test_getelement()<br ALIGN="LEFT"/>test_index_scalar_assign()<br ALIGN="LEFT"/>test_negative_index_assignment()<br ALIGN="LEFT"/>test_scalar_assign_2()<br ALIGN="LEFT"/>test_setelement()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestInplaceArithmetic" [color="black", fontcolor="black", label=<{_TestInplaceArithmetic|<br ALIGN="LEFT"/>|test_idiv_scalar()<br ALIGN="LEFT"/>test_imul_scalar()<br ALIGN="LEFT"/>test_inplace_dense()<br ALIGN="LEFT"/>test_inplace_success()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestMinMax" [color="black", fontcolor="black", label=<{_TestMinMax|<br ALIGN="LEFT"/>|test_minmax()<br ALIGN="LEFT"/>test_minmax_axis()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestSlicing" [color="black", fontcolor="black", label=<{_TestSlicing|<br ALIGN="LEFT"/>|test_dtype_preservation()<br ALIGN="LEFT"/>test_ellipsis_slicing()<br ALIGN="LEFT"/>test_get_horiz_slice()<br ALIGN="LEFT"/>test_get_slices()<br ALIGN="LEFT"/>test_get_vert_slice()<br ALIGN="LEFT"/>test_multiple_ellipsis_slicing()<br ALIGN="LEFT"/>test_non_unit_stride_2d_indexing()<br ALIGN="LEFT"/>test_slicing_2()<br ALIGN="LEFT"/>test_slicing_3()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestSlicingAssign" [color="black", fontcolor="black", label=<{_TestSlicingAssign|<br ALIGN="LEFT"/>|test_self_self_assignment()<br ALIGN="LEFT"/>test_set_slice()<br ALIGN="LEFT"/>test_slice_assign_2()<br ALIGN="LEFT"/>test_slice_assignment()<br ALIGN="LEFT"/>test_slice_scalar_assign()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._TestSolve" [color="black", fontcolor="black", label=<{_TestSolve|<br ALIGN="LEFT"/>|test_solve()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"test_base._UFuncCheck" [color="black", fontcolor="black", label=<{_UFuncCheck|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"test_base.TestBSRNonCanonical" -> "test_base.TestBSR" [arrowhead="empty", arrowtail="none"];
"test_base.TestBSRNonCanonical" -> "test_base._NonCanonicalCompressedMixin" [arrowhead="empty", arrowtail="none"];
"test_base.TestCOONonCanonical" -> "test_base.TestCOO" [arrowhead="empty", arrowtail="none"];
"test_base.TestCOONonCanonical" -> "test_base._NonCanonicalMixin" [arrowhead="empty", arrowtail="none"];
"test_base.TestCSCNonCanonical" -> "test_base.TestCSC" [arrowhead="empty", arrowtail="none"];
"test_base.TestCSCNonCanonical" -> "test_base._NonCanonicalCSMixin" [arrowhead="empty", arrowtail="none"];
"test_base.TestCSRNonCanonical" -> "test_base.TestCSR" [arrowhead="empty", arrowtail="none"];
"test_base.TestCSRNonCanonical" -> "test_base._NonCanonicalCSMixin" [arrowhead="empty", arrowtail="none"];
"test_base._NonCanonicalCSMixin" -> "test_base._NonCanonicalCompressedMixin" [arrowhead="empty", arrowtail="none"];
"test_base._NonCanonicalCompressedMixin" -> "test_base._NonCanonicalMixin" [arrowhead="empty", arrowtail="none"];
}
