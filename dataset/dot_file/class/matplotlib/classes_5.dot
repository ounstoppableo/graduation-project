digraph "classes_matplotlib" {
rankdir=BT
charset="utf-8"
"matplotlib.afm.AFM" [color="black", fontcolor="black", label=<{AFM|fname : NoneType, str<br ALIGN="LEFT"/>|get_angle()<br ALIGN="LEFT"/>get_bbox_char(c, isord)<br ALIGN="LEFT"/>get_capheight()<br ALIGN="LEFT"/>get_familyname()<br ALIGN="LEFT"/>get_fontname()<br ALIGN="LEFT"/>get_fullname()<br ALIGN="LEFT"/>get_height_char(c, isord)<br ALIGN="LEFT"/>get_horizontal_stem_width()<br ALIGN="LEFT"/>get_kern_dist(c1, c2)<br ALIGN="LEFT"/>get_kern_dist_from_name(name1, name2)<br ALIGN="LEFT"/>get_name_char(c, isord)<br ALIGN="LEFT"/>get_str_bbox(s)<br ALIGN="LEFT"/>get_str_bbox_and_descent(s)<br ALIGN="LEFT"/>get_underline_thickness()<br ALIGN="LEFT"/>get_vertical_stem_width()<br ALIGN="LEFT"/>get_weight()<br ALIGN="LEFT"/>get_width_char(c, isord)<br ALIGN="LEFT"/>get_width_from_char_name(name)<br ALIGN="LEFT"/>get_xheight()<br ALIGN="LEFT"/>string_width_height(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.AVConvBase" [color="black", fontcolor="black", label=<{AVConvBase|args_key : str<br ALIGN="LEFT"/>exec_key : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.AVConvFileWriter" [color="black", fontcolor="black", label=<{AVConvFileWriter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.AVConvWriter" [color="black", fontcolor="black", label=<{AVConvWriter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patheffects.AbstractPathEffect" [color="black", fontcolor="black", label=<{AbstractPathEffect|<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>get_proxy_renderer(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Accent" [color="black", fontcolor="black", label=<{Accent|depth : int<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|grow()<br ALIGN="LEFT"/>render(x, y)<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.Affine2D" [color="black", fontcolor="black", label=<{Affine2D|is_separable<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>from_values(a, b, c, d, e, f)<br ALIGN="LEFT"/>get_matrix()<br ALIGN="LEFT"/>identity()<br ALIGN="LEFT"/>rotate(theta)<br ALIGN="LEFT"/>rotate_around(x, y, theta)<br ALIGN="LEFT"/>rotate_deg(degrees)<br ALIGN="LEFT"/>rotate_deg_around(x, y, degrees)<br ALIGN="LEFT"/>scale(sx, sy)<br ALIGN="LEFT"/>set(other)<br ALIGN="LEFT"/>set_matrix(mtx)<br ALIGN="LEFT"/>skew(xShear, yShear)<br ALIGN="LEFT"/>skew_deg(xShear, yShear)<br ALIGN="LEFT"/>translate(tx, ty)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.Affine2DBase" [color="black", fontcolor="black", label=<{Affine2DBase|has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|frozen()<br ALIGN="LEFT"/>inverted()<br ALIGN="LEFT"/>matrix_from_values(a, b, c, d, e, f)<br ALIGN="LEFT"/>to_values()<br ALIGN="LEFT"/>transform_affine(points)<br ALIGN="LEFT"/>transform_point(point)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.AffineBase" [color="black", fontcolor="black", label=<{AffineBase|is_affine : bool<br ALIGN="LEFT"/>|get_affine()<br ALIGN="LEFT"/>transform(values)<br ALIGN="LEFT"/><I>transform_affine</I>(values)<br ALIGN="LEFT"/>transform_non_affine(points)<br ALIGN="LEFT"/>transform_path(path)<br ALIGN="LEFT"/>transform_path_affine(path)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.AitoffAxes" [color="black", fontcolor="black", label=<{AitoffAxes|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.geo.AitoffAxes.AitoffTransform" [color="black", fontcolor="black", label=<{AitoffTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(ll)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication.AllFiguresPage" [color="black", fontcolor="black", label=<{AllFiguresPage|url_prefix<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.AnchoredOffsetbox" [color="black", fontcolor="black", label=<{AnchoredOffsetbox|borderpad : float<br ALIGN="LEFT"/>loc<br ALIGN="LEFT"/>pad : float<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>prop<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_bbox_to_anchor()<br ALIGN="LEFT"/>get_child()<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_extent(renderer)<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_bbox_to_anchor(bbox, transform)<br ALIGN="LEFT"/>set_child(child)<br ALIGN="LEFT"/>update_frame(bbox, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.AnchoredText" [color="black", fontcolor="black", label=<{AnchoredText|txt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle.Angle" [color="black", fontcolor="black", label=<{Angle|angleA : int<br ALIGN="LEFT"/>angleB : int<br ALIGN="LEFT"/>rad : float<br ALIGN="LEFT"/>|connect(posA, posB)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle.Angle3" [color="black", fontcolor="black", label=<{Angle3|angleA : int<br ALIGN="LEFT"/>angleB : int<br ALIGN="LEFT"/>|connect(posA, posB)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.Animation" [color="black", fontcolor="black", label=<{Animation|event_source : NoneType<br ALIGN="LEFT"/>frame_seq<br ALIGN="LEFT"/>|new_frame_seq()<br ALIGN="LEFT"/>new_saved_frame_seq()<br ALIGN="LEFT"/>save(filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.text.Annotation" [color="black", fontcolor="black", label=<{Annotation|anncoords<br ALIGN="LEFT"/>arrow : NoneType<br ALIGN="LEFT"/>arrow_patch : NoneType<br ALIGN="LEFT"/>arrowprops : NoneType<br ALIGN="LEFT"/>xyann<br ALIGN="LEFT"/>|contains(event)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>update_bbox_position_size(renderer)<br ALIGN="LEFT"/>update_positions(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.AnnotationBbox" [color="black", fontcolor="black", label=<{AnnotationBbox|anncoords<br ALIGN="LEFT"/>arrow_patch : NoneType<br ALIGN="LEFT"/>arrowprops : NoneType<br ALIGN="LEFT"/>boxcoords : str<br ALIGN="LEFT"/>offsetbox<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>prop<br ALIGN="LEFT"/>xyann<br ALIGN="LEFT"/>xybox<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|contains(event)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_fontsize(s)<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>set_fontsize(s)<br ALIGN="LEFT"/>update_positions(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_legend.TestLegendFunction.test_old_legend_handler_interface.AnyObject" [color="black", fontcolor="black", label=<{AnyObject|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_legend.TestLegendFunction.test_old_legend_handler_interface.AnyObjectHandler" [color="black", fontcolor="black", label=<{AnyObjectHandler|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.docstring.Appender" [color="black", fontcolor="black", label=<{Appender|addendum<br ALIGN="LEFT"/>join : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.Arc" [color="black", fontcolor="black", label=<{Arc|theta1 : float<br ALIGN="LEFT"/>theta2 : float<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle.Arc" [color="black", fontcolor="black", label=<{Arc|angleA : int<br ALIGN="LEFT"/>angleB : int<br ALIGN="LEFT"/>armA : NoneType<br ALIGN="LEFT"/>armB : NoneType<br ALIGN="LEFT"/>rad : float<br ALIGN="LEFT"/>|connect(posA, posB)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle.Arc3" [color="black", fontcolor="black", label=<{Arc3|rad : float<br ALIGN="LEFT"/>|connect(posA, posB)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Arrow" [color="black", fontcolor="black", label=<{Arrow|<br ALIGN="LEFT"/>|get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle" [color="black", fontcolor="black", label=<{ArrowStyle|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.artist.Artist" [color="black", fontcolor="black", label=<{Artist|aname : str<br ALIGN="LEFT"/>axes : NoneType<br ALIGN="LEFT"/>clipbox : NoneType<br ALIGN="LEFT"/>eventson : bool<br ALIGN="LEFT"/>figure : NoneType<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|add_callback(func)<br ALIGN="LEFT"/>contains(mouseevent)<br ALIGN="LEFT"/>convert_xunits(x)<br ALIGN="LEFT"/>convert_yunits(y)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>findobj(match, include_self)<br ALIGN="LEFT"/>get_agg_filter()<br ALIGN="LEFT"/>get_alpha()<br ALIGN="LEFT"/>get_animated()<br ALIGN="LEFT"/>get_axes()<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_clip_box()<br ALIGN="LEFT"/>get_clip_on()<br ALIGN="LEFT"/>get_clip_path()<br ALIGN="LEFT"/>get_contains()<br ALIGN="LEFT"/>get_figure()<br ALIGN="LEFT"/>get_gid()<br ALIGN="LEFT"/>get_label()<br ALIGN="LEFT"/>get_path_effects()<br ALIGN="LEFT"/>get_picker()<br ALIGN="LEFT"/>get_rasterized()<br ALIGN="LEFT"/>get_sketch_params()<br ALIGN="LEFT"/>get_snap()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_transformed_clip_path_and_affine()<br ALIGN="LEFT"/>get_url()<br ALIGN="LEFT"/>get_visible()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>get_zorder()<br ALIGN="LEFT"/>have_units()<br ALIGN="LEFT"/>hitlist(event)<br ALIGN="LEFT"/>is_figure_set()<br ALIGN="LEFT"/>is_transform_set()<br ALIGN="LEFT"/>pchanged()<br ALIGN="LEFT"/>pick(mouseevent)<br ALIGN="LEFT"/>pickable()<br ALIGN="LEFT"/>properties()<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>remove_callback(oid)<br ALIGN="LEFT"/>set()<br ALIGN="LEFT"/>set_agg_filter(filter_func)<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_animated(b)<br ALIGN="LEFT"/>set_axes(axes)<br ALIGN="LEFT"/>set_clip_box(clipbox)<br ALIGN="LEFT"/>set_clip_on(b)<br ALIGN="LEFT"/>set_clip_path(path, transform)<br ALIGN="LEFT"/>set_contains(picker)<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>set_gid(gid)<br ALIGN="LEFT"/>set_label(s)<br ALIGN="LEFT"/>set_lod(on)<br ALIGN="LEFT"/>set_path_effects(path_effects)<br ALIGN="LEFT"/>set_picker(picker)<br ALIGN="LEFT"/>set_rasterized(rasterized)<br ALIGN="LEFT"/>set_sketch_params(scale, length, randomness)<br ALIGN="LEFT"/>set_snap(snap)<br ALIGN="LEFT"/>set_transform(t)<br ALIGN="LEFT"/>set_url(url)<br ALIGN="LEFT"/>set_visible(b)<br ALIGN="LEFT"/>set_zorder(level)<br ALIGN="LEFT"/>update(props)<br ALIGN="LEFT"/>update_from(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.ArtistAnimation" [color="black", fontcolor="black", label=<{ArtistAnimation|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.artist.ArtistInspector" [color="black", fontcolor="black", label=<{ArtistInspector|aliasd : dict<br ALIGN="LEFT"/>o<br ALIGN="LEFT"/>oorig<br ALIGN="LEFT"/>|aliased_name(s)<br ALIGN="LEFT"/>aliased_name_rest(s, target)<br ALIGN="LEFT"/>findobj(match)<br ALIGN="LEFT"/>get_aliases()<br ALIGN="LEFT"/>get_setters()<br ALIGN="LEFT"/>get_valid_values(attr)<br ALIGN="LEFT"/>is_alias(o)<br ALIGN="LEFT"/>pprint_getters()<br ALIGN="LEFT"/>pprint_setters(prop, leadingspace)<br ALIGN="LEFT"/>pprint_setters_rest(prop, leadingspace)<br ALIGN="LEFT"/>properties()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_transforms.test_non_affine_caching.AssertingNonAffineTransform" [color="black", fontcolor="black", label=<{AssertingNonAffineTransform|input_dims : int<br ALIGN="LEFT"/>is_affine : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>raise_on_transform : bool<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>transform_path<br ALIGN="LEFT"/>underlying_transform<br ALIGN="LEFT"/>|transform_non_affine(path)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.AsteriskPolygonCollection" [color="black", fontcolor="black", label=<{AsteriskPolygonCollection|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.dates.AutoDateFormatter" [color="black", fontcolor="black", label=<{AutoDateFormatter|defaultfmt : str<br ALIGN="LEFT"/>scaled : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.dates.AutoDateLocator" [color="black", fontcolor="black", label=<{AutoDateLocator|interval_multiples : bool<br ALIGN="LEFT"/>intervald : dict<br ALIGN="LEFT"/>maxticks : dict<br ALIGN="LEFT"/>minticks : int<br ALIGN="LEFT"/>|autoscale()<br ALIGN="LEFT"/>get_locator(dmin, dmax)<br ALIGN="LEFT"/>nonsingular(vmin, vmax)<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/>set_axis(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.AutoHeightChar" [color="black", fontcolor="black", label=<{AutoHeightChar|shift_amount<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.AutoLocator" [color="black", fontcolor="black", label=<{AutoLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.AutoMinorLocator" [color="black", fontcolor="black", label=<{AutoMinorLocator|ndivs : NoneType<br ALIGN="LEFT"/>|<I>tick_values</I>(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.AutoWidthChar" [color="black", fontcolor="black", label=<{AutoWidthChar|width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.offsetbox.AuxTransformBox" [color="black", fontcolor="black", label=<{AuxTransformBox|aux_transform<br ALIGN="LEFT"/>offset_transform<br ALIGN="LEFT"/>ref_offset_transform<br ALIGN="LEFT"/>|add_artist(a)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_extent(renderer)<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_offset(xy)<br ALIGN="LEFT"/><I>set_transform</I>(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axes._axes.Axes" [color="black", fontcolor="black", label=<{Axes|ignore_existing_data_limits : bool<br ALIGN="LEFT"/>legend_<br ALIGN="LEFT"/>|acorr(x)<br ALIGN="LEFT"/>angle_spectrum(x, Fs, Fc, window, pad_to, sides)<br ALIGN="LEFT"/>annotate()<br ALIGN="LEFT"/>arrow(x, y, dx, dy)<br ALIGN="LEFT"/>axhline(y, xmin, xmax)<br ALIGN="LEFT"/>axhspan(ymin, ymax, xmin, xmax)<br ALIGN="LEFT"/>axvline(x, ymin, ymax)<br ALIGN="LEFT"/>axvspan(xmin, xmax, ymin, ymax)<br ALIGN="LEFT"/>bar(left, height, width, bottom)<br ALIGN="LEFT"/>barbs()<br ALIGN="LEFT"/>barh(bottom, width, height, left)<br ALIGN="LEFT"/>boxplot(x, notch, sym, vert, whis, positions, widths, patch_artist, bootstrap, usermedians, conf_intervals, meanline, showmeans, showcaps, showbox, showfliers, boxprops, labels, flierprops, medianprops, meanprops, capprops, whiskerprops, manage_xticks)<br ALIGN="LEFT"/>broken_barh(xranges, yrange)<br ALIGN="LEFT"/>bxp(bxpstats, positions, widths, vert, patch_artist, shownotches, showmeans, showcaps, showbox, showfliers, boxprops, whiskerprops, flierprops, medianprops, capprops, meanprops, meanline, manage_xticks)<br ALIGN="LEFT"/>clabel(CS)<br ALIGN="LEFT"/>cohere(x, y, NFFT, Fs, Fc, detrend, window, noverlap, pad_to, sides, scale_by_freq)<br ALIGN="LEFT"/>contour()<br ALIGN="LEFT"/>contourf()<br ALIGN="LEFT"/>csd(x, y, NFFT, Fs, Fc, detrend, window, noverlap, pad_to, sides, scale_by_freq, return_line)<br ALIGN="LEFT"/>errorbar(x, y, yerr, xerr, fmt, ecolor, elinewidth, capsize, barsabove, lolims, uplims, xlolims, xuplims, errorevery, capthick)<br ALIGN="LEFT"/>eventplot(positions, orientation, lineoffsets, linelengths, linewidths, colors, linestyles)<br ALIGN="LEFT"/>fill()<br ALIGN="LEFT"/>fill_between(x, y1, y2, where, interpolate)<br ALIGN="LEFT"/>fill_betweenx(y, x1, x2, where)<br ALIGN="LEFT"/>get_legend_handles_labels(legend_handler_map)<br ALIGN="LEFT"/>get_title(loc)<br ALIGN="LEFT"/>get_xlabel()<br ALIGN="LEFT"/>get_ylabel()<br ALIGN="LEFT"/>hexbin(x, y, C, gridsize, bins, xscale, yscale, extent, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, reduce_C_function, mincnt, marginals)<br ALIGN="LEFT"/>hist(x, bins, range, normed, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked)<br ALIGN="LEFT"/>hist2d(x, y, bins, range, normed, weights, cmin, cmax)<br ALIGN="LEFT"/>hlines(y, xmin, xmax, colors, linestyles, label)<br ALIGN="LEFT"/>imshow(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url)<br ALIGN="LEFT"/>legend()<br ALIGN="LEFT"/>loglog()<br ALIGN="LEFT"/>magnitude_spectrum(x, Fs, Fc, window, pad_to, sides, scale)<br ALIGN="LEFT"/>matshow(Z)<br ALIGN="LEFT"/>pcolor()<br ALIGN="LEFT"/>pcolorfast()<br ALIGN="LEFT"/>pcolormesh()<br ALIGN="LEFT"/>phase_spectrum(x, Fs, Fc, window, pad_to, sides)<br ALIGN="LEFT"/>pie(x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops)<br ALIGN="LEFT"/>plot()<br ALIGN="LEFT"/>plot_date(x, y, fmt, tz, xdate, ydate)<br ALIGN="LEFT"/>psd(x, NFFT, Fs, Fc, detrend, window, noverlap, pad_to, sides, scale_by_freq, return_line)<br ALIGN="LEFT"/>quiver()<br ALIGN="LEFT"/>quiverkey()<br ALIGN="LEFT"/>scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts)<br ALIGN="LEFT"/>semilogx()<br ALIGN="LEFT"/>semilogy()<br ALIGN="LEFT"/>set_title(label, fontdict, loc)<br ALIGN="LEFT"/>set_xlabel(xlabel, fontdict, labelpad)<br ALIGN="LEFT"/>set_ylabel(ylabel, fontdict, labelpad)<br ALIGN="LEFT"/>specgram(x, NFFT, Fs, Fc, detrend, window, noverlap, cmap, xextent, pad_to, sides, scale_by_freq, mode, scale, vmin, vmax)<br ALIGN="LEFT"/>spy(Z, precision, marker, markersize, aspect, origin)<br ALIGN="LEFT"/>stackplot(x)<br ALIGN="LEFT"/>stem()<br ALIGN="LEFT"/>step(x, y)<br ALIGN="LEFT"/>streamplot(x, y, u, v, density, linewidth, color, cmap, norm, arrowsize, arrowstyle, minlength, transform, zorder)<br ALIGN="LEFT"/>table()<br ALIGN="LEFT"/>text(x, y, s, fontdict, withdash)<br ALIGN="LEFT"/>tricontour()<br ALIGN="LEFT"/>tricontourf()<br ALIGN="LEFT"/>tripcolor()<br ALIGN="LEFT"/>triplot()<br ALIGN="LEFT"/>violin(vpstats, positions, vert, widths, showmeans, showextrema, showmedians)<br ALIGN="LEFT"/>violinplot(dataset, positions, vert, widths, showmeans, showextrema, showmedians, points, bw_method)<br ALIGN="LEFT"/>vlines(x, ymin, ymax, colors, linestyles, label)<br ALIGN="LEFT"/>xcorr(x, y, normed, detrend, usevlines, maxlags)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.image.AxesImage" [color="black", fontcolor="black", label=<{AxesImage|<br ALIGN="LEFT"/>|get_extent()<br ALIGN="LEFT"/>make_image(magnification)<br ALIGN="LEFT"/>set_extent(extent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.figure.AxesStack" [color="black", fontcolor="black", label=<{AxesStack|<br ALIGN="LEFT"/>|add(key, a)<br ALIGN="LEFT"/>as_list()<br ALIGN="LEFT"/>bubble(a)<br ALIGN="LEFT"/>current_key_axes()<br ALIGN="LEFT"/>get(key)<br ALIGN="LEFT"/>remove(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.AxesWidget" [color="black", fontcolor="black", label=<{AxesWidget|active : bool<br ALIGN="LEFT"/>ax<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>cids : list<br ALIGN="LEFT"/>|connect_event(event, callback)<br ALIGN="LEFT"/>disconnect_events()<br ALIGN="LEFT"/>ignore(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axis.Axis" [color="black", fontcolor="black", label=<{Axis|OFFSETTEXTPAD : int<br ALIGN="LEFT"/>axes<br ALIGN="LEFT"/>callbacks<br ALIGN="LEFT"/>converter : NoneType<br ALIGN="LEFT"/>isDefault_label : bool<br ALIGN="LEFT"/>isDefault_majfmt : bool<br ALIGN="LEFT"/>isDefault_majloc : bool<br ALIGN="LEFT"/>isDefault_minfmt : bool<br ALIGN="LEFT"/>isDefault_minloc : bool<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>labelpad : int<br ALIGN="LEFT"/>major<br ALIGN="LEFT"/>majorTicks : list<br ALIGN="LEFT"/>minor<br ALIGN="LEFT"/>minorTicks : list<br ALIGN="LEFT"/>offsetText<br ALIGN="LEFT"/>pickradius : int<br ALIGN="LEFT"/>units : NoneType<br ALIGN="LEFT"/>|axis_date(tz)<br ALIGN="LEFT"/>cla()<br ALIGN="LEFT"/>convert_units(x)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/><I>get_data_interval</I>()<br ALIGN="LEFT"/>get_gridlines()<br ALIGN="LEFT"/>get_label()<br ALIGN="LEFT"/>get_label_text()<br ALIGN="LEFT"/>get_major_formatter()<br ALIGN="LEFT"/>get_major_locator()<br ALIGN="LEFT"/>get_major_ticks(numticks)<br ALIGN="LEFT"/>get_majorticklabels()<br ALIGN="LEFT"/>get_majorticklines()<br ALIGN="LEFT"/>get_majorticklocs()<br ALIGN="LEFT"/>get_minor_formatter()<br ALIGN="LEFT"/>get_minor_locator()<br ALIGN="LEFT"/>get_minor_ticks(numticks)<br ALIGN="LEFT"/>get_minorticklabels()<br ALIGN="LEFT"/>get_minorticklines()<br ALIGN="LEFT"/>get_minorticklocs()<br ALIGN="LEFT"/>get_offset_text()<br ALIGN="LEFT"/>get_pickradius()<br ALIGN="LEFT"/>get_scale()<br ALIGN="LEFT"/>get_smart_bounds()<br ALIGN="LEFT"/>get_ticklabel_extents(renderer)<br ALIGN="LEFT"/>get_ticklabels(minor, which)<br ALIGN="LEFT"/>get_ticklines(minor)<br ALIGN="LEFT"/>get_ticklocs(minor)<br ALIGN="LEFT"/>get_tightbbox(renderer)<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_units()<br ALIGN="LEFT"/><I>get_view_interval</I>()<br ALIGN="LEFT"/>grid(b, which)<br ALIGN="LEFT"/>have_units()<br ALIGN="LEFT"/>iter_ticks()<br ALIGN="LEFT"/>limit_range_for_scale(vmin, vmax)<br ALIGN="LEFT"/>pan(numsteps)<br ALIGN="LEFT"/>reset_ticks()<br ALIGN="LEFT"/>set_clip_path(clippath, transform)<br ALIGN="LEFT"/><I>set_data_interval</I>()<br ALIGN="LEFT"/><I>set_default_intervals</I>()<br ALIGN="LEFT"/>set_label_coords(x, y, transform)<br ALIGN="LEFT"/>set_label_text(label, fontdict)<br ALIGN="LEFT"/>set_major_formatter(formatter)<br ALIGN="LEFT"/>set_major_locator(locator)<br ALIGN="LEFT"/>set_minor_formatter(formatter)<br ALIGN="LEFT"/>set_minor_locator(locator)<br ALIGN="LEFT"/>set_pickradius(pickradius)<br ALIGN="LEFT"/>set_scale(value)<br ALIGN="LEFT"/>set_smart_bounds(value)<br ALIGN="LEFT"/>set_tick_params(which, reset)<br ALIGN="LEFT"/>set_ticklabels(ticklabels)<br ALIGN="LEFT"/>set_ticks(ticks, minor)<br ALIGN="LEFT"/>set_units(u)<br ALIGN="LEFT"/><I>set_view_interval</I>(vmin, vmax, ignore)<br ALIGN="LEFT"/>update_units(data)<br ALIGN="LEFT"/>zoom(direction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.units.AxisInfo" [color="black", fontcolor="black", label=<{AxisInfo|default_limits : NoneType<br ALIGN="LEFT"/>label : NoneType<br ALIGN="LEFT"/>majfmt : NoneType<br ALIGN="LEFT"/>majloc : NoneType<br ALIGN="LEFT"/>minfmt : NoneType<br ALIGN="LEFT"/>minloc : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.AxisMenu" [color="black", fontcolor="black", label=<{AxisMenu|<br ALIGN="LEFT"/>|adjust(naxes)<br ALIGN="LEFT"/>get_indices()<br ALIGN="LEFT"/>invert_all()<br ALIGN="LEFT"/>select_all()<br ALIGN="LEFT"/>set_active()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.BakomaFonts" [color="black", fontcolor="black", label=<{BakomaFonts|alias : str<br ALIGN="LEFT"/>fontmap : dict<br ALIGN="LEFT"/>target : str<br ALIGN="LEFT"/>|get_sized_alternatives_for_symbol(fontname, sym)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle.Bar" [color="black", fontcolor="black", label=<{Bar|angle : NoneType<br ALIGN="LEFT"/>armA : float<br ALIGN="LEFT"/>armB : float<br ALIGN="LEFT"/>fraction : float<br ALIGN="LEFT"/>|connect(posA, posB)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.BarAB" [color="black", fontcolor="black", label=<{BarAB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.container.BarContainer" [color="black", fontcolor="black", label=<{BarContainer|errorbar : NoneType<br ALIGN="LEFT"/>patches<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.quiver.Barbs" [color="black", fontcolor="black", label=<{Barbs|barb_increments<br ALIGN="LEFT"/>barbs_doc<br ALIGN="LEFT"/>fill_empty<br ALIGN="LEFT"/>flip<br ALIGN="LEFT"/>rounding<br ALIGN="LEFT"/>sizes<br ALIGN="LEFT"/>u<br ALIGN="LEFT"/>v<br ALIGN="LEFT"/>x : NoneType<br ALIGN="LEFT"/>y : NoneType<br ALIGN="LEFT"/>|set_UVC(U, V, C)<br ALIGN="LEFT"/>set_offsets(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.Base" [color="black", fontcolor="black", label=<{Base|<br ALIGN="LEFT"/>|ge(x)<br ALIGN="LEFT"/>get_base()<br ALIGN="LEFT"/>gt(x)<br ALIGN="LEFT"/>le(x)<br ALIGN="LEFT"/>lt(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_transforms.BasicTransformTests" [color="black", fontcolor="black", label=<{BasicTransformTests|stack1<br ALIGN="LEFT"/>stack2<br ALIGN="LEFT"/>stack2_subset<br ALIGN="LEFT"/>ta1<br ALIGN="LEFT"/>ta2<br ALIGN="LEFT"/>ta3<br ALIGN="LEFT"/>tn1<br ALIGN="LEFT"/>tn2<br ALIGN="LEFT"/>tn3<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_affine_simplification()<br ALIGN="LEFT"/>test_contains_branch()<br ALIGN="LEFT"/>test_left_to_right_iteration()<br ALIGN="LEFT"/>test_transform_depth()<br ALIGN="LEFT"/>test_transform_shortcuts()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.Bbox" [color="black", fontcolor="black", label=<{Bbox|bounds : property<br ALIGN="LEFT"/>intervalx : property<br ALIGN="LEFT"/>intervaly : property<br ALIGN="LEFT"/>minpos<br ALIGN="LEFT"/>minposx<br ALIGN="LEFT"/>minposy<br ALIGN="LEFT"/>p0 : property<br ALIGN="LEFT"/>p1 : property<br ALIGN="LEFT"/>x0 : property<br ALIGN="LEFT"/>x1 : property<br ALIGN="LEFT"/>y0 : property<br ALIGN="LEFT"/>y1 : property<br ALIGN="LEFT"/>|from_bounds(x0, y0, width, height)<br ALIGN="LEFT"/>from_extents()<br ALIGN="LEFT"/>get_points()<br ALIGN="LEFT"/>ignore(value)<br ALIGN="LEFT"/>invalidate()<br ALIGN="LEFT"/>mutated()<br ALIGN="LEFT"/>mutatedx()<br ALIGN="LEFT"/>mutatedy()<br ALIGN="LEFT"/>null()<br ALIGN="LEFT"/>set(other)<br ALIGN="LEFT"/>set_points(points)<br ALIGN="LEFT"/>unit()<br ALIGN="LEFT"/>update_from_data(x, y, ignore)<br ALIGN="LEFT"/>update_from_data_xy(xy, ignore, updatex, updatey)<br ALIGN="LEFT"/>update_from_path(path, ignore, updatex, updatey)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BboxBase" [color="black", fontcolor="black", label=<{BboxBase|bounds<br ALIGN="LEFT"/>coefs : dict<br ALIGN="LEFT"/>extents<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>intervalx<br ALIGN="LEFT"/>intervaly<br ALIGN="LEFT"/>is_affine : bool<br ALIGN="LEFT"/>is_bbox : bool<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>min<br ALIGN="LEFT"/>p0<br ALIGN="LEFT"/>p1<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>x0<br ALIGN="LEFT"/>x1<br ALIGN="LEFT"/>xmax<br ALIGN="LEFT"/>xmin<br ALIGN="LEFT"/>y0<br ALIGN="LEFT"/>y1<br ALIGN="LEFT"/>ymax<br ALIGN="LEFT"/>ymin<br ALIGN="LEFT"/>|anchored(c, container)<br ALIGN="LEFT"/>contains(x, y)<br ALIGN="LEFT"/>containsx(x)<br ALIGN="LEFT"/>containsy(y)<br ALIGN="LEFT"/>corners()<br ALIGN="LEFT"/>count_contains(vertices)<br ALIGN="LEFT"/>count_overlaps(bboxes)<br ALIGN="LEFT"/>expanded(sw, sh)<br ALIGN="LEFT"/>frozen()<br ALIGN="LEFT"/>fully_contains(x, y)<br ALIGN="LEFT"/>fully_containsx(x)<br ALIGN="LEFT"/>fully_containsy(y)<br ALIGN="LEFT"/>fully_overlaps(other)<br ALIGN="LEFT"/>get_points()<br ALIGN="LEFT"/>intersection(bbox1, bbox2)<br ALIGN="LEFT"/>inverse_transformed(transform)<br ALIGN="LEFT"/>is_unit()<br ALIGN="LEFT"/>overlaps(other)<br ALIGN="LEFT"/>padded(p)<br ALIGN="LEFT"/>rotated(radians)<br ALIGN="LEFT"/>shrunk(mx, my)<br ALIGN="LEFT"/>shrunk_to_aspect(box_aspect, container, fig_aspect)<br ALIGN="LEFT"/>splitx()<br ALIGN="LEFT"/>splity()<br ALIGN="LEFT"/>transformed(transform)<br ALIGN="LEFT"/>translated(tx, ty)<br ALIGN="LEFT"/>union(bboxes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.image.BboxImage" [color="black", fontcolor="black", label=<{BboxImage|bbox<br ALIGN="LEFT"/>interp_at_native : bool<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_size()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>make_image(renderer, magnification)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BboxTransform" [color="black", fontcolor="black", label=<{BboxTransform|is_separable : bool<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BboxTransformFrom" [color="black", fontcolor="black", label=<{BboxTransformFrom|is_separable : bool<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BboxTransformTo" [color="black", fontcolor="black", label=<{BboxTransformTo|is_separable : bool<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BboxTransformToMaxOnly" [color="black", fontcolor="black", label=<{BboxTransformToMaxOnly|<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.bezier.BezierSegment" [color="black", fontcolor="black", label=<{BezierSegment|<br ALIGN="LEFT"/>|point_at_t(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BlendedAffine2D" [color="black", fontcolor="black", label=<{BlendedAffine2D|is_separable : bool<br ALIGN="LEFT"/>|contains_branch_seperately(transform)<br ALIGN="LEFT"/>get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.BlendedGenericTransform" [color="black", fontcolor="black", label=<{BlendedGenericTransform|depth<br ALIGN="LEFT"/>has_inverse<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_affine<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>pass_through : bool<br ALIGN="LEFT"/>|contains_branch(other)<br ALIGN="LEFT"/>contains_branch_seperately(transform)<br ALIGN="LEFT"/>frozen()<br ALIGN="LEFT"/>get_affine()<br ALIGN="LEFT"/>inverted()<br ALIGN="LEFT"/>transform_non_affine(points)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.blocking_input.BlockingContourLabeler" [color="black", fontcolor="black", label=<{BlockingContourLabeler|cs<br ALIGN="LEFT"/>inline<br ALIGN="LEFT"/>inline_spacing : int<br ALIGN="LEFT"/>|add_click(event)<br ALIGN="LEFT"/>button1(event)<br ALIGN="LEFT"/>button3(event)<br ALIGN="LEFT"/>pop_click(event, index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.blocking_input.BlockingInput" [color="black", fontcolor="black", label=<{BlockingInput|callbacks : list<br ALIGN="LEFT"/>events : list<br ALIGN="LEFT"/>eventslist : tuple<br ALIGN="LEFT"/>fig<br ALIGN="LEFT"/>n : int<br ALIGN="LEFT"/>|add_event(event)<br ALIGN="LEFT"/>cleanup()<br ALIGN="LEFT"/>on_event(event)<br ALIGN="LEFT"/>pop(index)<br ALIGN="LEFT"/>pop_event(index)<br ALIGN="LEFT"/><I>post_event</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.blocking_input.BlockingKeyMouseInput" [color="black", fontcolor="black", label=<{BlockingKeyMouseInput|keyormouse : NoneType<br ALIGN="LEFT"/>|post_event()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.blocking_input.BlockingMouseInput" [color="black", fontcolor="black", label=<{BlockingMouseInput|button_add : int<br ALIGN="LEFT"/>button_pop : int<br ALIGN="LEFT"/>button_stop : int<br ALIGN="LEFT"/>clicks : list<br ALIGN="LEFT"/>marks : list<br ALIGN="LEFT"/>show_clicks : bool<br ALIGN="LEFT"/>|add_click(event)<br ALIGN="LEFT"/>cleanup(event)<br ALIGN="LEFT"/>key_event()<br ALIGN="LEFT"/>mouse_event()<br ALIGN="LEFT"/>mouse_event_add(event)<br ALIGN="LEFT"/>mouse_event_pop(event)<br ALIGN="LEFT"/>mouse_event_stop(event)<br ALIGN="LEFT"/>pop(event, index)<br ALIGN="LEFT"/>pop_click(event, index)<br ALIGN="LEFT"/>post_event()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.BoundaryNorm" [color="black", fontcolor="black", label=<{BoundaryNorm|N<br ALIGN="LEFT"/>Ncmap<br ALIGN="LEFT"/>boundaries : ndarray<br ALIGN="LEFT"/>clip : bool<br ALIGN="LEFT"/>vmax<br ALIGN="LEFT"/>vmin<br ALIGN="LEFT"/>|inverse(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Box" [color="black", fontcolor="black", label=<{Box|depth<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|grow()<br ALIGN="LEFT"/><I>render</I>(x1, y1, x2, y2)<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle" [color="black", fontcolor="black", label=<{BoxStyle|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.BracketA" [color="black", fontcolor="black", label=<{BracketA|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.BracketAB" [color="black", fontcolor="black", label=<{BracketAB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.BracketB" [color="black", fontcolor="black", label=<{BracketB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.collections.BrokenBarHCollection" [color="black", fontcolor="black", label=<{BrokenBarHCollection|<br ALIGN="LEFT"/>|span_where(x, ymin, ymax, where)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Bunch" [color="black", fontcolor="black", label=<{Bunch|accent<br ALIGN="LEFT"/>ambi_delim<br ALIGN="LEFT"/>apostrophe<br ALIGN="LEFT"/>auto_delim<br ALIGN="LEFT"/>binom<br ALIGN="LEFT"/>bslash<br ALIGN="LEFT"/>c_over_c<br ALIGN="LEFT"/>customspace<br ALIGN="LEFT"/>end_group<br ALIGN="LEFT"/>float_literal<br ALIGN="LEFT"/>font<br ALIGN="LEFT"/>frac<br ALIGN="LEFT"/>function<br ALIGN="LEFT"/>genfrac<br ALIGN="LEFT"/>group<br ALIGN="LEFT"/>int_literal<br ALIGN="LEFT"/>latexfont<br ALIGN="LEFT"/>lbrace<br ALIGN="LEFT"/>lbracket<br ALIGN="LEFT"/>left_delim<br ALIGN="LEFT"/>main<br ALIGN="LEFT"/>math<br ALIGN="LEFT"/>math_string<br ALIGN="LEFT"/>non_math<br ALIGN="LEFT"/>operatorname<br ALIGN="LEFT"/>overline<br ALIGN="LEFT"/>paint_path<br ALIGN="LEFT"/>placeable<br ALIGN="LEFT"/>rbrace<br ALIGN="LEFT"/>rbracket<br ALIGN="LEFT"/>required_group<br ALIGN="LEFT"/>right_delim<br ALIGN="LEFT"/>right_delim_safe<br ALIGN="LEFT"/>simple<br ALIGN="LEFT"/>simple_group<br ALIGN="LEFT"/>single_symbol<br ALIGN="LEFT"/>space<br ALIGN="LEFT"/>sqrt<br ALIGN="LEFT"/>stackrel<br ALIGN="LEFT"/>start_group<br ALIGN="LEFT"/>subsuper<br ALIGN="LEFT"/>subsuperop<br ALIGN="LEFT"/>symbol<br ALIGN="LEFT"/>symbol_name<br ALIGN="LEFT"/>token<br ALIGN="LEFT"/>unknown_symbol<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.widgets.Button" [color="black", fontcolor="black", label=<{Button|cnt : int<br ALIGN="LEFT"/>color : str<br ALIGN="LEFT"/>hovercolor : str<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>observers : dict<br ALIGN="LEFT"/>|disconnect(cid)<br ALIGN="LEFT"/>on_clicked(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.TruetypeFonts.CachedFont" [color="black", fontcolor="black", label=<{CachedFont|charmap<br ALIGN="LEFT"/>font<br ALIGN="LEFT"/>glyphmap : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.CallbackRegistry" [color="black", fontcolor="black", label=<{CallbackRegistry|callbacks : dict<br ALIGN="LEFT"/>|connect(s, func)<br ALIGN="LEFT"/>disconnect(cid)<br ALIGN="LEFT"/>process(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.table.Cell" [color="black", fontcolor="black", label=<{Cell|PAD : float<br ALIGN="LEFT"/>|auto_set_font_size(renderer)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_fontsize()<br ALIGN="LEFT"/>get_required_width(renderer)<br ALIGN="LEFT"/>get_text()<br ALIGN="LEFT"/>get_text_bounds(renderer)<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>set_fontsize(size)<br ALIGN="LEFT"/>set_text_props()<br ALIGN="LEFT"/>set_transform(trans)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Char" [color="black", fontcolor="black", label=<{Char|c<br ALIGN="LEFT"/>depth<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>font<br ALIGN="LEFT"/>font_class<br ALIGN="LEFT"/>font_output<br ALIGN="LEFT"/>fontsize<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|get_kerning(next)<br ALIGN="LEFT"/>grow()<br ALIGN="LEFT"/>is_slanted()<br ALIGN="LEFT"/>render(x, y)<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.CheckButtons" [color="black", fontcolor="black", label=<{CheckButtons|cnt : int<br ALIGN="LEFT"/>labels : list<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>observers : dict<br ALIGN="LEFT"/>rectangles : list<br ALIGN="LEFT"/>|disconnect(cid)<br ALIGN="LEFT"/>on_clicked(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Circle" [color="black", fontcolor="black", label=<{Circle|height<br ALIGN="LEFT"/>radius<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|get_radius()<br ALIGN="LEFT"/>set_radius(radius)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.Circle" [color="black", fontcolor="black", label=<{Circle|pad : float<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.CircleCollection" [color="black", fontcolor="black", label=<{CircleCollection|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.CirclePolygon" [color="black", fontcolor="black", label=<{CirclePolygon|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.hatch.Circles" [color="black", fontcolor="black", label=<{Circles|shape_codes<br ALIGN="LEFT"/>shape_vertices<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.contour.ClabelText" [color="black", fontcolor="black", label=<{ClabelText|<br ALIGN="LEFT"/>|get_rotation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.decorators.CleanupTest" [color="black", fontcolor="black", label=<{CleanupTest|<br ALIGN="LEFT"/>|setup_class()<br ALIGN="LEFT"/>teardown_class()<br ALIGN="LEFT"/>test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.decorators.CleanupTestCase" [color="black", fontcolor="black", label=<{CleanupTestCase|<br ALIGN="LEFT"/>|setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.CloseEvent" [color="black", fontcolor="black", label=<{CloseEvent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.collections.Collection" [color="black", fontcolor="black", label=<{Collection|cmap<br ALIGN="LEFT"/>get_dashes<br ALIGN="LEFT"/>get_edgecolors<br ALIGN="LEFT"/>get_facecolors<br ALIGN="LEFT"/>get_linestyle<br ALIGN="LEFT"/>get_linewidth<br ALIGN="LEFT"/>norm<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_datalim(transData)<br ALIGN="LEFT"/>get_edgecolor()<br ALIGN="LEFT"/>get_facecolor()<br ALIGN="LEFT"/>get_hatch()<br ALIGN="LEFT"/>get_linestyles()<br ALIGN="LEFT"/>get_linewidths()<br ALIGN="LEFT"/>get_offset_position()<br ALIGN="LEFT"/>get_offset_transform()<br ALIGN="LEFT"/>get_offsets()<br ALIGN="LEFT"/>get_paths()<br ALIGN="LEFT"/>get_pickradius()<br ALIGN="LEFT"/>get_transforms()<br ALIGN="LEFT"/>get_urls()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_antialiased(aa)<br ALIGN="LEFT"/>set_antialiaseds(aa)<br ALIGN="LEFT"/>set_color(c)<br ALIGN="LEFT"/>set_dashes(ls)<br ALIGN="LEFT"/>set_edgecolor(c)<br ALIGN="LEFT"/>set_edgecolors(c)<br ALIGN="LEFT"/>set_facecolor(c)<br ALIGN="LEFT"/>set_facecolors(c)<br ALIGN="LEFT"/>set_hatch(hatch)<br ALIGN="LEFT"/>set_linestyle(ls)<br ALIGN="LEFT"/>set_linestyles(ls)<br ALIGN="LEFT"/>set_linewidth(lw)<br ALIGN="LEFT"/>set_linewidths(lw)<br ALIGN="LEFT"/>set_lw(lw)<br ALIGN="LEFT"/>set_offset_position(offset_position)<br ALIGN="LEFT"/>set_offsets(offsets)<br ALIGN="LEFT"/><I>set_paths</I>()<br ALIGN="LEFT"/>set_pickradius(pr)<br ALIGN="LEFT"/>set_urls(urls)<br ALIGN="LEFT"/>update_from(other)<br ALIGN="LEFT"/>update_scalarmappable()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.ColorButton" [color="black", fontcolor="black", label=<{ColorButton|color<br ALIGN="LEFT"/>colorChanged<br ALIGN="LEFT"/>|choose_color()<br ALIGN="LEFT"/>get_color()<br ALIGN="LEFT"/>set_color(color)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.ColorConverter" [color="black", fontcolor="black", label=<{ColorConverter|cache : dict<br ALIGN="LEFT"/>colors : dict<br ALIGN="LEFT"/>|to_rgb(arg)<br ALIGN="LEFT"/>to_rgba(arg, alpha)<br ALIGN="LEFT"/>to_rgba_array(c, alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.ColorLayout" [color="black", fontcolor="black", label=<{ColorLayout|colorbtn<br ALIGN="LEFT"/>lineedit<br ALIGN="LEFT"/>|text()<br ALIGN="LEFT"/>update_color()<br ALIGN="LEFT"/>update_text(color)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colorbar.Colorbar" [color="black", fontcolor="black", label=<{Colorbar|cmap<br ALIGN="LEFT"/>dividers : NoneType<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>mappable<br ALIGN="LEFT"/>norm<br ALIGN="LEFT"/>outline : NoneType<br ALIGN="LEFT"/>patch : NoneType<br ALIGN="LEFT"/>solids : NoneType<br ALIGN="LEFT"/>|add_lines(CS, erase)<br ALIGN="LEFT"/>on_mappable_changed(mappable)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>update_bruteforce(mappable)<br ALIGN="LEFT"/>update_normal(mappable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colorbar.ColorbarBase" [color="black", fontcolor="black", label=<{ColorbarBase|alpha : NoneType<br ALIGN="LEFT"/>ax<br ALIGN="LEFT"/>boundaries : NoneType<br ALIGN="LEFT"/>dividers : NoneType<br ALIGN="LEFT"/>drawedges : bool<br ALIGN="LEFT"/>extend : str<br ALIGN="LEFT"/>extendfrac : NoneType<br ALIGN="LEFT"/>extendrect : bool<br ALIGN="LEFT"/>filled : bool<br ALIGN="LEFT"/>formatter<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>locator : NoneType<br ALIGN="LEFT"/>orientation : str<br ALIGN="LEFT"/>outline : NoneType<br ALIGN="LEFT"/>patch : NoneType<br ALIGN="LEFT"/>solids : NoneType<br ALIGN="LEFT"/>spacing : str<br ALIGN="LEFT"/>ticklocation : str<br ALIGN="LEFT"/>values : NoneType<br ALIGN="LEFT"/>vmax<br ALIGN="LEFT"/>vmin<br ALIGN="LEFT"/>|add_lines(levels, colors, linewidths, erase)<br ALIGN="LEFT"/>config_axis()<br ALIGN="LEFT"/>draw_all()<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_label(label)<br ALIGN="LEFT"/>set_ticklabels(ticklabels, update_ticks)<br ALIGN="LEFT"/>set_ticks(ticks, update_ticks)<br ALIGN="LEFT"/>update_ticks()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colorbar.ColorbarPatch" [color="black", fontcolor="black", label=<{ColorbarPatch|dividers : NoneType<br ALIGN="LEFT"/>solids_patches : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.colors.Colormap" [color="black", fontcolor="black", label=<{Colormap|N : int<br ALIGN="LEFT"/>colorbar_extend : bool<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|is_gray()<br ALIGN="LEFT"/>set_bad(color, alpha)<br ALIGN="LEFT"/>set_over(color, alpha)<br ALIGN="LEFT"/>set_under(color, alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_nbagg.CommSocket" [color="black", fontcolor="black", label=<{CommSocket|comm : Comm<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>supports_binary : NoneType<br ALIGN="LEFT"/>uuid : str<br ALIGN="LEFT"/>|is_open()<br ALIGN="LEFT"/>on_close()<br ALIGN="LEFT"/>on_message(message)<br ALIGN="LEFT"/>send_binary(blob)<br ALIGN="LEFT"/>send_json(content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.CompositeAffine2D" [color="black", fontcolor="black", label=<{CompositeAffine2D|depth<br ALIGN="LEFT"/>input_dims<br ALIGN="LEFT"/>output_dims<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.CompositeGenericTransform" [color="black", fontcolor="black", label=<{CompositeGenericTransform|depth<br ALIGN="LEFT"/>has_inverse<br ALIGN="LEFT"/>input_dims<br ALIGN="LEFT"/>is_affine<br ALIGN="LEFT"/>is_separable<br ALIGN="LEFT"/>output_dims<br ALIGN="LEFT"/>pass_through : bool<br ALIGN="LEFT"/>|frozen()<br ALIGN="LEFT"/>get_affine()<br ALIGN="LEFT"/>inverted()<br ALIGN="LEFT"/>transform_affine(points)<br ALIGN="LEFT"/>transform_non_affine(points)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionPatch" [color="black", fontcolor="black", label=<{ConnectionPatch|axesA : NoneType<br ALIGN="LEFT"/>axesB : NoneType<br ALIGN="LEFT"/>coords1<br ALIGN="LEFT"/>coords2 : NoneType<br ALIGN="LEFT"/>xy1<br ALIGN="LEFT"/>xy2<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_annotation_clip()<br ALIGN="LEFT"/>get_path_in_displaycoord()<br ALIGN="LEFT"/>set_annotation_clip(b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle" [color="black", fontcolor="black", label=<{ConnectionStyle|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.container.Container" [color="black", fontcolor="black", label=<{Container|eventson : bool<br ALIGN="LEFT"/>|add_callback(func)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_label()<br ALIGN="LEFT"/>pchanged()<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>remove_callback(oid)<br ALIGN="LEFT"/>set_label(s)<br ALIGN="LEFT"/>set_remove_method(f)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.contour.ContourLabeler" [color="black", fontcolor="black", label=<{ContourLabeler|cl<br ALIGN="LEFT"/>cl_cvalues<br ALIGN="LEFT"/>cl_xy : list<br ALIGN="LEFT"/>labelCValueList : list, ndarray<br ALIGN="LEFT"/>labelFmt<br ALIGN="LEFT"/>labelFontProps<br ALIGN="LEFT"/>labelFontSizeList<br ALIGN="LEFT"/>labelIndiceList : list<br ALIGN="LEFT"/>labelLevelList : list<br ALIGN="LEFT"/>labelManual<br ALIGN="LEFT"/>labelMappable<br ALIGN="LEFT"/>labelTextsList<br ALIGN="LEFT"/>labelXYs : list<br ALIGN="LEFT"/>rightside_up<br ALIGN="LEFT"/>|add_label(x, y, rotation, lev, cvalue)<br ALIGN="LEFT"/>add_label_clabeltext(x, y, rotation, lev, cvalue)<br ALIGN="LEFT"/>add_label_near(x, y, inline, inline_spacing, transform)<br ALIGN="LEFT"/>calc_label_rot_and_inline(slc, ind, lw, lc, spacing)<br ALIGN="LEFT"/>clabel()<br ALIGN="LEFT"/>get_label_coords(distances, XX, YY, ysize, lw)<br ALIGN="LEFT"/>get_label_width(lev, fmt, fsize)<br ALIGN="LEFT"/>get_real_label_width(lev, fmt, fsize)<br ALIGN="LEFT"/>get_text(lev, fmt)<br ALIGN="LEFT"/>labels(inline, inline_spacing)<br ALIGN="LEFT"/>locate_label(linecontour, labelwidth)<br ALIGN="LEFT"/>pop_label(index)<br ALIGN="LEFT"/>print_label(linecontour, labelwidth)<br ALIGN="LEFT"/>set_label_props(label, text, color)<br ALIGN="LEFT"/>too_close(x, y, lw)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.contour.ContourSet" [color="black", fontcolor="black", label=<{ContourSet|allkinds<br ALIGN="LEFT"/>allsegs<br ALIGN="LEFT"/>alpha<br ALIGN="LEFT"/>antialiased : bool<br ALIGN="LEFT"/>ax<br ALIGN="LEFT"/>collections<br ALIGN="LEFT"/>colors<br ALIGN="LEFT"/>cvalues : list<br ALIGN="LEFT"/>extend<br ALIGN="LEFT"/>extent<br ALIGN="LEFT"/>filled<br ALIGN="LEFT"/>hatches<br ALIGN="LEFT"/>labelCValues : list<br ALIGN="LEFT"/>labelTexts : list<br ALIGN="LEFT"/>layers<br ALIGN="LEFT"/>levels<br ALIGN="LEFT"/>linestyles<br ALIGN="LEFT"/>linewidths<br ALIGN="LEFT"/>locator<br ALIGN="LEFT"/>logscale : bool<br ALIGN="LEFT"/>monochrome : bool<br ALIGN="LEFT"/>nchunk<br ALIGN="LEFT"/>origin<br ALIGN="LEFT"/>tcolors<br ALIGN="LEFT"/>tlinewidths<br ALIGN="LEFT"/>vmax<br ALIGN="LEFT"/>vmin<br ALIGN="LEFT"/>zmax<br ALIGN="LEFT"/>zmin<br ALIGN="LEFT"/>|changed()<br ALIGN="LEFT"/>find_nearest_contour(x, y, indices, pixel)<br ALIGN="LEFT"/>get_alpha()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>legend_elements(variable_name, str_format)<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.units.ConversionInterface" [color="black", fontcolor="black", label=<{ConversionInterface|<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(obj, unit, axis)<br ALIGN="LEFT"/>default_units(x, axis)<br ALIGN="LEFT"/>is_numlike(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate.CubicTriInterpolator" [color="black", fontcolor="black", label=<{CubicTriInterpolator|<br ALIGN="LEFT"/>|gradient(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.Cursor" [color="black", fontcolor="black", label=<{Cursor|background : NoneType<br ALIGN="LEFT"/>horizOn : bool<br ALIGN="LEFT"/>lineh<br ALIGN="LEFT"/>linev<br ALIGN="LEFT"/>needclear : bool<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>vertOn : bool<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>|clear(event)<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.Cursors" [color="black", fontcolor="black", label=<{Cursors|HAND<br ALIGN="LEFT"/>MOVE<br ALIGN="LEFT"/>POINTER<br ALIGN="LEFT"/>SELECT_REGION<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.Curve" [color="black", fontcolor="black", label=<{Curve|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.CurveA" [color="black", fontcolor="black", label=<{CurveA|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.CurveAB" [color="black", fontcolor="black", label=<{CurveAB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.CurveB" [color="black", fontcolor="black", label=<{CurveB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.CurveFilledA" [color="black", fontcolor="black", label=<{CurveFilledA|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.CurveFilledAB" [color="black", fontcolor="black", label=<{CurveFilledAB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.CurveFilledB" [color="black", fontcolor="black", label=<{CurveFilledB|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.dates.DateConverter" [color="black", fontcolor="black", label=<{DateConverter|<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(value, unit, axis)<br ALIGN="LEFT"/>default_units(x, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.DateFormatter" [color="black", fontcolor="black", label=<{DateFormatter|fmt<br ALIGN="LEFT"/>illegal_s<br ALIGN="LEFT"/>tz : NoneType<br ALIGN="LEFT"/>|set_tzinfo(tz)<br ALIGN="LEFT"/>strftime(dt, fmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.DateLocator" [color="black", fontcolor="black", label=<{DateLocator|hms0d : dict<br ALIGN="LEFT"/>tz : NoneType<br ALIGN="LEFT"/>|datalim_to_dt()<br ALIGN="LEFT"/>nonsingular(vmin, vmax)<br ALIGN="LEFT"/>set_tzinfo(tz)<br ALIGN="LEFT"/>viewlim_to_dt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.DayLocator" [color="black", fontcolor="black", label=<{DayLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.DialogLineprops" [color="black", fontcolor="black", label=<{DialogLineprops|cbox_lineprops<br ALIGN="LEFT"/>cbox_linestyles<br ALIGN="LEFT"/>cbox_markers<br ALIGN="LEFT"/>dlg<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>linestyled : dict<br ALIGN="LEFT"/>linestyles<br ALIGN="LEFT"/>markerd : dict<br ALIGN="LEFT"/>markers<br ALIGN="LEFT"/>signals : tuple<br ALIGN="LEFT"/>wtree<br ALIGN="LEFT"/>|get_active_line()<br ALIGN="LEFT"/>get_active_linestyle()<br ALIGN="LEFT"/>get_active_marker()<br ALIGN="LEFT"/>on_colorbutton_linestyle_color_set(button)<br ALIGN="LEFT"/>on_colorbutton_markerface_color_set(button)<br ALIGN="LEFT"/>on_combobox_lineprops_changed(item)<br ALIGN="LEFT"/>on_combobox_linestyle_changed(item)<br ALIGN="LEFT"/>on_combobox_marker_changed(item)<br ALIGN="LEFT"/>on_dialog_lineprops_cancelbutton_clicked(button)<br ALIGN="LEFT"/>on_dialog_lineprops_okbutton_clicked(button)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.DialogLineprops" [color="black", fontcolor="black", label=<{DialogLineprops|cbox_lineprops<br ALIGN="LEFT"/>cbox_linestyles<br ALIGN="LEFT"/>cbox_markers<br ALIGN="LEFT"/>dlg<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>linestyled : dict<br ALIGN="LEFT"/>linestyles<br ALIGN="LEFT"/>markerd : dict<br ALIGN="LEFT"/>markers<br ALIGN="LEFT"/>signals : tuple<br ALIGN="LEFT"/>wtree<br ALIGN="LEFT"/>|get_active_line()<br ALIGN="LEFT"/>get_active_linestyle()<br ALIGN="LEFT"/>get_active_marker()<br ALIGN="LEFT"/>on_colorbutton_linestyle_color_set(button)<br ALIGN="LEFT"/>on_colorbutton_markerface_color_set(button)<br ALIGN="LEFT"/>on_combobox_lineprops_changed(item)<br ALIGN="LEFT"/>on_combobox_linestyle_changed(item)<br ALIGN="LEFT"/>on_combobox_marker_changed(item)<br ALIGN="LEFT"/>on_dialog_lineprops_cancelbutton_clicked(button)<br ALIGN="LEFT"/>on_dialog_lineprops_okbutton_clicked(button)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.streamplot.DomainMap" [color="black", fontcolor="black", label=<{DomainMap|grid<br ALIGN="LEFT"/>mask<br ALIGN="LEFT"/>x_data2grid<br ALIGN="LEFT"/>x_grid2mask<br ALIGN="LEFT"/>x_mask2grid<br ALIGN="LEFT"/>y_data2grid<br ALIGN="LEFT"/>y_grid2mask<br ALIGN="LEFT"/>y_mask2grid<br ALIGN="LEFT"/>|data2grid(xd, yd)<br ALIGN="LEFT"/>grid2mask(xi, yi)<br ALIGN="LEFT"/>mask2grid(xm, ym)<br ALIGN="LEFT"/>reset_start_point(xg, yg)<br ALIGN="LEFT"/>start_trajectory(xg, yg)<br ALIGN="LEFT"/>undo_trajectory()<br ALIGN="LEFT"/>update_trajectory(xg, yg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication.Download" [color="black", fontcolor="black", label=<{Download|<br ALIGN="LEFT"/>|get(fignum, fmt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.DraggableAnnotation" [color="black", fontcolor="black", label=<{DraggableAnnotation|annotation<br ALIGN="LEFT"/>ox<br ALIGN="LEFT"/>oy<br ALIGN="LEFT"/>|finalize_offset()<br ALIGN="LEFT"/>save_offset()<br ALIGN="LEFT"/>update_offset(dx, dy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.DraggableBase" [color="black", fontcolor="black", label=<{DraggableBase|background<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>cids : list<br ALIGN="LEFT"/>got_artist : bool<br ALIGN="LEFT"/>mouse_x<br ALIGN="LEFT"/>mouse_y<br ALIGN="LEFT"/>ref_artist<br ALIGN="LEFT"/>|artist_picker(artist, evt)<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/><I>finalize_offset</I>()<br ALIGN="LEFT"/>on_motion(evt)<br ALIGN="LEFT"/>on_motion_blit(evt)<br ALIGN="LEFT"/>on_pick(evt)<br ALIGN="LEFT"/>on_release(event)<br ALIGN="LEFT"/><I>save_offset</I>()<br ALIGN="LEFT"/><I>update_offset</I>(dx, dy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend.DraggableLegend" [color="black", fontcolor="black", label=<{DraggableLegend|legend<br ALIGN="LEFT"/>|artist_picker(legend, evt)<br ALIGN="LEFT"/>finalize_offset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.DraggableOffsetBox" [color="black", fontcolor="black", label=<{DraggableOffsetBox|offsetbox<br ALIGN="LEFT"/>offsetbox_x<br ALIGN="LEFT"/>offsetbox_y<br ALIGN="LEFT"/>|get_loc_in_canvas()<br ALIGN="LEFT"/>save_offset()<br ALIGN="LEFT"/>update_offset(dx, dy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.DrawEvent" [color="black", fontcolor="black", label=<{DrawEvent|renderer<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.offsetbox.DrawingArea" [color="black", fontcolor="black", label=<{DrawingArea|dpi_transform<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>offset_transform<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>xdescent : float<br ALIGN="LEFT"/>ydescent : float<br ALIGN="LEFT"/>|add_artist(a)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_extent(renderer)<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_offset(xy)<br ALIGN="LEFT"/><I>set_transform</I>(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.delaunay.triangulate.DuplicatePointWarning" [color="black", fontcolor="red", label=<{DuplicatePointWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.Duration.Duration" [color="black", fontcolor="black", label=<{Duration|allowed : list<br ALIGN="LEFT"/>|checkSameFrame(rhs, func)<br ALIGN="LEFT"/>frame()<br ALIGN="LEFT"/>seconds()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dviread.Dvi" [color="black", fontcolor="black", label=<{Dvi|baseline : NoneType, float<br ALIGN="LEFT"/>boxes : list<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>fonts : dict<br ALIGN="LEFT"/>h : int<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>text : list<br ALIGN="LEFT"/>v : int<br ALIGN="LEFT"/>w : int<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>z : int<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dviread.DviFont" [color="black", fontcolor="black", label=<{DviFont|size<br ALIGN="LEFT"/>texname<br ALIGN="LEFT"/>widths<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.Ellipse" [color="black", fontcolor="black", label=<{Ellipse|angle : float<br ALIGN="LEFT"/>center<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|contains(ev)<br ALIGN="LEFT"/>get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.EllipseCollection" [color="black", fontcolor="black", label=<{EllipseCollection|<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.sphinxext.ipython_directive.EmbeddedSphinxShell" [color="black", fontcolor="black", label=<{EmbeddedSphinxShell|IP : NoneType<br ALIGN="LEFT"/>cout : StringIO<br ALIGN="LEFT"/>input : str<br ALIGN="LEFT"/>is_doctest : bool<br ALIGN="LEFT"/>is_suppress : bool<br ALIGN="LEFT"/>is_verbatim : bool<br ALIGN="LEFT"/>output : str<br ALIGN="LEFT"/>promptin<br ALIGN="LEFT"/>promptout<br ALIGN="LEFT"/>rgxin<br ALIGN="LEFT"/>rgxout<br ALIGN="LEFT"/>savefig_dir<br ALIGN="LEFT"/>source_dir<br ALIGN="LEFT"/>user_global_ns<br ALIGN="LEFT"/>user_ns<br ALIGN="LEFT"/>|clear_cout()<br ALIGN="LEFT"/>ensure_pyplot()<br ALIGN="LEFT"/>process_block(block)<br ALIGN="LEFT"/>process_comment(data)<br ALIGN="LEFT"/>process_image(decorator)<br ALIGN="LEFT"/>process_input(data, input_prompt, lineno)<br ALIGN="LEFT"/>process_input_line(line, store_history)<br ALIGN="LEFT"/>process_output(data, output_prompt, input_lines, output, is_doctest, image_file)<br ALIGN="LEFT"/>process_pure_python(content)<br ALIGN="LEFT"/>save_image(image_file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dviread.Encoding" [color="black", fontcolor="black", label=<{Encoding|encoding : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.EngFormatter" [color="black", fontcolor="black", label=<{EngFormatter|ENG_PREFIXES : dict<br ALIGN="LEFT"/>places : NoneType<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|format_eng(num)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.Epoch.Epoch" [color="black", fontcolor="black", label=<{Epoch|allowed : dict<br ALIGN="LEFT"/>|convert(frame)<br ALIGN="LEFT"/>frame()<br ALIGN="LEFT"/>julianDate(frame)<br ALIGN="LEFT"/>range(start, stop, step)<br ALIGN="LEFT"/>secondsPast(frame, jd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.EpochConverter.EpochConverter" [color="black", fontcolor="black", label=<{EpochConverter|jdRef : float<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(value, unit, axis)<br ALIGN="LEFT"/>default_units(value, axis)<br ALIGN="LEFT"/>duration2float(value)<br ALIGN="LEFT"/>epoch2float(value, unit)<br ALIGN="LEFT"/>float2epoch(value, unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.container.ErrorbarContainer" [color="black", fontcolor="black", label=<{ErrorbarContainer|has_xerr : bool<br ALIGN="LEFT"/>has_yerr : bool<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backend_bases.Event" [color="black", fontcolor="black", label=<{Event|canvas<br ALIGN="LEFT"/>guiEvent : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.collections.EventCollection" [color="black", fontcolor="black", label=<{EventCollection|append_positions<br ALIGN="LEFT"/>extend_positions<br ALIGN="LEFT"/>|add_positions(position)<br ALIGN="LEFT"/>get_color()<br ALIGN="LEFT"/>get_linelength()<br ALIGN="LEFT"/>get_lineoffset()<br ALIGN="LEFT"/>get_linestyle()<br ALIGN="LEFT"/>get_linewidth()<br ALIGN="LEFT"/>get_orientation()<br ALIGN="LEFT"/>get_positions()<br ALIGN="LEFT"/>is_horizontal()<br ALIGN="LEFT"/>set_linelength(linelength)<br ALIGN="LEFT"/>set_lineoffset(lineoffset)<br ALIGN="LEFT"/>set_orientation(orientation)<br ALIGN="LEFT"/>set_positions(positions)<br ALIGN="LEFT"/>switch_orientation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.FFMpegBase" [color="black", fontcolor="black", label=<{FFMpegBase|args_key : str<br ALIGN="LEFT"/>exec_key : str<br ALIGN="LEFT"/>output_args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.FFMpegFileWriter" [color="black", fontcolor="black", label=<{FFMpegFileWriter|supported_formats : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.FFMpegWriter" [color="black", fontcolor="black", label=<{FFMpegWriter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mlab.csv2rec.FH" [color="black", fontcolor="black", label=<{FH|fh<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>fix(s)<br ALIGN="LEFT"/>seek(arg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FIFOBuffer" [color="black", fontcolor="black", label=<{FIFOBuffer|callbackd : dict<br ALIGN="LEFT"/>dataLim : NoneType<br ALIGN="LEFT"/>|add(x, y)<br ALIGN="LEFT"/>asarrays()<br ALIGN="LEFT"/>last()<br ALIGN="LEFT"/>register(func, N)<br ALIGN="LEFT"/>update_datalim_to_current()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_ticker.test_LogFormatterExponent.FakeAxis" [color="black", fontcolor="black", label=<{FakeAxis|<br ALIGN="LEFT"/>|get_view_interval()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.Fancy" [color="black", fontcolor="black", label=<{Fancy|head_length : float<br ALIGN="LEFT"/>head_width : float<br ALIGN="LEFT"/>tail_width : float<br ALIGN="LEFT"/>|transmute(path, mutation_size, linewidth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.FancyArrow" [color="black", fontcolor="black", label=<{FancyArrow|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.FancyArrowPatch" [color="black", fontcolor="black", label=<{FancyArrowPatch|figure : NoneType<br ALIGN="LEFT"/>patchA : NoneType<br ALIGN="LEFT"/>patchB : NoneType<br ALIGN="LEFT"/>shrinkA : float<br ALIGN="LEFT"/>shrinkB : float<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_arrowstyle()<br ALIGN="LEFT"/>get_connectionstyle()<br ALIGN="LEFT"/>get_dpi_cor()<br ALIGN="LEFT"/>get_mutation_aspect()<br ALIGN="LEFT"/>get_mutation_scale()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_path_in_displaycoord()<br ALIGN="LEFT"/>set_arrowstyle(arrowstyle)<br ALIGN="LEFT"/>set_connectionstyle(connectionstyle)<br ALIGN="LEFT"/>set_dpi_cor(dpi_cor)<br ALIGN="LEFT"/>set_mutation_aspect(aspect)<br ALIGN="LEFT"/>set_mutation_scale(scale)<br ALIGN="LEFT"/>set_patchA(patchA)<br ALIGN="LEFT"/>set_patchB(patchB)<br ALIGN="LEFT"/>set_positions(posA, posB)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.FancyBboxPatch" [color="black", fontcolor="black", label=<{FancyBboxPatch|<br ALIGN="LEFT"/>|get_bbox()<br ALIGN="LEFT"/>get_boxstyle()<br ALIGN="LEFT"/>get_height()<br ALIGN="LEFT"/>get_mutation_aspect()<br ALIGN="LEFT"/>get_mutation_scale()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_width()<br ALIGN="LEFT"/>get_x()<br ALIGN="LEFT"/>get_y()<br ALIGN="LEFT"/>set_bounds()<br ALIGN="LEFT"/>set_boxstyle(boxstyle)<br ALIGN="LEFT"/>set_height(h)<br ALIGN="LEFT"/>set_mutation_aspect(aspect)<br ALIGN="LEFT"/>set_mutation_scale(scale)<br ALIGN="LEFT"/>set_width(w)<br ALIGN="LEFT"/>set_x(x)<br ALIGN="LEFT"/>set_y(y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_axes.test_hexbin_pickable.FauxMouseEvent" [color="black", fontcolor="black", label=<{FauxMouseEvent|x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication.FavIcon" [color="black", fontcolor="black", label=<{FavIcon|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.figure.Figure" [color="black", fontcolor="black", label=<{Figure|artists : list<br ALIGN="LEFT"/>axes : property<br ALIGN="LEFT"/>bbox<br ALIGN="LEFT"/>bbox_inches<br ALIGN="LEFT"/>callbacks<br ALIGN="LEFT"/>canvas : NoneType<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>dpi_scale_trans<br ALIGN="LEFT"/>figurePatch<br ALIGN="LEFT"/>frameon : NoneType<br ALIGN="LEFT"/>images : list<br ALIGN="LEFT"/>legends : list<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>number : int<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>patches : list<br ALIGN="LEFT"/>subplotpars : NoneType<br ALIGN="LEFT"/>suppressComposite : NoneType<br ALIGN="LEFT"/>texts : list<br ALIGN="LEFT"/>transFigure<br ALIGN="LEFT"/>|add_axes()<br ALIGN="LEFT"/>add_axobserver(func)<br ALIGN="LEFT"/>add_subplot()<br ALIGN="LEFT"/>autofmt_xdate(bottom, rotation, ha)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>clf(keep_observers)<br ALIGN="LEFT"/>colorbar(mappable, cax, ax, use_gridspec)<br ALIGN="LEFT"/>contains(mouseevent)<br ALIGN="LEFT"/>delaxes(a)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>draw_artist(a)<br ALIGN="LEFT"/>figimage(X, xo, yo, alpha, norm, cmap, vmin, vmax, origin)<br ALIGN="LEFT"/>gca()<br ALIGN="LEFT"/>get_axes()<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_default_bbox_extra_artists()<br ALIGN="LEFT"/>get_dpi()<br ALIGN="LEFT"/>get_edgecolor()<br ALIGN="LEFT"/>get_facecolor()<br ALIGN="LEFT"/>get_figheight()<br ALIGN="LEFT"/>get_figwidth()<br ALIGN="LEFT"/>get_frameon()<br ALIGN="LEFT"/>get_size_inches()<br ALIGN="LEFT"/>get_tight_layout()<br ALIGN="LEFT"/>get_tightbbox(renderer)<br ALIGN="LEFT"/>get_window_extent()<br ALIGN="LEFT"/>ginput(n, timeout, show_clicks, mouse_add, mouse_pop, mouse_stop)<br ALIGN="LEFT"/>hold(b)<br ALIGN="LEFT"/>legend(handles, labels)<br ALIGN="LEFT"/>savefig()<br ALIGN="LEFT"/>sca(a)<br ALIGN="LEFT"/>set_canvas(canvas)<br ALIGN="LEFT"/>set_dpi(val)<br ALIGN="LEFT"/>set_edgecolor(color)<br ALIGN="LEFT"/>set_facecolor(color)<br ALIGN="LEFT"/>set_figheight(val)<br ALIGN="LEFT"/>set_figwidth(val)<br ALIGN="LEFT"/>set_frameon(b)<br ALIGN="LEFT"/>set_size_inches()<br ALIGN="LEFT"/>set_tight_layout(tight)<br ALIGN="LEFT"/>show(warn)<br ALIGN="LEFT"/>subplots_adjust()<br ALIGN="LEFT"/>suptitle(t)<br ALIGN="LEFT"/>text(x, y, s)<br ALIGN="LEFT"/>tight_layout(renderer, pad, h_pad, w_pad, rect)<br ALIGN="LEFT"/>waitforbuttonpress(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_agg.FigureCanvasAgg" [color="black", fontcolor="black", label=<{FigureCanvasAgg|print_jpeg<br ALIGN="LEFT"/>print_rgba<br ALIGN="LEFT"/>print_tiff<br ALIGN="LEFT"/>renderer<br ALIGN="LEFT"/>|buffer_rgba()<br ALIGN="LEFT"/>copy_from_bbox(bbox)<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/>get_renderer(cleared)<br ALIGN="LEFT"/>print_jpg(filename_or_obj)<br ALIGN="LEFT"/>print_png(filename_or_obj)<br ALIGN="LEFT"/>print_raw(filename_or_obj)<br ALIGN="LEFT"/>print_tif(filename_or_obj)<br ALIGN="LEFT"/>print_to_buffer()<br ALIGN="LEFT"/>restore_region(region, bbox, xy)<br ALIGN="LEFT"/>tostring_argb()<br ALIGN="LEFT"/>tostring_rgb()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.FigureCanvasBase" [color="black", fontcolor="black", label=<{FigureCanvasBase|button_pick_id : int<br ALIGN="LEFT"/>callbacks<br ALIGN="LEFT"/>events : list<br ALIGN="LEFT"/>figure<br ALIGN="LEFT"/>filetypes : dict<br ALIGN="LEFT"/>fixed_dpi : NoneType<br ALIGN="LEFT"/>mouse_grabber : NoneType<br ALIGN="LEFT"/>scroll_pick_id : int<br ALIGN="LEFT"/>supports_blit : bool<br ALIGN="LEFT"/>toolbar : NoneType<br ALIGN="LEFT"/>widgetlock<br ALIGN="LEFT"/>|<I>blit</I>(bbox)<br ALIGN="LEFT"/>button_press_event(x, y, button, dblclick, guiEvent)<br ALIGN="LEFT"/>button_release_event(x, y, button, guiEvent)<br ALIGN="LEFT"/>close_event(guiEvent)<br ALIGN="LEFT"/><I>draw</I>()<br ALIGN="LEFT"/><I>draw_cursor</I>(event)<br ALIGN="LEFT"/>draw_event(renderer)<br ALIGN="LEFT"/>draw_idle()<br ALIGN="LEFT"/>enter_notify_event(guiEvent, xy)<br ALIGN="LEFT"/><I>flush_events</I>()<br ALIGN="LEFT"/>get_default_filename()<br ALIGN="LEFT"/>get_default_filetype()<br ALIGN="LEFT"/>get_supported_filetypes()<br ALIGN="LEFT"/>get_supported_filetypes_grouped()<br ALIGN="LEFT"/>get_width_height()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>grab_mouse(ax)<br ALIGN="LEFT"/>idle_event(guiEvent)<br ALIGN="LEFT"/>is_saving()<br ALIGN="LEFT"/>key_press_event(key, guiEvent)<br ALIGN="LEFT"/>key_release_event(key, guiEvent)<br ALIGN="LEFT"/>leave_notify_event(guiEvent)<br ALIGN="LEFT"/>motion_notify_event(x, y, guiEvent)<br ALIGN="LEFT"/>mpl_connect(s, func)<br ALIGN="LEFT"/>mpl_disconnect(cid)<br ALIGN="LEFT"/>new_timer()<br ALIGN="LEFT"/>onHilite(ev)<br ALIGN="LEFT"/>onRemove(ev)<br ALIGN="LEFT"/>pick(mouseevent)<br ALIGN="LEFT"/>pick_event(mouseevent, artist)<br ALIGN="LEFT"/>print_figure(filename, dpi, facecolor, edgecolor, orientation, format)<br ALIGN="LEFT"/>release_mouse(ax)<br ALIGN="LEFT"/><I>resize</I>(w, h)<br ALIGN="LEFT"/>resize_event()<br ALIGN="LEFT"/>scroll_event(x, y, step, guiEvent)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/><I>start_event_loop</I>(timeout)<br ALIGN="LEFT"/>start_event_loop_default(timeout)<br ALIGN="LEFT"/><I>stop_event_loop</I>()<br ALIGN="LEFT"/>stop_event_loop_default()<br ALIGN="LEFT"/>switch_backends(FigureCanvasClass)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cairo.FigureCanvasCairo" [color="black", fontcolor="black", label=<{FigureCanvasCairo|<br ALIGN="LEFT"/>|print_pdf(fobj)<br ALIGN="LEFT"/>print_png(fobj)<br ALIGN="LEFT"/>print_ps(fobj)<br ALIGN="LEFT"/>print_svg(fobj)<br ALIGN="LEFT"/>print_svgz(fobj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.FigureCanvasCocoaAgg" [color="black", fontcolor="black", label=<{FigureCanvasCocoaAgg|<br ALIGN="LEFT"/>|<I>blit</I>(bbox)<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gdk.FigureCanvasGDK" [color="black", fontcolor="black", label=<{FigureCanvasGDK|filetypes : dict<br ALIGN="LEFT"/>print_jpg<br ALIGN="LEFT"/>|print_jpeg(filename)<br ALIGN="LEFT"/>print_png(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.FigureCanvasGTK" [color="black", fontcolor="black", label=<{FigureCanvasGTK|event_mask<br ALIGN="LEFT"/>filetypes : dict<br ALIGN="LEFT"/>keyvald : dict<br ALIGN="LEFT"/>last_downclick : dict<br ALIGN="LEFT"/>print_jpg<br ALIGN="LEFT"/>|button_press_event(widget, event)<br ALIGN="LEFT"/>button_release_event(widget, event)<br ALIGN="LEFT"/>configure_event(widget, event)<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/>draw_idle()<br ALIGN="LEFT"/>enter_notify_event(widget, event)<br ALIGN="LEFT"/>expose_event(widget, event)<br ALIGN="LEFT"/>flush_events()<br ALIGN="LEFT"/>key_press_event(widget, event)<br ALIGN="LEFT"/>key_release_event(widget, event)<br ALIGN="LEFT"/>leave_notify_event(widget, event)<br ALIGN="LEFT"/>motion_notify_event(widget, event)<br ALIGN="LEFT"/>new_timer()<br ALIGN="LEFT"/>print_jpeg(filename)<br ALIGN="LEFT"/>print_png(filename)<br ALIGN="LEFT"/>scroll_event(widget, event)<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.FigureCanvasGTK3" [color="black", fontcolor="black", label=<{FigureCanvasGTK3|event_mask<br ALIGN="LEFT"/>keyvald : dict<br ALIGN="LEFT"/>|button_press_event(widget, event)<br ALIGN="LEFT"/>button_release_event(widget, event)<br ALIGN="LEFT"/>configure_event(widget, event)<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/>draw_idle()<br ALIGN="LEFT"/>enter_notify_event(widget, event)<br ALIGN="LEFT"/>flush_events()<br ALIGN="LEFT"/>key_press_event(widget, event)<br ALIGN="LEFT"/>key_release_event(widget, event)<br ALIGN="LEFT"/>leave_notify_event(widget, event)<br ALIGN="LEFT"/>motion_notify_event(widget, event)<br ALIGN="LEFT"/>new_timer()<br ALIGN="LEFT"/><I>on_draw_event</I>(widget, ctx)<br ALIGN="LEFT"/>scroll_event(widget, event)<br ALIGN="LEFT"/>size_allocate(widget, allocation)<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg" [color="black", fontcolor="black", label=<{FigureCanvasGTK3Agg|<br ALIGN="LEFT"/>|blit(bbox)<br ALIGN="LEFT"/>on_draw_event(widget, ctx)<br ALIGN="LEFT"/>print_png(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo" [color="black", fontcolor="black", label=<{FigureCanvasGTK3Cairo|<br ALIGN="LEFT"/>|on_draw_event(widget, ctx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg" [color="black", fontcolor="black", label=<{FigureCanvasGTKAgg|filetypes : dict<br ALIGN="LEFT"/>|blit(bbox)<br ALIGN="LEFT"/>configure_event(widget, event)<br ALIGN="LEFT"/>print_png(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo" [color="black", fontcolor="black", label=<{FigureCanvasGTKCairo|filetypes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.FigureCanvasMac" [color="black", fontcolor="black", label=<{FigureCanvasMac|filetypes : dict<br ALIGN="LEFT"/>renderer<br ALIGN="LEFT"/>|new_timer()<br ALIGN="LEFT"/>print_bmp(filename)<br ALIGN="LEFT"/>print_gif(filename)<br ALIGN="LEFT"/>print_jpeg(filename)<br ALIGN="LEFT"/>print_jpg(filename)<br ALIGN="LEFT"/>print_tif(filename)<br ALIGN="LEFT"/>print_tiff(filename)<br ALIGN="LEFT"/>resize(width, height)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_nbagg.FigureCanvasNbAgg" [color="black", fontcolor="black", label=<{FigureCanvasNbAgg|<br ALIGN="LEFT"/>|new_timer()<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.FigureCanvasPS" [color="black", fontcolor="black", label=<{FigureCanvasPS|filetypes : dict<br ALIGN="LEFT"/>fixed_dpi : int<br ALIGN="LEFT"/>|<I>draw</I>()<br ALIGN="LEFT"/>get_default_filetype()<br ALIGN="LEFT"/>print_eps(outfile)<br ALIGN="LEFT"/>print_ps(outfile)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.FigureCanvasPdf" [color="black", fontcolor="black", label=<{FigureCanvasPdf|filetypes : dict<br ALIGN="LEFT"/>fixed_dpi : int<br ALIGN="LEFT"/>|<I>draw</I>()<br ALIGN="LEFT"/>get_default_filetype()<br ALIGN="LEFT"/>print_pdf(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.FigureCanvasPgf" [color="black", fontcolor="black", label=<{FigureCanvasPgf|filetypes : dict<br ALIGN="LEFT"/>|get_default_filetype()<br ALIGN="LEFT"/>get_renderer()<br ALIGN="LEFT"/>print_pdf(fname_or_fh)<br ALIGN="LEFT"/>print_pgf(fname_or_fh)<br ALIGN="LEFT"/>print_png(fname_or_fh)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt4.FigureCanvasQT" [color="black", fontcolor="black", label=<{FigureCanvasQT|figure<br ALIGN="LEFT"/>|wheelEvent(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.FigureCanvasQT" [color="black", fontcolor="black", label=<{FigureCanvasQT|buttond : dict<br ALIGN="LEFT"/>figure<br ALIGN="LEFT"/>|draw_idle()<br ALIGN="LEFT"/>enterEvent(event)<br ALIGN="LEFT"/>flush_events()<br ALIGN="LEFT"/>keyPressEvent(event)<br ALIGN="LEFT"/>keyReleaseEvent(event)<br ALIGN="LEFT"/>leaveEvent(event)<br ALIGN="LEFT"/>minumumSizeHint()<br ALIGN="LEFT"/>mouseDoubleClickEvent(event)<br ALIGN="LEFT"/>mouseMoveEvent(event)<br ALIGN="LEFT"/>mousePressEvent(event)<br ALIGN="LEFT"/>mouseReleaseEvent(event)<br ALIGN="LEFT"/>new_timer()<br ALIGN="LEFT"/>resizeEvent(event)<br ALIGN="LEFT"/>sizeHint()<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>wheelEvent(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg" [color="black", fontcolor="black", label=<{FigureCanvasQTAgg|blitbox : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg" [color="black", fontcolor="black", label=<{FigureCanvasQTAgg|blitbox : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5agg.FigureCanvasQTAggBase" [color="black", fontcolor="black", label=<{FigureCanvasQTAggBase|blitbox : NoneType<br ALIGN="LEFT"/>|blit(bbox)<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/>drawRectangle(rect)<br ALIGN="LEFT"/>paintEvent(e)<br ALIGN="LEFT"/>print_figure()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_svg.FigureCanvasSVG" [color="black", fontcolor="black", label=<{FigureCanvasSVG|filetypes : dict<br ALIGN="LEFT"/>fixed_dpi : int<br ALIGN="LEFT"/>|get_default_filetype()<br ALIGN="LEFT"/>print_svg(filename)<br ALIGN="LEFT"/>print_svgz(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_template.FigureCanvasTemplate" [color="black", fontcolor="black", label=<{FigureCanvasTemplate|filetypes : dict<br ALIGN="LEFT"/>|draw()<br ALIGN="LEFT"/>get_default_filetype()<br ALIGN="LEFT"/><I>print_foo</I>(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.FigureCanvasTkAgg" [color="black", fontcolor="black", label=<{FigureCanvasTkAgg|keyvald : dict<br ALIGN="LEFT"/>show<br ALIGN="LEFT"/>|blit(bbox)<br ALIGN="LEFT"/>button_dblclick_event(event)<br ALIGN="LEFT"/>button_press_event(event, dblclick)<br ALIGN="LEFT"/>button_release_event(event)<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/>draw_idle()<br ALIGN="LEFT"/>flush_events()<br ALIGN="LEFT"/>get_tk_widget()<br ALIGN="LEFT"/>key_press(event)<br ALIGN="LEFT"/>key_release(event)<br ALIGN="LEFT"/>motion_notify_event(event)<br ALIGN="LEFT"/>new_timer()<br ALIGN="LEFT"/>resize(event)<br ALIGN="LEFT"/>scroll_event(event)<br ALIGN="LEFT"/>scroll_event_windows(event)<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.FigureCanvasWebAgg" [color="black", fontcolor="black", label=<{FigureCanvasWebAgg|<br ALIGN="LEFT"/>|new_timer()<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [color="black", fontcolor="black", label=<{FigureCanvasWebAggCore|supports_blit : bool<br ALIGN="LEFT"/>|draw()<br ALIGN="LEFT"/>draw_idle()<br ALIGN="LEFT"/>get_diff_image()<br ALIGN="LEFT"/>get_renderer(cleared)<br ALIGN="LEFT"/>handle_event(event)<br ALIGN="LEFT"/>handle_resize(event)<br ALIGN="LEFT"/>handle_send_image_mode(event)<br ALIGN="LEFT"/>send_event(event_type)<br ALIGN="LEFT"/>set_image_mode(mode)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.FigureCanvasWx" [color="black", fontcolor="black", label=<{FigureCanvasWx|IsShownOnScreen<br ALIGN="LEFT"/>SetInitialSize<br ALIGN="LEFT"/>bitmap<br ALIGN="LEFT"/>filetypes : dict<br ALIGN="LEFT"/>keyvald : dict<br ALIGN="LEFT"/>macros : dict<br ALIGN="LEFT"/>print_jpg<br ALIGN="LEFT"/>print_tif<br ALIGN="LEFT"/>printer_margin : float<br ALIGN="LEFT"/>printer_width : float<br ALIGN="LEFT"/>renderer<br ALIGN="LEFT"/>|Copy_to_Clipboard(event)<br ALIGN="LEFT"/>Destroy()<br ALIGN="LEFT"/>draw(drawDC)<br ALIGN="LEFT"/>draw_idle()<br ALIGN="LEFT"/>flush_events()<br ALIGN="LEFT"/>gui_repaint(drawDC)<br ALIGN="LEFT"/>new_timer()<br ALIGN="LEFT"/>print_bmp(filename)<br ALIGN="LEFT"/>print_figure(filename)<br ALIGN="LEFT"/>print_jpeg(filename)<br ALIGN="LEFT"/>print_pcx(filename)<br ALIGN="LEFT"/>print_png(filename)<br ALIGN="LEFT"/>print_tiff(filename)<br ALIGN="LEFT"/>print_xpm(filename)<br ALIGN="LEFT"/>start_event_loop(timeout)<br ALIGN="LEFT"/>stop_event_loop(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg" [color="black", fontcolor="black", label=<{FigureCanvasWxAgg|bitmap<br ALIGN="LEFT"/>filetypes : dict<br ALIGN="LEFT"/>|blit(bbox)<br ALIGN="LEFT"/>draw(drawDC)<br ALIGN="LEFT"/>print_figure(filename)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.FigureFrameWx" [color="black", fontcolor="black", label=<{FigureFrameWx|canvas<br ALIGN="LEFT"/>figmgr<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>sizer<br ALIGN="LEFT"/>toolbar : NoneType<br ALIGN="LEFT"/>|Destroy()<br ALIGN="LEFT"/>GetToolBar()<br ALIGN="LEFT"/>get_canvas(fig)<br ALIGN="LEFT"/>get_figure_manager()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wxagg.FigureFrameWxAgg" [color="black", fontcolor="black", label=<{FigureFrameWxAgg|<br ALIGN="LEFT"/>|get_canvas(fig)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.image.FigureImage" [color="black", fontcolor="black", label=<{FigureImage|figure<br ALIGN="LEFT"/>magnification : float<br ALIGN="LEFT"/>origin : NoneType<br ALIGN="LEFT"/>ox : int<br ALIGN="LEFT"/>oy : int<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_extent()<br ALIGN="LEFT"/>get_size()<br ALIGN="LEFT"/>make_image(magnification)<br ALIGN="LEFT"/>set_array(A)<br ALIGN="LEFT"/>set_data(A)<br ALIGN="LEFT"/>write_png(fname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.FigureManagerBase" [color="black", fontcolor="black", label=<{FigureManagerBase|canvas<br ALIGN="LEFT"/>key_press_handler_id<br ALIGN="LEFT"/>num<br ALIGN="LEFT"/>|<I>destroy</I>()<br ALIGN="LEFT"/><I>full_screen_toggle</I>()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>key_press(event)<br ALIGN="LEFT"/><I>resize</I>(w, h)<br ALIGN="LEFT"/><I>set_window_title</I>(title)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/><I>show_popup</I>(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.FigureManagerCocoaAgg" [color="black", fontcolor="black", label=<{FigureManagerCocoaAgg|bootstrap<br ALIGN="LEFT"/>|show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.FigureManagerGTK" [color="black", fontcolor="black", label=<{FigureManagerGTK|toolbar : NoneType<br ALIGN="LEFT"/>vbox<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>full_screen_toggle()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>resize(width, height)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.FigureManagerGTK3" [color="black", fontcolor="black", label=<{FigureManagerGTK3|toolbar : NoneType<br ALIGN="LEFT"/>vbox<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>full_screen_toggle()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>resize(width, height)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3agg.FigureManagerGTK3Agg" [color="black", fontcolor="black", label=<{FigureManagerGTK3Agg|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3cairo.FigureManagerGTK3Cairo" [color="black", fontcolor="black", label=<{FigureManagerGTK3Cairo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkagg.FigureManagerGTKAgg" [color="black", fontcolor="black", label=<{FigureManagerGTKAgg|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkcairo.FigureManagerGTKCairo" [color="black", fontcolor="black", label=<{FigureManagerGTKCairo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.FigureManagerMac" [color="black", fontcolor="black", label=<{FigureManagerMac|toolbar : NoneType<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_nbagg.FigureManagerNbAgg" [color="black", fontcolor="black", label=<{FigureManagerNbAgg|ToolbarCls<br ALIGN="LEFT"/>connected<br ALIGN="LEFT"/>web_sockets : set<br ALIGN="LEFT"/>|clearup_closed()<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>display_js()<br ALIGN="LEFT"/>get_javascript(stream)<br ALIGN="LEFT"/>reshow()<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.FigureManagerPS" [color="black", fontcolor="black", label=<{FigureManagerPS|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.FigureManagerPdf" [color="black", fontcolor="black", label=<{FigureManagerPdf|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.FigureManagerPgf" [color="black", fontcolor="black", label=<{FigureManagerPgf|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.FigureManagerQT" [color="black", fontcolor="black", label=<{FigureManagerQT|canvas<br ALIGN="LEFT"/>toolbar : NoneType<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>full_screen_toggle()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>resize(width, height)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_svg.FigureManagerSVG" [color="black", fontcolor="black", label=<{FigureManagerSVG|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_template.FigureManagerTemplate" [color="black", fontcolor="black", label=<{FigureManagerTemplate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.FigureManagerTkAgg" [color="black", fontcolor="black", label=<{FigureManagerTkAgg|canvas<br ALIGN="LEFT"/>toolbar : NoneType<br ALIGN="LEFT"/>window : NoneType<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>full_screen_toggle()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>resize(width, height)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg_core.FigureManagerWebAgg" [color="black", fontcolor="black", label=<{FigureManagerWebAgg|ToolbarCls<br ALIGN="LEFT"/>toolbar<br ALIGN="LEFT"/>web_sockets : set<br ALIGN="LEFT"/>|add_web_socket(web_socket)<br ALIGN="LEFT"/>get_javascript(stream)<br ALIGN="LEFT"/>get_static_file_path()<br ALIGN="LEFT"/>handle_json(content)<br ALIGN="LEFT"/>refresh_all()<br ALIGN="LEFT"/>remove_web_socket(web_socket)<br ALIGN="LEFT"/>resize(w, h)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/><I>show</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.FigureManagerWx" [color="black", fontcolor="black", label=<{FigureManagerWx|frame<br ALIGN="LEFT"/>tb<br ALIGN="LEFT"/>toolbar<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>get_window_title()<br ALIGN="LEFT"/>resize(width, height)<br ALIGN="LEFT"/>set_window_title(title)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Fil" [color="black", fontcolor="black", label=<{Fil|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.FileChooserDialog" [color="black", fontcolor="black", label=<{FileChooserDialog|ext : NoneType<br ALIGN="LEFT"/>filetypes : list<br ALIGN="LEFT"/>sorted_filetypes : list<br ALIGN="LEFT"/>|get_filename_from_user()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.FileChooserDialog" [color="black", fontcolor="black", label=<{FileChooserDialog|ext : NoneType<br ALIGN="LEFT"/>filetypes : list<br ALIGN="LEFT"/>sorted_filetypes : list<br ALIGN="LEFT"/>|get_filename_from_user()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.FileMovieWriter" [color="black", fontcolor="black", label=<{FileMovieWriter|clear_temp : bool<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>fig<br ALIGN="LEFT"/>fname_format_str : str<br ALIGN="LEFT"/>frame_format<br ALIGN="LEFT"/>outfile<br ALIGN="LEFT"/>temp_prefix : str<br ALIGN="LEFT"/>|cleanup()<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>grab_frame()<br ALIGN="LEFT"/>setup(fig, outfile, dpi, frame_prefix, clear_temp)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Fill" [color="black", fontcolor="black", label=<{Fill|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Filll" [color="black", fontcolor="black", label=<{Filll|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.FixedFormatter" [color="black", fontcolor="black", label=<{FixedFormatter|offset_string : str<br ALIGN="LEFT"/>seq<br ALIGN="LEFT"/>|get_offset()<br ALIGN="LEFT"/>set_offset_string(ofs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.FixedLocator" [color="black", fontcolor="black", label=<{FixedLocator|locs : ndarray<br ALIGN="LEFT"/>nbins : NoneType<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.windowing.FocusManager" [color="black", fontcolor="black", label=<{FocusManager|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.font_manager.FontEntry" [color="black", fontcolor="black", label=<{FontEntry|fname : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>size : str<br ALIGN="LEFT"/>stretch : str<br ALIGN="LEFT"/>style : str<br ALIGN="LEFT"/>variant : str<br ALIGN="LEFT"/>weight : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FontLayout" [color="black", fontcolor="black", label=<{FontLayout|bold<br ALIGN="LEFT"/>family<br ALIGN="LEFT"/>italic<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>|get_font()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.font_manager.FontManager" [color="black", fontcolor="black", label=<{FontManager|afmfiles<br ALIGN="LEFT"/>afmlist : list<br ALIGN="LEFT"/>defaultFamily : dict<br ALIGN="LEFT"/>defaultFont : dict<br ALIGN="LEFT"/>default_size : NoneType<br ALIGN="LEFT"/>ttffiles<br ALIGN="LEFT"/>ttflist : list<br ALIGN="LEFT"/>|findfont(prop, fontext, directory, fallback_to_default, rebuild_if_missing)<br ALIGN="LEFT"/>get_default_size()<br ALIGN="LEFT"/>get_default_weight()<br ALIGN="LEFT"/>score_family(families, family2)<br ALIGN="LEFT"/>score_size(size1, size2)<br ALIGN="LEFT"/>score_stretch(stretch1, stretch2)<br ALIGN="LEFT"/>score_style(style1, style2)<br ALIGN="LEFT"/>score_variant(variant1, variant2)<br ALIGN="LEFT"/>score_weight(weight1, weight2)<br ALIGN="LEFT"/>set_default_weight(weight)<br ALIGN="LEFT"/><I>update_fonts</I>(filenames)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.font_manager.FontProperties" [color="black", fontcolor="black", label=<{FontProperties|get_slant<br ALIGN="LEFT"/>set_name<br ALIGN="LEFT"/>set_slant<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>get_family()<br ALIGN="LEFT"/>get_file()<br ALIGN="LEFT"/>get_fontconfig_pattern()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>get_size()<br ALIGN="LEFT"/>get_size_in_points()<br ALIGN="LEFT"/>get_stretch()<br ALIGN="LEFT"/>get_style()<br ALIGN="LEFT"/>get_variant()<br ALIGN="LEFT"/>get_weight()<br ALIGN="LEFT"/>set_family(family)<br ALIGN="LEFT"/>set_file(file)<br ALIGN="LEFT"/>set_fontconfig_pattern(pattern)<br ALIGN="LEFT"/>set_size(size)<br ALIGN="LEFT"/>set_stretch(stretch)<br ALIGN="LEFT"/>set_style(style)<br ALIGN="LEFT"/>set_variant(variant)<br ALIGN="LEFT"/>set_weight(weight)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.fontconfig_pattern.FontconfigPatternParser" [color="black", fontcolor="black", label=<{FontconfigPatternParser|ParseException<br ALIGN="LEFT"/>|parse(pattern)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Fonts" [color="black", fontcolor="black", label=<{Fonts|default_font_prop<br ALIGN="LEFT"/>depth<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>mathtext_backend<br ALIGN="LEFT"/>used_characters : NoneType, dict<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>get_kern(font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi)<br ALIGN="LEFT"/>get_metrics(font, font_class, sym, fontsize, dpi)<br ALIGN="LEFT"/>get_results(box)<br ALIGN="LEFT"/>get_sized_alternatives_for_symbol(fontname, sym)<br ALIGN="LEFT"/><I>get_underline_thickness</I>(font, fontsize, dpi)<br ALIGN="LEFT"/>get_used_characters()<br ALIGN="LEFT"/><I>get_xheight</I>(font, fontsize, dpi)<br ALIGN="LEFT"/>render_glyph(ox, oy, facename, font_class, sym, fontsize, dpi)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>set_canvas_size(w, h, d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormComboWidget" [color="black", fontcolor="black", label=<{FormComboWidget|combobox<br ALIGN="LEFT"/>stackwidget<br ALIGN="LEFT"/>update_buttons<br ALIGN="LEFT"/>widgetlist : list<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormDialog" [color="black", fontcolor="black", label=<{FormDialog|apply_callback : NoneType<br ALIGN="LEFT"/>bbox<br ALIGN="LEFT"/>data : NoneType, list<br ALIGN="LEFT"/>float_fields : list<br ALIGN="LEFT"/>formwidget<br ALIGN="LEFT"/>|accept()<br ALIGN="LEFT"/>apply()<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>register_float_field(field)<br ALIGN="LEFT"/>reject()<br ALIGN="LEFT"/>update_buttons()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormTabWidget" [color="black", fontcolor="black", label=<{FormTabWidget|tabwidget<br ALIGN="LEFT"/>update_buttons<br ALIGN="LEFT"/>widgetlist : list<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormWidget" [color="black", fontcolor="black", label=<{FormWidget|data<br ALIGN="LEFT"/>formlayout<br ALIGN="LEFT"/>update_buttons<br ALIGN="LEFT"/>widgets : list<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>get_dialog()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatBool" [color="black", fontcolor="black", label=<{FormatBool|<br ALIGN="LEFT"/>|fromstr(s)<br ALIGN="LEFT"/>toval(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatDate" [color="black", fontcolor="black", label=<{FormatDate|fmt<br ALIGN="LEFT"/>|fromstr(x)<br ALIGN="LEFT"/>toval(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatDatetime" [color="black", fontcolor="black", label=<{FormatDatetime|<br ALIGN="LEFT"/>|fromstr(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatFloat" [color="black", fontcolor="black", label=<{FormatFloat|precision : int<br ALIGN="LEFT"/>scale : float<br ALIGN="LEFT"/>|fromstr(s)<br ALIGN="LEFT"/>toval(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatFormatStr" [color="black", fontcolor="black", label=<{FormatFormatStr|fmt<br ALIGN="LEFT"/>|tostr(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatInt" [color="black", fontcolor="black", label=<{FormatInt|<br ALIGN="LEFT"/>|fromstr(s)<br ALIGN="LEFT"/>tostr(x)<br ALIGN="LEFT"/>toval(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatMillions" [color="black", fontcolor="black", label=<{FormatMillions|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mlab.FormatObj" [color="black", fontcolor="black", label=<{FormatObj|<br ALIGN="LEFT"/>|fromstr(s)<br ALIGN="LEFT"/>tostr(x)<br ALIGN="LEFT"/>toval(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatPercent" [color="black", fontcolor="black", label=<{FormatPercent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.FormatStrFormatter" [color="black", fontcolor="black", label=<{FormatStrFormatter|fmt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mlab.FormatString" [color="black", fontcolor="black", label=<{FormatString|<br ALIGN="LEFT"/>|tostr(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.FormatThousands" [color="black", fontcolor="black", label=<{FormatThousands|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.Formatter" [color="black", fontcolor="black", label=<{Formatter|locs : list<br ALIGN="LEFT"/>|fix_minus(s)<br ALIGN="LEFT"/>format_data(value)<br ALIGN="LEFT"/>format_data_short(value)<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>set_locs(locs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.FuncAnimation" [color="black", fontcolor="black", label=<{FuncAnimation|save_count : NoneType, int<br ALIGN="LEFT"/>|new_frame_seq()<br ALIGN="LEFT"/>new_saved_frame_seq()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.FuncFormatter" [color="black", fontcolor="black", label=<{FuncFormatter|func<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mlab.GaussianKDE" [color="black", fontcolor="black", label=<{GaussianKDE|covariance<br ALIGN="LEFT"/>covariance_factor<br ALIGN="LEFT"/>data_covariance : list<br ALIGN="LEFT"/>data_inv_cov<br ALIGN="LEFT"/>dataset : list<br ALIGN="LEFT"/>dim<br ALIGN="LEFT"/>factor<br ALIGN="LEFT"/>inv_cov<br ALIGN="LEFT"/>norm_factor<br ALIGN="LEFT"/>num_dp<br ALIGN="LEFT"/>|evaluate(points)<br ALIGN="LEFT"/>scotts_factor()<br ALIGN="LEFT"/>silverman_factor()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib._pylab_helpers.Gcf" [color="black", fontcolor="black", label=<{Gcf|figs : dict<br ALIGN="LEFT"/>|destroy(num)<br ALIGN="LEFT"/>destroy_all()<br ALIGN="LEFT"/>destroy_fig(fig)<br ALIGN="LEFT"/>get_active()<br ALIGN="LEFT"/>get_all_fig_managers()<br ALIGN="LEFT"/>get_fig_manager(num)<br ALIGN="LEFT"/>get_num_fig_managers()<br ALIGN="LEFT"/>has_fignum(num)<br ALIGN="LEFT"/>set_active(manager)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.GeoAxes" [color="black", fontcolor="black", label=<{GeoAxes|RESOLUTION : int<br ALIGN="LEFT"/>set_xscale<br ALIGN="LEFT"/>set_ylim<br ALIGN="LEFT"/>transAffine<br ALIGN="LEFT"/>transAxes<br ALIGN="LEFT"/>transData<br ALIGN="LEFT"/>transProjection<br ALIGN="LEFT"/>xaxis<br ALIGN="LEFT"/>yaxis<br ALIGN="LEFT"/>|can_pan()<br ALIGN="LEFT"/>can_zoom()<br ALIGN="LEFT"/>cla()<br ALIGN="LEFT"/><I>drag_pan</I>(button, key, x, y)<br ALIGN="LEFT"/><I>end_pan</I>()<br ALIGN="LEFT"/>format_coord(lon, lat)<br ALIGN="LEFT"/>get_data_ratio()<br ALIGN="LEFT"/>get_xaxis_text1_transform(pad)<br ALIGN="LEFT"/>get_xaxis_text2_transform(pad)<br ALIGN="LEFT"/>get_xaxis_transform(which)<br ALIGN="LEFT"/>get_yaxis_text1_transform(pad)<br ALIGN="LEFT"/>get_yaxis_text2_transform(pad)<br ALIGN="LEFT"/>get_yaxis_transform(which)<br ALIGN="LEFT"/>set_latitude_grid(degrees)<br ALIGN="LEFT"/>set_longitude_grid(degrees)<br ALIGN="LEFT"/>set_longitude_grid_ends(degrees)<br ALIGN="LEFT"/>set_xlim()<br ALIGN="LEFT"/>set_yscale()<br ALIGN="LEFT"/><I>start_pan</I>(x, y, button)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.GetRealpathAndStat" [color="black", fontcolor="black", label=<{GetRealpathAndStat|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Glue" [color="black", fontcolor="black", label=<{Glue|glue_spec<br ALIGN="LEFT"/>glue_subtype : str<br ALIGN="LEFT"/>|grow()<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.GlueSpec" [color="black", fontcolor="black", label=<{GlueSpec|shrink : float<br ALIGN="LEFT"/>shrink_order : int<br ALIGN="LEFT"/>stretch : float<br ALIGN="LEFT"/>stretch_order : int<br ALIGN="LEFT"/>width : float<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>factory(glue_type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.GraphicsContextBase" [color="black", fontcolor="black", label=<{GraphicsContextBase|dashd : dict<br ALIGN="LEFT"/>|copy_properties(gc)<br ALIGN="LEFT"/>get_alpha()<br ALIGN="LEFT"/>get_antialiased()<br ALIGN="LEFT"/>get_capstyle()<br ALIGN="LEFT"/>get_clip_path()<br ALIGN="LEFT"/>get_clip_rectangle()<br ALIGN="LEFT"/>get_dashes()<br ALIGN="LEFT"/>get_forced_alpha()<br ALIGN="LEFT"/>get_gid()<br ALIGN="LEFT"/>get_hatch()<br ALIGN="LEFT"/>get_hatch_path(density)<br ALIGN="LEFT"/>get_joinstyle()<br ALIGN="LEFT"/>get_linestyle(style)<br ALIGN="LEFT"/>get_linewidth()<br ALIGN="LEFT"/>get_rgb()<br ALIGN="LEFT"/>get_sketch_params()<br ALIGN="LEFT"/>get_snap()<br ALIGN="LEFT"/>get_url()<br ALIGN="LEFT"/><I>restore</I>()<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_antialiased(b)<br ALIGN="LEFT"/>set_capstyle(cs)<br ALIGN="LEFT"/>set_clip_path(path)<br ALIGN="LEFT"/>set_clip_rectangle(rectangle)<br ALIGN="LEFT"/>set_dashes(dash_offset, dash_list)<br ALIGN="LEFT"/>set_foreground(fg, isRGBA)<br ALIGN="LEFT"/>set_gid(id)<br ALIGN="LEFT"/>set_graylevel(frac)<br ALIGN="LEFT"/>set_hatch(hatch)<br ALIGN="LEFT"/>set_joinstyle(js)<br ALIGN="LEFT"/>set_linestyle(style)<br ALIGN="LEFT"/>set_linewidth(w)<br ALIGN="LEFT"/>set_sketch_params(scale, length, randomness)<br ALIGN="LEFT"/>set_snap(snap)<br ALIGN="LEFT"/>set_url(url)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cairo.GraphicsContextCairo" [color="black", fontcolor="black", label=<{GraphicsContextCairo|ctx<br ALIGN="LEFT"/>renderer<br ALIGN="LEFT"/>|restore()<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_capstyle(cs)<br ALIGN="LEFT"/>set_clip_path(path)<br ALIGN="LEFT"/>set_clip_rectangle(rectangle)<br ALIGN="LEFT"/>set_dashes(offset, dashes)<br ALIGN="LEFT"/>set_foreground(fg, isRGBA)<br ALIGN="LEFT"/>set_graylevel(frac)<br ALIGN="LEFT"/>set_joinstyle(js)<br ALIGN="LEFT"/>set_linewidth(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gdk.GraphicsContextGDK" [color="black", fontcolor="black", label=<{GraphicsContextGDK|gdkGC<br ALIGN="LEFT"/>renderer<br ALIGN="LEFT"/>|rgb_to_gdk_color(rgb)<br ALIGN="LEFT"/>set_capstyle(cs)<br ALIGN="LEFT"/>set_clip_rectangle(rectangle)<br ALIGN="LEFT"/>set_dashes(dash_offset, dash_list)<br ALIGN="LEFT"/>set_foreground(fg, isRGBA)<br ALIGN="LEFT"/>set_graylevel(frac)<br ALIGN="LEFT"/>set_joinstyle(js)<br ALIGN="LEFT"/>set_linewidth(w)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.GraphicsContextMac" [color="black", fontcolor="black", label=<{GraphicsContextMac|<br ALIGN="LEFT"/>|set_alpha(alpha)<br ALIGN="LEFT"/>set_clip_path(path)<br ALIGN="LEFT"/>set_clip_rectangle(box)<br ALIGN="LEFT"/>set_foreground(fg, isRGBA)<br ALIGN="LEFT"/>set_graylevel(fg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.GraphicsContextPS" [color="black", fontcolor="black", label=<{GraphicsContextPS|<br ALIGN="LEFT"/>|get_capstyle()<br ALIGN="LEFT"/>get_joinstyle()<br ALIGN="LEFT"/>shouldstroke()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.GraphicsContextPdf" [color="black", fontcolor="black", label=<{GraphicsContextPdf|capstyles : dict<br ALIGN="LEFT"/>commands : tuple<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>joinstyles : dict<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>|alpha_cmd(alpha, forced, effective_alphas)<br ALIGN="LEFT"/>capstyle_cmd(style)<br ALIGN="LEFT"/>clip_cmd(cliprect, clippath)<br ALIGN="LEFT"/>close_and_paint()<br ALIGN="LEFT"/>copy_properties(other)<br ALIGN="LEFT"/>dash_cmd(dashes)<br ALIGN="LEFT"/>delta(other)<br ALIGN="LEFT"/>fillcolor_cmd(rgb)<br ALIGN="LEFT"/>fillp()<br ALIGN="LEFT"/>finalize()<br ALIGN="LEFT"/>hatch_cmd(hatch)<br ALIGN="LEFT"/>joinstyle_cmd(style)<br ALIGN="LEFT"/>linewidth_cmd(width)<br ALIGN="LEFT"/>paint()<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>push()<br ALIGN="LEFT"/>rgb_cmd(rgb)<br ALIGN="LEFT"/>strokep()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.GraphicsContextPgf" [color="black", fontcolor="black", label=<{GraphicsContextPgf|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_template.GraphicsContextTemplate" [color="black", fontcolor="black", label=<{GraphicsContextTemplate|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.GraphicsContextWx" [color="black", fontcolor="black", label=<{GraphicsContextWx|IsSelected : bool<br ALIGN="LEFT"/>bitmap<br ALIGN="LEFT"/>dc<br ALIGN="LEFT"/>gfx_ctx<br ALIGN="LEFT"/>renderer<br ALIGN="LEFT"/>|get_wxcolour(color)<br ALIGN="LEFT"/>select()<br ALIGN="LEFT"/>set_capstyle(cs)<br ALIGN="LEFT"/>set_foreground(fg, isRGBA)<br ALIGN="LEFT"/>set_graylevel(frac)<br ALIGN="LEFT"/>set_joinstyle(js)<br ALIGN="LEFT"/>set_linestyle(ls)<br ALIGN="LEFT"/>set_linewidth(w)<br ALIGN="LEFT"/>unselect()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.streamplot.Grid" [color="black", fontcolor="black", label=<{Grid|dx<br ALIGN="LEFT"/>dy<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>nx<br ALIGN="LEFT"/>ny<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>x_origin<br ALIGN="LEFT"/>y_origin<br ALIGN="LEFT"/>|within_grid(xi, yi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.gridspec.GridSpec" [color="black", fontcolor="black", label=<{GridSpec|bottom : NoneType<br ALIGN="LEFT"/>hspace : NoneType<br ALIGN="LEFT"/>left : NoneType<br ALIGN="LEFT"/>right : NoneType<br ALIGN="LEFT"/>top : NoneType<br ALIGN="LEFT"/>wspace : NoneType<br ALIGN="LEFT"/>|get_subplot_params(fig)<br ALIGN="LEFT"/>locally_modified_subplot_params()<br ALIGN="LEFT"/>tight_layout(fig, renderer, pad, h_pad, w_pad, rect)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.gridspec.GridSpecBase" [color="black", fontcolor="black", label=<{GridSpecBase|<br ALIGN="LEFT"/>|get_geometry()<br ALIGN="LEFT"/>get_grid_positions(fig)<br ALIGN="LEFT"/>get_height_ratios()<br ALIGN="LEFT"/><I>get_subplot_params</I>(fig)<br ALIGN="LEFT"/>get_width_ratios()<br ALIGN="LEFT"/>new_subplotspec(loc, rowspan, colspan)<br ALIGN="LEFT"/>set_height_ratios(height_ratios)<br ALIGN="LEFT"/>set_width_ratios(width_ratios)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.gridspec.GridSpecFromSubplotSpec" [color="black", fontcolor="black", label=<{GridSpecFromSubplotSpec|<br ALIGN="LEFT"/>|get_subplot_params(fig)<br ALIGN="LEFT"/>get_topmost_subplotspec()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Grouper" [color="black", fontcolor="black", label=<{Grouper|<br ALIGN="LEFT"/>|clean()<br ALIGN="LEFT"/>get_siblings(a)<br ALIGN="LEFT"/>join(a)<br ALIGN="LEFT"/>joined(a, b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.HCentered" [color="black", fontcolor="black", label=<{HCentered|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.offsetbox.HPacker" [color="black", fontcolor="black", label=<{HPacker|<br ALIGN="LEFT"/>|get_extent_offsets(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.HammerAxes" [color="black", fontcolor="black", label=<{HammerAxes|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.geo.HammerAxes.HammerTransform" [color="black", fontcolor="black", label=<{HammerTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(ll)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerBase" [color="black", fontcolor="black", label=<{HandlerBase|<br ALIGN="LEFT"/>|adjust_drawing_area(legend, orig_handle, xdescent, ydescent, width, height, fontsize)<br ALIGN="LEFT"/><I>create_artists</I>(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>legend_artist(legend, orig_handle, fontsize, handlebox)<br ALIGN="LEFT"/>update_prop(legend_handle, orig_handle, legend)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerCircleCollection" [color="black", fontcolor="black", label=<{HandlerCircleCollection|<br ALIGN="LEFT"/>|create_collection(orig_handle, sizes, offsets, transOffset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerErrorbar" [color="black", fontcolor="black", label=<{HandlerErrorbar|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>get_err_size(legend, xdescent, ydescent, width, height, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerLine2D" [color="black", fontcolor="black", label=<{HandlerLine2D|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerLineCollection" [color="black", fontcolor="black", label=<{HandlerLineCollection|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>get_numpoints(legend)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerNpoints" [color="black", fontcolor="black", label=<{HandlerNpoints|<br ALIGN="LEFT"/>|get_numpoints(legend)<br ALIGN="LEFT"/>get_xdata(legend, xdescent, ydescent, width, height, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerNpointsYoffsets" [color="black", fontcolor="black", label=<{HandlerNpointsYoffsets|<br ALIGN="LEFT"/>|get_ydata(legend, xdescent, ydescent, width, height, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerPatch" [color="black", fontcolor="black", label=<{HandlerPatch|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerPathCollection" [color="black", fontcolor="black", label=<{HandlerPathCollection|<br ALIGN="LEFT"/>|create_collection(orig_handle, sizes, offsets, transOffset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerRegularPolyCollection" [color="black", fontcolor="black", label=<{HandlerRegularPolyCollection|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>create_collection(orig_handle, sizes, offsets, transOffset)<br ALIGN="LEFT"/>get_numpoints(legend)<br ALIGN="LEFT"/>get_sizes(legend, orig_handle, xdescent, ydescent, width, height, fontsize)<br ALIGN="LEFT"/>update_prop(legend_handle, orig_handle, legend)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerStem" [color="black", fontcolor="black", label=<{HandlerStem|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>get_ydata(legend, xdescent, ydescent, width, height, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend_handler.HandlerTuple" [color="black", fontcolor="black", label=<{HandlerTuple|<br ALIGN="LEFT"/>|create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.HatchPatternBase" [color="black", fontcolor="black", label=<{HatchPatternBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Hbox" [color="black", fontcolor="black", label=<{Hbox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Hlist" [color="black", fontcolor="black", label=<{Hlist|children : list<br ALIGN="LEFT"/>depth : float<br ALIGN="LEFT"/>function_name<br ALIGN="LEFT"/>glue_order : int<br ALIGN="LEFT"/>glue_ratio : float<br ALIGN="LEFT"/>glue_sign : int<br ALIGN="LEFT"/>height : float<br ALIGN="LEFT"/>shift_amount<br ALIGN="LEFT"/>width : float<br ALIGN="LEFT"/>|hpack(w, m)<br ALIGN="LEFT"/>kern()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.HorizontalHatch" [color="black", fontcolor="black", label=<{HorizontalHatch|num_lines : int<br ALIGN="LEFT"/>num_vertices<br ALIGN="LEFT"/>|set_vertices_and_codes(vertices, codes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.HourLocator" [color="black", fontcolor="black", label=<{HourLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Hrule" [color="black", fontcolor="black", label=<{Hrule|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.sphinxext.ipython_console_highlighting.IPythonConsoleLexer" [color="black", fontcolor="black", label=<{IPythonConsoleLexer|aliases : list<br ALIGN="LEFT"/>continue_prompt<br ALIGN="LEFT"/>input_prompt<br ALIGN="LEFT"/>mimetypes : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>output_prompt<br ALIGN="LEFT"/>tb_start<br ALIGN="LEFT"/>|get_tokens_unprocessed(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.IdentityTransform" [color="black", fontcolor="black", label=<{IdentityTransform|inverted<br ALIGN="LEFT"/>transform_affine<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>transform_path_affine<br ALIGN="LEFT"/>transform_path_non_affine<br ALIGN="LEFT"/>|frozen()<br ALIGN="LEFT"/>get_affine()<br ALIGN="LEFT"/>get_matrix()<br ALIGN="LEFT"/>transform(points)<br ALIGN="LEFT"/>transform_path(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Idle" [color="black", fontcolor="black", label=<{Idle|func<br ALIGN="LEFT"/>waittime : float<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.IdleEvent" [color="black", fontcolor="black", label=<{IdleEvent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.testing.noseclasses.ImageComparisonFailure" [color="black", fontcolor="red", label=<{ImageComparisonFailure|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.testing.decorators.ImageComparisonTest" [color="black", fontcolor="black", label=<{ImageComparisonTest|<br ALIGN="LEFT"/>|remove_text(figure)<br ALIGN="LEFT"/>setup_class()<br ALIGN="LEFT"/>test()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.sphinxext.plot_directive.ImageFile" [color="black", fontcolor="black", label=<{ImageFile|basename<br ALIGN="LEFT"/>dirname<br ALIGN="LEFT"/>formats : list<br ALIGN="LEFT"/>|filename(format)<br ALIGN="LEFT"/>filenames()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.ImageMagickBase" [color="black", fontcolor="black", label=<{ImageMagickBase|args_key : str<br ALIGN="LEFT"/>delay<br ALIGN="LEFT"/>exec_key : str<br ALIGN="LEFT"/>output_args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.ImageMagickFileWriter" [color="black", fontcolor="black", label=<{ImageMagickFileWriter|supported_formats : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.ImageMagickWriter" [color="black", fontcolor="black", label=<{ImageMagickWriter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.dates.IndexDateFormatter" [color="black", fontcolor="black", label=<{IndexDateFormatter|fmt<br ALIGN="LEFT"/>t<br ALIGN="LEFT"/>tz : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.IndexFormatter" [color="black", fontcolor="black", label=<{IndexFormatter|labels<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.IndexLocator" [color="black", fontcolor="black", label=<{IndexLocator|offset<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.streamplot.InvalidIndexError" [color="black", fontcolor="red", label=<{InvalidIndexError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform" [color="black", fontcolor="black", label=<{InvertedAitoffTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.HammerAxes.InvertedHammerTransform" [color="black", fontcolor="black", label=<{InvertedHammerTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.LambertAxes.InvertedLambertTransform" [color="black", fontcolor="black", label=<{InvertedLambertTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.InvertedLog10Transform" [color="black", fontcolor="black", label=<{InvertedLog10Transform|base : float<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.InvertedLog2Transform" [color="black", fontcolor="black", label=<{InvertedLog2Transform|base : float<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.InvertedLogTransform" [color="black", fontcolor="black", label=<{InvertedLogTransform|base<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform" [color="black", fontcolor="black", label=<{InvertedMollweideTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.InvertedNaturalLogTransform" [color="black", fontcolor="black", label=<{InvertedNaturalLogTransform|base<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.polar.InvertedPolarTransform" [color="black", fontcolor="black", label=<{InvertedPolarTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.InvertedSymmetricalLogTransform" [color="black", fontcolor="black", label=<{InvertedSymmetricalLogTransform|base<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>invlinthresh<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>linscale<br ALIGN="LEFT"/>linthresh<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.sphinxext.ipython_directive.IpythonDirective" [color="black", fontcolor="black", label=<{IpythonDirective|content : list<br ALIGN="LEFT"/>final_argumuent_whitespace : bool<br ALIGN="LEFT"/>has_content : bool<br ALIGN="LEFT"/>option_spec : dict<br ALIGN="LEFT"/>optional_arguments : int<br ALIGN="LEFT"/>required_arguments : int<br ALIGN="LEFT"/>shell<br ALIGN="LEFT"/>|get_config_options()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>teardown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Kern" [color="black", fontcolor="black", label=<{Kern|depth : int<br ALIGN="LEFT"/>height : int<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|grow()<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.KeyEvent" [color="black", fontcolor="black", label=<{KeyEvent|key<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.testing.noseclasses.KnownFailure" [color="black", fontcolor="black", label=<{KnownFailure|conf<br ALIGN="LEFT"/>enabled : bool<br ALIGN="LEFT"/>knownfail<br ALIGN="LEFT"/>|<I>addError</I>(test, err)<br ALIGN="LEFT"/>configure(options, conf)<br ALIGN="LEFT"/>options(parser, env)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.noseclasses.KnownFailureDidNotFailTest" [color="black", fontcolor="red", label=<{KnownFailureDidNotFailTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.testing.noseclasses.KnownFailureTest" [color="black", fontcolor="red", label=<{KnownFailureTest|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.LArrow" [color="black", fontcolor="black", label=<{LArrow|pad : float<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.LambertAxes" [color="black", fontcolor="black", label=<{LambertAxes|name : str<br ALIGN="LEFT"/>|cla()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.LambertAxes.LambertTransform" [color="black", fontcolor="black", label=<{LambertTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(ll)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.LargeCircles" [color="black", fontcolor="black", label=<{LargeCircles|num_rows<br ALIGN="LEFT"/>size : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.widgets.Lasso" [color="black", fontcolor="black", label=<{Lasso|background<br ALIGN="LEFT"/>callback : NoneType<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>verts : NoneType, list<br ALIGN="LEFT"/>|onmove(event)<br ALIGN="LEFT"/>onrelease(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.LassoSelector" [color="black", fontcolor="black", label=<{LassoSelector|background<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>onselect : NoneType<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>verts : NoneType, list<br ALIGN="LEFT"/>|ignore(event)<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>onpress(event)<br ALIGN="LEFT"/>onrelease(event)<br ALIGN="LEFT"/>update_background(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.LatexError" [color="black", fontcolor="red", label=<{LatexError|latex_output : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.LatexManager" [color="black", fontcolor="black", label=<{LatexManager|latex : Popen<br ALIGN="LEFT"/>latex_header : str<br ALIGN="LEFT"/>latex_stdin_utf8<br ALIGN="LEFT"/>str_cache : dict<br ALIGN="LEFT"/>texcommand : str<br ALIGN="LEFT"/>tmpdir<br ALIGN="LEFT"/>|get_width_height_descent(text, prop)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.LatexManagerFactory" [color="black", fontcolor="black", label=<{LatexManagerFactory|previous_instance : NoneType<br ALIGN="LEFT"/>|get_latex_manager()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.legend.Legend" [color="black", fontcolor="black", label=<{Legend|codes : dict<br ALIGN="LEFT"/>isaxes : bool<br ALIGN="LEFT"/>legendHandles : list<br ALIGN="LEFT"/>legendPatch<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>prop<br ALIGN="LEFT"/>texts : list<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|contains(event)<br ALIGN="LEFT"/>draggable(state, use_blit, update)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>draw_frame(b)<br ALIGN="LEFT"/>get_bbox_to_anchor()<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_default_handler_map()<br ALIGN="LEFT"/>get_frame()<br ALIGN="LEFT"/>get_frame_on()<br ALIGN="LEFT"/>get_legend_handler(legend_handler_map, orig_handle)<br ALIGN="LEFT"/>get_legend_handler_map()<br ALIGN="LEFT"/>get_lines()<br ALIGN="LEFT"/>get_patches()<br ALIGN="LEFT"/>get_texts()<br ALIGN="LEFT"/>get_title()<br ALIGN="LEFT"/>get_window_extent()<br ALIGN="LEFT"/>set_bbox_to_anchor(bbox, transform)<br ALIGN="LEFT"/>set_default_handler_map(handler_map)<br ALIGN="LEFT"/>set_frame_on(b)<br ALIGN="LEFT"/>set_title(title, prop)<br ALIGN="LEFT"/>update_default_handler_map(handler_map)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.LightSource" [color="black", fontcolor="black", label=<{LightSource|altdeg : int<br ALIGN="LEFT"/>azdeg : int<br ALIGN="LEFT"/>hsv_max_sat : int<br ALIGN="LEFT"/>hsv_max_val : int<br ALIGN="LEFT"/>hsv_min_sat : int<br ALIGN="LEFT"/>hsv_min_val : int<br ALIGN="LEFT"/>|shade(data, cmap, norm)<br ALIGN="LEFT"/>shade_rgb(rgb, elevation, fraction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.lines.Line2D" [color="black", fontcolor="black", label=<{Line2D|drawStyleKeys<br ALIGN="LEFT"/>drawStyles : dict<br ALIGN="LEFT"/>fillStyles : tuple<br ALIGN="LEFT"/>filled_markers : tuple<br ALIGN="LEFT"/>ind_offset : int, start<br ALIGN="LEFT"/>lineStyles : dict<br ALIGN="LEFT"/>markers : dict<br ALIGN="LEFT"/>pickradius : NoneType, int<br ALIGN="LEFT"/>validCap : tuple<br ALIGN="LEFT"/>validJoin : tuple<br ALIGN="LEFT"/>verticalOffset : NoneType<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_aa()<br ALIGN="LEFT"/>get_antialiased()<br ALIGN="LEFT"/>get_c()<br ALIGN="LEFT"/>get_color()<br ALIGN="LEFT"/>get_dash_capstyle()<br ALIGN="LEFT"/>get_dash_joinstyle()<br ALIGN="LEFT"/>get_data(orig)<br ALIGN="LEFT"/>get_drawstyle()<br ALIGN="LEFT"/>get_fillstyle()<br ALIGN="LEFT"/>get_linestyle()<br ALIGN="LEFT"/>get_linewidth()<br ALIGN="LEFT"/>get_ls()<br ALIGN="LEFT"/>get_lw()<br ALIGN="LEFT"/>get_marker()<br ALIGN="LEFT"/>get_markeredgecolor()<br ALIGN="LEFT"/>get_markeredgewidth()<br ALIGN="LEFT"/>get_markerfacecolor()<br ALIGN="LEFT"/>get_markerfacecoloralt()<br ALIGN="LEFT"/>get_markersize()<br ALIGN="LEFT"/>get_markevery()<br ALIGN="LEFT"/>get_mec()<br ALIGN="LEFT"/>get_mew()<br ALIGN="LEFT"/>get_mfc()<br ALIGN="LEFT"/>get_mfcalt(alt)<br ALIGN="LEFT"/>get_ms()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_pickradius()<br ALIGN="LEFT"/>get_solid_capstyle()<br ALIGN="LEFT"/>get_solid_joinstyle()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>get_xdata(orig)<br ALIGN="LEFT"/>get_xydata()<br ALIGN="LEFT"/>get_ydata(orig)<br ALIGN="LEFT"/>is_dashed()<br ALIGN="LEFT"/>recache(always)<br ALIGN="LEFT"/>recache_always()<br ALIGN="LEFT"/>set_aa(val)<br ALIGN="LEFT"/>set_antialiased(b)<br ALIGN="LEFT"/>set_axes(ax)<br ALIGN="LEFT"/>set_c(val)<br ALIGN="LEFT"/>set_color(color)<br ALIGN="LEFT"/>set_dash_capstyle(s)<br ALIGN="LEFT"/>set_dash_joinstyle(s)<br ALIGN="LEFT"/>set_dashes(seq)<br ALIGN="LEFT"/>set_data()<br ALIGN="LEFT"/>set_drawstyle(drawstyle)<br ALIGN="LEFT"/>set_fillstyle(fs)<br ALIGN="LEFT"/>set_linestyle(linestyle)<br ALIGN="LEFT"/>set_linewidth(w)<br ALIGN="LEFT"/>set_ls(val)<br ALIGN="LEFT"/>set_lw(val)<br ALIGN="LEFT"/>set_marker(marker)<br ALIGN="LEFT"/>set_markeredgecolor(ec)<br ALIGN="LEFT"/>set_markeredgewidth(ew)<br ALIGN="LEFT"/>set_markerfacecolor(fc)<br ALIGN="LEFT"/>set_markerfacecoloralt(fc)<br ALIGN="LEFT"/>set_markersize(sz)<br ALIGN="LEFT"/>set_markevery(every)<br ALIGN="LEFT"/>set_mec(val)<br ALIGN="LEFT"/>set_mew(val)<br ALIGN="LEFT"/>set_mfc(val)<br ALIGN="LEFT"/>set_mfcalt(val)<br ALIGN="LEFT"/>set_ms(val)<br ALIGN="LEFT"/>set_picker(p)<br ALIGN="LEFT"/>set_pickradius(d)<br ALIGN="LEFT"/>set_solid_capstyle(s)<br ALIGN="LEFT"/>set_solid_joinstyle(s)<br ALIGN="LEFT"/>set_transform(t)<br ALIGN="LEFT"/>set_xdata(x)<br ALIGN="LEFT"/>set_ydata(y)<br ALIGN="LEFT"/>update_from(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.LineCollection" [color="black", fontcolor="black", label=<{LineCollection|get_colors<br ALIGN="LEFT"/>set_paths<br ALIGN="LEFT"/>set_verts<br ALIGN="LEFT"/>|color(c)<br ALIGN="LEFT"/>get_color()<br ALIGN="LEFT"/>get_segments()<br ALIGN="LEFT"/>set_color(c)<br ALIGN="LEFT"/>set_segments(segments)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.delaunay.interpolate.LinearInterpolator" [color="black", fontcolor="black", label=<{LinearInterpolator|default_value<br ALIGN="LEFT"/>planes<br ALIGN="LEFT"/>triangulation<br ALIGN="LEFT"/>z : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.LinearLocator" [color="black", fontcolor="black", label=<{LinearLocator|numticks : NoneType, int<br ALIGN="LEFT"/>presets : dict<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>view_limits(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.LinearScale" [color="black", fontcolor="black", label=<{LinearScale|name : str<br ALIGN="LEFT"/>|get_transform()<br ALIGN="LEFT"/>set_default_locators_and_formatters(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.LinearSegmentedColormap" [color="black", fontcolor="black", label=<{LinearSegmentedColormap|monochrome : bool<br ALIGN="LEFT"/>|from_list(name, colors, N, gamma)<br ALIGN="LEFT"/>set_gamma(gamma)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.delaunay.testfuncs.LinearTester" [color="black", fontcolor="black", label=<{LinearTester|name : str<br ALIGN="LEFT"/>npoints : int<br ALIGN="LEFT"/>nrange : int<br ALIGN="LEFT"/>tri<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>xrange : tuple<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>yrange : tuple<br ALIGN="LEFT"/>|interpolator(func)<br ALIGN="LEFT"/>plot(func, interp, plotter)<br ALIGN="LEFT"/>replace_data(dataset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_delaunay.LinearTester" [color="black", fontcolor="black", label=<{LinearTester|name : str<br ALIGN="LEFT"/>npoints : int<br ALIGN="LEFT"/>nrange : int<br ALIGN="LEFT"/>tri<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>xrange : tuple<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>yrange : tuple<br ALIGN="LEFT"/>|interpolator(func)<br ALIGN="LEFT"/>plot(func, interp, plotter)<br ALIGN="LEFT"/>replace_data(dataset)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate.LinearTriInterpolator" [color="black", fontcolor="black", label=<{LinearTriInterpolator|<br ALIGN="LEFT"/>|gradient(x, y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.List" [color="black", fontcolor="black", label=<{List|children<br ALIGN="LEFT"/>glue_order : int<br ALIGN="LEFT"/>glue_ratio : float<br ALIGN="LEFT"/>glue_set : float<br ALIGN="LEFT"/>glue_sign : int<br ALIGN="LEFT"/>shift_amount : float<br ALIGN="LEFT"/>|grow()<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.ListedColormap" [color="black", fontcolor="black", label=<{ListedColormap|colorbar_extend : str<br ALIGN="LEFT"/>colors : list<br ALIGN="LEFT"/>monochrome : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backend_bases.LocationEvent" [color="black", fontcolor="black", label=<{LocationEvent|inaxes : NoneType<br ALIGN="LEFT"/>lastevent : NoneType<br ALIGN="LEFT"/>x : NoneType<br ALIGN="LEFT"/>xdata : NoneType<br ALIGN="LEFT"/>y : NoneType<br ALIGN="LEFT"/>ydata : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.Locator" [color="black", fontcolor="black", label=<{Locator|MAXTICKS : int<br ALIGN="LEFT"/>|autoscale()<br ALIGN="LEFT"/>pan(numsteps)<br ALIGN="LEFT"/>raise_if_exceeds(locs)<br ALIGN="LEFT"/><I>refresh</I>()<br ALIGN="LEFT"/><I>tick_values</I>(vmin, vmax)<br ALIGN="LEFT"/>view_limits(vmin, vmax)<br ALIGN="LEFT"/>zoom(direction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.LockDraw" [color="black", fontcolor="black", label=<{LockDraw|<br ALIGN="LEFT"/>|available(o)<br ALIGN="LEFT"/>isowner(o)<br ALIGN="LEFT"/>locked()<br ALIGN="LEFT"/>release(o)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.Log10Transform" [color="black", fontcolor="black", label=<{Log10Transform|base : float<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.Log2Transform" [color="black", fontcolor="black", label=<{Log2Transform|base : float<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.LogFormatter" [color="black", fontcolor="black", label=<{LogFormatter|labelOnlyBase : bool<br ALIGN="LEFT"/>|base(base)<br ALIGN="LEFT"/>format_data(value)<br ALIGN="LEFT"/>format_data_short(value)<br ALIGN="LEFT"/>label_minor(labelOnlyBase)<br ALIGN="LEFT"/>pprint_val(x, d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.LogFormatterExponent" [color="black", fontcolor="black", label=<{LogFormatterExponent|axis<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.LogFormatterMathtext" [color="black", fontcolor="black", label=<{LogFormatterMathtext|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.LogLocator" [color="black", fontcolor="black", label=<{LogLocator|numdecs : int<br ALIGN="LEFT"/>numticks : int<br ALIGN="LEFT"/>|base(base)<br ALIGN="LEFT"/>subs(subs)<br ALIGN="LEFT"/>tick_values(vmin, vmax)<br ALIGN="LEFT"/>view_limits(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.LogNorm" [color="black", fontcolor="black", label=<{LogNorm|vmax : ndarray<br ALIGN="LEFT"/>vmin : ndarray<br ALIGN="LEFT"/>|autoscale(A)<br ALIGN="LEFT"/>autoscale_None(A)<br ALIGN="LEFT"/>inverse(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.LogScale" [color="black", fontcolor="black", label=<{LogScale|InvertedLog10Transform<br ALIGN="LEFT"/>InvertedLog2Transform<br ALIGN="LEFT"/>InvertedLogTransform<br ALIGN="LEFT"/>InvertedNaturalLogTransform<br ALIGN="LEFT"/>Log10Transform<br ALIGN="LEFT"/>Log2Transform<br ALIGN="LEFT"/>LogTransform<br ALIGN="LEFT"/>LogTransformBase<br ALIGN="LEFT"/>NaturalLogTransform<br ALIGN="LEFT"/>base<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subs<br ALIGN="LEFT"/>|get_transform()<br ALIGN="LEFT"/>limit_range_for_scale(vmin, vmax, minpos)<br ALIGN="LEFT"/>set_default_locators_and_formatters(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.LogTransform" [color="black", fontcolor="black", label=<{LogTransform|base<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.LogTransformBase" [color="black", fontcolor="black", label=<{LogTransformBase|has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.MPLBootstrap" [color="black", fontcolor="black", label=<{MPLBootstrap|<br ALIGN="LEFT"/>|startWithBundle_(bundle)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.MainWindow" [color="black", fontcolor="black", label=<{MainWindow|closing<br ALIGN="LEFT"/>|closeEvent(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.markers.MarkerStyle" [color="black", fontcolor="black", label=<{MarkerStyle|filled_markers : tuple<br ALIGN="LEFT"/>fillstyles : tuple<br ALIGN="LEFT"/>markers : dict<br ALIGN="LEFT"/>|get_alt_path()<br ALIGN="LEFT"/>get_alt_transform()<br ALIGN="LEFT"/>get_capstyle()<br ALIGN="LEFT"/>get_fillstyle()<br ALIGN="LEFT"/>get_joinstyle()<br ALIGN="LEFT"/>get_marker()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_snap_threshold()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>is_filled()<br ALIGN="LEFT"/>set_fillstyle(fillstyle)<br ALIGN="LEFT"/>set_marker(marker)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathTextParser" [color="black", fontcolor="black", label=<{MathTextParser|<br ALIGN="LEFT"/>|get_depth(texstr, dpi, fontsize)<br ALIGN="LEFT"/>parse(s, dpi, prop)<br ALIGN="LEFT"/>to_mask(texstr, dpi, fontsize)<br ALIGN="LEFT"/>to_png(filename, texstr, color, dpi, fontsize)<br ALIGN="LEFT"/>to_rgba(texstr, color, dpi, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathTextWarning" [color="black", fontcolor="red", label=<{MathTextWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackend" [color="black", fontcolor="black", label=<{MathtextBackend|depth : int<br ALIGN="LEFT"/>height : int<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>|get_hinting_type()<br ALIGN="LEFT"/><I>get_results</I>(box)<br ALIGN="LEFT"/><I>render_glyph</I>(ox, oy, info)<br ALIGN="LEFT"/><I>render_rect_filled</I>(x1, y1, x2, y2)<br ALIGN="LEFT"/>set_canvas_size(w, h, d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendAgg" [color="black", fontcolor="black", label=<{MathtextBackendAgg|bbox : list<br ALIGN="LEFT"/>image : NoneType<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>ox : int<br ALIGN="LEFT"/>oy : int<br ALIGN="LEFT"/>|get_hinting_type()<br ALIGN="LEFT"/>get_results(box, used_characters)<br ALIGN="LEFT"/>render_glyph(ox, oy, info)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>set_canvas_size(w, h, d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendBitmap" [color="black", fontcolor="black", label=<{MathtextBackendBitmap|<br ALIGN="LEFT"/>|get_results(box, used_characters)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendCairo" [color="black", fontcolor="black", label=<{MathtextBackendCairo|glyphs : list<br ALIGN="LEFT"/>rects : list<br ALIGN="LEFT"/>|get_results(box, used_characters)<br ALIGN="LEFT"/>render_glyph(ox, oy, info)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendPath" [color="black", fontcolor="black", label=<{MathtextBackendPath|glyphs : list<br ALIGN="LEFT"/>rects : list<br ALIGN="LEFT"/>|get_results(box, used_characters)<br ALIGN="LEFT"/>render_glyph(ox, oy, info)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendPdf" [color="black", fontcolor="black", label=<{MathtextBackendPdf|glyphs : list<br ALIGN="LEFT"/>rects : list<br ALIGN="LEFT"/>|get_results(box, used_characters)<br ALIGN="LEFT"/>render_glyph(ox, oy, info)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendPs" [color="black", fontcolor="black", label=<{MathtextBackendPs|lastfont : NoneType, tuple<br ALIGN="LEFT"/>pswriter : StringIO<br ALIGN="LEFT"/>|get_results(box, used_characters)<br ALIGN="LEFT"/>render_glyph(ox, oy, info)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.MathtextBackendSvg" [color="black", fontcolor="black", label=<{MathtextBackendSvg|svg_glyphs : list<br ALIGN="LEFT"/>svg_rects : list<br ALIGN="LEFT"/>|get_results(box, used_characters)<br ALIGN="LEFT"/>render_glyph(ox, oy, info)<br ALIGN="LEFT"/>render_rect_filled(x1, y1, x2, y2)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.MatplotlibController" [color="black", fontcolor="black", label=<{MatplotlibController|app<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>|awakeFromNib()<br ALIGN="LEFT"/>printFigure_(sender)<br ALIGN="LEFT"/>saveFigure_(sender)<br ALIGN="LEFT"/>windowDidResize_(sender)<br ALIGN="LEFT"/>windowShouldClose_(sender)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.MatplotlibDeprecationWarning" [color="black", fontcolor="red", label=<{MatplotlibDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.MaxNLocator" [color="black", fontcolor="black", label=<{MaxNLocator|default_params : dict<br ALIGN="LEFT"/>|bin_boundaries(vmin, vmax)<br ALIGN="LEFT"/>set_params()<br ALIGN="LEFT"/>tick_values(vmin, vmax)<br ALIGN="LEFT"/>view_limits(dmin, dmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.MemoryMonitor" [color="black", fontcolor="black", label=<{MemoryMonitor|<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>plot(i0, isub, fig)<br ALIGN="LEFT"/>report(segments)<br ALIGN="LEFT"/>xy(i0, isub)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.MencoderBase" [color="black", fontcolor="black", label=<{MencoderBase|allowed_metadata : list<br ALIGN="LEFT"/>args_key : str<br ALIGN="LEFT"/>exec_key : str<br ALIGN="LEFT"/>output_args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.MencoderFileWriter" [color="black", fontcolor="black", label=<{MencoderFileWriter|supported_formats : list<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.MencoderWriter" [color="black", fontcolor="black", label=<{MencoderWriter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.MenuButtonWx" [color="black", fontcolor="black", label=<{MenuButtonWx|<br ALIGN="LEFT"/>|Destroy()<br ALIGN="LEFT"/>getActiveAxes()<br ALIGN="LEFT"/>updateAxes(maxAxis)<br ALIGN="LEFT"/>updateButtonText(lst)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.MicrosecondLocator" [color="black", fontcolor="black", label=<{MicrosecondLocator|tz : NoneType<br ALIGN="LEFT"/>|set_axis(axis)<br ALIGN="LEFT"/>set_data_interval(vmin, vmax)<br ALIGN="LEFT"/>set_view_interval(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.MinuteLocator" [color="black", fontcolor="black", label=<{MinuteLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_mixed.MixedModeRenderer" [color="black", fontcolor="black", label=<{MixedModeRenderer|dpi<br ALIGN="LEFT"/>figure<br ALIGN="LEFT"/>|start_rasterizing()<br ALIGN="LEFT"/>stop_rasterizing()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.geo.MollweideAxes" [color="black", fontcolor="black", label=<{MollweideAxes|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.geo.MollweideAxes.MollweideTransform" [color="black", fontcolor="black", label=<{MollweideTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(ll)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.MonthLocator" [color="black", fontcolor="black", label=<{MonthLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backend_bases.MouseEvent" [color="black", fontcolor="black", label=<{MouseEvent|button : NoneType<br ALIGN="LEFT"/>dblclick : NoneType<br ALIGN="LEFT"/>inaxes : NoneType<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>step : NoneType<br ALIGN="LEFT"/>x : NoneType<br ALIGN="LEFT"/>xdata : NoneType<br ALIGN="LEFT"/>y : NoneType<br ALIGN="LEFT"/>ydata : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.MovieWriter" [color="black", fontcolor="black", label=<{MovieWriter|bitrate<br ALIGN="LEFT"/>codec<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>extra_args : list<br ALIGN="LEFT"/>fig<br ALIGN="LEFT"/>fps : int<br ALIGN="LEFT"/>frame_format : str<br ALIGN="LEFT"/>frame_size<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>outfile<br ALIGN="LEFT"/>|bin_path()<br ALIGN="LEFT"/>cleanup()<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>grab_frame()<br ALIGN="LEFT"/>isAvailable()<br ALIGN="LEFT"/>saving()<br ALIGN="LEFT"/>setup(fig, outfile, dpi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.MovieWriterRegistry" [color="black", fontcolor="black", label=<{MovieWriterRegistry|avail : dict<br ALIGN="LEFT"/>|is_available(name)<br ALIGN="LEFT"/>list()<br ALIGN="LEFT"/>register(name)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication.MplJs" [color="black", fontcolor="black", label=<{MplJs|<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.MultiCursor" [color="black", fontcolor="black", label=<{MultiCursor|axes<br ALIGN="LEFT"/>background : NoneType<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>hlines : list<br ALIGN="LEFT"/>horizOn : bool<br ALIGN="LEFT"/>needclear : bool<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>vertOn : bool<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>vlines : list<br ALIGN="LEFT"/>|clear(event)<br ALIGN="LEFT"/>connect()<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.MultipleLocator" [color="black", fontcolor="black", label=<{MultipleLocator|<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>view_limits(dmin, dmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_figure.test_iterability_axes_argument.MyAxes" [color="black", fontcolor="black", label=<{MyAxes|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_figure.test_iterability_axes_argument.MyClass" [color="black", fontcolor="black", label=<{MyClass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.delaunay.interpolate.NNInterpolator" [color="black", fontcolor="black", label=<{NNInterpolator|default_value<br ALIGN="LEFT"/>triangulation<br ALIGN="LEFT"/>z : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.delaunay.testfuncs.NNTester" [color="black", fontcolor="black", label=<{NNTester|name : str<br ALIGN="LEFT"/>|interpolator(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_delaunay.NNTester" [color="black", fontcolor="black", label=<{NNTester|name : str<br ALIGN="LEFT"/>|interpolator(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.Name" [color="black", fontcolor="black", label=<{Name|name<br ALIGN="LEFT"/>|hexify(match)<br ALIGN="LEFT"/>pdfRepr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.NaturalLogTransform" [color="black", fontcolor="black", label=<{NaturalLogTransform|base<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_nbagg.NavigationIPy" [color="black", fontcolor="black", label=<{NavigationIPy|toolitems<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backend_bases.NavigationToolbar2" [color="black", fontcolor="black", label=<{NavigationToolbar2|canvas<br ALIGN="LEFT"/>mode : str<br ALIGN="LEFT"/>toolitems : tuple<br ALIGN="LEFT"/>|back()<br ALIGN="LEFT"/>drag_pan(event)<br ALIGN="LEFT"/>drag_zoom(event)<br ALIGN="LEFT"/>draw()<br ALIGN="LEFT"/><I>draw_rubberband</I>(event, x0, y0, x1, y1)<br ALIGN="LEFT"/><I>dynamic_update</I>()<br ALIGN="LEFT"/>forward()<br ALIGN="LEFT"/>home()<br ALIGN="LEFT"/>mouse_move(event)<br ALIGN="LEFT"/>pan()<br ALIGN="LEFT"/><I>press</I>(event)<br ALIGN="LEFT"/>press_pan(event)<br ALIGN="LEFT"/>press_zoom(event)<br ALIGN="LEFT"/>push_current()<br ALIGN="LEFT"/><I>release</I>(event)<br ALIGN="LEFT"/>release_pan(event)<br ALIGN="LEFT"/>release_zoom(event)<br ALIGN="LEFT"/><I>save_figure</I>()<br ALIGN="LEFT"/><I>set_cursor</I>(cursor)<br ALIGN="LEFT"/><I>set_history_buttons</I>()<br ALIGN="LEFT"/><I>set_message</I>(s)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>zoom()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkcairo.NavigationToolbar2Cairo" [color="black", fontcolor="black", label=<{NavigationToolbar2Cairo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.NavigationToolbar2GTK" [color="black", fontcolor="black", label=<{NavigationToolbar2GTK|message<br ALIGN="LEFT"/>tooltips<br ALIGN="LEFT"/>win<br ALIGN="LEFT"/>|configure_subplots(button)<br ALIGN="LEFT"/>draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>get_filechooser()<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_message(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3" [color="black", fontcolor="black", label=<{NavigationToolbar2GTK3|ctx : NoneType<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>win<br ALIGN="LEFT"/>|configure_subplots(button)<br ALIGN="LEFT"/>draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>get_filechooser()<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_message(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkagg.NavigationToolbar2GTKAgg" [color="black", fontcolor="black", label=<{NavigationToolbar2GTKAgg|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.NavigationToolbar2Mac" [color="black", fontcolor="black", label=<{NavigationToolbar2Mac|<br ALIGN="LEFT"/>|draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>prepare_configure_subplots()<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_message(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.NavigationToolbar2QT" [color="black", fontcolor="black", label=<{NavigationToolbar2QT|adj_window : NoneType<br ALIGN="LEFT"/>basedir<br ALIGN="LEFT"/>buttons : dict<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>coordinates : bool<br ALIGN="LEFT"/>locLabel<br ALIGN="LEFT"/>message<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|configure_subplots()<br ALIGN="LEFT"/>draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>edit_parameters()<br ALIGN="LEFT"/>pan()<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_message(s)<br ALIGN="LEFT"/>zoom()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5agg.NavigationToolbar2QTAgg" [color="black", fontcolor="black", label=<{NavigationToolbar2QTAgg|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.NavigationToolbar2TkAgg" [color="black", fontcolor="black", label=<{NavigationToolbar2TkAgg|canvas<br ALIGN="LEFT"/>lastrect<br ALIGN="LEFT"/>message : StringVar<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|configure_subplots()<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_active(ind)<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_message(s)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg" [color="black", fontcolor="black", label=<{NavigationToolbar2WebAgg|cursor : int<br ALIGN="LEFT"/>message : str<br ALIGN="LEFT"/>toolitems<br ALIGN="LEFT"/>|draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>release_zoom(event)<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_message(message)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.NavigationToolbar2Wx" [color="black", fontcolor="black", label=<{NavigationToolbar2Wx|canvas<br ALIGN="LEFT"/>statbar : NoneType<br ALIGN="LEFT"/>wx_ids : dict<br ALIGN="LEFT"/>wxoverlay<br ALIGN="LEFT"/>|configure_subplots(evt)<br ALIGN="LEFT"/>draw_rubberband(event, x0, y0, x1, y1)<br ALIGN="LEFT"/>dynamic_update()<br ALIGN="LEFT"/>get_canvas(frame, fig)<br ALIGN="LEFT"/>pan()<br ALIGN="LEFT"/>press(event)<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>save_figure()<br ALIGN="LEFT"/>set_cursor(cursor)<br ALIGN="LEFT"/>set_history_buttons()<br ALIGN="LEFT"/>set_message(s)<br ALIGN="LEFT"/>set_status_bar(statbar)<br ALIGN="LEFT"/>zoom()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg" [color="black", fontcolor="black", label=<{NavigationToolbar2WxAgg|<br ALIGN="LEFT"/>|get_canvas(frame, fig)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.NegFil" [color="black", fontcolor="black", label=<{NegFil|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.NegFill" [color="black", fontcolor="black", label=<{NegFill|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.NegFilll" [color="black", fontcolor="black", label=<{NegFilll|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.colors.NoNorm" [color="black", fontcolor="black", label=<{NoNorm|<br ALIGN="LEFT"/>|inverse(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Node" [color="black", fontcolor="black", label=<{Node|size : int<br ALIGN="LEFT"/>|get_kerning(next)<br ALIGN="LEFT"/>grow()<br ALIGN="LEFT"/><I>render</I>(x, y)<br ALIGN="LEFT"/>shrink()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_transforms.NonAffineForTest" [color="black", fontcolor="black", label=<{NonAffineForTest|input_dims : int<br ALIGN="LEFT"/>is_affine : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>real_trans<br ALIGN="LEFT"/>|transform_non_affine(values)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.NonGuiException" [color="black", fontcolor="red", label=<{NonGuiException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.bezier.NonIntersectingPathException" [color="black", fontcolor="red", label=<{NonIntersectingPathException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.image.NonUniformImage" [color="black", fontcolor="black", label=<{NonUniformImage|is_grayscale : bool<br ALIGN="LEFT"/>|get_extent()<br ALIGN="LEFT"/>make_image(magnification)<br ALIGN="LEFT"/><I>set_array</I>()<br ALIGN="LEFT"/>set_cmap(cmap)<br ALIGN="LEFT"/>set_data(x, y, A)<br ALIGN="LEFT"/><I>set_filternorm</I>(s)<br ALIGN="LEFT"/><I>set_filterrad</I>(s)<br ALIGN="LEFT"/>set_interpolation(s)<br ALIGN="LEFT"/>set_norm(norm)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patheffects.Normal" [color="black", fontcolor="black", label=<{Normal|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.colors.Normalize" [color="black", fontcolor="black", label=<{Normalize|clip : bool<br ALIGN="LEFT"/>vmax : NoneType, float, int<br ALIGN="LEFT"/>vmin : NoneType, float, int<br ALIGN="LEFT"/>|autoscale(A)<br ALIGN="LEFT"/>autoscale_None(A)<br ALIGN="LEFT"/>inverse(value)<br ALIGN="LEFT"/>process_value(value)<br ALIGN="LEFT"/>scaled()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.NorthEastHatch" [color="black", fontcolor="black", label=<{NorthEastHatch|num_lines : int<br ALIGN="LEFT"/>num_vertices : int<br ALIGN="LEFT"/>|set_vertices_and_codes(vertices, codes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Null" [color="black", fontcolor="black", label=<{Null|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.NullFormatter" [color="black", fontcolor="black", label=<{NullFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.ticker.NullLocator" [color="black", fontcolor="black", label=<{NullLocator|<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.FigureCanvasPS._print_figure.NullWriter" [color="black", fontcolor="black", label=<{NullWriter|<br ALIGN="LEFT"/>|<I>write</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.FigureCanvasPS._print_figure_tex.NullWriter" [color="black", fontcolor="black", label=<{NullWriter|<br ALIGN="LEFT"/>|<I>write</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.OffsetBox" [color="black", fontcolor="black", label=<{OffsetBox|height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_extent(renderer)<br ALIGN="LEFT"/>get_extent_offsets(renderer)<br ALIGN="LEFT"/>get_offset(width, height, xdescent, ydescent, renderer)<br ALIGN="LEFT"/>get_visible_children()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>set_height(height)<br ALIGN="LEFT"/>set_offset(xy)<br ALIGN="LEFT"/>set_width(width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.text.OffsetFrom" [color="black", fontcolor="black", label=<{OffsetFrom|<br ALIGN="LEFT"/>|get_unit()<br ALIGN="LEFT"/>set_unit(unit)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.OffsetImage" [color="black", fontcolor="black", label=<{OffsetImage|image<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>get_extent(renderer)<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>get_zoom()<br ALIGN="LEFT"/>set_data(arr)<br ALIGN="LEFT"/>set_zoom(zoom)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.OldAutoLocator" [color="black", fontcolor="black", label=<{OldAutoLocator|<br ALIGN="LEFT"/>|get_locator(d)<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/><I>tick_values</I>(vmin, vmax)<br ALIGN="LEFT"/>view_limits(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.OldScalarFormatter" [color="black", fontcolor="black", label=<{OldScalarFormatter|<br ALIGN="LEFT"/>|pprint_val(x, d)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.Operator" [color="black", fontcolor="black", label=<{Operator|op<br ALIGN="LEFT"/>|pdfRepr()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mlab.PCA" [color="black", fontcolor="black", label=<{PCA|Wt<br ALIGN="LEFT"/>Y : ndarray<br ALIGN="LEFT"/>a<br ALIGN="LEFT"/>fracs<br ALIGN="LEFT"/>mu<br ALIGN="LEFT"/>numcols<br ALIGN="LEFT"/>numrows<br ALIGN="LEFT"/>s<br ALIGN="LEFT"/>sigma<br ALIGN="LEFT"/>standardize : bool<br ALIGN="LEFT"/>|center(x)<br ALIGN="LEFT"/>project(x, minfrac)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.PackerBase" [color="black", fontcolor="black", label=<{PackerBase|align : NoneType<br ALIGN="LEFT"/>height : NoneType<br ALIGN="LEFT"/>mode : NoneType<br ALIGN="LEFT"/>pad : NoneType<br ALIGN="LEFT"/>sep : NoneType<br ALIGN="LEFT"/>width : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.offsetbox.PaddedBox" [color="black", fontcolor="black", label=<{PaddedBox|pad : NoneType<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>draw_frame(renderer)<br ALIGN="LEFT"/>get_extent_offsets(renderer)<br ALIGN="LEFT"/>update_frame(bbox, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Parser" [color="black", fontcolor="black", label=<{Parser|required_group<br ALIGN="LEFT"/>simple_group<br ALIGN="LEFT"/>|accent(s, loc, toks)<br ALIGN="LEFT"/>auto_delim(s, loc, toks)<br ALIGN="LEFT"/>binom(s, loc, toks)<br ALIGN="LEFT"/>c_over_c(s, loc, toks)<br ALIGN="LEFT"/>customspace(s, loc, toks)<br ALIGN="LEFT"/>end_group(s, loc, toks)<br ALIGN="LEFT"/>font(s, loc, toks)<br ALIGN="LEFT"/>frac(s, loc, toks)<br ALIGN="LEFT"/>function(s, loc, toks)<br ALIGN="LEFT"/>genfrac(s, loc, toks)<br ALIGN="LEFT"/>get_state()<br ALIGN="LEFT"/>group(s, loc, toks)<br ALIGN="LEFT"/>is_dropsub(nucleus)<br ALIGN="LEFT"/>is_overunder(nucleus)<br ALIGN="LEFT"/>is_slanted(nucleus)<br ALIGN="LEFT"/>main(s, loc, toks)<br ALIGN="LEFT"/>math(s, loc, toks)<br ALIGN="LEFT"/>math_string(s, loc, toks)<br ALIGN="LEFT"/>non_math(s, loc, toks)<br ALIGN="LEFT"/>operatorname(s, loc, toks)<br ALIGN="LEFT"/>overline(s, loc, toks)<br ALIGN="LEFT"/>parse(s, fonts_object, fontsize, dpi)<br ALIGN="LEFT"/>pop_state()<br ALIGN="LEFT"/>push_state()<br ALIGN="LEFT"/>space(s, loc, toks)<br ALIGN="LEFT"/>sqrt(s, loc, toks)<br ALIGN="LEFT"/>stackrel(s, loc, toks)<br ALIGN="LEFT"/>start_group(s, loc, toks)<br ALIGN="LEFT"/>subsuper(s, loc, toks)<br ALIGN="LEFT"/>symbol(s, loc, toks)<br ALIGN="LEFT"/>unknown_symbol(s, loc, toks)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Patch" [color="black", fontcolor="black", label=<{Patch|fill<br ALIGN="LEFT"/>get_aa<br ALIGN="LEFT"/>get_ec<br ALIGN="LEFT"/>get_fc<br ALIGN="LEFT"/>get_ls<br ALIGN="LEFT"/>get_lw<br ALIGN="LEFT"/>validCap : tuple<br ALIGN="LEFT"/>validJoin : tuple<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|contains(mouseevent, radius)<br ALIGN="LEFT"/>contains_point(point, radius)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_antialiased()<br ALIGN="LEFT"/>get_capstyle()<br ALIGN="LEFT"/>get_data_transform()<br ALIGN="LEFT"/>get_edgecolor()<br ALIGN="LEFT"/>get_extents()<br ALIGN="LEFT"/>get_facecolor()<br ALIGN="LEFT"/>get_fill()<br ALIGN="LEFT"/>get_hatch()<br ALIGN="LEFT"/>get_joinstyle()<br ALIGN="LEFT"/>get_linestyle()<br ALIGN="LEFT"/>get_linewidth()<br ALIGN="LEFT"/>get_patch_transform()<br ALIGN="LEFT"/><I>get_path</I>()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_verts()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_aa(aa)<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_antialiased(aa)<br ALIGN="LEFT"/>set_capstyle(s)<br ALIGN="LEFT"/>set_color(c)<br ALIGN="LEFT"/>set_ec(color)<br ALIGN="LEFT"/>set_edgecolor(color)<br ALIGN="LEFT"/>set_facecolor(color)<br ALIGN="LEFT"/>set_fc(color)<br ALIGN="LEFT"/>set_fill(b)<br ALIGN="LEFT"/>set_hatch(hatch)<br ALIGN="LEFT"/>set_joinstyle(s)<br ALIGN="LEFT"/>set_linestyle(ls)<br ALIGN="LEFT"/>set_linewidth(w)<br ALIGN="LEFT"/>set_ls(ls)<br ALIGN="LEFT"/>set_lw(lw)<br ALIGN="LEFT"/>update_from(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.PatchCollection" [color="black", fontcolor="black", label=<{PatchCollection|<br ALIGN="LEFT"/>|set_paths(patches)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.path.Path" [color="black", fontcolor="black", label=<{Path|CLOSEPOLY : int<br ALIGN="LEFT"/>CURVE3 : int<br ALIGN="LEFT"/>CURVE4 : int<br ALIGN="LEFT"/>LINETO : int<br ALIGN="LEFT"/>MOVETO : int<br ALIGN="LEFT"/>NUM_VERTICES_FOR_CODE : dict<br ALIGN="LEFT"/>STOP : int<br ALIGN="LEFT"/>code_type : uint8<br ALIGN="LEFT"/>codes<br ALIGN="LEFT"/>copy<br ALIGN="LEFT"/>deepcopy<br ALIGN="LEFT"/>has_nonfinite<br ALIGN="LEFT"/>readonly<br ALIGN="LEFT"/>should_simplify<br ALIGN="LEFT"/>simplify_threshold<br ALIGN="LEFT"/>vertices<br ALIGN="LEFT"/>|arc(theta1, theta2, n, is_wedge)<br ALIGN="LEFT"/>circle(center, radius, readonly)<br ALIGN="LEFT"/>cleaned(transform, remove_nans, clip, quantize, simplify, curves, stroke_width, snap, sketch)<br ALIGN="LEFT"/>clip_to_bbox(bbox, inside)<br ALIGN="LEFT"/>contains_path(path, transform)<br ALIGN="LEFT"/>contains_point(point, transform, radius)<br ALIGN="LEFT"/>contains_points(points, transform, radius)<br ALIGN="LEFT"/>get_extents(transform)<br ALIGN="LEFT"/>hatch(hatchpattern, density)<br ALIGN="LEFT"/>interpolated(steps)<br ALIGN="LEFT"/>intersects_bbox(bbox, filled)<br ALIGN="LEFT"/>intersects_path(other, filled)<br ALIGN="LEFT"/>iter_segments(transform, remove_nans, clip, snap, stroke_width, simplify, curves, sketch)<br ALIGN="LEFT"/>make_compound_path()<br ALIGN="LEFT"/>make_compound_path_from_polys(XY)<br ALIGN="LEFT"/>to_polygons(transform, width, height)<br ALIGN="LEFT"/>transformed(transform)<br ALIGN="LEFT"/>unit_circle()<br ALIGN="LEFT"/>unit_circle_righthalf()<br ALIGN="LEFT"/>unit_rectangle()<br ALIGN="LEFT"/>unit_regular_asterisk(numVertices)<br ALIGN="LEFT"/>unit_regular_polygon(numVertices)<br ALIGN="LEFT"/>unit_regular_star(numVertices, innerCircle)<br ALIGN="LEFT"/>wedge(theta1, theta2, n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.PathCollection" [color="black", fontcolor="black", label=<{PathCollection|<br ALIGN="LEFT"/>|get_paths()<br ALIGN="LEFT"/>set_paths(paths)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patheffects.PathEffectRenderer" [color="black", fontcolor="black", label=<{PathEffectRenderer|<br ALIGN="LEFT"/>|copy_with_path_effect(path_effects)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path)<br ALIGN="LEFT"/>draw_path(gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>draw_path_collection(gc, master_transform, paths)<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.PathPatch" [color="black", fontcolor="black", label=<{PathPatch|<br ALIGN="LEFT"/>|get_path()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patheffects.PathPatchEffect" [color="black", fontcolor="black", label=<{PathPatchEffect|patch<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.image.PcolorImage" [color="black", fontcolor="black", label=<{PcolorImage|axes<br ALIGN="LEFT"/>is_grayscale : bool<br ALIGN="LEFT"/>|changed()<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>make_image(magnification)<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/><I>set_array</I>()<br ALIGN="LEFT"/>set_data(x, y, A)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.PdfFile" [color="black", fontcolor="black", label=<{PdfFile|XObjectObject<br ALIGN="LEFT"/>alphaStateObject<br ALIGN="LEFT"/>alphaStates : dict<br ALIGN="LEFT"/>currentstream : NoneType<br ALIGN="LEFT"/>dviFontInfo : dict<br ALIGN="LEFT"/>fh : BytesIO<br ALIGN="LEFT"/>fontNames : dict<br ALIGN="LEFT"/>fontObject<br ALIGN="LEFT"/>gouraudObject<br ALIGN="LEFT"/>gouraudTriangles : list<br ALIGN="LEFT"/>hatchObject<br ALIGN="LEFT"/>hatchPatterns : dict<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>images : dict<br ALIGN="LEFT"/>infoDict : dict<br ALIGN="LEFT"/>infoObject<br ALIGN="LEFT"/>markers : dict<br ALIGN="LEFT"/>multi_byte_charprocs : dict<br ALIGN="LEFT"/>nextAlphaState : int<br ALIGN="LEFT"/>nextFont : int<br ALIGN="LEFT"/>nextHatch : int<br ALIGN="LEFT"/>nextImage : int<br ALIGN="LEFT"/>nextObject : int<br ALIGN="LEFT"/>original_file_like : NoneType<br ALIGN="LEFT"/>pageList : list<br ALIGN="LEFT"/>pagesObject<br ALIGN="LEFT"/>passed_in_file_object : bool<br ALIGN="LEFT"/>paths : list<br ALIGN="LEFT"/>resourceObject<br ALIGN="LEFT"/>rootObject<br ALIGN="LEFT"/>startxref<br ALIGN="LEFT"/>tell_base : int<br ALIGN="LEFT"/>type1Descriptors : dict<br ALIGN="LEFT"/>used_characters : dict<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>xrefTable : list<br ALIGN="LEFT"/>|addGouraudTriangles(points, colors)<br ALIGN="LEFT"/>alphaState(alpha)<br ALIGN="LEFT"/>beginStream(id, len, extra)<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>createType1Descriptor(t1font, fontfile)<br ALIGN="LEFT"/>embedTTF(filename, characters)<br ALIGN="LEFT"/>embedTeXFont(texname, fontinfo)<br ALIGN="LEFT"/>endStream()<br ALIGN="LEFT"/>fontName(fontprop)<br ALIGN="LEFT"/>hatchPattern(hatch_style)<br ALIGN="LEFT"/>imageObject(image)<br ALIGN="LEFT"/>markerObject(path, trans, fillp, strokep, lw, joinstyle, capstyle)<br ALIGN="LEFT"/>newPage(width, height)<br ALIGN="LEFT"/>output()<br ALIGN="LEFT"/>pathCollectionObject(gc, path, trans, padding, filled, stroked)<br ALIGN="LEFT"/>pathOperations(path, transform, clip, simplify, sketch)<br ALIGN="LEFT"/>recordXref(id)<br ALIGN="LEFT"/>reserveObject(name)<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>writeFonts()<br ALIGN="LEFT"/>writeGouraudTriangles()<br ALIGN="LEFT"/>writeHatches()<br ALIGN="LEFT"/>writeImages()<br ALIGN="LEFT"/>writeInfoDict()<br ALIGN="LEFT"/>writeMarkers()<br ALIGN="LEFT"/>writeObject(object, contents)<br ALIGN="LEFT"/>writePath(path, transform, clip, sketch)<br ALIGN="LEFT"/>writePathCollectionTemplates()<br ALIGN="LEFT"/>writeTrailer()<br ALIGN="LEFT"/>writeXref()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.PdfPages" [color="black", fontcolor="black", label=<{PdfPages|keep_empty : bool<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>get_pagecount()<br ALIGN="LEFT"/>infodict()<br ALIGN="LEFT"/>savefig(figure)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.PickEvent" [color="black", fontcolor="black", label=<{PickEvent|artist<br ALIGN="LEFT"/>mouseevent<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.sphinxext.plot_directive.PlotError" [color="black", fontcolor="red", label=<{PlotError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.PlotView" [color="black", fontcolor="black", label=<{PlotView|<br ALIGN="LEFT"/>|keyDown_(event)<br ALIGN="LEFT"/>keyUp_(event)<br ALIGN="LEFT"/>mouseDown_(event)<br ALIGN="LEFT"/>mouseDragged_(event)<br ALIGN="LEFT"/>mouseUp_(event)<br ALIGN="LEFT"/>updatePlot()<br ALIGN="LEFT"/>windowDidResize_(sender)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.PlotWindow" [color="black", fontcolor="black", label=<{PlotWindow|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_axes.test_as_mpl_axes_api.Polar" [color="black", fontcolor="black", label=<{Polar|theta_offset : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.polar.PolarAffine" [color="black", fontcolor="black", label=<{PolarAffine|<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.polar.PolarAxes" [color="black", fontcolor="black", label=<{PolarAxes|name : str<br ALIGN="LEFT"/>resolution<br ALIGN="LEFT"/>transAxes<br ALIGN="LEFT"/>transData<br ALIGN="LEFT"/>transProjection<br ALIGN="LEFT"/>transProjectionAffine<br ALIGN="LEFT"/>transPureProjection<br ALIGN="LEFT"/>transScale<br ALIGN="LEFT"/>xaxis<br ALIGN="LEFT"/>yaxis<br ALIGN="LEFT"/>|can_pan()<br ALIGN="LEFT"/>can_zoom()<br ALIGN="LEFT"/>cla()<br ALIGN="LEFT"/>drag_pan(button, key, x, y)<br ALIGN="LEFT"/>end_pan()<br ALIGN="LEFT"/>format_coord(theta, r)<br ALIGN="LEFT"/>get_data_ratio()<br ALIGN="LEFT"/>get_rlabel_position()<br ALIGN="LEFT"/>get_rmax()<br ALIGN="LEFT"/>get_rmin()<br ALIGN="LEFT"/>get_theta_direction()<br ALIGN="LEFT"/>get_theta_offset()<br ALIGN="LEFT"/>get_xaxis_text1_transform(pad)<br ALIGN="LEFT"/>get_xaxis_text2_transform(pad)<br ALIGN="LEFT"/>get_xaxis_transform(which)<br ALIGN="LEFT"/>get_yaxis_text1_transform(pad)<br ALIGN="LEFT"/>get_yaxis_text2_transform(pad)<br ALIGN="LEFT"/>get_yaxis_transform(which)<br ALIGN="LEFT"/>set_rgrids(radii, labels, angle, fmt)<br ALIGN="LEFT"/>set_rlabel_position(value)<br ALIGN="LEFT"/>set_rlim()<br ALIGN="LEFT"/>set_rmax(rmax)<br ALIGN="LEFT"/>set_rmin(rmin)<br ALIGN="LEFT"/>set_rscale()<br ALIGN="LEFT"/>set_rticks()<br ALIGN="LEFT"/>set_theta_direction(direction)<br ALIGN="LEFT"/>set_theta_offset(offset)<br ALIGN="LEFT"/>set_theta_zero_location(loc)<br ALIGN="LEFT"/>set_thetagrids(angles, labels, frac, fmt)<br ALIGN="LEFT"/>set_xlim()<br ALIGN="LEFT"/>set_xscale(scale)<br ALIGN="LEFT"/>set_yscale()<br ALIGN="LEFT"/>start_pan(x, y, button)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.polar.PolarTransform" [color="black", fontcolor="black", label=<{PolarTransform|input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(tr)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.PolyCollection" [color="black", fontcolor="black", label=<{PolyCollection|hbar<br ALIGN="LEFT"/>set_paths<br ALIGN="LEFT"/>vbar<br ALIGN="LEFT"/>|set_verts(verts, closed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Polygon" [color="black", fontcolor="black", label=<{Polygon|xy<br ALIGN="LEFT"/>|get_closed()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_xy()<br ALIGN="LEFT"/>set_closed(closed)<br ALIGN="LEFT"/>set_xy(xy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.PowerNorm" [color="black", fontcolor="black", label=<{PowerNorm|gamma<br ALIGN="LEFT"/>vmax<br ALIGN="LEFT"/>vmin : int<br ALIGN="LEFT"/>|autoscale(A)<br ALIGN="LEFT"/>autoscale_None(A)<br ALIGN="LEFT"/>inverse(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.PrintoutWx" [color="black", fontcolor="black", label=<{PrintoutWx|canvas<br ALIGN="LEFT"/>margin : float<br ALIGN="LEFT"/>width : float<br ALIGN="LEFT"/>|GetPageInfo()<br ALIGN="LEFT"/>HasPage(page)<br ALIGN="LEFT"/>OnPrintPage(page)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.ProjectionRegistry" [color="black", fontcolor="black", label=<{ProjectionRegistry|<br ALIGN="LEFT"/>|get_projection_class(name)<br ALIGN="LEFT"/>get_projection_names()<br ALIGN="LEFT"/>register()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.PsBackendHelper" [color="black", fontcolor="black", label=<{PsBackendHelper|gs_exe<br ALIGN="LEFT"/>gs_version<br ALIGN="LEFT"/>supports_ps2write<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.dviread.PsfontsMap" [color="black", fontcolor="black", label=<{PsfontsMap|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.contour.QuadContourSet" [color="black", fontcolor="black", label=<{QuadContourSet|Cntr<br ALIGN="LEFT"/>contour_doc : str<br ALIGN="LEFT"/>levels<br ALIGN="LEFT"/>zmax<br ALIGN="LEFT"/>zmin<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.collections.QuadMesh" [color="black", fontcolor="black", label=<{QuadMesh|<br ALIGN="LEFT"/>|convert_mesh_to_paths(meshWidth, meshHeight, coordinates)<br ALIGN="LEFT"/>convert_mesh_to_triangles(meshWidth, meshHeight, coordinates)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_datalim(transData)<br ALIGN="LEFT"/>get_paths()<br ALIGN="LEFT"/>set_paths()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.quiver.Quiver" [color="black", fontcolor="black", label=<{Quiver|N<br ALIGN="LEFT"/>U<br ALIGN="LEFT"/>Umask : bool_, ndarray<br ALIGN="LEFT"/>V<br ALIGN="LEFT"/>X : NoneType<br ALIGN="LEFT"/>XY<br ALIGN="LEFT"/>Y : NoneType<br ALIGN="LEFT"/>angles<br ALIGN="LEFT"/>ax<br ALIGN="LEFT"/>color<br ALIGN="LEFT"/>headaxislength<br ALIGN="LEFT"/>headlength : float<br ALIGN="LEFT"/>headwidth<br ALIGN="LEFT"/>keytext : NoneType<br ALIGN="LEFT"/>keyvec : NoneType<br ALIGN="LEFT"/>minlength<br ALIGN="LEFT"/>minshaft<br ALIGN="LEFT"/>pivot<br ALIGN="LEFT"/>polykw : dict<br ALIGN="LEFT"/>quiver_doc<br ALIGN="LEFT"/>scale<br ALIGN="LEFT"/>scale_units<br ALIGN="LEFT"/>span<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>units<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_datalim(transData)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>set_UVC(U, V, C)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.quiver.QuiverKey" [color="black", fontcolor="black", label=<{QuiverKey|Q<br ALIGN="LEFT"/>U<br ALIGN="LEFT"/>X<br ALIGN="LEFT"/>Y<br ALIGN="LEFT"/>color<br ALIGN="LEFT"/>coord<br ALIGN="LEFT"/>fontproperties<br ALIGN="LEFT"/>halign : dict<br ALIGN="LEFT"/>kw : dict<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>labelcolor<br ALIGN="LEFT"/>labelpos<br ALIGN="LEFT"/>labelsep<br ALIGN="LEFT"/>pivot : dict<br ALIGN="LEFT"/>quiverkey_doc : str<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>valign : dict<br ALIGN="LEFT"/>vector<br ALIGN="LEFT"/>verts<br ALIGN="LEFT"/>zorder<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.RArrow" [color="black", fontcolor="black", label=<{RArrow|<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.RRuleLocator" [color="black", fontcolor="black", label=<{RRuleLocator|rule<br ALIGN="LEFT"/>|autoscale()<br ALIGN="LEFT"/>get_unit_generic(freq)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.projections.polar.RadialLocator" [color="black", fontcolor="black", label=<{RadialLocator|base<br ALIGN="LEFT"/>|autoscale()<br ALIGN="LEFT"/>pan(numsteps)<br ALIGN="LEFT"/>refresh()<br ALIGN="LEFT"/>view_limits(vmin, vmax)<br ALIGN="LEFT"/>zoom(direction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.RadioButtons" [color="black", fontcolor="black", label=<{RadioButtons|activecolor : str<br ALIGN="LEFT"/>circles : list<br ALIGN="LEFT"/>cnt : int<br ALIGN="LEFT"/>labels : list<br ALIGN="LEFT"/>observers : dict<br ALIGN="LEFT"/>|disconnect(cid)<br ALIGN="LEFT"/>on_clicked(func)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.RcParams" [color="black", fontcolor="black", label=<{RcParams|msg_depr : str<br ALIGN="LEFT"/>msg_depr_ignore : str<br ALIGN="LEFT"/>validate : dict<br ALIGN="LEFT"/>|find_all(pattern)<br ALIGN="LEFT"/>keys()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>values()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Rectangle" [color="black", fontcolor="black", label=<{Rectangle|xy<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>get_bbox()<br ALIGN="LEFT"/>get_height()<br ALIGN="LEFT"/>get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_width()<br ALIGN="LEFT"/>get_x()<br ALIGN="LEFT"/>get_xy()<br ALIGN="LEFT"/>get_y()<br ALIGN="LEFT"/>set_bounds()<br ALIGN="LEFT"/>set_height(h)<br ALIGN="LEFT"/>set_width(w)<br ALIGN="LEFT"/>set_x(x)<br ALIGN="LEFT"/>set_xy(xy)<br ALIGN="LEFT"/>set_y(y)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.RectangleSelector" [color="black", fontcolor="black", label=<{RectangleSelector|active : bool<br ALIGN="LEFT"/>background : NoneType<br ALIGN="LEFT"/>drawtype : str<br ALIGN="LEFT"/>eventpress : NoneType<br ALIGN="LEFT"/>eventrelease : NoneType<br ALIGN="LEFT"/>lineprops : NoneType, dict<br ALIGN="LEFT"/>minspanx : NoneType<br ALIGN="LEFT"/>minspany : NoneType<br ALIGN="LEFT"/>onselect<br ALIGN="LEFT"/>rectprops : NoneType, dict<br ALIGN="LEFT"/>spancoords : str<br ALIGN="LEFT"/>to_draw : NoneType<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>validButtons : NoneType, list<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>|get_active()<br ALIGN="LEFT"/>ignore(event)<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>press(event)<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>set_active(active)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_background(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.Reference" [color="black", fontcolor="black", label=<{Reference|id<br ALIGN="LEFT"/>|pdfRepr()<br ALIGN="LEFT"/>write(contents, file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.units.Registry" [color="black", fontcolor="black", label=<{Registry|<br ALIGN="LEFT"/>|get_converter(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.RegularPolyCollection" [color="black", fontcolor="black", label=<{RegularPolyCollection|<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_numsides()<br ALIGN="LEFT"/>get_rotation()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.RegularPolygon" [color="black", fontcolor="black", label=<{RegularPolygon|numvertices<br ALIGN="LEFT"/>orientation<br ALIGN="LEFT"/>radius<br ALIGN="LEFT"/>xy<br ALIGN="LEFT"/>|get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" [color="black", fontcolor="black", label=<{RendererAgg|bbox<br ALIGN="LEFT"/>copy_from_bbox<br ALIGN="LEFT"/>debug : int<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>draw_gouraud_triangle<br ALIGN="LEFT"/>draw_gouraud_triangles<br ALIGN="LEFT"/>draw_image<br ALIGN="LEFT"/>draw_quad_mesh<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>lock : _RLock<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>texd<br ALIGN="LEFT"/>tostring_rgba_minimized<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|buffer_rgba()<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>draw_markers()<br ALIGN="LEFT"/>draw_mathtext(gc, x, y, s, prop, angle)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_path_collection()<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>option_image_nocomposite()<br ALIGN="LEFT"/>option_scale_image()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>restore_region(region, bbox, xy)<br ALIGN="LEFT"/>start_filter()<br ALIGN="LEFT"/>stop_filter(post_processing)<br ALIGN="LEFT"/>tostring_argb()<br ALIGN="LEFT"/>tostring_rgb()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.RendererBase" [color="black", fontcolor="black", label=<{RendererBase|<br ALIGN="LEFT"/>|<I>close_group</I>(s)<br ALIGN="LEFT"/><I>draw_gouraud_triangle</I>(gc, points, colors, transform)<br ALIGN="LEFT"/>draw_gouraud_triangles(gc, triangles_array, colors_array, transform)<br ALIGN="LEFT"/><I>draw_image</I>(gc, x, y, im)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace)<br ALIGN="LEFT"/><I>draw_path</I>(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)<br ALIGN="LEFT"/>draw_quad_mesh(gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_image_magnification()<br ALIGN="LEFT"/>get_texmanager()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/><I>open_group</I>(s, gid)<br ALIGN="LEFT"/>option_image_nocomposite()<br ALIGN="LEFT"/>option_scale_image()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/><I>start_filter</I>()<br ALIGN="LEFT"/><I>start_rasterizing</I>()<br ALIGN="LEFT"/><I>stop_filter</I>(filter_func)<br ALIGN="LEFT"/><I>stop_rasterizing</I>()<br ALIGN="LEFT"/>strip_math(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cairo.RendererCairo" [color="black", fontcolor="black", label=<{RendererCairo|dpi<br ALIGN="LEFT"/>fontangles : dict<br ALIGN="LEFT"/>fontweights : dict<br ALIGN="LEFT"/>gc<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>matrix_flipy<br ALIGN="LEFT"/>text_ctx<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|convert_path(ctx, path, transform)<br ALIGN="LEFT"/>draw_image(gc, x, y, im)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>set_ctx_from_surface(surface)<br ALIGN="LEFT"/>set_width_height(width, height)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gdk.RendererGDK" [color="black", fontcolor="black", label=<{RendererGDK|dpi<br ALIGN="LEFT"/>fontweights : dict<br ALIGN="LEFT"/>gdkDrawable<br ALIGN="LEFT"/>gtkDA<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>layoutd : dict<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>rotated : dict<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|draw_image(gc, x, y, im)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>set_pixmap(pixmap)<br ALIGN="LEFT"/>set_width_height(width, height)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3cairo.RendererGTK3Cairo" [color="black", fontcolor="black", label=<{RendererGTK3Cairo|<br ALIGN="LEFT"/>|set_context(ctx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtkcairo.RendererGTKCairo" [color="black", fontcolor="black", label=<{RendererGTKCairo|<br ALIGN="LEFT"/>|set_pixmap(pixmap)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.RendererMac" [color="black", fontcolor="black", label=<{RendererMac|dpi<br ALIGN="LEFT"/>gc<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>texd<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|draw_gouraud_triangle(gc, points, colors, transform)<br ALIGN="LEFT"/>draw_image(gc, x, y, im)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)<br ALIGN="LEFT"/>draw_quad_mesh(gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_image_magnification()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>option_image_nocomposite()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>set_width_height(width, height)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_ps.RendererPS" [color="black", fontcolor="black", label=<{RendererPS|afmfontd<br ALIGN="LEFT"/>color : NoneType, tuple<br ALIGN="LEFT"/>fontd<br ALIGN="LEFT"/>fontname : NoneType<br ALIGN="LEFT"/>fontsize : NoneType<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>image_magnification : float<br ALIGN="LEFT"/>imagedpi : int<br ALIGN="LEFT"/>linecap : NoneType<br ALIGN="LEFT"/>linedash : NoneType, tuple<br ALIGN="LEFT"/>linejoin : NoneType<br ALIGN="LEFT"/>linewidth : NoneType<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>psfrag : list<br ALIGN="LEFT"/>textcnt : int<br ALIGN="LEFT"/>used_characters : dict<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|create_hatch(hatch)<br ALIGN="LEFT"/>draw_gouraud_triangle(gc, points, colors, trans)<br ALIGN="LEFT"/>draw_gouraud_triangles(gc, points, colors, trans)<br ALIGN="LEFT"/>draw_image(gc, x, y, im, dx, dy, transform)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace)<br ALIGN="LEFT"/>draw_mathtext(gc, x, y, s, prop, angle)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_image_magnification()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>merge_used_characters(other)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>option_scale_image()<br ALIGN="LEFT"/>set_color(r, g, b, store)<br ALIGN="LEFT"/>set_font(fontname, fontsize, store)<br ALIGN="LEFT"/>set_linecap(linecap, store)<br ALIGN="LEFT"/>set_linedash(offset, seq, store)<br ALIGN="LEFT"/>set_linejoin(linejoin, store)<br ALIGN="LEFT"/>set_linewidth(linewidth, store)<br ALIGN="LEFT"/>track_characters(font, s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.RendererPdf" [color="black", fontcolor="black", label=<{RendererPdf|afm_font_cache<br ALIGN="LEFT"/>file<br ALIGN="LEFT"/>gc<br ALIGN="LEFT"/>image_dpi<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>tex_font_map : NoneType<br ALIGN="LEFT"/>truetype_font_cache<br ALIGN="LEFT"/>|check_gc(gc, fillcolor)<br ALIGN="LEFT"/>draw_gouraud_triangle(gc, points, colors, trans)<br ALIGN="LEFT"/>draw_gouraud_triangles(gc, points, colors, trans)<br ALIGN="LEFT"/>draw_image(gc, x, y, im, dx, dy, transform)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace)<br ALIGN="LEFT"/>draw_mathtext(gc, x, y, s, prop, angle)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>encode_string(s, fonttype)<br ALIGN="LEFT"/>finalize()<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_image_magnification()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>merge_used_characters(other)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>option_scale_image()<br ALIGN="LEFT"/>tex_font_mapping(texfont)<br ALIGN="LEFT"/>track_characters(font, s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.RendererPgf" [color="black", fontcolor="black", label=<{RendererPgf|dpi<br ALIGN="LEFT"/>fh<br ALIGN="LEFT"/>figure<br ALIGN="LEFT"/>image_counter : int<br ALIGN="LEFT"/>latexManager : NoneType<br ALIGN="LEFT"/>|draw_image(gc, x, y, im)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_svg.RendererSVG" [color="black", fontcolor="black", label=<{RendererSVG|FONT_SCALE : float<br ALIGN="LEFT"/>basename : NoneType<br ALIGN="LEFT"/>fontd<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>image_dpi : int<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>|close_group(s)<br ALIGN="LEFT"/>draw_gouraud_triangle(gc, points, colors, trans)<br ALIGN="LEFT"/>draw_gouraud_triangles(gc, triangles_array, colors_array, transform)<br ALIGN="LEFT"/>draw_image(gc, x, y, im, dx, dy, transform)<br ALIGN="LEFT"/>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)<br ALIGN="LEFT"/>draw_tex(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>finalize()<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_image_magnification()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>open_group(s, gid)<br ALIGN="LEFT"/>option_image_nocomposite()<br ALIGN="LEFT"/>option_scale_image()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_template.RendererTemplate" [color="black", fontcolor="black", label=<{RendererTemplate|dpi<br ALIGN="LEFT"/>|<I>draw_image</I>(gc, x, y, im)<br ALIGN="LEFT"/><I>draw_path</I>(gc, path, transform, rgbFace)<br ALIGN="LEFT"/><I>draw_text</I>(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.RendererWx" [color="black", fontcolor="black", label=<{RendererWx|bitmap<br ALIGN="LEFT"/>dpi<br ALIGN="LEFT"/>fontangles : dict<br ALIGN="LEFT"/>fontd : dict<br ALIGN="LEFT"/>fontnames : dict<br ALIGN="LEFT"/>fontweights : dict<br ALIGN="LEFT"/>gc : NoneType<br ALIGN="LEFT"/>height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|convert_path(gfx_ctx, path, transform)<br ALIGN="LEFT"/>draw_image(gc, x, y, im)<br ALIGN="LEFT"/>draw_path(gc, path, transform, rgbFace)<br ALIGN="LEFT"/>draw_text(gc, x, y, s, prop, angle, ismath, mtext)<br ALIGN="LEFT"/>flipy()<br ALIGN="LEFT"/>get_canvas_width_height()<br ALIGN="LEFT"/>get_gc()<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>get_wx_font(s, prop)<br ALIGN="LEFT"/>handle_clip_rectangle(gc)<br ALIGN="LEFT"/>new_gc()<br ALIGN="LEFT"/>offset_text_height()<br ALIGN="LEFT"/>points_to_pixels(points)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.ResizeEvent" [color="black", fontcolor="black", label=<{ResizeEvent|height<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.RingBuffer" [color="black", fontcolor="black", label=<{RingBuffer|cur : int<br ALIGN="LEFT"/>data : list<br ALIGN="LEFT"/>max<br ALIGN="LEFT"/>|append(x)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.Round" [color="black", fontcolor="black", label=<{Round|pad : float<br ALIGN="LEFT"/>rounding_size : NoneType<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.Round4" [color="black", fontcolor="black", label=<{Round4|pad : float<br ALIGN="LEFT"/>rounding_size : NoneType<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.Roundtooth" [color="black", fontcolor="black", label=<{Roundtooth|<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Rule" [color="black", fontcolor="black", label=<{Rule|font_output<br ALIGN="LEFT"/>|render(x, y, w, h)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.sankey.Sankey" [color="black", fontcolor="black", label=<{Sankey|ax : NoneType<br ALIGN="LEFT"/>diagrams : list<br ALIGN="LEFT"/>extent : ndarray, tuple<br ALIGN="LEFT"/>format : str<br ALIGN="LEFT"/>gap : float<br ALIGN="LEFT"/>margin : float<br ALIGN="LEFT"/>offset : float<br ALIGN="LEFT"/>pitch<br ALIGN="LEFT"/>radius : float<br ALIGN="LEFT"/>scale : float<br ALIGN="LEFT"/>shoulder : float<br ALIGN="LEFT"/>tolerance : float<br ALIGN="LEFT"/>unit : str<br ALIGN="LEFT"/>|add(patchlabel, flows, orientations, labels, trunklength, pathlengths, prior, connect, rotation)<br ALIGN="LEFT"/>finish()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.Sawtooth" [color="black", fontcolor="black", label=<{Sawtooth|pad : float<br ALIGN="LEFT"/>tooth_size : NoneType<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.ScalarFormatter" [color="black", fontcolor="black", label=<{ScalarFormatter|format : str<br ALIGN="LEFT"/>locs<br ALIGN="LEFT"/>offset : int<br ALIGN="LEFT"/>orderOfMagnitude : int<br ALIGN="LEFT"/>useLocale : property<br ALIGN="LEFT"/>useOffset : property<br ALIGN="LEFT"/>|fix_minus(s)<br ALIGN="LEFT"/>format_data(value)<br ALIGN="LEFT"/>format_data_short(value)<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>get_useLocale()<br ALIGN="LEFT"/>get_useOffset()<br ALIGN="LEFT"/>pprint_val(x)<br ALIGN="LEFT"/>set_locs(locs)<br ALIGN="LEFT"/>set_powerlimits(lims)<br ALIGN="LEFT"/>set_scientific(b)<br ALIGN="LEFT"/>set_useLocale(val)<br ALIGN="LEFT"/>set_useOffset(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cm.ScalarMappable" [color="black", fontcolor="black", label=<{ScalarMappable|callbacksSM<br ALIGN="LEFT"/>cmap : NoneType<br ALIGN="LEFT"/>colorbar : NoneType<br ALIGN="LEFT"/>norm : NoneType<br ALIGN="LEFT"/>update_dict : dict<br ALIGN="LEFT"/>|add_checker(checker)<br ALIGN="LEFT"/>autoscale()<br ALIGN="LEFT"/>autoscale_None()<br ALIGN="LEFT"/>changed()<br ALIGN="LEFT"/>check_update(checker)<br ALIGN="LEFT"/>get_array()<br ALIGN="LEFT"/>get_clim()<br ALIGN="LEFT"/>get_cmap()<br ALIGN="LEFT"/>set_array(A)<br ALIGN="LEFT"/>set_clim(vmin, vmax)<br ALIGN="LEFT"/>set_cmap(cmap)<br ALIGN="LEFT"/>set_colorbar(im, ax)<br ALIGN="LEFT"/>set_norm(norm)<br ALIGN="LEFT"/>to_rgba(x, alpha, bytes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.ScaleBase" [color="black", fontcolor="black", label=<{ScaleBase|<br ALIGN="LEFT"/>|<I>get_transform</I>()<br ALIGN="LEFT"/>limit_range_for_scale(vmin, vmax, minpos)<br ALIGN="LEFT"/><I>set_default_locators_and_formatters</I>(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_transforms.test_external_transform_api.ScaledBy" [color="black", fontcolor="black", label=<{ScaledBy|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.transforms.ScaledTranslation" [color="black", fontcolor="black", label=<{ScaledTranslation|<br ALIGN="LEFT"/>|get_matrix()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Scheduler" [color="black", fontcolor="black", label=<{Scheduler|id : int<br ALIGN="LEFT"/>idlelock : lock<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.SecondLocator" [color="black", fontcolor="black", label=<{SecondLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.ServerThread" [color="black", fontcolor="black", label=<{ServerThread|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Shadow" [color="black", fontcolor="black", label=<{Shadow|patch<br ALIGN="LEFT"/>props : NoneType<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.Shapes" [color="black", fontcolor="black", label=<{Shapes|filled : bool<br ALIGN="LEFT"/>num_shapes : int<br ALIGN="LEFT"/>num_vertices : int<br ALIGN="LEFT"/>|set_vertices_and_codes(vertices, codes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Ship" [color="black", fontcolor="black", label=<{Ship|cur_h : float<br ALIGN="LEFT"/>cur_s : int<br ALIGN="LEFT"/>cur_v : float<br ALIGN="LEFT"/>max_push : int<br ALIGN="LEFT"/>off_h<br ALIGN="LEFT"/>off_v<br ALIGN="LEFT"/>|clamp(value)<br ALIGN="LEFT"/>hlist_out(box)<br ALIGN="LEFT"/>vlist_out(box)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_cocoaagg.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|<I>mainloop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_nbagg.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.Show" [color="black", fontcolor="black", label=<{Show|<br ALIGN="LEFT"/>|mainloop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.ShowBase" [color="black", fontcolor="black", label=<{ShowBase|<br ALIGN="LEFT"/>|<I>mainloop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.Simple" [color="black", fontcolor="black", label=<{Simple|head_length : float<br ALIGN="LEFT"/>head_width : float<br ALIGN="LEFT"/>tail_width : float<br ALIGN="LEFT"/>|transmute(path, mutation_size, linewidth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle._Base.SimpleEvent" [color="black", fontcolor="black", label=<{SimpleEvent|x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patheffects.SimpleLineShadow" [color="black", fontcolor="black", label=<{SimpleLineShadow|<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patheffects.SimplePatchShadow" [color="black", fontcolor="black", label=<{SimplePatchShadow|<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication.SingleFigurePage" [color="black", fontcolor="black", label=<{SingleFigurePage|url_prefix<br ALIGN="LEFT"/>|get(fignum)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_skew.SkewSpine" [color="black", fontcolor="black", label=<{SkewSpine|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_skew.SkewXAxes" [color="black", fontcolor="black", label=<{SkewXAxes|name : str<br ALIGN="LEFT"/>transData<br ALIGN="LEFT"/>transDataToAxes<br ALIGN="LEFT"/>xaxis<br ALIGN="LEFT"/>yaxis<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_skew.SkewXAxis" [color="black", fontcolor="black", label=<{SkewXAxis|lower_interval<br ALIGN="LEFT"/>upper_interval : tuple<br ALIGN="LEFT"/>|get_view_interval()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_skew.SkewXTick" [color="black", fontcolor="black", label=<{SkewXTick|<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.Slider" [color="black", fontcolor="black", label=<{Slider|closedmax : bool<br ALIGN="LEFT"/>closedmin : bool<br ALIGN="LEFT"/>cnt : int<br ALIGN="LEFT"/>drag_active : bool<br ALIGN="LEFT"/>drawon : bool<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>observers : dict<br ALIGN="LEFT"/>poly<br ALIGN="LEFT"/>slidermax : NoneType<br ALIGN="LEFT"/>slidermin : NoneType<br ALIGN="LEFT"/>val : float<br ALIGN="LEFT"/>valfmt : str<br ALIGN="LEFT"/>valinit : float<br ALIGN="LEFT"/>valmax<br ALIGN="LEFT"/>valmin<br ALIGN="LEFT"/>valtext<br ALIGN="LEFT"/>vline<br ALIGN="LEFT"/>|disconnect(cid)<br ALIGN="LEFT"/>on_changed(func)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_val(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.SmallCircles" [color="black", fontcolor="black", label=<{SmallCircles|num_rows<br ALIGN="LEFT"/>size : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.hatch.SmallFilledCircles" [color="black", fontcolor="black", label=<{SmallFilledCircles|filled : bool<br ALIGN="LEFT"/>num_rows<br ALIGN="LEFT"/>size : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.Sorter" [color="black", fontcolor="black", label=<{Sorter|sort<br ALIGN="LEFT"/>|byAttribute(data, attributename, inplace)<br ALIGN="LEFT"/>byItem(data, itemindex, inplace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.SouthEastHatch" [color="black", fontcolor="black", label=<{SouthEastHatch|num_lines : int<br ALIGN="LEFT"/>num_vertices : int<br ALIGN="LEFT"/>|set_vertices_and_codes(vertices, codes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.SpanSelector" [color="black", fontcolor="black", label=<{SpanSelector|ax<br ALIGN="LEFT"/>background : NoneType<br ALIGN="LEFT"/>buttonDown : bool<br ALIGN="LEFT"/>canvas : NoneType<br ALIGN="LEFT"/>direction<br ALIGN="LEFT"/>minspan : NoneType<br ALIGN="LEFT"/>onmove_callback : NoneType<br ALIGN="LEFT"/>onselect<br ALIGN="LEFT"/>pressv : NoneType<br ALIGN="LEFT"/>prev : tuple<br ALIGN="LEFT"/>rect : NoneType<br ALIGN="LEFT"/>rectprops : NoneType, dict<br ALIGN="LEFT"/>span_stays : bool<br ALIGN="LEFT"/>stay_rect<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>|ignore(event)<br ALIGN="LEFT"/>new_axes(ax)<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>press(event)<br ALIGN="LEFT"/>release(event)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>update_background(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.spines.Spine" [color="black", fontcolor="black", label=<{Spine|axes<br ALIGN="LEFT"/>axis : NoneType<br ALIGN="LEFT"/>spine_type<br ALIGN="LEFT"/>|circular_spine(axes, center, radius)<br ALIGN="LEFT"/>cla()<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_bounds()<br ALIGN="LEFT"/>get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>get_position()<br ALIGN="LEFT"/>get_smart_bounds()<br ALIGN="LEFT"/>get_spine_transform()<br ALIGN="LEFT"/>is_frame_like()<br ALIGN="LEFT"/>linear_spine(axes, spine_type)<br ALIGN="LEFT"/>register_axis(axis)<br ALIGN="LEFT"/>set_bounds(low, high)<br ALIGN="LEFT"/>set_color(c)<br ALIGN="LEFT"/>set_patch_circle(center, radius)<br ALIGN="LEFT"/>set_patch_line()<br ALIGN="LEFT"/>set_position(position)<br ALIGN="LEFT"/>set_smart_bounds(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle.Square" [color="black", fontcolor="black", label=<{Square|pad : float<br ALIGN="LEFT"/>|transmute(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_collections.test_regularpolycollection_scale.SquareCollection" [color="black", fontcolor="black", label=<{SquareCollection|<br ALIGN="LEFT"/>|get_transform()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.SsGlue" [color="black", fontcolor="black", label=<{SsGlue|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.Stack" [color="black", fontcolor="black", label=<{Stack|<br ALIGN="LEFT"/>|back()<br ALIGN="LEFT"/>bubble(o)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>empty()<br ALIGN="LEFT"/>forward()<br ALIGN="LEFT"/>home()<br ALIGN="LEFT"/>push(o)<br ALIGN="LEFT"/>remove(o)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.StandardPsFonts" [color="black", fontcolor="black", label=<{StandardPsFonts|basepath<br ALIGN="LEFT"/>fontmap : dict<br ALIGN="LEFT"/>fonts : dict<br ALIGN="LEFT"/>glyphd : dict<br ALIGN="LEFT"/>pswriter : StringIO<br ALIGN="LEFT"/>|get_kern(font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi)<br ALIGN="LEFT"/>get_underline_thickness(font, fontsize, dpi)<br ALIGN="LEFT"/>get_xheight(font, fontsize, dpi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_coding_standards.StandardReportWithExclusions" [color="black", fontcolor="black", label=<{StandardReportWithExclusions|expected_bad_files : list<br ALIGN="LEFT"/>file_errors<br ALIGN="LEFT"/>matched_exclusions : set<br ALIGN="LEFT"/>total_errors<br ALIGN="LEFT"/>|get_file_results()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections.StarPolygonCollection" [color="black", fontcolor="black", label=<{StarPolygonCollection|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.hatch.Stars" [color="black", fontcolor="black", label=<{Stars|filled : bool<br ALIGN="LEFT"/>num_rows<br ALIGN="LEFT"/>shape_codes : ndarray<br ALIGN="LEFT"/>shape_vertices<br ALIGN="LEFT"/>size : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Parser.State" [color="black", fontcolor="black", label=<{State|dpi<br ALIGN="LEFT"/>font<br ALIGN="LEFT"/>font_class<br ALIGN="LEFT"/>font_output<br ALIGN="LEFT"/>fontsize<br ALIGN="LEFT"/>|copy()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.StatusBarWx" [color="black", fontcolor="black", label=<{StatusBarWx|<br ALIGN="LEFT"/>|set_function(string)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.container.StemContainer" [color="black", fontcolor="black", label=<{StemContainer|baseline<br ALIGN="LEFT"/>markerline<br ALIGN="LEFT"/>stemlines<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.StixFonts" [color="black", fontcolor="black", label=<{StixFonts|cm_fallback : bool<br ALIGN="LEFT"/>fontmap : dict<br ALIGN="LEFT"/>use_cmex : bool<br ALIGN="LEFT"/>|get_sized_alternatives_for_symbol(fontname, sym)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.StixSansFonts" [color="black", fontcolor="black", label=<{StixSansFonts|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.StrConverter.StrConverter" [color="black", fontcolor="black", label=<{StrConverter|<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(value, unit, axis)<br ALIGN="LEFT"/>default_units(value, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.StrMethodFormatter" [color="black", fontcolor="black", label=<{StrMethodFormatter|fmt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_pdf.Stream" [color="black", fontcolor="black", label=<{Stream|compressobj : NoneType<br ALIGN="LEFT"/>extra : dict<br ALIGN="LEFT"/>file : BytesIO<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>len<br ALIGN="LEFT"/>pdfFile<br ALIGN="LEFT"/>pos<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.streamplot.StreamMask" [color="black", fontcolor="black", label=<{StreamMask|nx : int<br ALIGN="LEFT"/>ny : int<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.streamplot.StreamplotSet" [color="black", fontcolor="black", label=<{StreamplotSet|arrows<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patheffects.Stroke" [color="black", fontcolor="black", label=<{Stroke|<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.SubSuperCluster" [color="black", fontcolor="black", label=<{SubSuperCluster|nucleus : NoneType<br ALIGN="LEFT"/>sub : NoneType<br ALIGN="LEFT"/>super : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.axes._subplots.SubplotBase" [color="black", fontcolor="black", label=<{SubplotBase|colNum<br ALIGN="LEFT"/>figbox<br ALIGN="LEFT"/>figure<br ALIGN="LEFT"/>numCols<br ALIGN="LEFT"/>numRows<br ALIGN="LEFT"/>rowNum<br ALIGN="LEFT"/>|change_geometry(numrows, numcols, num)<br ALIGN="LEFT"/>get_geometry()<br ALIGN="LEFT"/>get_subplotspec()<br ALIGN="LEFT"/>is_first_col()<br ALIGN="LEFT"/>is_first_row()<br ALIGN="LEFT"/>is_last_col()<br ALIGN="LEFT"/>is_last_row()<br ALIGN="LEFT"/>label_outer()<br ALIGN="LEFT"/>set_subplotspec(subplotspec)<br ALIGN="LEFT"/>update_params()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.figure.SubplotParams" [color="black", fontcolor="black", label=<{SubplotParams|bottom<br ALIGN="LEFT"/>hspace<br ALIGN="LEFT"/>left<br ALIGN="LEFT"/>right<br ALIGN="LEFT"/>top<br ALIGN="LEFT"/>validate : bool<br ALIGN="LEFT"/>wspace<br ALIGN="LEFT"/>|update(left, bottom, right, top, wspace, hspace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.gridspec.SubplotSpec" [color="black", fontcolor="black", label=<{SubplotSpec|num1<br ALIGN="LEFT"/>num2 : NoneType<br ALIGN="LEFT"/>|get_geometry()<br ALIGN="LEFT"/>get_gridspec()<br ALIGN="LEFT"/>get_position(fig, return_all)<br ALIGN="LEFT"/>get_topmost_subplotspec()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.widgets.SubplotTool" [color="black", fontcolor="black", label=<{SubplotTool|axbottom<br ALIGN="LEFT"/>axhspace<br ALIGN="LEFT"/>axleft<br ALIGN="LEFT"/>axright<br ALIGN="LEFT"/>axtop<br ALIGN="LEFT"/>axwspace<br ALIGN="LEFT"/>buttonreset<br ALIGN="LEFT"/>drawon : bool<br ALIGN="LEFT"/>sliderbottom<br ALIGN="LEFT"/>sliderhspace<br ALIGN="LEFT"/>sliderleft<br ALIGN="LEFT"/>sliderright<br ALIGN="LEFT"/>slidertop<br ALIGN="LEFT"/>sliderwspace<br ALIGN="LEFT"/>targetfig<br ALIGN="LEFT"/>|funcbottom(val)<br ALIGN="LEFT"/>funchspace(val)<br ALIGN="LEFT"/>funcleft(val)<br ALIGN="LEFT"/>funcright(val)<br ALIGN="LEFT"/>functop(val)<br ALIGN="LEFT"/>funcwspace(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.SubplotToolQt" [color="black", fontcolor="black", label=<{SubplotToolQt|defaults : dict<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>targetfig<br ALIGN="LEFT"/>|funcbottom(val)<br ALIGN="LEFT"/>funchspace(val)<br ALIGN="LEFT"/>funcleft(val)<br ALIGN="LEFT"/>funcright(val)<br ALIGN="LEFT"/>functight()<br ALIGN="LEFT"/>functop(val)<br ALIGN="LEFT"/>funcwspace(val)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.SubplotToolWX" [color="black", fontcolor="black", label=<{SubplotToolWX|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.docstring.Substitution" [color="black", fontcolor="black", label=<{Substitution|params : dict<br ALIGN="LEFT"/>|from_params(params)<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.colors.SymLogNorm" [color="black", fontcolor="black", label=<{SymLogNorm|linthresh : float<br ALIGN="LEFT"/>vmax<br ALIGN="LEFT"/>vmin<br ALIGN="LEFT"/>|autoscale(A)<br ALIGN="LEFT"/>autoscale_None(A)<br ALIGN="LEFT"/>inverse(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.SymmetricalLogLocator" [color="black", fontcolor="black", label=<{SymmetricalLogLocator|numticks : int<br ALIGN="LEFT"/>|tick_values(vmin, vmax)<br ALIGN="LEFT"/>view_limits(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.SymmetricalLogScale" [color="black", fontcolor="black", label=<{SymmetricalLogScale|InvertedSymmetricalLogTransform<br ALIGN="LEFT"/>SymmetricalLogTransform<br ALIGN="LEFT"/>base<br ALIGN="LEFT"/>linscale<br ALIGN="LEFT"/>linthresh<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>subs<br ALIGN="LEFT"/>|get_transform()<br ALIGN="LEFT"/>set_default_locators_and_formatters(axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.scale.SymmetricalLogTransform" [color="black", fontcolor="black", label=<{SymmetricalLogTransform|base<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : int<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>linscale<br ALIGN="LEFT"/>linthresh<br ALIGN="LEFT"/>output_dims : int<br ALIGN="LEFT"/>|inverted()<br ALIGN="LEFT"/>transform_non_affine(a)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.table.Table" [color="black", fontcolor="black", label=<{Table|AXESPAD : float<br ALIGN="LEFT"/>FONTSIZE : int<br ALIGN="LEFT"/>codes : dict<br ALIGN="LEFT"/>get_child_artists<br ALIGN="LEFT"/>|add_cell(row, col)<br ALIGN="LEFT"/>auto_set_column_width(col)<br ALIGN="LEFT"/>auto_set_font_size(value)<br ALIGN="LEFT"/>contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_celld()<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>scale(xscale, yscale)<br ALIGN="LEFT"/>set_fontsize(size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.font_manager.TempCache" [color="black", fontcolor="black", label=<{TempCache|invalidating_rcparams : tuple<br ALIGN="LEFT"/>|get(prop)<br ALIGN="LEFT"/>make_rcparams_key()<br ALIGN="LEFT"/>set(prop, value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.streamplot.TerminateTrajectory" [color="black", fontcolor="red", label=<{TerminateTrajectory|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.delaunay.testfuncs.TestData" [color="black", fontcolor="black", label=<{TestData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.delaunay.testfuncs.TestDataSet" [color="black", fontcolor="black", label=<{TestDataSet|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_legend.TestLegendFunction" [color="black", fontcolor="black", label=<{TestLegendFunction|deprecation_message : str<br ALIGN="LEFT"/>|test_legend_handle_label()<br ALIGN="LEFT"/>test_legend_handle_label_loc_args()<br ALIGN="LEFT"/>test_legend_handler_map()<br ALIGN="LEFT"/>test_legend_label_args()<br ALIGN="LEFT"/>test_legend_label_loc_args()<br ALIGN="LEFT"/>test_legend_no_args()<br ALIGN="LEFT"/>test_old_legend_handler_interface()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_transforms.TestTransformPlotInterface" [color="black", fontcolor="black", label=<{TestTransformPlotInterface|<br ALIGN="LEFT"/>|tearDown()<br ALIGN="LEFT"/>test_line_extent_axes_coords()<br ALIGN="LEFT"/>test_line_extent_compound_coords1()<br ALIGN="LEFT"/>test_line_extent_compound_coords2()<br ALIGN="LEFT"/>test_line_extent_data_coords()<br ALIGN="LEFT"/>test_line_extent_predata_transform_coords()<br ALIGN="LEFT"/>test_line_extents_affine()<br ALIGN="LEFT"/>test_line_extents_for_non_affine_transData()<br ALIGN="LEFT"/>test_line_extents_non_affine()<br ALIGN="LEFT"/>test_pathc_extents_affine()<br ALIGN="LEFT"/>test_pathc_extents_non_affine()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_cbook.Test_boxplot_stats" [color="black", fontcolor="black", label=<{Test_boxplot_stats|data<br ALIGN="LEFT"/>known_bootstrapped_ci : dict<br ALIGN="LEFT"/>known_keys<br ALIGN="LEFT"/>known_nonbootstrapped_res : dict<br ALIGN="LEFT"/>known_res_percentiles : dict<br ALIGN="LEFT"/>known_res_range : dict<br ALIGN="LEFT"/>known_whis3_res : dict<br ALIGN="LEFT"/>ncols : int<br ALIGN="LEFT"/>nrows : int<br ALIGN="LEFT"/>std_results : list<br ALIGN="LEFT"/>|setup()<br ALIGN="LEFT"/>test_bad_dims()<br ALIGN="LEFT"/>test_form_dict_keys()<br ALIGN="LEFT"/>test_form_each_dict()<br ALIGN="LEFT"/>test_form_main_list()<br ALIGN="LEFT"/>test_label_error()<br ALIGN="LEFT"/>test_results_baseline()<br ALIGN="LEFT"/>test_results_bootstrapped()<br ALIGN="LEFT"/>test_results_whiskers_float()<br ALIGN="LEFT"/>test_results_whiskers_percentiles()<br ALIGN="LEFT"/>test_results_whiskers_range()<br ALIGN="LEFT"/>test_results_withlabels()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_cbook.Test_delete_masked_points" [color="black", fontcolor="black", label=<{Test_delete_masked_points|arr0<br ALIGN="LEFT"/>arr1 : list<br ALIGN="LEFT"/>arr2 : ndarray<br ALIGN="LEFT"/>arr3 : MaskedArray<br ALIGN="LEFT"/>arr_colors : list<br ALIGN="LEFT"/>arr_dt : list<br ALIGN="LEFT"/>arr_dt2 : ndarray<br ALIGN="LEFT"/>arr_rgba : ndarray<br ALIGN="LEFT"/>arr_s : list<br ALIGN="LEFT"/>arr_s2 : ndarray<br ALIGN="LEFT"/>mask1 : list<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_bad_first_arg()<br ALIGN="LEFT"/>test_datetime()<br ALIGN="LEFT"/>test_rgba()<br ALIGN="LEFT"/>test_string_seq()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.texmanager.TexManager" [color="black", fontcolor="black", label=<{TexManager|cachedir<br ALIGN="LEFT"/>cursive : tuple<br ALIGN="LEFT"/>e : OSError<br ALIGN="LEFT"/>font_families : tuple<br ALIGN="LEFT"/>font_family : str<br ALIGN="LEFT"/>font_info : dict<br ALIGN="LEFT"/>grey_arrayd : dict<br ALIGN="LEFT"/>monospace : tuple<br ALIGN="LEFT"/>oldcache<br ALIGN="LEFT"/>oldpath<br ALIGN="LEFT"/>postscriptd : dict<br ALIGN="LEFT"/>pscnt : int<br ALIGN="LEFT"/>rgba_arrayd : dict<br ALIGN="LEFT"/>sans_serif : tuple<br ALIGN="LEFT"/>serif : tuple<br ALIGN="LEFT"/>texcache<br ALIGN="LEFT"/>|get_basefile(tex, fontsize, dpi)<br ALIGN="LEFT"/>get_custom_preamble()<br ALIGN="LEFT"/>get_font_config()<br ALIGN="LEFT"/>get_font_preamble()<br ALIGN="LEFT"/>get_grey(tex, fontsize, dpi)<br ALIGN="LEFT"/>get_ps_bbox(tex, fontsize)<br ALIGN="LEFT"/>get_rgba(tex, fontsize, dpi, rgb)<br ALIGN="LEFT"/>get_text_width_height_descent(tex, fontsize, renderer)<br ALIGN="LEFT"/>make_dvi(tex, fontsize)<br ALIGN="LEFT"/>make_dvi_preview(tex, fontsize)<br ALIGN="LEFT"/>make_png(tex, fontsize, dpi)<br ALIGN="LEFT"/>make_ps(tex, fontsize)<br ALIGN="LEFT"/>make_tex(tex, fontsize)<br ALIGN="LEFT"/>make_tex_preview(tex, fontsize)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.text.Text" [color="black", fontcolor="black", label=<{Text|zorder : int<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_bbox_patch()<br ALIGN="LEFT"/>get_color()<br ALIGN="LEFT"/>get_family()<br ALIGN="LEFT"/>get_font_properties()<br ALIGN="LEFT"/>get_fontfamily()<br ALIGN="LEFT"/>get_fontname()<br ALIGN="LEFT"/>get_fontproperties()<br ALIGN="LEFT"/>get_fontsize()<br ALIGN="LEFT"/>get_fontstretch()<br ALIGN="LEFT"/>get_fontstyle()<br ALIGN="LEFT"/>get_fontvariant()<br ALIGN="LEFT"/>get_fontweight()<br ALIGN="LEFT"/>get_ha()<br ALIGN="LEFT"/>get_horizontalalignment()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>get_position()<br ALIGN="LEFT"/>get_prop_tup()<br ALIGN="LEFT"/>get_rotation()<br ALIGN="LEFT"/>get_rotation_mode()<br ALIGN="LEFT"/>get_size()<br ALIGN="LEFT"/>get_stretch()<br ALIGN="LEFT"/>get_style()<br ALIGN="LEFT"/>get_text()<br ALIGN="LEFT"/>get_va()<br ALIGN="LEFT"/>get_variant()<br ALIGN="LEFT"/>get_verticalalignment()<br ALIGN="LEFT"/>get_weight()<br ALIGN="LEFT"/>get_window_extent(renderer, dpi)<br ALIGN="LEFT"/>is_math_text(s)<br ALIGN="LEFT"/>set_backgroundcolor(color)<br ALIGN="LEFT"/>set_bbox(rectprops)<br ALIGN="LEFT"/>set_clip_box(clipbox)<br ALIGN="LEFT"/>set_clip_on(b)<br ALIGN="LEFT"/>set_clip_path(path, transform)<br ALIGN="LEFT"/>set_color(color)<br ALIGN="LEFT"/>set_family(fontname)<br ALIGN="LEFT"/>set_font_properties(fp)<br ALIGN="LEFT"/>set_fontname(fontname)<br ALIGN="LEFT"/>set_fontproperties(fp)<br ALIGN="LEFT"/>set_fontsize(fontsize)<br ALIGN="LEFT"/>set_fontstretch(stretch)<br ALIGN="LEFT"/>set_fontstyle(fontstyle)<br ALIGN="LEFT"/>set_fontvariant(variant)<br ALIGN="LEFT"/>set_fontweight(weight)<br ALIGN="LEFT"/>set_ha(align)<br ALIGN="LEFT"/>set_horizontalalignment(align)<br ALIGN="LEFT"/>set_linespacing(spacing)<br ALIGN="LEFT"/>set_ma(align)<br ALIGN="LEFT"/>set_multialignment(align)<br ALIGN="LEFT"/>set_name(fontname)<br ALIGN="LEFT"/>set_position(xy)<br ALIGN="LEFT"/>set_rotation(s)<br ALIGN="LEFT"/>set_rotation_mode(m)<br ALIGN="LEFT"/>set_size(fontsize)<br ALIGN="LEFT"/>set_stretch(stretch)<br ALIGN="LEFT"/>set_style(fontstyle)<br ALIGN="LEFT"/>set_text(s)<br ALIGN="LEFT"/>set_va(align)<br ALIGN="LEFT"/>set_variant(variant)<br ALIGN="LEFT"/>set_verticalalignment(align)<br ALIGN="LEFT"/>set_weight(weight)<br ALIGN="LEFT"/>set_x(x)<br ALIGN="LEFT"/>set_y(y)<br ALIGN="LEFT"/>update_bbox_position_size(renderer)<br ALIGN="LEFT"/>update_from(other)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.offsetbox.TextArea" [color="black", fontcolor="black", label=<{TextArea|offset_transform<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_extent(renderer)<br ALIGN="LEFT"/>get_minimumdescent()<br ALIGN="LEFT"/>get_multilinebaseline()<br ALIGN="LEFT"/>get_offset()<br ALIGN="LEFT"/>get_text()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_minimumdescent(t)<br ALIGN="LEFT"/>set_multilinebaseline(t)<br ALIGN="LEFT"/>set_offset(xy)<br ALIGN="LEFT"/>set_text(s)<br ALIGN="LEFT"/><I>set_transform</I>(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.textpath.TextPath" [color="black", fontcolor="black", label=<{TextPath|codes<br ALIGN="LEFT"/>vertices<br ALIGN="LEFT"/>|get_size()<br ALIGN="LEFT"/>is_math_text(s)<br ALIGN="LEFT"/>set_size(size)<br ALIGN="LEFT"/>text_get_vertices_codes(prop, s, usetex)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.textpath.TextToPath" [color="black", fontcolor="black", label=<{TextToPath|DPI : int<br ALIGN="LEFT"/>FONT_SCALE : float<br ALIGN="LEFT"/>mathtext_parser<br ALIGN="LEFT"/>tex_font_map : NoneType<br ALIGN="LEFT"/>|get_glyphs_mathtext(prop, s, glyph_map, return_new_glyphs_only)<br ALIGN="LEFT"/>get_glyphs_tex(prop, s, glyph_map, return_new_glyphs_only)<br ALIGN="LEFT"/>get_glyphs_with_font(font, s, glyph_map, return_new_glyphs_only)<br ALIGN="LEFT"/>get_texmanager()<br ALIGN="LEFT"/>get_text_path(prop, s, ismath, usetex)<br ALIGN="LEFT"/>get_text_width_height_descent(s, prop, ismath)<br ALIGN="LEFT"/>glyph_to_path(font, currx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.text.TextWithDash" [color="black", fontcolor="black", label=<{TextWithDash|dashline<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_dashdirection()<br ALIGN="LEFT"/>get_dashlength()<br ALIGN="LEFT"/>get_dashpad()<br ALIGN="LEFT"/>get_dashpush()<br ALIGN="LEFT"/>get_dashrotation()<br ALIGN="LEFT"/>get_figure()<br ALIGN="LEFT"/>get_position()<br ALIGN="LEFT"/>get_prop_tup()<br ALIGN="LEFT"/>get_window_extent(renderer)<br ALIGN="LEFT"/>set_dashdirection(dd)<br ALIGN="LEFT"/>set_dashlength(dl)<br ALIGN="LEFT"/>set_dashpad(dp)<br ALIGN="LEFT"/>set_dashpush(dp)<br ALIGN="LEFT"/>set_dashrotation(dr)<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>set_position(xy)<br ALIGN="LEFT"/>set_transform(t)<br ALIGN="LEFT"/>set_x(x)<br ALIGN="LEFT"/>set_y(y)<br ALIGN="LEFT"/>update_coords(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dviread.Tfm" [color="black", fontcolor="black", label=<{Tfm|checksum<br ALIGN="LEFT"/>depth : dict<br ALIGN="LEFT"/>design_size<br ALIGN="LEFT"/>height : dict<br ALIGN="LEFT"/>width : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.geo.GeoAxes.ThetaFormatter" [color="black", fontcolor="black", label=<{ThetaFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.projections.polar.ThetaFormatter" [color="black", fontcolor="black", label=<{ThetaFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.axis.Tick" [color="black", fontcolor="black", label=<{Tick|axes<br ALIGN="LEFT"/>gridOn : NoneType, bool<br ALIGN="LEFT"/>gridline<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>label1<br ALIGN="LEFT"/>label1On : bool<br ALIGN="LEFT"/>label2<br ALIGN="LEFT"/>label2On : bool<br ALIGN="LEFT"/>set_label<br ALIGN="LEFT"/>tick1On : bool<br ALIGN="LEFT"/>tick1line<br ALIGN="LEFT"/>tick2On : bool<br ALIGN="LEFT"/>tick2line<br ALIGN="LEFT"/>|<I>apply_tickdir</I>(tickdir)<br ALIGN="LEFT"/>contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_loc()<br ALIGN="LEFT"/>get_pad()<br ALIGN="LEFT"/>get_pad_pixels()<br ALIGN="LEFT"/><I>get_view_interval</I>()<br ALIGN="LEFT"/>set_clip_path(clippath, transform)<br ALIGN="LEFT"/>set_label1(s)<br ALIGN="LEFT"/>set_label2(s)<br ALIGN="LEFT"/>set_pad(val)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker.TickHelper" [color="black", fontcolor="black", label=<{TickHelper|axis : NoneType<br ALIGN="LEFT"/>|create_dummy_axis()<br ALIGN="LEFT"/>set_axis(axis)<br ALIGN="LEFT"/>set_bounds(vmin, vmax)<br ALIGN="LEFT"/>set_data_interval(vmin, vmax)<br ALIGN="LEFT"/>set_view_interval(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axis.Ticker" [color="black", fontcolor="black", label=<{Ticker|formatter : NoneType<br ALIGN="LEFT"/>locator : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.animation.TimedAnimation" [color="black", fontcolor="black", label=<{TimedAnimation|frame_seq<br ALIGN="LEFT"/>repeat : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.Timeout" [color="black", fontcolor="black", label=<{Timeout|func<br ALIGN="LEFT"/>wait<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backend_bases.TimerBase" [color="black", fontcolor="black", label=<{TimerBase|callbacks : list<br ALIGN="LEFT"/>interval<br ALIGN="LEFT"/>single_shot<br ALIGN="LEFT"/>|add_callback(func)<br ALIGN="LEFT"/>remove_callback(func)<br ALIGN="LEFT"/>start(interval)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk.TimerGTK" [color="black", fontcolor="black", label=<{TimerGTK|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_gtk3.TimerGTK3" [color="black", fontcolor="black", label=<{TimerGTK3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_macosx.TimerMac" [color="black", fontcolor="black", label=<{TimerMac|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_qt5.TimerQT" [color="black", fontcolor="black", label=<{TimerQT|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.TimerTk" [color="black", fontcolor="black", label=<{TimerTk|parent<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_nbagg.TimerTornado" [color="black", fontcolor="black", label=<{TimerTornado|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.TimerWx" [color="black", fontcolor="black", label=<{TimerWx|parent<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.TmpDirCleaner" [color="black", fontcolor="black", label=<{TmpDirCleaner|remaining_tmpdirs : set<br ALIGN="LEFT"/>|add(tmpdir)<br ALIGN="LEFT"/>cleanup_remaining_tmpdirs()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Grouper.__iter__.Token" [color="black", fontcolor="black", label=<{Token|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_tkagg.ToolTip" [color="black", fontcolor="black", label=<{ToolTip|id : NoneType<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>tipwindow : NoneType, Toplevel<br ALIGN="LEFT"/>widget<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|createToolTip(widget, text)<br ALIGN="LEFT"/>hidetip()<br ALIGN="LEFT"/>showtip(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.Transform" [color="black", fontcolor="black", label=<{Transform|depth<br ALIGN="LEFT"/>has_inverse : bool<br ALIGN="LEFT"/>input_dims : NoneType<br ALIGN="LEFT"/>is_separable : bool<br ALIGN="LEFT"/>output_dims : NoneType<br ALIGN="LEFT"/>|contains_branch(other)<br ALIGN="LEFT"/>contains_branch_seperately(other_transform)<br ALIGN="LEFT"/>get_affine()<br ALIGN="LEFT"/>get_matrix()<br ALIGN="LEFT"/><I>inverted</I>()<br ALIGN="LEFT"/>transform(values)<br ALIGN="LEFT"/>transform_affine(values)<br ALIGN="LEFT"/>transform_angles(angles, pts, radians, pushoff)<br ALIGN="LEFT"/>transform_bbox(bbox)<br ALIGN="LEFT"/>transform_non_affine(values)<br ALIGN="LEFT"/>transform_path(path)<br ALIGN="LEFT"/>transform_path_affine(path)<br ALIGN="LEFT"/>transform_path_non_affine(path)<br ALIGN="LEFT"/>transform_point(point)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.TransformNode" [color="black", fontcolor="black", label=<{TransformNode|INVALID : int<br ALIGN="LEFT"/>INVALID_AFFINE : int<br ALIGN="LEFT"/>INVALID_NON_AFFINE : int<br ALIGN="LEFT"/>is_affine : bool<br ALIGN="LEFT"/>is_bbox : bool<br ALIGN="LEFT"/>pass_through : bool<br ALIGN="LEFT"/>|frozen()<br ALIGN="LEFT"/>invalidate()<br ALIGN="LEFT"/>set_children()<br ALIGN="LEFT"/>write_graphviz(fobj, highlight)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.TransformWrapper" [color="black", fontcolor="black", label=<{TransformWrapper|get_affine<br ALIGN="LEFT"/>get_matrix<br ALIGN="LEFT"/>has_inverse<br ALIGN="LEFT"/>input_dims<br ALIGN="LEFT"/>inverted<br ALIGN="LEFT"/>is_affine<br ALIGN="LEFT"/>is_separable<br ALIGN="LEFT"/>output_dims<br ALIGN="LEFT"/>pass_through : bool<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>transform_affine<br ALIGN="LEFT"/>transform_non_affine<br ALIGN="LEFT"/>transform_path<br ALIGN="LEFT"/>transform_path_affine<br ALIGN="LEFT"/>transform_path_non_affine<br ALIGN="LEFT"/>|frozen()<br ALIGN="LEFT"/>set(child)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.TransformedBbox" [color="black", fontcolor="black", label=<{TransformedBbox|<br ALIGN="LEFT"/>|get_points()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.transforms.TransformedPath" [color="black", fontcolor="black", label=<{TransformedPath|<br ALIGN="LEFT"/>|get_affine()<br ALIGN="LEFT"/>get_fully_transformed_path()<br ALIGN="LEFT"/>get_transformed_path_and_affine()<br ALIGN="LEFT"/>get_transformed_points_and_affine()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.trifinder.TrapezoidMapTriFinder" [color="black", fontcolor="black", label=<{TrapezoidMapTriFinder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tri.tritools.TriAnalyzer" [color="black", fontcolor="black", label=<{TriAnalyzer|scale_factors<br ALIGN="LEFT"/>|circle_ratios(rescale)<br ALIGN="LEFT"/>get_flat_tri_mask(min_circle_ratio, rescale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.tricontour.TriContourSet" [color="black", fontcolor="black", label=<{TriContourSet|cppContourGenerator<br ALIGN="LEFT"/>levels<br ALIGN="LEFT"/>tricontour_doc : str<br ALIGN="LEFT"/>zmax : ndarray<br ALIGN="LEFT"/>zmin : ndarray<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tri.trifinder.TriFinder" [color="black", fontcolor="black", label=<{TriFinder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate.TriInterpolator" [color="black", fontcolor="black", label=<{TriInterpolator|docstring__call__ : str<br ALIGN="LEFT"/>docstringgradient : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.collections.TriMesh" [color="black", fontcolor="black", label=<{TriMesh|<br ALIGN="LEFT"/>|convert_mesh_to_paths(tri)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_paths()<br ALIGN="LEFT"/>set_paths()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.trirefine.TriRefiner" [color="black", fontcolor="black", label=<{TriRefiner|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.delaunay.triangulate.Triangulation" [color="black", fontcolor="black", label=<{Triangulation|circumcenters<br ALIGN="LEFT"/>edge_db<br ALIGN="LEFT"/>hull : list<br ALIGN="LEFT"/>j_unique : NoneType<br ALIGN="LEFT"/>old_shape : ndarray<br ALIGN="LEFT"/>triangle_neighbors<br ALIGN="LEFT"/>triangle_nodes<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>y : ndarray<br ALIGN="LEFT"/>|linear_extrapolator(z, bbox, default_value)<br ALIGN="LEFT"/>linear_interpolator(z, default_value)<br ALIGN="LEFT"/>nn_extrapolator(z, bbox, default_value)<br ALIGN="LEFT"/>nn_interpolator(z, default_value)<br ALIGN="LEFT"/>node_graph()<br ALIGN="LEFT"/>prep_extrapolator(z, bbox)<br ALIGN="LEFT"/>to_client_point_indices(array)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triangulation.Triangulation" [color="black", fontcolor="black", label=<{Triangulation|edges<br ALIGN="LEFT"/>is_delaunay : bool<br ALIGN="LEFT"/>mask : NoneType, ndarray<br ALIGN="LEFT"/>neighbors<br ALIGN="LEFT"/>triangles : ndarray<br ALIGN="LEFT"/>x : ndarray<br ALIGN="LEFT"/>y : ndarray<br ALIGN="LEFT"/>|calculate_plane_coefficients(z)<br ALIGN="LEFT"/>get_cpp_triangulation()<br ALIGN="LEFT"/>get_from_args_and_kwargs()<br ALIGN="LEFT"/>get_masked_triangles()<br ALIGN="LEFT"/>get_trifinder()<br ALIGN="LEFT"/>set_mask(mask)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.TruetypeFonts" [color="black", fontcolor="black", label=<{TruetypeFonts|glyphd : NoneType, dict<br ALIGN="LEFT"/>|destroy()<br ALIGN="LEFT"/>get_kern(font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi)<br ALIGN="LEFT"/>get_underline_thickness(font, fontsize, dpi)<br ALIGN="LEFT"/>get_xheight(font, fontsize, dpi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.type1font.Type1Font" [color="black", fontcolor="black", label=<{Type1Font|parts : tuple<br ALIGN="LEFT"/>prop : dict<br ALIGN="LEFT"/>|transform(effects)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.qt_editor.formsubplottool.UiSubplotTool" [color="black", fontcolor="black", label=<{UiSubplotTool|bottomvalue<br ALIGN="LEFT"/>donebutton<br ALIGN="LEFT"/>hboxtop<br ALIGN="LEFT"/>hspacevalue<br ALIGN="LEFT"/>labelhspace<br ALIGN="LEFT"/>labelright<br ALIGN="LEFT"/>labeltop<br ALIGN="LEFT"/>labelwspace<br ALIGN="LEFT"/>leftvalue<br ALIGN="LEFT"/>resetbutton<br ALIGN="LEFT"/>rightvalue<br ALIGN="LEFT"/>sliderbottom<br ALIGN="LEFT"/>sliderhspace<br ALIGN="LEFT"/>sliderleft<br ALIGN="LEFT"/>sliderright<br ALIGN="LEFT"/>slidertop<br ALIGN="LEFT"/>sliderwspace<br ALIGN="LEFT"/>tightlayout<br ALIGN="LEFT"/>topvalue<br ALIGN="LEFT"/>verticalLayout<br ALIGN="LEFT"/>wspacevalue<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.UnicodeFonts" [color="black", fontcolor="black", label=<{UnicodeFonts|cm_fallback : NoneType<br ALIGN="LEFT"/>fontmap : dict<br ALIGN="LEFT"/>use_cmex : bool<br ALIGN="LEFT"/>|get_sized_alternatives_for_symbol(fontname, sym)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.trirefine.UniformTriRefiner" [color="black", fontcolor="black", label=<{UniformTriRefiner|<br ALIGN="LEFT"/>|refine_field(z, triinterpolator, subdiv)<br ALIGN="LEFT"/>refine_triangulation(return_tri_index, subdiv)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.UnitDbl.UnitDbl" [color="black", fontcolor="black", label=<{UnitDbl|allowed : dict<br ALIGN="LEFT"/>|checkSameUnits(rhs, func)<br ALIGN="LEFT"/>checkUnits(units)<br ALIGN="LEFT"/>convert(units)<br ALIGN="LEFT"/>range(start, stop, step)<br ALIGN="LEFT"/>type()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter" [color="black", fontcolor="black", label=<{UnitDblConverter|defaults : dict<br ALIGN="LEFT"/>|axisinfo(unit, axis)<br ALIGN="LEFT"/>convert(value, unit, axis)<br ALIGN="LEFT"/>default_units(value, axis)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter" [color="black", fontcolor="black", label=<{UnitDblFormatter|<br ALIGN="LEFT"/>|format_data(value)<br ALIGN="LEFT"/>format_data_short(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.VCentered" [color="black", fontcolor="black", label=<{VCentered|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.offsetbox.VPacker" [color="black", fontcolor="black", label=<{VPacker|<br ALIGN="LEFT"/>|get_extent_offsets(renderer)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.rcsetup.ValidateInStrings" [color="black", fontcolor="black", label=<{ValidateInStrings|ignorecase : bool<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>valid : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.rcsetup.ValidateInterval" [color="black", fontcolor="black", label=<{ValidateInterval|cmax : bool<br ALIGN="LEFT"/>cmin : bool<br ALIGN="LEFT"/>vmax<br ALIGN="LEFT"/>vmin<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Vbox" [color="black", fontcolor="black", label=<{Vbox|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.Verbose" [color="black", fontcolor="black", label=<{Verbose|arg<br ALIGN="LEFT"/>fileo : StringIO, TextIOWrapper<br ALIGN="LEFT"/>level<br ALIGN="LEFT"/>level_str<br ALIGN="LEFT"/>levels : tuple<br ALIGN="LEFT"/>vald : dict<br ALIGN="LEFT"/>|ge(level)<br ALIGN="LEFT"/>report(s, level)<br ALIGN="LEFT"/>set_fileo(fname)<br ALIGN="LEFT"/>set_level(level)<br ALIGN="LEFT"/>wrap(fmt, func, level, always)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.lines.VertexSelector" [color="black", fontcolor="black", label=<{VertexSelector|axes<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>cid<br ALIGN="LEFT"/>ind : set<br ALIGN="LEFT"/>line<br ALIGN="LEFT"/>|onpick(event)<br ALIGN="LEFT"/><I>process_selected</I>(ind, xs, ys)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.hatch.VerticalHatch" [color="black", fontcolor="black", label=<{VerticalHatch|num_lines : int<br ALIGN="LEFT"/>num_vertices<br ALIGN="LEFT"/>|set_vertices_and_codes(vertices, codes)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dviread.Vf" [color="black", fontcolor="black", label=<{Vf|boxes : list<br ALIGN="LEFT"/>f : NoneType<br ALIGN="LEFT"/>h : int<br ALIGN="LEFT"/>stack : list<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>text : list<br ALIGN="LEFT"/>v : int<br ALIGN="LEFT"/>w : int<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>z : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.mathtext.Vlist" [color="black", fontcolor="black", label=<{Vlist|depth : float<br ALIGN="LEFT"/>glue_order : int<br ALIGN="LEFT"/>glue_ratio : float<br ALIGN="LEFT"/>glue_sign : int<br ALIGN="LEFT"/>height : float<br ALIGN="LEFT"/>shift_amount<br ALIGN="LEFT"/>width : float<br ALIGN="LEFT"/>|vpack(h, m, l)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.mathtext.Vrule" [color="black", fontcolor="black", label=<{Vrule|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.backends.backend_pgf.WeakSet" [color="black", fontcolor="black", label=<{WeakSet|weak_key_dict : WeakKeyDictionary<br ALIGN="LEFT"/>|add(item)<br ALIGN="LEFT"/>discard(item)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication" [color="black", fontcolor="black", label=<{WebAggApplication|initialized : bool<br ALIGN="LEFT"/>started : bool<br ALIGN="LEFT"/>|initialize(url_prefix, port)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_webagg.WebAggApplication.WebSocket" [color="black", fontcolor="black", label=<{WebSocket|fignum : int<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>supports_binary : bool<br ALIGN="LEFT"/>|on_close()<br ALIGN="LEFT"/>on_message(message)<br ALIGN="LEFT"/>open(fignum)<br ALIGN="LEFT"/>send_binary(blob)<br ALIGN="LEFT"/>send_json(content)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.Wedge" [color="black", fontcolor="black", label=<{Wedge|center<br ALIGN="LEFT"/>r<br ALIGN="LEFT"/>theta1<br ALIGN="LEFT"/>theta2<br ALIGN="LEFT"/>width : NoneType<br ALIGN="LEFT"/>|get_path()<br ALIGN="LEFT"/>set_center(center)<br ALIGN="LEFT"/>set_radius(radius)<br ALIGN="LEFT"/>set_theta1(theta1)<br ALIGN="LEFT"/>set_theta2(theta2)<br ALIGN="LEFT"/>set_width(width)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle.Wedge" [color="black", fontcolor="black", label=<{Wedge|shrink_factor : float<br ALIGN="LEFT"/>tail_width : float<br ALIGN="LEFT"/>|transmute(path, mutation_size, linewidth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.WeekdayLocator" [color="black", fontcolor="black", label=<{WeekdayLocator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.widgets.Widget" [color="black", fontcolor="black", label=<{Widget|drawon : bool<br ALIGN="LEFT"/>eventson : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.axis.XAxis" [color="black", fontcolor="black", label=<{XAxis|axis_name : str<br ALIGN="LEFT"/>isDefault_majfmt : bool<br ALIGN="LEFT"/>label_position : str<br ALIGN="LEFT"/>labelpad<br ALIGN="LEFT"/>major<br ALIGN="LEFT"/>minor<br ALIGN="LEFT"/>offset_text_position : str<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>get_data_interval()<br ALIGN="LEFT"/>get_label_position()<br ALIGN="LEFT"/>get_minpos()<br ALIGN="LEFT"/>get_text_heights(renderer)<br ALIGN="LEFT"/>get_ticks_position()<br ALIGN="LEFT"/>get_view_interval()<br ALIGN="LEFT"/>set_data_interval(vmin, vmax, ignore)<br ALIGN="LEFT"/>set_default_intervals()<br ALIGN="LEFT"/>set_label_position(position)<br ALIGN="LEFT"/>set_ticks_position(position)<br ALIGN="LEFT"/>set_view_interval(vmin, vmax, ignore)<br ALIGN="LEFT"/>tick_bottom()<br ALIGN="LEFT"/>tick_top()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_svg.XMLWriter" [color="black", fontcolor="black", label=<{XMLWriter|flush<br ALIGN="LEFT"/>|close(id)<br ALIGN="LEFT"/>comment(comment)<br ALIGN="LEFT"/>data(text)<br ALIGN="LEFT"/>element(tag, text, attrib)<br ALIGN="LEFT"/>end(tag, indent)<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/>start(tag, attrib)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axis.XTick" [color="black", fontcolor="black", label=<{XTick|<br ALIGN="LEFT"/>|apply_tickdir(tickdir)<br ALIGN="LEFT"/>get_view_interval()<br ALIGN="LEFT"/>update_position(loc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.Xlator" [color="black", fontcolor="black", label=<{Xlator|<br ALIGN="LEFT"/>|xlat(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.YAArrow" [color="black", fontcolor="black", label=<{YAArrow|figure : NoneType<br ALIGN="LEFT"/>frac : float<br ALIGN="LEFT"/>headwidth : int<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>xybase<br ALIGN="LEFT"/>xytip<br ALIGN="LEFT"/>|get_patch_transform()<br ALIGN="LEFT"/>get_path()<br ALIGN="LEFT"/>getpoints(x1, y1, x2, y2, k)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axis.YAxis" [color="black", fontcolor="black", label=<{YAxis|axis_name : str<br ALIGN="LEFT"/>label_position : str<br ALIGN="LEFT"/>labelpad<br ALIGN="LEFT"/>major<br ALIGN="LEFT"/>minor<br ALIGN="LEFT"/>offset_text_position : str<br ALIGN="LEFT"/>|contains(mouseevent)<br ALIGN="LEFT"/>get_data_interval()<br ALIGN="LEFT"/>get_label_position()<br ALIGN="LEFT"/>get_minpos()<br ALIGN="LEFT"/>get_text_widths(renderer)<br ALIGN="LEFT"/>get_ticks_position()<br ALIGN="LEFT"/>get_view_interval()<br ALIGN="LEFT"/>set_data_interval(vmin, vmax, ignore)<br ALIGN="LEFT"/>set_default_intervals()<br ALIGN="LEFT"/>set_label_position(position)<br ALIGN="LEFT"/>set_offset_position(position)<br ALIGN="LEFT"/>set_ticks_position(position)<br ALIGN="LEFT"/>set_view_interval(vmin, vmax, ignore)<br ALIGN="LEFT"/>tick_left()<br ALIGN="LEFT"/>tick_right()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axis.YTick" [color="black", fontcolor="black", label=<{YTick|<br ALIGN="LEFT"/>|apply_tickdir(tickdir)<br ALIGN="LEFT"/>get_view_interval()<br ALIGN="LEFT"/>update_position(loc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.YearLocator" [color="black", fontcolor="black", label=<{YearLocator|base<br ALIGN="LEFT"/>replaced : dict<br ALIGN="LEFT"/>|autoscale()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.text._AnnotationBase" [color="black", fontcolor="black", label=<{_AnnotationBase|anncoords<br ALIGN="LEFT"/>textcoords<br ALIGN="LEFT"/>xy<br ALIGN="LEFT"/>xyann<br ALIGN="LEFT"/>xycoords : str<br ALIGN="LEFT"/>xytext<br ALIGN="LEFT"/>|draggable(state, use_blit)<br ALIGN="LEFT"/>get_annotation_clip()<br ALIGN="LEFT"/>set_annotation_clip(b)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axes._base._AxesBase" [color="black", fontcolor="black", label=<{_AxesBase|artists : list<br ALIGN="LEFT"/>axesPatch<br ALIGN="LEFT"/>axison : bool<br ALIGN="LEFT"/>bbox<br ALIGN="LEFT"/>callbacks<br ALIGN="LEFT"/>collections : list<br ALIGN="LEFT"/>containers : list<br ALIGN="LEFT"/>dataLim<br ALIGN="LEFT"/>fmt_xdata : NoneType<br ALIGN="LEFT"/>fmt_ydata : NoneType<br ALIGN="LEFT"/>ignore_existing_data_limits : bool<br ALIGN="LEFT"/>images : list<br ALIGN="LEFT"/>legend_ : NoneType<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>patch<br ALIGN="LEFT"/>patches : list<br ALIGN="LEFT"/>spines : dict<br ALIGN="LEFT"/>tables : list<br ALIGN="LEFT"/>texts : list<br ALIGN="LEFT"/>title<br ALIGN="LEFT"/>titleOffsetTrans<br ALIGN="LEFT"/>transAxes<br ALIGN="LEFT"/>transData<br ALIGN="LEFT"/>transLimits<br ALIGN="LEFT"/>transScale<br ALIGN="LEFT"/>viewLim<br ALIGN="LEFT"/>xaxis<br ALIGN="LEFT"/>yaxis<br ALIGN="LEFT"/>|add_artist(a)<br ALIGN="LEFT"/>add_collection(collection, autolim)<br ALIGN="LEFT"/>add_container(container)<br ALIGN="LEFT"/>add_image(image)<br ALIGN="LEFT"/>add_line(line)<br ALIGN="LEFT"/>add_patch(p)<br ALIGN="LEFT"/>add_table(tab)<br ALIGN="LEFT"/>apply_aspect(position)<br ALIGN="LEFT"/>autoscale(enable, axis, tight)<br ALIGN="LEFT"/>autoscale_view(tight, scalex, scaley)<br ALIGN="LEFT"/>axis()<br ALIGN="LEFT"/>can_pan()<br ALIGN="LEFT"/>can_zoom()<br ALIGN="LEFT"/>cla()<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>contains(mouseevent)<br ALIGN="LEFT"/>contains_point(point)<br ALIGN="LEFT"/>drag_pan(button, key, x, y)<br ALIGN="LEFT"/>draw(renderer, inframe)<br ALIGN="LEFT"/>draw_artist(a)<br ALIGN="LEFT"/>end_pan()<br ALIGN="LEFT"/>format_coord(x, y)<br ALIGN="LEFT"/>format_xdata(x)<br ALIGN="LEFT"/>format_ydata(y)<br ALIGN="LEFT"/>get_adjustable()<br ALIGN="LEFT"/>get_anchor()<br ALIGN="LEFT"/>get_aspect()<br ALIGN="LEFT"/>get_autoscale_on()<br ALIGN="LEFT"/>get_autoscalex_on()<br ALIGN="LEFT"/>get_autoscaley_on()<br ALIGN="LEFT"/>get_axes_locator()<br ALIGN="LEFT"/>get_axis_bgcolor()<br ALIGN="LEFT"/>get_axisbelow()<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_cursor_props()<br ALIGN="LEFT"/>get_data_ratio()<br ALIGN="LEFT"/>get_data_ratio_log()<br ALIGN="LEFT"/>get_default_bbox_extra_artists()<br ALIGN="LEFT"/>get_frame_on()<br ALIGN="LEFT"/>get_images()<br ALIGN="LEFT"/>get_legend()<br ALIGN="LEFT"/>get_lines()<br ALIGN="LEFT"/>get_navigate()<br ALIGN="LEFT"/>get_navigate_mode()<br ALIGN="LEFT"/>get_position(original)<br ALIGN="LEFT"/>get_rasterization_zorder()<br ALIGN="LEFT"/>get_renderer_cache()<br ALIGN="LEFT"/>get_shared_x_axes()<br ALIGN="LEFT"/>get_shared_y_axes()<br ALIGN="LEFT"/>get_tightbbox(renderer, call_axes_locator)<br ALIGN="LEFT"/>get_window_extent()<br ALIGN="LEFT"/>get_xaxis()<br ALIGN="LEFT"/>get_xaxis_text1_transform(pad_points)<br ALIGN="LEFT"/>get_xaxis_text2_transform(pad_points)<br ALIGN="LEFT"/>get_xaxis_transform(which)<br ALIGN="LEFT"/>get_xbound()<br ALIGN="LEFT"/>get_xgridlines()<br ALIGN="LEFT"/>get_xlim()<br ALIGN="LEFT"/>get_xmajorticklabels()<br ALIGN="LEFT"/>get_xminorticklabels()<br ALIGN="LEFT"/>get_xscale()<br ALIGN="LEFT"/>get_xticklabels(minor, which)<br ALIGN="LEFT"/>get_xticklines()<br ALIGN="LEFT"/>get_xticks(minor)<br ALIGN="LEFT"/>get_yaxis()<br ALIGN="LEFT"/>get_yaxis_text1_transform(pad_points)<br ALIGN="LEFT"/>get_yaxis_text2_transform(pad_points)<br ALIGN="LEFT"/>get_yaxis_transform(which)<br ALIGN="LEFT"/>get_ybound()<br ALIGN="LEFT"/>get_ygridlines()<br ALIGN="LEFT"/>get_ylim()<br ALIGN="LEFT"/>get_ymajorticklabels()<br ALIGN="LEFT"/>get_yminorticklabels()<br ALIGN="LEFT"/>get_yscale()<br ALIGN="LEFT"/>get_yticklabels(minor, which)<br ALIGN="LEFT"/>get_yticklines()<br ALIGN="LEFT"/>get_yticks(minor)<br ALIGN="LEFT"/>grid(b, which, axis)<br ALIGN="LEFT"/>has_data()<br ALIGN="LEFT"/>hold(b)<br ALIGN="LEFT"/>in_axes(mouseevent)<br ALIGN="LEFT"/>invert_xaxis()<br ALIGN="LEFT"/>invert_yaxis()<br ALIGN="LEFT"/>ishold()<br ALIGN="LEFT"/>locator_params(axis, tight)<br ALIGN="LEFT"/>margins()<br ALIGN="LEFT"/>minorticks_off()<br ALIGN="LEFT"/>minorticks_on()<br ALIGN="LEFT"/>pick()<br ALIGN="LEFT"/>redraw_in_frame()<br ALIGN="LEFT"/>relim(visible_only)<br ALIGN="LEFT"/>reset_position()<br ALIGN="LEFT"/>set_adjustable(adjustable)<br ALIGN="LEFT"/>set_anchor(anchor)<br ALIGN="LEFT"/>set_aspect(aspect, adjustable, anchor)<br ALIGN="LEFT"/>set_autoscale_on(b)<br ALIGN="LEFT"/>set_autoscalex_on(b)<br ALIGN="LEFT"/>set_autoscaley_on(b)<br ALIGN="LEFT"/>set_axes_locator(locator)<br ALIGN="LEFT"/>set_axis_bgcolor(color)<br ALIGN="LEFT"/>set_axis_off()<br ALIGN="LEFT"/>set_axis_on()<br ALIGN="LEFT"/>set_axisbelow(b)<br ALIGN="LEFT"/>set_color_cycle(clist)<br ALIGN="LEFT"/>set_cursor_props()<br ALIGN="LEFT"/>set_figure(fig)<br ALIGN="LEFT"/>set_frame_on(b)<br ALIGN="LEFT"/>set_navigate(b)<br ALIGN="LEFT"/>set_navigate_mode(b)<br ALIGN="LEFT"/>set_position(pos, which)<br ALIGN="LEFT"/>set_rasterization_zorder(z)<br ALIGN="LEFT"/>set_xbound(lower, upper)<br ALIGN="LEFT"/>set_xlim(left, right, emit, auto)<br ALIGN="LEFT"/>set_xmargin(m)<br ALIGN="LEFT"/>set_xscale(value)<br ALIGN="LEFT"/>set_xticklabels(labels, fontdict, minor)<br ALIGN="LEFT"/>set_xticks(ticks, minor)<br ALIGN="LEFT"/>set_ybound(lower, upper)<br ALIGN="LEFT"/>set_ylim(bottom, top, emit, auto)<br ALIGN="LEFT"/>set_ymargin(m)<br ALIGN="LEFT"/>set_yscale(value)<br ALIGN="LEFT"/>set_yticklabels(labels, fontdict, minor)<br ALIGN="LEFT"/>set_yticks(ticks, minor)<br ALIGN="LEFT"/>start_pan(x, y, button)<br ALIGN="LEFT"/>tick_params(axis)<br ALIGN="LEFT"/>ticklabel_format()<br ALIGN="LEFT"/>twinx()<br ALIGN="LEFT"/>twiny()<br ALIGN="LEFT"/>update_datalim(xys, updatex, updatey)<br ALIGN="LEFT"/>update_datalim_bounds(bounds)<br ALIGN="LEFT"/>update_datalim_numerix(x, y)<br ALIGN="LEFT"/>xaxis_date(tz)<br ALIGN="LEFT"/>xaxis_inverted()<br ALIGN="LEFT"/>yaxis_date(tz)<br ALIGN="LEFT"/>yaxis_inverted()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.image._AxesImageBase" [color="black", fontcolor="black", label=<{_AxesImageBase|axes<br ALIGN="LEFT"/>interpnames : list<br ALIGN="LEFT"/>origin : NoneType<br ALIGN="LEFT"/>zorder : int<br ALIGN="LEFT"/>|changed()<br ALIGN="LEFT"/>contains(mouseevent)<br ALIGN="LEFT"/>draw(renderer)<br ALIGN="LEFT"/>get_filternorm()<br ALIGN="LEFT"/>get_filterrad()<br ALIGN="LEFT"/>get_interpolation()<br ALIGN="LEFT"/>get_resample()<br ALIGN="LEFT"/>get_size()<br ALIGN="LEFT"/>make_image(magnification)<br ALIGN="LEFT"/>set_alpha(alpha)<br ALIGN="LEFT"/>set_array(A)<br ALIGN="LEFT"/>set_data(A)<br ALIGN="LEFT"/>set_filternorm(filternorm)<br ALIGN="LEFT"/>set_filterrad(filterrad)<br ALIGN="LEFT"/>set_interpolation(s)<br ALIGN="LEFT"/>set_resample(v)<br ALIGN="LEFT"/>write_png(fname, noscale)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.BoxStyle._Base" [color="black", fontcolor="black", label=<{_Base|<br ALIGN="LEFT"/>|<I>transmute</I>(x0, y0, width, height, mutation_size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ConnectionStyle._Base" [color="black", fontcolor="black", label=<{_Base|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle._Base" [color="black", fontcolor="black", label=<{_Base|<br ALIGN="LEFT"/>|ensure_quadratic_bezier(path)<br ALIGN="LEFT"/><I>transmute</I>(path, mutation_size, linewidth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook._BoundMethodProxy" [color="black", fontcolor="black", label=<{_BoundMethodProxy|func<br ALIGN="LEFT"/>inst : NoneType<br ALIGN="LEFT"/>klass : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle._Bracket" [color="black", fontcolor="black", label=<{_Bracket|angleA : NoneType<br ALIGN="LEFT"/>angleB : NoneType<br ALIGN="LEFT"/>bracketA : NoneType<br ALIGN="LEFT"/>bracketB : NoneType<br ALIGN="LEFT"/>lengthA : float<br ALIGN="LEFT"/>lengthB : float<br ALIGN="LEFT"/>scaleA : NoneType<br ALIGN="LEFT"/>scaleB : NoneType<br ALIGN="LEFT"/>widthA : float<br ALIGN="LEFT"/>widthB : float<br ALIGN="LEFT"/>|transmute(path, mutation_size, linewidth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.collections._CollectionWithSizes" [color="black", fontcolor="black", label=<{_CollectionWithSizes|<br ALIGN="LEFT"/>|draw(renderer)<br ALIGN="LEFT"/>get_sizes()<br ALIGN="LEFT"/>set_sizes(sizes, dpi)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches.ArrowStyle._Curve" [color="black", fontcolor="black", label=<{_Curve|beginarrow : NoneType<br ALIGN="LEFT"/>endarrow : NoneType<br ALIGN="LEFT"/>fillbegin : bool<br ALIGN="LEFT"/>fillend : bool<br ALIGN="LEFT"/>head_length : float<br ALIGN="LEFT"/>head_width : float<br ALIGN="LEFT"/>|transmute(path, mutation_size, linewidth)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate._DOF_estimator" [color="black", fontcolor="black", label=<{_DOF_estimator|dz<br ALIGN="LEFT"/>z<br ALIGN="LEFT"/>|compute_dof_from_df()<br ALIGN="LEFT"/><I>compute_dz</I>()<br ALIGN="LEFT"/>get_dof_vec(tri_z, tri_dz, J)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate._DOF_estimator_geom" [color="black", fontcolor="black", label=<{_DOF_estimator_geom|<br ALIGN="LEFT"/>|compute_dz()<br ALIGN="LEFT"/>compute_geom_grads()<br ALIGN="LEFT"/>compute_geom_weights()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate._DOF_estimator_min_E" [color="black", fontcolor="black", label=<{_DOF_estimator_min_E|<br ALIGN="LEFT"/>|compute_dz()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate._DOF_estimator_user" [color="black", fontcolor="black", label=<{_DOF_estimator_user|<br ALIGN="LEFT"/>|compute_dz(dz)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.ticker._DummyAxis" [color="black", fontcolor="black", label=<{_DummyAxis|dataLim<br ALIGN="LEFT"/>viewLim<br ALIGN="LEFT"/>|get_data_interval()<br ALIGN="LEFT"/>get_minpos()<br ALIGN="LEFT"/>get_view_interval()<br ALIGN="LEFT"/>set_data_interval(vmin, vmax)<br ALIGN="LEFT"/>set_view_interval(vmin, vmax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook._InstanceMethodPickler" [color="black", fontcolor="black", label=<{_InstanceMethodPickler|instancemethod_name<br ALIGN="LEFT"/>parent_obj<br ALIGN="LEFT"/>|get_instancemethod()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook._NestedClassGetter" [color="black", fontcolor="black", label=<{_NestedClassGetter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.axes._subplots._PicklableSubplotClassConstructor" [color="black", fontcolor="black", label=<{_PicklableSubplotClassConstructor|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate._ReducedHCT_Element" [color="black", fontcolor="black", label=<{_ReducedHCT_Element|E : ndarray<br ALIGN="LEFT"/>J0_to_J1 : ndarray<br ALIGN="LEFT"/>J0_to_J2 : ndarray<br ALIGN="LEFT"/>M : ndarray<br ALIGN="LEFT"/>M0 : ndarray<br ALIGN="LEFT"/>M1 : ndarray<br ALIGN="LEFT"/>M2 : ndarray<br ALIGN="LEFT"/>gauss_pts : ndarray<br ALIGN="LEFT"/>gauss_w : ndarray<br ALIGN="LEFT"/>n_gauss : int<br ALIGN="LEFT"/>rotate_d2V : ndarray<br ALIGN="LEFT"/>rotate_dV : ndarray<br ALIGN="LEFT"/>|get_Hrot_from_J(J, return_area)<br ALIGN="LEFT"/>get_Kff_and_Ff(J, ecc, triangles, Uc)<br ALIGN="LEFT"/>get_bending_matrices(J, ecc)<br ALIGN="LEFT"/>get_d2Sidksij2(alpha, ecc)<br ALIGN="LEFT"/>get_function_derivatives(alpha, J, ecc, dofs)<br ALIGN="LEFT"/>get_function_hessians(alpha, J, ecc, dofs)<br ALIGN="LEFT"/>get_function_values(alpha, ecc, dofs)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tri.triinterpolate._Sparse_Matrix_coo" [color="black", fontcolor="black", label=<{_Sparse_Matrix_coo|cols : ndarray<br ALIGN="LEFT"/>diag<br ALIGN="LEFT"/>m<br ALIGN="LEFT"/>n<br ALIGN="LEFT"/>rows : ndarray<br ALIGN="LEFT"/>vals : ndarray<br ALIGN="LEFT"/>|compress_csc()<br ALIGN="LEFT"/>compress_csr()<br ALIGN="LEFT"/>dot(V)<br ALIGN="LEFT"/>to_dense()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patches._Style" [color="black", fontcolor="black", label=<{_Style|<br ALIGN="LEFT"/>|get_styles()<br ALIGN="LEFT"/>pprint_styles()<br ALIGN="LEFT"/>register(name, style)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates._UTC" [color="black", fontcolor="black", label=<{_UTC|<br ALIGN="LEFT"/>|dst(dt)<br ALIGN="LEFT"/>tzname(dt)<br ALIGN="LEFT"/>utcoffset(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.RingBuffer.__Full" [color="black", fontcolor="black", label=<{__Full|cur<br ALIGN="LEFT"/>|append(x)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.axes._base._process_plot_var_args" [color="black", fontcolor="black", label=<{_process_plot_var_args|axes<br ALIGN="LEFT"/>color_cycle : cycle<br ALIGN="LEFT"/>command : str<br ALIGN="LEFT"/>|set_color_cycle(clist)<br ALIGN="LEFT"/>set_lineprops(line)<br ALIGN="LEFT"/>set_patchprops(fill_poly)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.converter" [color="black", fontcolor="black", label=<{converter|missing : str<br ALIGN="LEFT"/>missingval : NoneType<br ALIGN="LEFT"/>|is_missing(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.csv_testcase" [color="black", fontcolor="black", label=<{csv_testcase|fd : _TemporaryFileWrapper<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>tearDown()<br ALIGN="LEFT"/>test_rec2csv_bad_shape_ValueError()<br ALIGN="LEFT"/>test_recarray_csv_roundtrip()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.detrend_testcase" [color="black", fontcolor="black", label=<{detrend_testcase|atol : float<br ALIGN="LEFT"/>sig_base<br ALIGN="LEFT"/>sig_off : ndarray<br ALIGN="LEFT"/>sig_slope : ndarray<br ALIGN="LEFT"/>sig_slope_mean : ndarray<br ALIGN="LEFT"/>sig_zeros : ndarray<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>test_demean_0D_off()<br ALIGN="LEFT"/>test_demean_1D_base_slope_off()<br ALIGN="LEFT"/>test_demean_1D_base_slope_off_axis0()<br ALIGN="LEFT"/>test_demean_1D_base_slope_off_list()<br ALIGN="LEFT"/>test_demean_1D_d1_ValueError()<br ALIGN="LEFT"/>test_demean_2D_axis0()<br ALIGN="LEFT"/>test_demean_2D_axis1()<br ALIGN="LEFT"/>test_demean_2D_axism1()<br ALIGN="LEFT"/>test_demean_2D_d2_ValueError()<br ALIGN="LEFT"/>test_demean_2D_default()<br ALIGN="LEFT"/>test_demean_2D_none()<br ALIGN="LEFT"/>test_detrend_0D_d0_ValueError()<br ALIGN="LEFT"/>test_detrend_1D_d1_ValueError()<br ALIGN="LEFT"/>test_detrend_2D_d2_ValueError()<br ALIGN="LEFT"/>test_detrend_2D_default()<br ALIGN="LEFT"/>test_detrend_2D_none()<br ALIGN="LEFT"/>test_detrend_bad_key_str_ValueError()<br ALIGN="LEFT"/>test_detrend_bad_key_var_ValueError()<br ALIGN="LEFT"/>test_detrend_detrend_linear_0D_off()<br ALIGN="LEFT"/>test_detrend_detrend_linear_1d_slope_off()<br ALIGN="LEFT"/>test_detrend_detrend_linear_1d_slope_off_axis1()<br ALIGN="LEFT"/>test_detrend_detrend_mean_0D_off()<br ALIGN="LEFT"/>test_detrend_detrend_mean_0D_zeros()<br ALIGN="LEFT"/>test_detrend_detrend_mean_2D_axis0()<br ALIGN="LEFT"/>test_detrend_detrend_none_0D_zeros()<br ALIGN="LEFT"/>test_detrend_linear_0D_off()<br ALIGN="LEFT"/>test_detrend_linear_0D_zeros()<br ALIGN="LEFT"/>test_detrend_linear_1d_off()<br ALIGN="LEFT"/>test_detrend_linear_1d_slope()<br ALIGN="LEFT"/>test_detrend_linear_1d_slope_off()<br ALIGN="LEFT"/>test_detrend_linear_1d_slope_off_list()<br ALIGN="LEFT"/>test_detrend_linear_2D_ValueError()<br ALIGN="LEFT"/>test_detrend_mean_0D_d0_ValueError()<br ALIGN="LEFT"/>test_detrend_mean_0D_off()<br ALIGN="LEFT"/>test_detrend_mean_0D_zeros()<br ALIGN="LEFT"/>test_detrend_mean_1D_base()<br ALIGN="LEFT"/>test_detrend_mean_1D_base_off()<br ALIGN="LEFT"/>test_detrend_mean_1D_base_slope()<br ALIGN="LEFT"/>test_detrend_mean_1D_base_slope_off()<br ALIGN="LEFT"/>test_detrend_mean_1D_base_slope_off_axis0()<br ALIGN="LEFT"/>test_detrend_mean_1D_base_slope_off_list()<br ALIGN="LEFT"/>test_detrend_mean_1D_base_slope_off_list_axis0()<br ALIGN="LEFT"/>test_detrend_mean_1D_d1_ValueError()<br ALIGN="LEFT"/>test_detrend_mean_1D_zeros()<br ALIGN="LEFT"/>test_detrend_mean_2D_axis0()<br ALIGN="LEFT"/>test_detrend_mean_2D_axis1()<br ALIGN="LEFT"/>test_detrend_mean_2D_axism1()<br ALIGN="LEFT"/>test_detrend_mean_2D_d2_ValueError()<br ALIGN="LEFT"/>test_detrend_mean_2D_default()<br ALIGN="LEFT"/>test_detrend_mean_2D_none()<br ALIGN="LEFT"/>test_detrend_mean_2D_none_T()<br ALIGN="LEFT"/>test_detrend_none_0D_off()<br ALIGN="LEFT"/>test_detrend_none_0D_zeros()<br ALIGN="LEFT"/>test_detrend_none_0D_zeros_axis1()<br ALIGN="LEFT"/>test_detrend_none_1D_base()<br ALIGN="LEFT"/>test_detrend_none_1D_base_slope_off_list()<br ALIGN="LEFT"/>test_detrend_none_1D_off()<br ALIGN="LEFT"/>test_detrend_none_1D_slope()<br ALIGN="LEFT"/>test_detrend_none_2D()<br ALIGN="LEFT"/>test_detrend_none_2D_T()<br ALIGN="LEFT"/>test_detrend_str_constant_2D_none_T()<br ALIGN="LEFT"/>test_detrend_str_default_2D_axis1()<br ALIGN="LEFT"/>test_detrend_str_linear_0D_off()<br ALIGN="LEFT"/>test_detrend_str_linear_1d_slope_off()<br ALIGN="LEFT"/>test_detrend_str_linear_2d_slope_off_axis0()<br ALIGN="LEFT"/>test_detrend_str_mean_0D_off()<br ALIGN="LEFT"/>test_detrend_str_mean_0D_zeros()<br ALIGN="LEFT"/>test_detrend_str_mean_2D_axis0()<br ALIGN="LEFT"/>test_detrend_str_none_0D_zeros()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.backends.backend_wx.fake_stderr" [color="black", fontcolor="black", label=<{fake_stderr|<br ALIGN="LEFT"/>|write(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.gaussian_kde_custom_tests" [color="black", fontcolor="black", label=<{gaussian_kde_custom_tests|<br ALIGN="LEFT"/>|test_callable_covariance_dataset()<br ALIGN="LEFT"/>test_callable_singledim_dataset()<br ALIGN="LEFT"/>test_no_data()<br ALIGN="LEFT"/>test_scalar_covariance_dataset()<br ALIGN="LEFT"/>test_scalar_empty_dataset()<br ALIGN="LEFT"/>test_scott_multidim_dataset()<br ALIGN="LEFT"/>test_scott_singledim_dataset()<br ALIGN="LEFT"/>test_silverman_multidim_dataset()<br ALIGN="LEFT"/>test_silverman_singledim_dataset()<br ALIGN="LEFT"/>test_single_dataset_element()<br ALIGN="LEFT"/>test_wrong_bw_method()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.gaussian_kde_evaluate_tests" [color="black", fontcolor="black", label=<{gaussian_kde_evaluate_tests|<br ALIGN="LEFT"/>|test_evaluate_diff_dim()<br ALIGN="LEFT"/>test_evaluate_dim_and_num()<br ALIGN="LEFT"/>test_evaluate_equal_dim_and_num_lt()<br ALIGN="LEFT"/>test_evaluate_inv_dim()<br ALIGN="LEFT"/>test_evaluate_point_dim_not_one()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.gaussian_kde_tests" [color="black", fontcolor="black", label=<{gaussian_kde_tests|<br ALIGN="LEFT"/>|test_gaussian_kde_covariance_caching()<br ALIGN="LEFT"/>test_kde_bandwidth_method()<br ALIGN="LEFT"/>test_kde_integer_input()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.general_testcase" [color="black", fontcolor="black", label=<{general_testcase|<br ALIGN="LEFT"/>|test_colinear_pca()<br ALIGN="LEFT"/>test_norm()<br ALIGN="LEFT"/>test_prctile()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.sphinxext.only_directives.html_only" [color="black", fontcolor="black", label=<{html_only|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.sphinxext.mathmpl.latex_math" [color="black", fontcolor="black", label=<{latex_math|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.sphinxext.only_directives.latex_only" [color="black", fontcolor="black", label=<{latex_only|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.maxdict" [color="black", fontcolor="black", label=<{maxdict|maxsize<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.align_iterators.myiter" [color="black", fontcolor="black", label=<{myiter|it<br ALIGN="LEFT"/>key : NoneType<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|iternext()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.sphinxext.only_directives.only_base" [color="black", fontcolor="black", label=<{only_base|<br ALIGN="LEFT"/>|dont_traverse()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.rc_context" [color="black", fontcolor="black", label=<{rc_context|fname : NoneType<br ALIGN="LEFT"/>rcdict : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.dates.rrulewrapper" [color="black", fontcolor="black", label=<{rrulewrapper|<br ALIGN="LEFT"/>|set()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.cbook.silent_list" [color="black", fontcolor="black", label=<{silent_list|type<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spacing_testcase" [color="black", fontcolor="black", label=<{spacing_testcase|<br ALIGN="LEFT"/>|test_logspace_none()<br ALIGN="LEFT"/>test_logspace_primes()<br ALIGN="LEFT"/>test_logspace_single()<br ALIGN="LEFT"/>test_logspace_tens()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_complex_defaultsided" [color="black", fontcolor="black", label=<{spectral_testcase_Fs4_complex_defaultsided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_complex_onesided" [color="black", fontcolor="black", label=<{spectral_testcase_Fs4_complex_onesided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_complex_twosided" [color="black", fontcolor="black", label=<{spectral_testcase_Fs4_complex_twosided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_real_defaultsided" [color="black", fontcolor="black", label=<{spectral_testcase_Fs4_real_defaultsided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_real_onesided" [color="black", fontcolor="black", label=<{spectral_testcase_Fs4_real_onesided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_real_twosided" [color="black", fontcolor="black", label=<{spectral_testcase_Fs4_real_twosided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_complex_defaultsided" [color="black", fontcolor="black", label=<{spectral_testcase_FsAll_complex_defaultsided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_complex_onesided" [color="black", fontcolor="black", label=<{spectral_testcase_FsAll_complex_onesided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_complex_twosided" [color="black", fontcolor="black", label=<{spectral_testcase_FsAll_complex_twosided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_real_defaultsided" [color="black", fontcolor="black", label=<{spectral_testcase_FsAll_real_defaultsided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_real_onesided" [color="black", fontcolor="black", label=<{spectral_testcase_FsAll_real_onesided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_real_twosided" [color="black", fontcolor="black", label=<{spectral_testcase_FsAll_real_twosided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_noNFFT" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_noNFFT|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_noNFFT_no_pad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_noNFFT_no_pad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_nopad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_nopad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_odd" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_odd|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_oddlen" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_oddlen|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_overlap" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_overlap|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_stretch" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_stretch|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_trim" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_defaultsided_trim|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_noNFFT" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_noNFFT|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_noNFFT_no_pad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_noNFFT_no_pad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_nopad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_nopad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_odd" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_odd|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_oddlen" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_oddlen|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_overlap" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_overlap|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_stretch" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_stretch|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_trim" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_onesided_trim|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_noNFFT" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_noNFFT|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_noNFFT_no_pad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_noNFFT_no_pad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_nopad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_nopad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_odd" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_odd|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_oddlen" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_oddlen|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_overlap" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_overlap|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_stretch" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_stretch|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_trim" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_complex_twosided_trim|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_noNFFT" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_noNFFT|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_noNFFT_no_pad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_noNFFT_no_pad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_nopad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_nopad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_odd" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_odd|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_oddlen" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_oddlen|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_overlap" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_overlap|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_stretch" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_stretch|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_trim" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_defaultsided_trim|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided|Fs : float<br ALIGN="LEFT"/>NFFT_density : int<br ALIGN="LEFT"/>NFFT_density_real : int<br ALIGN="LEFT"/>NFFT_specgram : int<br ALIGN="LEFT"/>NFFT_spectrum : int<br ALIGN="LEFT"/>freqs_density : ndarray<br ALIGN="LEFT"/>freqs_specgram : ndarray<br ALIGN="LEFT"/>freqs_spectrum : ndarray<br ALIGN="LEFT"/>fstims<br ALIGN="LEFT"/>nover_density : int<br ALIGN="LEFT"/>nover_specgram : int<br ALIGN="LEFT"/>nover_spectrum : int<br ALIGN="LEFT"/>pad_to_density : int<br ALIGN="LEFT"/>pad_to_specgram : int<br ALIGN="LEFT"/>pad_to_spectrum : int<br ALIGN="LEFT"/>sides<br ALIGN="LEFT"/>t_density : ndarray<br ALIGN="LEFT"/>t_specgram : ndarray<br ALIGN="LEFT"/>t_spectrum : ndarray<br ALIGN="LEFT"/>y : ndarray<br ALIGN="LEFT"/>|check_freqs(vals, targfreqs, resfreqs, fstims)<br ALIGN="LEFT"/>check_maxfreq(spec, fsp, fstims)<br ALIGN="LEFT"/>createStim(fstims, iscomplex, sides, nsides, len_x, NFFT_density, nover_density, pad_to_density, pad_to_spectrum)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_angle_spectrum()<br ALIGN="LEFT"/>test_complex_spectrum()<br ALIGN="LEFT"/>test_csd()<br ALIGN="LEFT"/>test_magnitude_spectrum()<br ALIGN="LEFT"/>test_phase_spectrum()<br ALIGN="LEFT"/>test_psd()<br ALIGN="LEFT"/>test_psd_csd_equal()<br ALIGN="LEFT"/>test_psd_detrend_linear_func_trend()<br ALIGN="LEFT"/>test_psd_detrend_linear_str_trend()<br ALIGN="LEFT"/>test_psd_detrend_mean_func_offset()<br ALIGN="LEFT"/>test_psd_detrend_mean_str_offset()<br ALIGN="LEFT"/>test_psd_window_hanning()<br ALIGN="LEFT"/>test_psd_window_hanning_detrend_linear()<br ALIGN="LEFT"/>test_psd_windowarray()<br ALIGN="LEFT"/>test_psd_windowarray_equal()<br ALIGN="LEFT"/>test_psd_windowarray_scale_by_freq()<br ALIGN="LEFT"/>test_single_spectrum_helper_raises_mode_default()<br ALIGN="LEFT"/>test_single_spectrum_helper_raises_mode_psd()<br ALIGN="LEFT"/>test_specgram_angle()<br ALIGN="LEFT"/>test_specgram_angle_phase_equivalent()<br ALIGN="LEFT"/>test_specgram_auto()<br ALIGN="LEFT"/>test_specgram_auto_default_equal()<br ALIGN="LEFT"/>test_specgram_auto_psd_equal()<br ALIGN="LEFT"/>test_specgram_complex()<br ALIGN="LEFT"/>test_specgram_complex_angle_equivalent()<br ALIGN="LEFT"/>test_specgram_complex_mag_equivalent()<br ALIGN="LEFT"/>test_specgram_complex_phase_equivalent()<br ALIGN="LEFT"/>test_specgram_default()<br ALIGN="LEFT"/>test_specgram_magnitude()<br ALIGN="LEFT"/>test_specgram_phase()<br ALIGN="LEFT"/>test_specgram_psd()<br ALIGN="LEFT"/>test_spectral_helper_magnitude_magnitude_spectrum()<br ALIGN="LEFT"/>test_spectral_helper_magnitude_specgram()<br ALIGN="LEFT"/>test_spectral_helper_psd()<br ALIGN="LEFT"/>test_spectral_helper_raises_angle_same_data()<br ALIGN="LEFT"/>test_spectral_helper_raises_complex_same_data()<br ALIGN="LEFT"/>test_spectral_helper_raises_magnitude_same_data()<br ALIGN="LEFT"/>test_spectral_helper_raises_noverlap_eq_NFFT()<br ALIGN="LEFT"/>test_spectral_helper_raises_noverlap_gt_NFFT()<br ALIGN="LEFT"/>test_spectral_helper_raises_phase_same_data()<br ALIGN="LEFT"/>test_spectral_helper_raises_unknown_mode()<br ALIGN="LEFT"/>test_spectral_helper_raises_unknown_sides()<br ALIGN="LEFT"/>test_spectral_helper_raises_winlen_ne_NFFT()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_noNFFT" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_noNFFT|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_noNFFT_no_pad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_noNFFT_no_pad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_nopad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_nopad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_odd" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_odd|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_oddlen" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_oddlen|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_overlap" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_overlap|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_stretch" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_stretch|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_trim" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_onesided_trim|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_noNFFT" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_noNFFT|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_noNFFT_no_pad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_noNFFT_no_pad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_nopad_to" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_nopad_to|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_odd" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_odd|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_oddlen" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_oddlen|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_overlap" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_overlap|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_stretch" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_stretch|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_trim" [color="black", fontcolor="black", label=<{spectral_testcase_nosig_real_twosided_trim|<br ALIGN="LEFT"/>|setUp()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.stride_testcase" [color="black", fontcolor="black", label=<{stride_testcase|<br ALIGN="LEFT"/>|calc_window_target(x, NFFT, noverlap)<br ALIGN="LEFT"/>get_base(x)<br ALIGN="LEFT"/>test_stride_ensure_integer_type()<br ALIGN="LEFT"/>test_stride_repeat_2D_ValueError()<br ALIGN="LEFT"/>test_stride_repeat_axis_gt_1_ValueError()<br ALIGN="LEFT"/>test_stride_repeat_axis_lt_0_ValueError()<br ALIGN="LEFT"/>test_stride_repeat_n1_axis0()<br ALIGN="LEFT"/>test_stride_repeat_n1_axis1()<br ALIGN="LEFT"/>test_stride_repeat_n5_axis0()<br ALIGN="LEFT"/>test_stride_repeat_n5_axis1()<br ALIGN="LEFT"/>test_stride_repeat_n_lt_1_ValueError()<br ALIGN="LEFT"/>test_stride_windows_0D_ValueError()<br ALIGN="LEFT"/>test_stride_windows_2D_ValueError()<br ALIGN="LEFT"/>test_stride_windows_n13_noverlapn3_axis0()<br ALIGN="LEFT"/>test_stride_windows_n13_noverlapn3_axis1()<br ALIGN="LEFT"/>test_stride_windows_n15_noverlap2_axis0()<br ALIGN="LEFT"/>test_stride_windows_n15_noverlap2_axis1()<br ALIGN="LEFT"/>test_stride_windows_n1_noverlap0_axis0()<br ALIGN="LEFT"/>test_stride_windows_n1_noverlap0_axis1()<br ALIGN="LEFT"/>test_stride_windows_n32_noverlap0_axis0_unflatten()<br ALIGN="LEFT"/>test_stride_windows_n32_noverlap0_axis1_unflatten()<br ALIGN="LEFT"/>test_stride_windows_n5_noverlap0_axis0()<br ALIGN="LEFT"/>test_stride_windows_n5_noverlap0_axis1()<br ALIGN="LEFT"/>test_stride_windows_n_gt_lenx_ValueError()<br ALIGN="LEFT"/>test_stride_windows_n_lt_1_ValueError()<br ALIGN="LEFT"/>test_stride_windows_noverlap_eq_n_ValueError()<br ALIGN="LEFT"/>test_stride_windows_noverlap_gt_n_ValueError()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.dates.strpdate2num" [color="black", fontcolor="black", label=<{strpdate2num|fmt<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.todate" [color="black", fontcolor="black", label=<{todate|fmt : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.todatetime" [color="black", fontcolor="black", label=<{todatetime|fmt : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.tofloat" [color="black", fontcolor="black", label=<{tofloat|missingval : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.toint" [color="black", fontcolor="black", label=<{toint|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.widgets.SubplotTool.__init__.toolbarfmt" [color="black", fontcolor="black", label=<{toolbarfmt|slider<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.cbook.tostr" [color="black", fontcolor="black", label=<{tostr|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.rcsetup.validate_nseq_float" [color="black", fontcolor="black", label=<{validate_nseq_float|n<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.rcsetup.validate_nseq_int" [color="black", fontcolor="black", label=<{validate_nseq_int|n<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"matplotlib.tests.test_mlab.window_testcase" [color="black", fontcolor="black", label=<{window_testcase|n : int<br ALIGN="LEFT"/>sig_ones : ndarray<br ALIGN="LEFT"/>sig_rand<br ALIGN="LEFT"/>sig_slope : ndarray<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>|check_window_apply_repeat(x, window, NFFT, noverlap)<br ALIGN="LEFT"/>setUp()<br ALIGN="LEFT"/>test_apply_window_0D_ValueError()<br ALIGN="LEFT"/>test_apply_window_1D_axis1_ValueError()<br ALIGN="LEFT"/>test_apply_window_1D_els_wrongsize_ValueError()<br ALIGN="LEFT"/>test_apply_window_3D_ValueError()<br ALIGN="LEFT"/>test_apply_window_hanning_1D()<br ALIGN="LEFT"/>test_apply_window_hanning_1D_axis0()<br ALIGN="LEFT"/>test_apply_window_hanning_2D__els1_axis1()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_axis0()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_axis1()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_els2_axis1()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_els3_axis1()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_stack_axis1()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_stack_windows_axis1()<br ALIGN="LEFT"/>test_apply_window_hanning_2D_stack_windows_axis1_unflatten()<br ALIGN="LEFT"/>test_apply_window_hanning_els1_2D_axis0()<br ALIGN="LEFT"/>test_apply_window_hanning_els2_2D_axis0()<br ALIGN="LEFT"/>test_apply_window_hanning_els3_2D_axis0()<br ALIGN="LEFT"/>test_apply_window_hanning_els_1D_axis0()<br ALIGN="LEFT"/>test_apply_window_stride_windows_hanning_2D_n13_noverlapn3_axis0()<br ALIGN="LEFT"/>test_window_hanning_ones()<br ALIGN="LEFT"/>test_window_hanning_rand()<br ALIGN="LEFT"/>test_window_none_ones()<br ALIGN="LEFT"/>test_window_none_rand()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patheffects.withSimplePatchShadow" [color="black", fontcolor="black", label=<{withSimplePatchShadow|<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.patheffects.withStroke" [color="black", fontcolor="black", label=<{withStroke|<br ALIGN="LEFT"/>|draw_path(renderer, gc, tpath, affine, rgbFace)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"matplotlib.animation.AVConvBase" -> "matplotlib.animation.FFMpegBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.AVConvFileWriter" -> "matplotlib.animation.AVConvBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.AVConvFileWriter" -> "matplotlib.animation.FFMpegFileWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.AVConvWriter" -> "matplotlib.animation.AVConvBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.AVConvWriter" -> "matplotlib.animation.FFMpegWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.ArtistAnimation" -> "matplotlib.animation.TimedAnimation" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.FFMpegFileWriter" -> "matplotlib.animation.FFMpegBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.FFMpegFileWriter" -> "matplotlib.animation.FileMovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.FFMpegWriter" -> "matplotlib.animation.FFMpegBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.FFMpegWriter" -> "matplotlib.animation.MovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.FileMovieWriter" -> "matplotlib.animation.MovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.FuncAnimation" -> "matplotlib.animation.TimedAnimation" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.ImageMagickFileWriter" -> "matplotlib.animation.FileMovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.ImageMagickFileWriter" -> "matplotlib.animation.ImageMagickBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.ImageMagickWriter" -> "matplotlib.animation.ImageMagickBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.ImageMagickWriter" -> "matplotlib.animation.MovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.MencoderFileWriter" -> "matplotlib.animation.FileMovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.MencoderFileWriter" -> "matplotlib.animation.MencoderBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.MencoderWriter" -> "matplotlib.animation.MencoderBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.MencoderWriter" -> "matplotlib.animation.MovieWriter" [arrowhead="empty", arrowtail="none"];
"matplotlib.animation.TimedAnimation" -> "matplotlib.animation.Animation" [arrowhead="empty", arrowtail="none"];
"matplotlib.axes._axes.Axes" -> "matplotlib.axes._base._AxesBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.axes._base._AxesBase" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.axis.Axis" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.axis.Tick" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.axis.XAxis" -> "matplotlib.axis.Axis" [arrowhead="empty", arrowtail="none"];
"matplotlib.axis.XTick" -> "matplotlib.axis.Tick" [arrowhead="empty", arrowtail="none"];
"matplotlib.axis.YAxis" -> "matplotlib.axis.Axis" [arrowhead="empty", arrowtail="none"];
"matplotlib.axis.YTick" -> "matplotlib.axis.Tick" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.CloseEvent" -> "matplotlib.backend_bases.Event" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.DrawEvent" -> "matplotlib.backend_bases.Event" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.IdleEvent" -> "matplotlib.backend_bases.Event" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.KeyEvent" -> "matplotlib.backend_bases.LocationEvent" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.LocationEvent" -> "matplotlib.backend_bases.Event" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.MouseEvent" -> "matplotlib.backend_bases.LocationEvent" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.PickEvent" -> "matplotlib.backend_bases.Event" [arrowhead="empty", arrowtail="none"];
"matplotlib.backend_bases.ResizeEvent" -> "matplotlib.backend_bases.Event" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_agg.FigureCanvasAgg" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_cairo.FigureCanvasCairo" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_cairo.GraphicsContextCairo" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_cairo.RendererCairo" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_cocoaagg.FigureCanvasCocoaAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_cocoaagg.FigureManagerCocoaAgg" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_cocoaagg.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gdk.FigureCanvasGDK" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gdk.GraphicsContextGDK" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gdk.RendererGDK" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk.FigureCanvasGTK" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk.FigureManagerGTK" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk.NavigationToolbar2GTK" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk.TimerGTK" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3.FigureCanvasGTK3" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3.FigureManagerGTK3" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3.TimerGTK3" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3agg.FigureCanvasGTK3Agg" -> "matplotlib.backends.backend_gtk3.FigureCanvasGTK3" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3agg.FigureManagerGTK3Agg" -> "matplotlib.backends.backend_gtk3.FigureManagerGTK3" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo" -> "matplotlib.backends.backend_cairo.FigureCanvasCairo" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo" -> "matplotlib.backends.backend_gtk3.FigureCanvasGTK3" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3cairo.FigureManagerGTK3Cairo" -> "matplotlib.backends.backend_gtk3.FigureManagerGTK3" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtk3cairo.RendererGTK3Cairo" -> "matplotlib.backends.backend_cairo.RendererCairo" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkagg.FigureCanvasGTKAgg" -> "matplotlib.backends.backend_gtk.FigureCanvasGTK" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkagg.FigureManagerGTKAgg" -> "matplotlib.backends.backend_gtk.FigureManagerGTK" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkagg.NavigationToolbar2GTKAgg" -> "matplotlib.backends.backend_gtk.NavigationToolbar2GTK" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo" -> "matplotlib.backends.backend_cairo.FigureCanvasCairo" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo" -> "matplotlib.backends.backend_gtk.FigureCanvasGTK" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkcairo.FigureManagerGTKCairo" -> "matplotlib.backends.backend_gtk.FigureManagerGTK" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkcairo.NavigationToolbar2Cairo" -> "matplotlib.backends.backend_gtk.NavigationToolbar2GTK" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_gtkcairo.RendererGTKCairo" -> "matplotlib.backends.backend_cairo.RendererCairo" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.FigureCanvasMac" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.FigureManagerMac" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.GraphicsContextMac" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.NavigationToolbar2Mac" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.RendererMac" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_macosx.TimerMac" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_nbagg.FigureCanvasNbAgg" -> "matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_nbagg.FigureManagerNbAgg" -> "matplotlib.backends.backend_webagg_core.FigureManagerWebAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_nbagg.NavigationIPy" -> "matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_nbagg.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_nbagg.TimerTornado" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pdf.FigureCanvasPdf" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pdf.FigureManagerPdf" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pdf.GraphicsContextPdf" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pdf.RendererPdf" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pgf.FigureCanvasPgf" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pgf.FigureManagerPgf" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pgf.GraphicsContextPgf" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_pgf.RendererPgf" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_ps.FigureCanvasPS" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_ps.FigureManagerPS" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_ps.GraphicsContextPS" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_ps.RendererPS" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt4.FigureCanvasQT" -> "matplotlib.backends.backend_qt5.FigureCanvasQT" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg" -> "matplotlib.backends.backend_qt4.FigureCanvasQT" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg" -> "matplotlib.backends.backend_qt5agg.FigureCanvasQTAggBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.FigureCanvasQT" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.FigureManagerQT" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.NavigationToolbar2QT" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.SubplotToolQt" -> "matplotlib.backends.qt_editor.formsubplottool.UiSubplotTool" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.SubplotToolQt" -> "matplotlib.widgets.SubplotTool" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5.TimerQT" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg" -> "matplotlib.backends.backend_qt5.FigureCanvasQT" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5agg.FigureCanvasQTAgg" -> "matplotlib.backends.backend_qt5agg.FigureCanvasQTAggBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_qt5agg.NavigationToolbar2QTAgg" -> "matplotlib.backends.backend_qt5.NavigationToolbar2QT" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_svg.FigureCanvasSVG" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_svg.FigureManagerSVG" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_svg.RendererSVG" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_template.FigureCanvasTemplate" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_template.FigureManagerTemplate" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_template.GraphicsContextTemplate" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_template.RendererTemplate" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_tkagg.FigureCanvasTkAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_tkagg.FigureManagerTkAgg" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_tkagg.NavigationToolbar2TkAgg" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_tkagg.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_tkagg.TimerTk" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_webagg.FigureCanvasWebAgg" -> "matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_webagg.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_webagg_core.FigureManagerWebAgg" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.FigureCanvasWx" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.FigureManagerWx" -> "matplotlib.backend_bases.FigureManagerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.GraphicsContextWx" -> "matplotlib.backend_bases.GraphicsContextBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.NavigationToolbar2Wx" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.RendererWx" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.Show" -> "matplotlib.backend_bases.ShowBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wx.TimerWx" -> "matplotlib.backend_bases.TimerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg" -> "matplotlib.backends.backend_wx.FigureCanvasWx" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wxagg.FigureFrameWxAgg" -> "matplotlib.backends.backend_wx.FigureFrameWx" [arrowhead="empty", arrowtail="none"];
"matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg" -> "matplotlib.backends.backend_wx.NavigationToolbar2Wx" [arrowhead="empty", arrowtail="none"];
"matplotlib.blocking_input.BlockingContourLabeler" -> "matplotlib.blocking_input.BlockingMouseInput" [arrowhead="empty", arrowtail="none"];
"matplotlib.blocking_input.BlockingKeyMouseInput" -> "matplotlib.blocking_input.BlockingInput" [arrowhead="empty", arrowtail="none"];
"matplotlib.blocking_input.BlockingMouseInput" -> "matplotlib.blocking_input.BlockingInput" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.Idle" -> "matplotlib.cbook.Scheduler" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.Timeout" -> "matplotlib.cbook.Scheduler" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.todate" -> "matplotlib.cbook.converter" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.todatetime" -> "matplotlib.cbook.converter" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.tofloat" -> "matplotlib.cbook.converter" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.toint" -> "matplotlib.cbook.converter" [arrowhead="empty", arrowtail="none"];
"matplotlib.cbook.tostr" -> "matplotlib.cbook.converter" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.AsteriskPolygonCollection" -> "matplotlib.collections.RegularPolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.BrokenBarHCollection" -> "matplotlib.collections.PolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.CircleCollection" -> "matplotlib.collections._CollectionWithSizes" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.Collection" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.Collection" -> "matplotlib.cm.ScalarMappable" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.EllipseCollection" -> "matplotlib.collections.Collection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.EventCollection" -> "matplotlib.collections.LineCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.LineCollection" -> "matplotlib.collections.Collection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.PatchCollection" -> "matplotlib.collections.Collection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.PathCollection" -> "matplotlib.collections._CollectionWithSizes" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.PolyCollection" -> "matplotlib.collections._CollectionWithSizes" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.QuadMesh" -> "matplotlib.collections.Collection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.RegularPolyCollection" -> "matplotlib.collections._CollectionWithSizes" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.StarPolygonCollection" -> "matplotlib.collections.RegularPolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections.TriMesh" -> "matplotlib.collections.Collection" [arrowhead="empty", arrowtail="none"];
"matplotlib.collections._CollectionWithSizes" -> "matplotlib.collections.Collection" [arrowhead="empty", arrowtail="none"];
"matplotlib.colorbar.Colorbar" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.colorbar.ColorbarBase" -> "matplotlib.cm.ScalarMappable" [arrowhead="empty", arrowtail="none"];
"matplotlib.colorbar.ColorbarPatch" -> "matplotlib.colorbar.Colorbar" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.BoundaryNorm" -> "matplotlib.colors.Normalize" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.LinearSegmentedColormap" -> "matplotlib.colors.Colormap" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.ListedColormap" -> "matplotlib.colors.Colormap" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.LogNorm" -> "matplotlib.colors.Normalize" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.NoNorm" -> "matplotlib.colors.Normalize" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.PowerNorm" -> "matplotlib.colors.Normalize" [arrowhead="empty", arrowtail="none"];
"matplotlib.colors.SymLogNorm" -> "matplotlib.colors.Normalize" [arrowhead="empty", arrowtail="none"];
"matplotlib.container.BarContainer" -> "matplotlib.container.Container" [arrowhead="empty", arrowtail="none"];
"matplotlib.container.ErrorbarContainer" -> "matplotlib.container.Container" [arrowhead="empty", arrowtail="none"];
"matplotlib.container.StemContainer" -> "matplotlib.container.Container" [arrowhead="empty", arrowtail="none"];
"matplotlib.contour.ClabelText" -> "matplotlib.text.Text" [arrowhead="empty", arrowtail="none"];
"matplotlib.contour.ContourSet" -> "matplotlib.cm.ScalarMappable" [arrowhead="empty", arrowtail="none"];
"matplotlib.contour.ContourSet" -> "matplotlib.contour.ContourLabeler" [arrowhead="empty", arrowtail="none"];
"matplotlib.contour.QuadContourSet" -> "matplotlib.contour.ContourSet" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.AutoDateFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.AutoDateLocator" -> "matplotlib.dates.DateLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.DateConverter" -> "matplotlib.units.ConversionInterface" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.DateFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.DateLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.DayLocator" -> "matplotlib.dates.RRuleLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.HourLocator" -> "matplotlib.dates.RRuleLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.IndexDateFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.MicrosecondLocator" -> "matplotlib.dates.DateLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.MinuteLocator" -> "matplotlib.dates.RRuleLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.MonthLocator" -> "matplotlib.dates.RRuleLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.RRuleLocator" -> "matplotlib.dates.DateLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.SecondLocator" -> "matplotlib.dates.RRuleLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.WeekdayLocator" -> "matplotlib.dates.RRuleLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.dates.YearLocator" -> "matplotlib.dates.DateLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.delaunay.testfuncs.NNTester" -> "matplotlib.delaunay.testfuncs.LinearTester" [arrowhead="empty", arrowtail="none"];
"matplotlib.dviread.Vf" -> "matplotlib.dviread.Dvi" [arrowhead="empty", arrowtail="none"];
"matplotlib.figure.AxesStack" -> "matplotlib.cbook.Stack" [arrowhead="empty", arrowtail="none"];
"matplotlib.figure.Figure" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.gridspec.GridSpec" -> "matplotlib.gridspec.GridSpecBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.gridspec.GridSpecFromSubplotSpec" -> "matplotlib.gridspec.GridSpecBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.Circles" -> "matplotlib.hatch.Shapes" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.HorizontalHatch" -> "matplotlib.hatch.HatchPatternBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.LargeCircles" -> "matplotlib.hatch.Circles" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.NorthEastHatch" -> "matplotlib.hatch.HatchPatternBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.Shapes" -> "matplotlib.hatch.HatchPatternBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.SmallCircles" -> "matplotlib.hatch.Circles" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.SmallFilledCircles" -> "matplotlib.hatch.SmallCircles" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.SouthEastHatch" -> "matplotlib.hatch.HatchPatternBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.Stars" -> "matplotlib.hatch.Shapes" [arrowhead="empty", arrowtail="none"];
"matplotlib.hatch.VerticalHatch" -> "matplotlib.hatch.HatchPatternBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.AxesImage" -> "matplotlib.image._AxesImageBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.BboxImage" -> "matplotlib.image._AxesImageBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.FigureImage" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.FigureImage" -> "matplotlib.cm.ScalarMappable" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.NonUniformImage" -> "matplotlib.image.AxesImage" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.PcolorImage" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.image.PcolorImage" -> "matplotlib.cm.ScalarMappable" [arrowhead="empty", arrowtail="none"];
"matplotlib.image._AxesImageBase" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.image._AxesImageBase" -> "matplotlib.cm.ScalarMappable" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend.DraggableLegend" -> "matplotlib.offsetbox.DraggableOffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend.Legend" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerCircleCollection" -> "matplotlib.legend_handler.HandlerRegularPolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerErrorbar" -> "matplotlib.legend_handler.HandlerLine2D" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerLine2D" -> "matplotlib.legend_handler.HandlerNpoints" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerLineCollection" -> "matplotlib.legend_handler.HandlerLine2D" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerNpoints" -> "matplotlib.legend_handler.HandlerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerNpointsYoffsets" -> "matplotlib.legend_handler.HandlerNpoints" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerPatch" -> "matplotlib.legend_handler.HandlerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerPathCollection" -> "matplotlib.legend_handler.HandlerRegularPolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerRegularPolyCollection" -> "matplotlib.legend_handler.HandlerNpointsYoffsets" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerStem" -> "matplotlib.legend_handler.HandlerNpointsYoffsets" [arrowhead="empty", arrowtail="none"];
"matplotlib.legend_handler.HandlerTuple" -> "matplotlib.legend_handler.HandlerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.lines.Line2D" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Accent" -> "matplotlib.mathtext.Char" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.AutoHeightChar" -> "matplotlib.mathtext.Hlist" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.AutoWidthChar" -> "matplotlib.mathtext.Hlist" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.BakomaFonts" -> "matplotlib.mathtext.TruetypeFonts" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Box" -> "matplotlib.mathtext.Node" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Char" -> "matplotlib.mathtext.Node" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Fil" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Fill" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Filll" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Glue" -> "matplotlib.mathtext.Node" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.HCentered" -> "matplotlib.mathtext.Hlist" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Hbox" -> "matplotlib.mathtext.Box" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Hlist" -> "matplotlib.mathtext.List" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Hrule" -> "matplotlib.mathtext.Rule" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Kern" -> "matplotlib.mathtext.Node" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.List" -> "matplotlib.mathtext.Box" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendAgg" -> "matplotlib.mathtext.MathtextBackend" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendBitmap" -> "matplotlib.mathtext.MathtextBackendAgg" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendCairo" -> "matplotlib.mathtext.MathtextBackend" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendPath" -> "matplotlib.mathtext.MathtextBackend" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendPdf" -> "matplotlib.mathtext.MathtextBackend" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendPs" -> "matplotlib.mathtext.MathtextBackend" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.MathtextBackendSvg" -> "matplotlib.mathtext.MathtextBackend" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.NegFil" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.NegFill" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.NegFilll" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Rule" -> "matplotlib.mathtext.Box" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.SsGlue" -> "matplotlib.mathtext.Glue" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.StandardPsFonts" -> "matplotlib.mathtext.Fonts" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.StixFonts" -> "matplotlib.mathtext.UnicodeFonts" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.StixSansFonts" -> "matplotlib.mathtext.StixFonts" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.SubSuperCluster" -> "matplotlib.mathtext.Hlist" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.TruetypeFonts" -> "matplotlib.mathtext.Fonts" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.UnicodeFonts" -> "matplotlib.mathtext.TruetypeFonts" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.VCentered" -> "matplotlib.mathtext.Hlist" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Vbox" -> "matplotlib.mathtext.Box" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Vlist" -> "matplotlib.mathtext.List" [arrowhead="empty", arrowtail="none"];
"matplotlib.mathtext.Vrule" -> "matplotlib.mathtext.Rule" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatBool" -> "matplotlib.mlab.FormatObj" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatDate" -> "matplotlib.mlab.FormatObj" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatDatetime" -> "matplotlib.mlab.FormatDate" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatFloat" -> "matplotlib.mlab.FormatFormatStr" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatFormatStr" -> "matplotlib.mlab.FormatObj" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatInt" -> "matplotlib.mlab.FormatObj" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatMillions" -> "matplotlib.mlab.FormatFloat" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatPercent" -> "matplotlib.mlab.FormatFloat" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatString" -> "matplotlib.mlab.FormatObj" [arrowhead="empty", arrowtail="none"];
"matplotlib.mlab.FormatThousands" -> "matplotlib.mlab.FormatFloat" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.AnchoredOffsetbox" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.AnchoredText" -> "matplotlib.offsetbox.AnchoredOffsetbox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.AnnotationBbox" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.AnnotationBbox" -> "matplotlib.text._AnnotationBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.AuxTransformBox" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.DraggableAnnotation" -> "matplotlib.offsetbox.DraggableBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.DraggableOffsetBox" -> "matplotlib.offsetbox.DraggableBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.DrawingArea" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.HPacker" -> "matplotlib.offsetbox.PackerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.OffsetBox" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.OffsetImage" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.PackerBase" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.PaddedBox" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.TextArea" -> "matplotlib.offsetbox.OffsetBox" [arrowhead="empty", arrowtail="none"];
"matplotlib.offsetbox.VPacker" -> "matplotlib.offsetbox.PackerBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Arc" -> "matplotlib.patches.Ellipse" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Arrow" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle" -> "matplotlib.patches._Style" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.BarAB" -> "matplotlib.patches.ArrowStyle._Bracket" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.BracketA" -> "matplotlib.patches.ArrowStyle._Bracket" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.BracketAB" -> "matplotlib.patches.ArrowStyle._Bracket" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.BracketB" -> "matplotlib.patches.ArrowStyle._Bracket" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.Curve" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.CurveA" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.CurveAB" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.CurveB" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.CurveFilledA" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.CurveFilledAB" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.CurveFilledB" -> "matplotlib.patches.ArrowStyle._Curve" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.Fancy" -> "matplotlib.patches.ArrowStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.Simple" -> "matplotlib.patches.ArrowStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle.Wedge" -> "matplotlib.patches.ArrowStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle._Bracket" -> "matplotlib.patches.ArrowStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ArrowStyle._Curve" -> "matplotlib.patches.ArrowStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle" -> "matplotlib.patches._Style" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.Circle" -> "matplotlib.patches.BoxStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.LArrow" -> "matplotlib.patches.BoxStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.RArrow" -> "matplotlib.patches.BoxStyle.LArrow" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.Round" -> "matplotlib.patches.BoxStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.Round4" -> "matplotlib.patches.BoxStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.Roundtooth" -> "matplotlib.patches.BoxStyle.Sawtooth" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.Sawtooth" -> "matplotlib.patches.BoxStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.BoxStyle.Square" -> "matplotlib.patches.BoxStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Circle" -> "matplotlib.patches.Ellipse" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.CirclePolygon" -> "matplotlib.patches.RegularPolygon" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionPatch" -> "matplotlib.patches.FancyArrowPatch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionStyle" -> "matplotlib.patches._Style" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionStyle.Angle" -> "matplotlib.patches.ConnectionStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionStyle.Angle3" -> "matplotlib.patches.ConnectionStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionStyle.Arc" -> "matplotlib.patches.ConnectionStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionStyle.Arc3" -> "matplotlib.patches.ConnectionStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.ConnectionStyle.Bar" -> "matplotlib.patches.ConnectionStyle._Base" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Ellipse" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.FancyArrow" -> "matplotlib.patches.Polygon" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.FancyArrowPatch" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.FancyBboxPatch" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Patch" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.PathPatch" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Polygon" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Rectangle" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.RegularPolygon" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Shadow" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.Wedge" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patches.YAArrow" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.Normal" -> "matplotlib.patheffects.AbstractPathEffect" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.PathEffectRenderer" -> "matplotlib.backend_bases.RendererBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.PathPatchEffect" -> "matplotlib.patheffects.AbstractPathEffect" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.SimpleLineShadow" -> "matplotlib.patheffects.AbstractPathEffect" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.SimplePatchShadow" -> "matplotlib.patheffects.AbstractPathEffect" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.Stroke" -> "matplotlib.patheffects.AbstractPathEffect" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.withSimplePatchShadow" -> "matplotlib.patheffects.SimplePatchShadow" [arrowhead="empty", arrowtail="none"];
"matplotlib.patheffects.withStroke" -> "matplotlib.patheffects.Stroke" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.AitoffAxes" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.AitoffAxes.AitoffTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.AitoffAxes.InvertedAitoffTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.GeoAxes" -> "matplotlib.axes._axes.Axes" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.GeoAxes.ThetaFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.HammerAxes" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.HammerAxes.HammerTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.HammerAxes.InvertedHammerTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.LambertAxes" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.LambertAxes.InvertedLambertTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.LambertAxes.LambertTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.MollweideAxes" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.MollweideAxes.InvertedMollweideTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.geo.MollweideAxes.MollweideTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.polar.InvertedPolarTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.polar.PolarAffine" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.polar.PolarAxes" -> "matplotlib.axes._axes.Axes" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.polar.PolarTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.polar.RadialLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.projections.polar.ThetaFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.quiver.Barbs" -> "matplotlib.collections.PolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.quiver.Quiver" -> "matplotlib.collections.PolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.quiver.QuiverKey" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.InvertedLog10Transform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.InvertedLog2Transform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.InvertedLogTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.InvertedNaturalLogTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.InvertedSymmetricalLogTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.LinearScale" -> "matplotlib.scale.ScaleBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.Log10Transform" -> "matplotlib.scale.LogTransformBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.Log2Transform" -> "matplotlib.scale.LogTransformBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.LogScale" -> "matplotlib.scale.ScaleBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.LogTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.LogTransformBase" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.NaturalLogTransform" -> "matplotlib.scale.LogTransformBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.SymmetricalLogScale" -> "matplotlib.scale.ScaleBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.scale.SymmetricalLogTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.sphinxext.only_directives.html_only" -> "matplotlib.sphinxext.only_directives.only_base" [arrowhead="empty", arrowtail="none"];
"matplotlib.sphinxext.only_directives.latex_only" -> "matplotlib.sphinxext.only_directives.only_base" [arrowhead="empty", arrowtail="none"];
"matplotlib.spines.Spine" -> "matplotlib.patches.Patch" [arrowhead="empty", arrowtail="none"];
"matplotlib.table.Cell" -> "matplotlib.patches.Rectangle" [arrowhead="empty", arrowtail="none"];
"matplotlib.table.Table" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.testing.decorators.ImageComparisonTest" -> "matplotlib.testing.decorators.CleanupTest" [arrowhead="empty", arrowtail="none"];
"matplotlib.testing.jpl_units.EpochConverter.EpochConverter" -> "matplotlib.units.ConversionInterface" [arrowhead="empty", arrowtail="none"];
"matplotlib.testing.jpl_units.StrConverter.StrConverter" -> "matplotlib.units.ConversionInterface" [arrowhead="empty", arrowtail="none"];
"matplotlib.testing.jpl_units.UnitDblConverter.UnitDblConverter" -> "matplotlib.units.ConversionInterface" [arrowhead="empty", arrowtail="none"];
"matplotlib.testing.jpl_units.UnitDblFormatter.UnitDblFormatter" -> "matplotlib.ticker.ScalarFormatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_collections.test_regularpolycollection_scale.SquareCollection" -> "matplotlib.collections.RegularPolyCollection" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_delaunay.NNTester" -> "matplotlib.tests.test_delaunay.LinearTester" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_figure.test_iterability_axes_argument.MyAxes" -> "matplotlib.axes._axes.Axes" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.csv_testcase" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.detrend_testcase" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.general_testcase" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spacing_testcase" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_complex_defaultsided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_complex_onesided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_complex_twosided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_real_defaultsided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_real_onesided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_Fs4_real_twosided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_complex_defaultsided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_complex_onesided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_complex_twosided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_real_defaultsided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_real_onesided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_FsAll_real_twosided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_noNFFT" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_noNFFT_no_pad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_nopad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_odd" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_oddlen" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_overlap" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_stretch" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_defaultsided_trim" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_noNFFT" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_noNFFT_no_pad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_nopad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_odd" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_oddlen" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_overlap" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_stretch" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_onesided_trim" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_noNFFT" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_noNFFT_no_pad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_nopad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_odd" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_oddlen" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_overlap" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_stretch" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_complex_twosided_trim" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_noNFFT" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_noNFFT_no_pad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_nopad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_odd" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_oddlen" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_overlap" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_stretch" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_defaultsided_trim" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_noNFFT" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_noNFFT_no_pad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_nopad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_odd" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_oddlen" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_overlap" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_stretch" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided_trim" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_noNFFT" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_noNFFT_no_pad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_nopad_to" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_odd" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_oddlen" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_overlap" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_stretch" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.spectral_testcase_nosig_real_twosided_trim" -> "matplotlib.tests.test_mlab.spectral_testcase_nosig_real_onesided" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.stride_testcase" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_mlab.window_testcase" -> "matplotlib.testing.decorators.CleanupTestCase" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_skew.SkewSpine" -> "matplotlib.spines.Spine" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_skew.SkewXAxes" -> "matplotlib.axes._axes.Axes" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_skew.SkewXAxis" -> "matplotlib.axis.XAxis" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_skew.SkewXTick" -> "matplotlib.axis.XTick" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_transforms.NonAffineForTest" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.tests.test_transforms.test_non_affine_caching.AssertingNonAffineTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.text.Annotation" -> "matplotlib.text.Text" [arrowhead="empty", arrowtail="none"];
"matplotlib.text.Annotation" -> "matplotlib.text._AnnotationBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.text.Text" -> "matplotlib.artist.Artist" [arrowhead="empty", arrowtail="none"];
"matplotlib.text.TextWithDash" -> "matplotlib.text.Text" [arrowhead="empty", arrowtail="none"];
"matplotlib.textpath.TextPath" -> "matplotlib.path.Path" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.AutoLocator" -> "matplotlib.ticker.MaxNLocator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.AutoMinorLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.EngFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.FixedFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.FixedLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.FormatStrFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.Formatter" -> "matplotlib.ticker.TickHelper" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.FuncFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.IndexFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.IndexLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.LinearLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.Locator" -> "matplotlib.ticker.TickHelper" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.LogFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.LogFormatterExponent" -> "matplotlib.ticker.LogFormatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.LogFormatterMathtext" -> "matplotlib.ticker.LogFormatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.LogLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.MaxNLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.MultipleLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.NullFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.NullLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.OldAutoLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.OldScalarFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.ScalarFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.StrMethodFormatter" -> "matplotlib.ticker.Formatter" [arrowhead="empty", arrowtail="none"];
"matplotlib.ticker.SymmetricalLogLocator" -> "matplotlib.ticker.Locator" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.Affine2D" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.Affine2DBase" -> "matplotlib.transforms.AffineBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.AffineBase" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.Bbox" -> "matplotlib.transforms.BboxBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BboxBase" -> "matplotlib.transforms.TransformNode" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BboxTransform" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BboxTransformFrom" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BboxTransformTo" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BboxTransformToMaxOnly" -> "matplotlib.transforms.BboxTransformTo" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BlendedAffine2D" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.BlendedGenericTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.CompositeAffine2D" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.CompositeGenericTransform" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.ScaledTranslation" -> "matplotlib.transforms.Affine2DBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.Transform" -> "matplotlib.transforms.TransformNode" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.TransformWrapper" -> "matplotlib.transforms.Transform" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.TransformedBbox" -> "matplotlib.transforms.BboxBase" [arrowhead="empty", arrowtail="none"];
"matplotlib.transforms.TransformedPath" -> "matplotlib.transforms.TransformNode" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.tricontour.TriContourSet" -> "matplotlib.contour.ContourSet" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.trifinder.TrapezoidMapTriFinder" -> "matplotlib.tri.trifinder.TriFinder" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.triinterpolate.CubicTriInterpolator" -> "matplotlib.tri.triinterpolate.TriInterpolator" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.triinterpolate.LinearTriInterpolator" -> "matplotlib.tri.triinterpolate.TriInterpolator" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.triinterpolate._DOF_estimator_geom" -> "matplotlib.tri.triinterpolate._DOF_estimator" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.triinterpolate._DOF_estimator_min_E" -> "matplotlib.tri.triinterpolate._DOF_estimator_geom" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.triinterpolate._DOF_estimator_user" -> "matplotlib.tri.triinterpolate._DOF_estimator" [arrowhead="empty", arrowtail="none"];
"matplotlib.tri.trirefine.UniformTriRefiner" -> "matplotlib.tri.trirefine.TriRefiner" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.AxesWidget" -> "matplotlib.widgets.Widget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.Button" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.CheckButtons" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.Cursor" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.Lasso" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.LassoSelector" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.MultiCursor" -> "matplotlib.widgets.Widget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.RadioButtons" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.RectangleSelector" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.SpanSelector" -> "matplotlib.widgets.AxesWidget" [arrowhead="empty", arrowtail="none"];
"matplotlib.widgets.SubplotTool" -> "matplotlib.widgets.Widget" [arrowhead="empty", arrowtail="none"];
"matplotlib.axes._base._process_plot_var_args" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_get_lines", style="solid"];
"matplotlib.axes._base._process_plot_var_args" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_get_patches_for_fill", style="solid"];
"matplotlib.axis.Ticker" -> "matplotlib.axis.Axis" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="major", style="solid"];
"matplotlib.axis.Ticker" -> "matplotlib.axis.Axis" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="minor", style="solid"];
"matplotlib.axis.XAxis" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xaxis", style="solid"];
"matplotlib.axis.XAxis" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xaxis", style="solid"];
"matplotlib.axis.XAxis" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xaxis", style="solid"];
"matplotlib.axis.YAxis" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="yaxis", style="solid"];
"matplotlib.axis.YAxis" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="yaxis", style="solid"];
"matplotlib.axis.YAxis" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="yaxis", style="solid"];
"matplotlib.axis.YAxis" -> "matplotlib.tests.test_skew.SkewXAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="yaxis", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="renderer", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_agg.FigureCanvasAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="renderer", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_mixed.MixedModeRenderer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_raster_renderer", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_last_renderer", style="solid"];
"matplotlib.backends.backend_agg.RendererAgg" -> "matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_last_renderer", style="solid"];
"matplotlib.backends.backend_cairo.GraphicsContextCairo" -> "matplotlib.backends.backend_cairo.RendererCairo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gc", style="solid"];
"matplotlib.backends.backend_gdk.RendererGDK" -> "matplotlib.backends.backend_gdk.FigureCanvasGDK" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer", style="solid"];
"matplotlib.backends.backend_gdk.RendererGDK" -> "matplotlib.backends.backend_gtk.FigureCanvasGTK" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer", style="solid"];
"matplotlib.backends.backend_gtk.NavigationToolbar2GTK" -> "matplotlib.backends.backend_gtk.FigureManagerGTK" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_gtk3.NavigationToolbar2GTK3" -> "matplotlib.backends.backend_gtk3.FigureManagerGTK3" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_gtk3cairo.RendererGTK3Cairo" -> "matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer", style="solid"];
"matplotlib.backends.backend_gtkcairo.RendererGTKCairo" -> "matplotlib.backends.backend_gtkcairo.FigureCanvasGTKCairo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer", style="solid"];
"matplotlib.backends.backend_macosx.GraphicsContextMac" -> "matplotlib.backends.backend_macosx.RendererMac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gc", style="solid"];
"matplotlib.backends.backend_macosx.NavigationToolbar2Mac" -> "matplotlib.backends.backend_macosx.FigureManagerMac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_macosx.RendererMac" -> "matplotlib.backends.backend_macosx.FigureCanvasMac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="renderer", style="solid"];
"matplotlib.backends.backend_nbagg.NavigationIPy" -> "matplotlib.backends.backend_nbagg.FigureManagerNbAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ToolbarCls", style="solid"];
"matplotlib.backends.backend_pdf.GraphicsContextPdf" -> "matplotlib.backends.backend_pdf.GraphicsContextPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"matplotlib.backends.backend_pdf.GraphicsContextPdf" -> "matplotlib.backends.backend_pdf.GraphicsContextPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"matplotlib.backends.backend_pdf.GraphicsContextPdf" -> "matplotlib.backends.backend_pdf.RendererPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gc", style="solid"];
"matplotlib.backends.backend_pdf.PdfFile" -> "matplotlib.backends.backend_pdf.PdfPages" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_file", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rootObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pagesObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fontObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="alphaStateObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="hatchObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gouraudObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="XObjectObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="resourceObject", style="solid"];
"matplotlib.backends.backend_pdf.Reference" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="infoObject", style="solid"];
"matplotlib.backends.backend_pdf.Stream" -> "matplotlib.backends.backend_pdf.PdfFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="currentstream", style="solid"];
"matplotlib.backends.backend_pgf.LatexManager" -> "matplotlib.backends.backend_pgf.RendererPgf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="latexManager", style="solid"];
"matplotlib.backends.backend_pgf.WeakSet" -> "matplotlib.backends.backend_pgf.LatexManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_unclean_instances", style="solid"];
"matplotlib.backends.backend_ps.FigureCanvasPS._print_figure.NullWriter" -> "matplotlib.backends.backend_ps.FigureCanvasPS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_pswriter", style="solid"];
"matplotlib.backends.backend_ps.FigureCanvasPS._print_figure_tex.NullWriter" -> "matplotlib.backends.backend_ps.FigureCanvasPS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_pswriter", style="solid"];
"matplotlib.backends.backend_ps.RendererPS" -> "matplotlib.backends.backend_ps.FigureCanvasPS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_renderer_class", style="solid"];
"matplotlib.backends.backend_qt5.MainWindow" -> "matplotlib.backends.backend_qt5.FigureManagerQT" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="window", style="solid"];
"matplotlib.backends.backend_qt5.NavigationToolbar2QT" -> "matplotlib.backends.backend_qt5.FigureManagerQT" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_svg.XMLWriter" -> "matplotlib.backends.backend_svg.RendererSVG" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="writer", style="solid"];
"matplotlib.backends.backend_tkagg.NavigationToolbar2TkAgg" -> "matplotlib.backends.backend_tkagg.FigureManagerTkAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg" -> "matplotlib.backends.backend_webagg_core.FigureManagerWebAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg" -> "matplotlib.backends.backend_webagg_core.FigureManagerWebAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ToolbarCls", style="solid"];
"matplotlib.backends.backend_wx.FigureCanvasWx" -> "matplotlib.backends.backend_wx.FigureFrameWx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="canvas", style="solid"];
"matplotlib.backends.backend_wx.FigureManagerWx" -> "matplotlib.backends.backend_wx.FigureFrameWx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="figmgr", style="solid"];
"matplotlib.backends.backend_wx.GraphicsContextWx" -> "matplotlib.backends.backend_wx.RendererWx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gc", style="solid"];
"matplotlib.backends.backend_wx.NavigationToolbar2Wx" -> "matplotlib.backends.backend_wx.FigureFrameWx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="toolbar", style="solid"];
"matplotlib.backends.backend_wx.RendererWx" -> "matplotlib.backends.backend_wx.FigureCanvasWx" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="renderer", style="solid"];
"matplotlib.backends.qt_editor.formlayout.ColorButton" -> "matplotlib.backends.qt_editor.formlayout.ColorLayout" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colorbtn", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormComboWidget" -> "matplotlib.backends.qt_editor.formlayout.FormDialog" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formwidget", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormTabWidget" -> "matplotlib.backends.qt_editor.formlayout.FormDialog" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formwidget", style="solid"];
"matplotlib.backends.qt_editor.formlayout.FormWidget" -> "matplotlib.backends.qt_editor.formlayout.FormDialog" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formwidget", style="solid"];
"matplotlib.cbook.Bunch" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_pan_start", style="solid"];
"matplotlib.cbook.Bunch" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_pan_start", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.axis.Axis" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.axis.Axis" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.cm.ScalarMappable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacksSM", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"matplotlib.cbook.CallbackRegistry" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="callbacks", style="solid"];
"matplotlib.cbook.Grouper" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_shared_x_axes", style="solid"];
"matplotlib.cbook.Grouper" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_shared_y_axes", style="solid"];
"matplotlib.cbook.Stack" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_views", style="solid"];
"matplotlib.cbook.Stack" -> "matplotlib.backend_bases.NavigationToolbar2" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_positions", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_agg.RendererAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="texd", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_agg.RendererAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_fontd", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_macosx.RendererMac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="texd", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_pdf.RendererPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="truetype_font_cache", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_pdf.RendererPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="afm_font_cache", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_ps.RendererPS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fontd", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_ps.RendererPS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="afmfontd", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.backends.backend_svg.RendererSVG" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="fontd", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.mathtext.MathTextParser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cache", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.path.Path" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_hatch_dict", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.text.Text" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_cached", style="solid"];
"matplotlib.cbook.maxdict" -> "matplotlib.textpath.TextToPath" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ps_fontd", style="solid"];
"matplotlib.cbook.silent_list" -> "matplotlib.contour.ContourLabeler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="labelTextsList", style="solid"];
"matplotlib.cbook.silent_list" -> "matplotlib.contour.ContourSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="collections", style="solid"];
"matplotlib.cbook.silent_list" -> "matplotlib.contour.ContourSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="collections", style="solid"];
"matplotlib.cm.ScalarMappable" -> "matplotlib.contour.ContourLabeler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="labelMappable", style="solid"];
"matplotlib.collections.LineCollection" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dividers", style="solid"];
"matplotlib.collections.LineCollection" -> "matplotlib.colorbar.ColorbarPatch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dividers", style="solid"];
"matplotlib.collections.PolyCollection" -> "matplotlib.quiver.QuiverKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vector", style="solid"];
"matplotlib.colors.LinearSegmentedColormap" -> "matplotlib.cm.ScalarMappable" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cmap", style="solid"];
"matplotlib.dates.DateFormatter" -> "matplotlib.dates.AutoDateFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_formatter", style="solid"];
"matplotlib.dates.DateFormatter" -> "matplotlib.dates.AutoDateFormatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_formatter", style="solid"];
"matplotlib.dates.MicrosecondLocator" -> "matplotlib.dates.AutoDateLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.dates.MicrosecondLocator" -> "matplotlib.dates.AutoDateLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.dates.RRuleLocator" -> "matplotlib.dates.AutoDateLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.dates.RRuleLocator" -> "matplotlib.dates.AutoDateLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.dates.YearLocator" -> "matplotlib.dates.AutoDateLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.delaunay.triangulate.Triangulation" -> "matplotlib.delaunay.testfuncs.LinearTester" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tri", style="solid"];
"matplotlib.delaunay.triangulate.Triangulation" -> "matplotlib.delaunay.testfuncs.LinearTester" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tri", style="solid"];
"matplotlib.delaunay.triangulate.Triangulation" -> "matplotlib.tests.test_delaunay.LinearTester" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tri", style="solid"];
"matplotlib.delaunay.triangulate.Triangulation" -> "matplotlib.tests.test_delaunay.LinearTester" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tri", style="solid"];
"matplotlib.dviread.PsfontsMap" -> "matplotlib.backends.backend_pdf.RendererPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tex_font_map", style="solid"];
"matplotlib.dviread.PsfontsMap" -> "matplotlib.textpath.TextToPath" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tex_font_map", style="solid"];
"matplotlib.figure.AxesStack" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_axstack", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.contour.ContourLabeler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="labelFontProps", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prop", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prop", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prop", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.offsetbox.AnchoredOffsetbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prop", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.offsetbox.AnchoredOffsetbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prop", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.offsetbox.AnnotationBbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="prop", style="solid"];
"matplotlib.gridspec.SubplotSpec" -> "matplotlib.axes._subplots.SubplotBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_subplotspec", style="solid"];
"matplotlib.image.BboxImage" -> "matplotlib.offsetbox.OffsetImage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="image", style="solid"];
"matplotlib.legend.DraggableLegend" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_draggable", style="solid"];
"matplotlib.legend.Legend" -> "matplotlib.axes._axes.Axes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="legend_", style="solid"];
"matplotlib.lines.Line2D" -> "matplotlib.text.TextWithDash" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dashline", style="solid"];
"matplotlib.lines.Line2D" -> "matplotlib.widgets.Lasso" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="line", style="solid"];
"matplotlib.lines.Line2D" -> "matplotlib.widgets.LassoSelector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="line", style="solid"];
"matplotlib.lines.Line2D" -> "matplotlib.widgets.RectangleSelector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="to_draw", style="solid"];
"matplotlib.markers.MarkerStyle" -> "matplotlib.lines.Line2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_marker", style="solid"];
"matplotlib.markers.MarkerStyle" -> "matplotlib.lines.Line2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_marker", style="solid"];
"matplotlib.mathtext.BakomaFonts" -> "matplotlib.mathtext.UnicodeFonts" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cm_fallback", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_agg.RendererAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_cairo.RendererCairo" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_gdk.RendererGDK" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_macosx.RendererMac" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_pdf.RendererPdf" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_ps.RendererPS" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.backends.backend_svg.RendererSVG" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.contour.ContourLabeler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_mathtext_parser", style="solid"];
"matplotlib.mathtext.MathTextParser" -> "matplotlib.textpath.TextToPath" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mathtext_parser", style="solid"];
"matplotlib.mathtext.StixFonts" -> "matplotlib.mathtext.BakomaFonts" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_stix_fallback", style="solid"];
"matplotlib.offsetbox.DraggableAnnotation" -> "matplotlib.text._AnnotationBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_draggable", style="solid"];
"matplotlib.offsetbox.HPacker" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_legend_handle_box", style="solid"];
"matplotlib.offsetbox.TextArea" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_legend_title_box", style="solid"];
"matplotlib.offsetbox.TextArea" -> "matplotlib.offsetbox.AnchoredText" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="txt", style="solid"];
"matplotlib.offsetbox.VPacker" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_legend_box", style="solid"];
"matplotlib.patches.ArrowStyle" -> "matplotlib.patches.FancyArrowPatch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_arrow_transmuter", style="solid"];
"matplotlib.patches.BoxStyle" -> "matplotlib.patches.FancyBboxPatch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox_transmuter", style="solid"];
"matplotlib.patches.ConnectionStyle" -> "matplotlib.patches.FancyArrowPatch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_connector", style="solid"];
"matplotlib.patches.FancyArrowPatch" -> "matplotlib.offsetbox.AnnotationBbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arrow_patch", style="solid"];
"matplotlib.patches.FancyArrowPatch" -> "matplotlib.text.Annotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arrow_patch", style="solid"];
"matplotlib.patches.FancyBboxPatch" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="legendPatch", style="solid"];
"matplotlib.patches.FancyBboxPatch" -> "matplotlib.offsetbox.AnchoredOffsetbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.FancyBboxPatch" -> "matplotlib.offsetbox.AnnotationBbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.FancyBboxPatch" -> "matplotlib.offsetbox.PaddedBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.FancyBboxPatch" -> "matplotlib.text.Text" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox_patch", style="solid"];
"matplotlib.patches.PathPatch" -> "matplotlib.patheffects.PathPatchEffect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.Polygon" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outline", style="solid"];
"matplotlib.patches.Polygon" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="axesPatch", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="patch", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="figurePatch", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.widgets.RectangleSelector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="to_draw", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.widgets.SpanSelector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rect", style="solid"];
"matplotlib.patches.Rectangle" -> "matplotlib.widgets.SpanSelector" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stay_rect", style="solid"];
"matplotlib.patches.YAArrow" -> "matplotlib.text.Annotation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="arrow", style="solid"];
"matplotlib.path.Path" -> "matplotlib.lines.Line2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_triangle_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_triangle_path_u", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_triangle_path_d", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_triangle_path_l", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_triangle_path_r", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_line_marker_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tickhoriz_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tickvert_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_plus_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tri_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_caret_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_x_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.patches.Arc" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.patches.Arrow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.patches.Polygon" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.patches.Wedge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
"matplotlib.path.Path" -> "matplotlib.transforms.TransformedPath" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transformed_points", style="solid"];
"matplotlib.projections.polar.PolarAffine" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transProjectionAffine", style="solid"];
"matplotlib.projections.polar.PolarTransform" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transProjection", style="solid"];
"matplotlib.projections.polar.PolarTransform" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transPureProjection", style="solid"];
"matplotlib.scale.InvertedLog10Transform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InvertedLog10Transform", style="solid"];
"matplotlib.scale.InvertedLog2Transform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InvertedLog2Transform", style="solid"];
"matplotlib.scale.InvertedLogTransform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InvertedLogTransform", style="solid"];
"matplotlib.scale.InvertedNaturalLogTransform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InvertedNaturalLogTransform", style="solid"];
"matplotlib.scale.InvertedSymmetricalLogTransform" -> "matplotlib.scale.SymmetricalLogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="InvertedSymmetricalLogTransform", style="solid"];
"matplotlib.scale.Log10Transform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.scale.Log10Transform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Log10Transform", style="solid"];
"matplotlib.scale.Log2Transform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.scale.Log2Transform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Log2Transform", style="solid"];
"matplotlib.scale.LogTransform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.scale.LogTransform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="LogTransform", style="solid"];
"matplotlib.scale.LogTransformBase" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="LogTransformBase", style="solid"];
"matplotlib.scale.NaturalLogTransform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.scale.NaturalLogTransform" -> "matplotlib.scale.LogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="NaturalLogTransform", style="solid"];
"matplotlib.scale.SymmetricalLogTransform" -> "matplotlib.scale.SymmetricalLogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.scale.SymmetricalLogTransform" -> "matplotlib.scale.SymmetricalLogScale" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SymmetricalLogTransform", style="solid"];
"matplotlib.sphinxext.ipython_directive.EmbeddedSphinxShell" -> "matplotlib.sphinxext.ipython_directive.IpythonDirective" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shell", style="solid"];
"matplotlib.tests.test_skew.SkewXAxis" -> "matplotlib.tests.test_skew.SkewXAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="xaxis", style="solid"];
"matplotlib.tests.test_ticker.test_LogFormatterExponent.FakeAxis" -> "matplotlib.ticker.LogFormatterExponent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="axis", style="solid"];
"matplotlib.tests.test_ticker.test_LogFormatterExponent.FakeAxis" -> "matplotlib.ticker.LogFormatterExponent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="axis", style="solid"];
"matplotlib.tests.test_ticker.test_LogFormatterExponent.FakeAxis" -> "matplotlib.ticker.LogFormatterExponent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="axis", style="solid"];
"matplotlib.tests.test_transforms.NonAffineForTest" -> "matplotlib.tests.test_transforms.BasicTransformTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tn1", style="solid"];
"matplotlib.tests.test_transforms.NonAffineForTest" -> "matplotlib.tests.test_transforms.BasicTransformTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tn2", style="solid"];
"matplotlib.tests.test_transforms.NonAffineForTest" -> "matplotlib.tests.test_transforms.BasicTransformTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tn3", style="solid"];
"matplotlib.texmanager.TexManager" -> "matplotlib.backend_bases.RendererBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_texmanager", style="solid"];
"matplotlib.texmanager.TexManager" -> "matplotlib.contour.ContourLabeler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_TeX_manager", style="solid"];
"matplotlib.texmanager.TexManager" -> "matplotlib.textpath.TextToPath" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_texmanager", style="solid"];
"matplotlib.text.Text" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="title", style="solid"];
"matplotlib.text.Text" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_left_title", style="solid"];
"matplotlib.text.Text" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_right_title", style="solid"];
"matplotlib.text.Text" -> "matplotlib.offsetbox.TextArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_text", style="solid"];
"matplotlib.text.Text" -> "matplotlib.quiver.QuiverKey" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="text", style="solid"];
"matplotlib.text.Text" -> "matplotlib.table.Cell" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_text", style="solid"];
"matplotlib.textpath.TextToPath" -> "matplotlib.backend_bases.RendererBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_text2path", style="solid"];
"matplotlib.ticker.Base" -> "matplotlib.dates.YearLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="base", style="solid"];
"matplotlib.ticker.Base" -> "matplotlib.ticker.MultipleLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_base", style="solid"];
"matplotlib.ticker.FixedFormatter" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"matplotlib.ticker.FixedLocator" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="locator", style="solid"];
"matplotlib.ticker.FixedLocator" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="locator", style="solid"];
"matplotlib.ticker.FormatStrFormatter" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"matplotlib.ticker.LinearLocator" -> "matplotlib.ticker.OldAutoLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.ticker.LogFormatterMathtext" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"matplotlib.ticker.LogLocator" -> "matplotlib.contour.ContourSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="locator", style="solid"];
"matplotlib.ticker.MaxNLocator" -> "matplotlib.contour.ContourSet" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="locator", style="solid"];
"matplotlib.ticker.MultipleLocator" -> "matplotlib.dates.MicrosecondLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_wrapped_locator", style="solid"];
"matplotlib.ticker.MultipleLocator" -> "matplotlib.ticker.OldAutoLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.ticker.MultipleLocator" -> "matplotlib.ticker.OldAutoLocator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_locator", style="solid"];
"matplotlib.ticker.ScalarFormatter" -> "matplotlib.colorbar.ColorbarBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="formatter", style="solid"];
"matplotlib.ticker._DummyAxis" -> "matplotlib.ticker.TickHelper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="axis", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dpi_scale_trans", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.offsetbox.AuxTransformBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="offset_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.offsetbox.AuxTransformBox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ref_offset_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.offsetbox.DrawingArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="offset_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.offsetbox.DrawingArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dpi_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.offsetbox.TextArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="offset_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.offsetbox.TextArea" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_baseline_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.patches.Ellipse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_patch_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.patches.RegularPolygon" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_poly_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.patches.Shadow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_shadow_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.patheffects.AbstractPathEffect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_offset_trans", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.patheffects.SimpleLineShadow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_offset_tran", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.patheffects.SimplePatchShadow" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_offset_tran", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transAffine", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_xaxis_pretransform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_theta_label1_position", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_theta_label2_position", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.spines.Spine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_patch_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.tests.test_transforms.BasicTransformTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ta1", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.tests.test_transforms.BasicTransformTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ta2", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.tests.test_transforms.BasicTransformTests" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ta3", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.tests.test_transforms.test_non_affine_caching.AssertingNonAffineTransform" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="underlying_transform", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.transforms.Affine2DBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_inverted", style="solid"];
"matplotlib.transforms.Affine2D" -> "matplotlib.transforms.BlendedGenericTransform" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_affine", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_position", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_originalPosition", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dataLim", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="viewLim", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.backends.backend_agg.RendererAgg" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bbox", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.collections.QuadMesh" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.collections.TriMesh" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bbox_inches", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox_to_anchor", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.offsetbox.AnchoredOffsetbox" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox_to_anchor", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.text.TextWithDash" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_twd_window_extent", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.ticker._DummyAxis" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="dataLim", style="solid"];
"matplotlib.transforms.Bbox" -> "matplotlib.ticker._DummyAxis" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="viewLim", style="solid"];
"matplotlib.transforms.BboxTransformFrom" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transLimits", style="solid"];
"matplotlib.transforms.BboxTransformTo" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transAxes", style="solid"];
"matplotlib.transforms.BboxTransformTo" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transFigure", style="solid"];
"matplotlib.transforms.BboxTransformTo" -> "matplotlib.patches.Rectangle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_rect_transform", style="solid"];
"matplotlib.transforms.BboxTransformTo" -> "matplotlib.projections.geo.GeoAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transAxes", style="solid"];
"matplotlib.transforms.BboxTransformTo" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transAxes", style="solid"];
"matplotlib.transforms.BlendedAffine2D" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_xaxis_transform", style="solid"];
"matplotlib.transforms.BlendedAffine2D" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_yaxis_transform", style="solid"];
"matplotlib.transforms.BlendedGenericTransform" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_xaxis_transform", style="solid"];
"matplotlib.transforms.BlendedGenericTransform" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_yaxis_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.artist.Artist" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.collections.Collection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transOffset", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.markers.MarkerStyle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_alt_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.patches.Ellipse" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_patch_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.patches.Patch" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_combined_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.patches.Rectangle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_rect_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.patches.Wedge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_patch_transform", style="solid"];
"matplotlib.transforms.IdentityTransform" -> "matplotlib.spines.Spine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_patch_transform", style="solid"];
"matplotlib.transforms.ScaledTranslation" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="titleOffsetTrans", style="solid"];
"matplotlib.transforms.ScaledTranslation" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_r_label_position", style="solid"];
"matplotlib.transforms.TransformWrapper" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transScale", style="solid"];
"matplotlib.transforms.TransformWrapper" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transScale", style="solid"];
"matplotlib.transforms.TransformWrapper" -> "matplotlib.projections.polar.PolarAxes" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="transScale", style="solid"];
"matplotlib.transforms.TransformedBbox" -> "matplotlib.artist.Artist" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clipbox", style="solid"];
"matplotlib.transforms.TransformedBbox" -> "matplotlib.axes._base._AxesBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bbox", style="solid"];
"matplotlib.transforms.TransformedBbox" -> "matplotlib.figure.Figure" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bbox", style="solid"];
"matplotlib.transforms.TransformedBbox" -> "matplotlib.legend.Legend" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_bbox_to_anchor", style="solid"];
"matplotlib.transforms.TransformedPath" -> "matplotlib.artist.Artist" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_clippath", style="solid"];
"matplotlib.transforms.TransformedPath" -> "matplotlib.artist.Artist" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_clippath", style="solid"];
"matplotlib.transforms.TransformedPath" -> "matplotlib.lines.Line2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transformed_path", style="solid"];
"matplotlib.tri.trifinder.TrapezoidMapTriFinder" -> "matplotlib.tri.triangulation.Triangulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_trifinder", style="solid"];
"matplotlib.tri.triinterpolate._ReducedHCT_Element" -> "matplotlib.tri.triinterpolate.CubicTriInterpolator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_ReferenceElement", style="solid"];
"matplotlib.widgets.Button" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="buttonreset", style="solid"];
"matplotlib.widgets.LockDraw" -> "matplotlib.backend_bases.FigureCanvasBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="widgetlock", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.Slider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slidermin", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.Slider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slidermin", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.Slider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slidermax", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.Slider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slidermax", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sliderleft", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sliderbottom", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sliderright", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="slidertop", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sliderwspace", style="solid"];
"matplotlib.widgets.Slider" -> "matplotlib.widgets.SubplotTool" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sliderhspace", style="solid"];
"matplotlib.collections.PolyCollection" -> "matplotlib.collections.PolyCollection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="hbar", style="solid"];
"matplotlib.collections.PolyCollection" -> "matplotlib.collections.PolyCollection" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="vbar", style="solid"];
"matplotlib.colors.Normalize" -> "matplotlib.cm.ScalarMappable" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="norm", style="solid"];
"matplotlib.colors.Normalize" -> "matplotlib.cm.ScalarMappable" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="norm", style="solid"];
"matplotlib.contour.ContourLabeler" -> "matplotlib.contour.ContourLabeler" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="labelMappable", style="solid"];
"matplotlib.dates._UTC" -> "matplotlib.dates.DateFormatter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="tz", style="solid"];
"matplotlib.dates._UTC" -> "matplotlib.dates.DateLocator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="tz", style="solid"];
"matplotlib.dates._UTC" -> "matplotlib.dates.IndexDateFormatter" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="tz", style="solid"];
"matplotlib.delaunay.testfuncs.TestData" -> "matplotlib.delaunay.testfuncs.TestData" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="__dict__", style="solid"];
"matplotlib.figure.SubplotParams" -> "matplotlib.figure.Figure" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="subplotpars", style="solid"];
"matplotlib.font_manager.FontProperties" -> "matplotlib.text.Text" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_fontproperties", style="solid"];
"matplotlib.lines.Line2D" -> "matplotlib.lines.Line2D" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_legmarker", style="solid"];
"matplotlib.text.Text" -> "matplotlib.figure.Figure" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_suptitle", style="solid"];
"matplotlib.textpath.TextPath" -> "matplotlib.markers.MarkerStyle" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_path", style="solid"];
}
